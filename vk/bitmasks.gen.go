package vk

import "fmt"

// AccelerationStructureCreateFlagsKHR wraps the bitmask VkAccelerationStructureCreateFlagsKHR.
type AccelerationStructureCreateFlagsKHR int32

const (
	// ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR wraps VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR.
	ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR AccelerationStructureCreateFlagsKHR = 1 << 0
	// ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT wraps VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT.
	ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT AccelerationStructureCreateFlagsKHR = 1 << 3
	// ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV wraps VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV.
	ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV AccelerationStructureCreateFlagsKHR = 1 << 2
)

func (e AccelerationStructureCreateFlagsKHR) String() string {
	return fmt.Sprintf("VkAccelerationStructureCreateFlagsKHR(%b)", e)
}

// AccelerationStructureMotionInfoFlagsNV wraps the bitmask VkAccelerationStructureMotionInfoFlagsNV.
type AccelerationStructureMotionInfoFlagsNV int32

func (e AccelerationStructureMotionInfoFlagsNV) String() string {
	return fmt.Sprintf("VkAccelerationStructureMotionInfoFlagsNV(%b)", e)
}

// AccelerationStructureMotionInstanceFlagsNV wraps the bitmask VkAccelerationStructureMotionInstanceFlagsNV.
type AccelerationStructureMotionInstanceFlagsNV int32

func (e AccelerationStructureMotionInstanceFlagsNV) String() string {
	return fmt.Sprintf("VkAccelerationStructureMotionInstanceFlagsNV(%b)", e)
}

// AccessFlags wraps the bitmask VkAccessFlags.
type AccessFlags int32

const (
	// ACCESS_INDIRECT_COMMAND_READ_BIT wraps VK_ACCESS_INDIRECT_COMMAND_READ_BIT.
	ACCESS_INDIRECT_COMMAND_READ_BIT AccessFlags = 1 << 0
	// ACCESS_INDEX_READ_BIT wraps VK_ACCESS_INDEX_READ_BIT.
	ACCESS_INDEX_READ_BIT AccessFlags = 1 << 1
	// ACCESS_VERTEX_ATTRIBUTE_READ_BIT wraps VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT.
	ACCESS_VERTEX_ATTRIBUTE_READ_BIT AccessFlags = 1 << 2
	// ACCESS_UNIFORM_READ_BIT wraps VK_ACCESS_UNIFORM_READ_BIT.
	ACCESS_UNIFORM_READ_BIT AccessFlags = 1 << 3
	// ACCESS_INPUT_ATTACHMENT_READ_BIT wraps VK_ACCESS_INPUT_ATTACHMENT_READ_BIT.
	ACCESS_INPUT_ATTACHMENT_READ_BIT AccessFlags = 1 << 4
	// ACCESS_SHADER_READ_BIT wraps VK_ACCESS_SHADER_READ_BIT.
	ACCESS_SHADER_READ_BIT AccessFlags = 1 << 5
	// ACCESS_SHADER_WRITE_BIT wraps VK_ACCESS_SHADER_WRITE_BIT.
	ACCESS_SHADER_WRITE_BIT AccessFlags = 1 << 6
	// ACCESS_COLOR_ATTACHMENT_READ_BIT wraps VK_ACCESS_COLOR_ATTACHMENT_READ_BIT.
	ACCESS_COLOR_ATTACHMENT_READ_BIT AccessFlags = 1 << 7
	// ACCESS_COLOR_ATTACHMENT_WRITE_BIT wraps VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT.
	ACCESS_COLOR_ATTACHMENT_WRITE_BIT AccessFlags = 1 << 8
	// ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT wraps VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT.
	ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT AccessFlags = 1 << 9
	// ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT wraps VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT.
	ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT AccessFlags = 1 << 10
	// ACCESS_TRANSFER_READ_BIT wraps VK_ACCESS_TRANSFER_READ_BIT.
	ACCESS_TRANSFER_READ_BIT AccessFlags = 1 << 11
	// ACCESS_TRANSFER_WRITE_BIT wraps VK_ACCESS_TRANSFER_WRITE_BIT.
	ACCESS_TRANSFER_WRITE_BIT AccessFlags = 1 << 12
	// ACCESS_HOST_READ_BIT wraps VK_ACCESS_HOST_READ_BIT.
	ACCESS_HOST_READ_BIT AccessFlags = 1 << 13
	// ACCESS_HOST_WRITE_BIT wraps VK_ACCESS_HOST_WRITE_BIT.
	ACCESS_HOST_WRITE_BIT AccessFlags = 1 << 14
	// ACCESS_MEMORY_READ_BIT wraps VK_ACCESS_MEMORY_READ_BIT.
	ACCESS_MEMORY_READ_BIT AccessFlags = 1 << 15
	// ACCESS_MEMORY_WRITE_BIT wraps VK_ACCESS_MEMORY_WRITE_BIT.
	ACCESS_MEMORY_WRITE_BIT AccessFlags = 1 << 16
	// ACCESS_NONE wraps VK_ACCESS_NONE.
	ACCESS_NONE AccessFlags = 0
	// ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT wraps VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT.
	ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT AccessFlags = 1 << 25
	// ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT wraps VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT.
	ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT AccessFlags = 1 << 26
	// ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT wraps VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT.
	ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT AccessFlags = 1 << 27
	// ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT wraps VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT.
	ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT AccessFlags = 1 << 20
	// ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT wraps VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT.
	ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT AccessFlags = 1 << 19
	// ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR wraps VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR.
	ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR AccessFlags = 1 << 21
	// ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR wraps VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR.
	ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR AccessFlags = 1 << 22
	// ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV wraps VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV.
	ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV AccessFlags = ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR
	// ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV wraps VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV.
	ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV AccessFlags = ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR
	// ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV wraps VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV.
	ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV AccessFlags = ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR
	// ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT wraps VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT.
	ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT AccessFlags = 1 << 24
	// ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR wraps VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR.
	ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR AccessFlags = 1 << 23
	// ACCESS_COMMAND_PREPROCESS_READ_BIT_NV wraps VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV.
	ACCESS_COMMAND_PREPROCESS_READ_BIT_NV AccessFlags = ACCESS_COMMAND_PREPROCESS_READ_BIT_EXT
	// ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV wraps VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV.
	ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV AccessFlags = ACCESS_COMMAND_PREPROCESS_WRITE_BIT_EXT
	// ACCESS_NONE_KHR wraps VK_ACCESS_NONE_KHR.
	ACCESS_NONE_KHR AccessFlags = ACCESS_NONE
	// ACCESS_COMMAND_PREPROCESS_READ_BIT_EXT wraps VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_EXT.
	ACCESS_COMMAND_PREPROCESS_READ_BIT_EXT AccessFlags = 1 << 17
	// ACCESS_COMMAND_PREPROCESS_WRITE_BIT_EXT wraps VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_EXT.
	ACCESS_COMMAND_PREPROCESS_WRITE_BIT_EXT AccessFlags = 1 << 18
)

func (e AccessFlags) String() string {
	return fmt.Sprintf("VkAccessFlags(%b)", e)
}

// AccessFlags2 wraps the bitmask VkAccessFlags2.
type AccessFlags2 int64

// AccessFlags2KHR wraps the bitmask VkAccessFlags2KHR. An alias for AccessFlags2.
type AccessFlags2KHR = AccessFlags2

const (
	// ACCESS_2_NONE wraps VK_ACCESS_2_NONE.
	ACCESS_2_NONE AccessFlags2 = 0
	// ACCESS_2_INDIRECT_COMMAND_READ_BIT wraps VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT.
	ACCESS_2_INDIRECT_COMMAND_READ_BIT AccessFlags2 = 1 << 0
	// ACCESS_2_INDEX_READ_BIT wraps VK_ACCESS_2_INDEX_READ_BIT.
	ACCESS_2_INDEX_READ_BIT AccessFlags2 = 1 << 1
	// ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT wraps VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT.
	ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT AccessFlags2 = 1 << 2
	// ACCESS_2_UNIFORM_READ_BIT wraps VK_ACCESS_2_UNIFORM_READ_BIT.
	ACCESS_2_UNIFORM_READ_BIT AccessFlags2 = 1 << 3
	// ACCESS_2_INPUT_ATTACHMENT_READ_BIT wraps VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT.
	ACCESS_2_INPUT_ATTACHMENT_READ_BIT AccessFlags2 = 1 << 4
	// ACCESS_2_SHADER_READ_BIT wraps VK_ACCESS_2_SHADER_READ_BIT.
	ACCESS_2_SHADER_READ_BIT AccessFlags2 = 1 << 5
	// ACCESS_2_SHADER_WRITE_BIT wraps VK_ACCESS_2_SHADER_WRITE_BIT.
	ACCESS_2_SHADER_WRITE_BIT AccessFlags2 = 1 << 6
	// ACCESS_2_COLOR_ATTACHMENT_READ_BIT wraps VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT.
	ACCESS_2_COLOR_ATTACHMENT_READ_BIT AccessFlags2 = 1 << 7
	// ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT wraps VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT.
	ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT AccessFlags2 = 1 << 8
	// ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT wraps VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT.
	ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT AccessFlags2 = 1 << 9
	// ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT wraps VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT.
	ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT AccessFlags2 = 1 << 10
	// ACCESS_2_TRANSFER_READ_BIT wraps VK_ACCESS_2_TRANSFER_READ_BIT.
	ACCESS_2_TRANSFER_READ_BIT AccessFlags2 = 1 << 11
	// ACCESS_2_TRANSFER_WRITE_BIT wraps VK_ACCESS_2_TRANSFER_WRITE_BIT.
	ACCESS_2_TRANSFER_WRITE_BIT AccessFlags2 = 1 << 12
	// ACCESS_2_HOST_READ_BIT wraps VK_ACCESS_2_HOST_READ_BIT.
	ACCESS_2_HOST_READ_BIT AccessFlags2 = 1 << 13
	// ACCESS_2_HOST_WRITE_BIT wraps VK_ACCESS_2_HOST_WRITE_BIT.
	ACCESS_2_HOST_WRITE_BIT AccessFlags2 = 1 << 14
	// ACCESS_2_MEMORY_READ_BIT wraps VK_ACCESS_2_MEMORY_READ_BIT.
	ACCESS_2_MEMORY_READ_BIT AccessFlags2 = 1 << 15
	// ACCESS_2_MEMORY_WRITE_BIT wraps VK_ACCESS_2_MEMORY_WRITE_BIT.
	ACCESS_2_MEMORY_WRITE_BIT AccessFlags2 = 1 << 16
	// ACCESS_2_SHADER_SAMPLED_READ_BIT wraps VK_ACCESS_2_SHADER_SAMPLED_READ_BIT.
	ACCESS_2_SHADER_SAMPLED_READ_BIT AccessFlags2 = 1 << 32
	// ACCESS_2_SHADER_STORAGE_READ_BIT wraps VK_ACCESS_2_SHADER_STORAGE_READ_BIT.
	ACCESS_2_SHADER_STORAGE_READ_BIT AccessFlags2 = 1 << 33
	// ACCESS_2_SHADER_STORAGE_WRITE_BIT wraps VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT.
	ACCESS_2_SHADER_STORAGE_WRITE_BIT AccessFlags2 = 1 << 34
	// ACCESS_2_VIDEO_DECODE_READ_BIT_KHR wraps VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR.
	ACCESS_2_VIDEO_DECODE_READ_BIT_KHR AccessFlags2 = 1 << 35
	// ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR wraps VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR.
	ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR AccessFlags2 = 1 << 36
	// ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR wraps VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR.
	ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR AccessFlags2 = 1 << 37
	// ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR wraps VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR.
	ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR AccessFlags2 = 1 << 38
	// ACCESS_2_SHADER_TILE_ATTACHMENT_READ_BIT_QCOM wraps VK_ACCESS_2_SHADER_TILE_ATTACHMENT_READ_BIT_QCOM.
	ACCESS_2_SHADER_TILE_ATTACHMENT_READ_BIT_QCOM AccessFlags2 = 1 << 51
	// ACCESS_2_SHADER_TILE_ATTACHMENT_WRITE_BIT_QCOM wraps VK_ACCESS_2_SHADER_TILE_ATTACHMENT_WRITE_BIT_QCOM.
	ACCESS_2_SHADER_TILE_ATTACHMENT_WRITE_BIT_QCOM AccessFlags2 = 1 << 52
	// ACCESS_2_NONE_KHR wraps VK_ACCESS_2_NONE_KHR.
	ACCESS_2_NONE_KHR AccessFlags2 = ACCESS_2_NONE
	// ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR wraps VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR.
	ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR AccessFlags2 = ACCESS_2_INDIRECT_COMMAND_READ_BIT
	// ACCESS_2_INDEX_READ_BIT_KHR wraps VK_ACCESS_2_INDEX_READ_BIT_KHR.
	ACCESS_2_INDEX_READ_BIT_KHR AccessFlags2 = ACCESS_2_INDEX_READ_BIT
	// ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR wraps VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR.
	ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR AccessFlags2 = ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT
	// ACCESS_2_UNIFORM_READ_BIT_KHR wraps VK_ACCESS_2_UNIFORM_READ_BIT_KHR.
	ACCESS_2_UNIFORM_READ_BIT_KHR AccessFlags2 = ACCESS_2_UNIFORM_READ_BIT
	// ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR wraps VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR.
	ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR AccessFlags2 = ACCESS_2_INPUT_ATTACHMENT_READ_BIT
	// ACCESS_2_SHADER_READ_BIT_KHR wraps VK_ACCESS_2_SHADER_READ_BIT_KHR.
	ACCESS_2_SHADER_READ_BIT_KHR AccessFlags2 = ACCESS_2_SHADER_READ_BIT
	// ACCESS_2_SHADER_WRITE_BIT_KHR wraps VK_ACCESS_2_SHADER_WRITE_BIT_KHR.
	ACCESS_2_SHADER_WRITE_BIT_KHR AccessFlags2 = ACCESS_2_SHADER_WRITE_BIT
	// ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR wraps VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR.
	ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR AccessFlags2 = ACCESS_2_COLOR_ATTACHMENT_READ_BIT
	// ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR wraps VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR.
	ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR AccessFlags2 = ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT
	// ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR wraps VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR.
	ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR AccessFlags2 = ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT
	// ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR wraps VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR.
	ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR AccessFlags2 = ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT
	// ACCESS_2_TRANSFER_READ_BIT_KHR wraps VK_ACCESS_2_TRANSFER_READ_BIT_KHR.
	ACCESS_2_TRANSFER_READ_BIT_KHR AccessFlags2 = ACCESS_2_TRANSFER_READ_BIT
	// ACCESS_2_TRANSFER_WRITE_BIT_KHR wraps VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR.
	ACCESS_2_TRANSFER_WRITE_BIT_KHR AccessFlags2 = ACCESS_2_TRANSFER_WRITE_BIT
	// ACCESS_2_HOST_READ_BIT_KHR wraps VK_ACCESS_2_HOST_READ_BIT_KHR.
	ACCESS_2_HOST_READ_BIT_KHR AccessFlags2 = ACCESS_2_HOST_READ_BIT
	// ACCESS_2_HOST_WRITE_BIT_KHR wraps VK_ACCESS_2_HOST_WRITE_BIT_KHR.
	ACCESS_2_HOST_WRITE_BIT_KHR AccessFlags2 = ACCESS_2_HOST_WRITE_BIT
	// ACCESS_2_MEMORY_READ_BIT_KHR wraps VK_ACCESS_2_MEMORY_READ_BIT_KHR.
	ACCESS_2_MEMORY_READ_BIT_KHR AccessFlags2 = ACCESS_2_MEMORY_READ_BIT
	// ACCESS_2_MEMORY_WRITE_BIT_KHR wraps VK_ACCESS_2_MEMORY_WRITE_BIT_KHR.
	ACCESS_2_MEMORY_WRITE_BIT_KHR AccessFlags2 = ACCESS_2_MEMORY_WRITE_BIT
	// ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR wraps VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR.
	ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR AccessFlags2 = ACCESS_2_SHADER_SAMPLED_READ_BIT
	// ACCESS_2_SHADER_STORAGE_READ_BIT_KHR wraps VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR.
	ACCESS_2_SHADER_STORAGE_READ_BIT_KHR AccessFlags2 = ACCESS_2_SHADER_STORAGE_READ_BIT
	// ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR wraps VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR.
	ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR AccessFlags2 = ACCESS_2_SHADER_STORAGE_WRITE_BIT
	// ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT wraps VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT.
	ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT AccessFlags2 = 1 << 25
	// ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT wraps VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT.
	ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT AccessFlags2 = 1 << 26
	// ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT wraps VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT.
	ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT AccessFlags2 = 1 << 27
	// ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT wraps VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT.
	ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT AccessFlags2 = 1 << 20
	// ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV wraps VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV.
	ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV AccessFlags2 = ACCESS_2_COMMAND_PREPROCESS_READ_BIT_EXT
	// ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV wraps VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV.
	ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV AccessFlags2 = ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_EXT
	// ACCESS_2_COMMAND_PREPROCESS_READ_BIT_EXT wraps VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_EXT.
	ACCESS_2_COMMAND_PREPROCESS_READ_BIT_EXT AccessFlags2 = 1 << 17
	// ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_EXT wraps VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_EXT.
	ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_EXT AccessFlags2 = 1 << 18
	// ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR wraps VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR.
	ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR AccessFlags2 = 1 << 23
	// ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV wraps VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV.
	ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV AccessFlags2 = ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR
	// ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR wraps VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR.
	ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR AccessFlags2 = 1 << 21
	// ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR wraps VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR.
	ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR AccessFlags2 = 1 << 22
	// ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV wraps VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV.
	ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV AccessFlags2 = ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR
	// ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV wraps VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV.
	ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV AccessFlags2 = ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR
	// ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT wraps VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT.
	ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT AccessFlags2 = 1 << 24
	// ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT wraps VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT.
	ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT AccessFlags2 = 1 << 19
	// ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT wraps VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT.
	ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT AccessFlags2 = 1 << 41
	// ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI wraps VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI.
	ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI AccessFlags2 = 1 << 39
	// ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR wraps VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR.
	ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR AccessFlags2 = 1 << 40
	// ACCESS_2_MICROMAP_READ_BIT_EXT wraps VK_ACCESS_2_MICROMAP_READ_BIT_EXT.
	ACCESS_2_MICROMAP_READ_BIT_EXT AccessFlags2 = 1 << 44
	// ACCESS_2_MICROMAP_WRITE_BIT_EXT wraps VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT.
	ACCESS_2_MICROMAP_WRITE_BIT_EXT AccessFlags2 = 1 << 45
	// ACCESS_2_OPTICAL_FLOW_READ_BIT_NV wraps VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV.
	ACCESS_2_OPTICAL_FLOW_READ_BIT_NV AccessFlags2 = 1 << 42
	// ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV wraps VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV.
	ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV AccessFlags2 = 1 << 43
	// ACCESS_2_DATA_GRAPH_READ_BIT_ARM wraps VK_ACCESS_2_DATA_GRAPH_READ_BIT_ARM.
	ACCESS_2_DATA_GRAPH_READ_BIT_ARM AccessFlags2 = 1 << 47
	// ACCESS_2_DATA_GRAPH_WRITE_BIT_ARM wraps VK_ACCESS_2_DATA_GRAPH_WRITE_BIT_ARM.
	ACCESS_2_DATA_GRAPH_WRITE_BIT_ARM AccessFlags2 = 1 << 48
)

func (e AccessFlags2) String() string {
	return fmt.Sprintf("VkAccessFlags2(%b)", e)
}

// AccessFlags3KHR wraps the bitmask VkAccessFlags3KHR.
type AccessFlags3KHR int64

const (
	// ACCESS_3_NONE_KHR wraps VK_ACCESS_3_NONE_KHR.
	ACCESS_3_NONE_KHR AccessFlags3KHR = 0
)

func (e AccessFlags3KHR) String() string {
	return fmt.Sprintf("VkAccessFlags3KHR(%b)", e)
}

// AcquireProfilingLockFlagsKHR wraps the bitmask VkAcquireProfilingLockFlagsKHR.
type AcquireProfilingLockFlagsKHR int32

func (e AcquireProfilingLockFlagsKHR) String() string {
	return fmt.Sprintf("VkAcquireProfilingLockFlagsKHR(%b)", e)
}

// AddressCopyFlagsKHR wraps the bitmask VkAddressCopyFlagsKHR.
type AddressCopyFlagsKHR int32

const (
	// ADDRESS_COPY_DEVICE_LOCAL_BIT_KHR wraps VK_ADDRESS_COPY_DEVICE_LOCAL_BIT_KHR.
	ADDRESS_COPY_DEVICE_LOCAL_BIT_KHR AddressCopyFlagsKHR = 1 << 0
	// ADDRESS_COPY_SPARSE_BIT_KHR wraps VK_ADDRESS_COPY_SPARSE_BIT_KHR.
	ADDRESS_COPY_SPARSE_BIT_KHR AddressCopyFlagsKHR = 1 << 1
	// ADDRESS_COPY_PROTECTED_BIT_KHR wraps VK_ADDRESS_COPY_PROTECTED_BIT_KHR.
	ADDRESS_COPY_PROTECTED_BIT_KHR AddressCopyFlagsKHR = 1 << 2
)

func (e AddressCopyFlagsKHR) String() string {
	return fmt.Sprintf("VkAddressCopyFlagsKHR(%b)", e)
}

// AttachmentDescriptionFlags wraps the bitmask VkAttachmentDescriptionFlags.
type AttachmentDescriptionFlags int32

const (
	// ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT wraps VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT.
	ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT AttachmentDescriptionFlags = 1 << 0
)

func (e AttachmentDescriptionFlags) String() string {
	return fmt.Sprintf("VkAttachmentDescriptionFlags(%b)", e)
}

// BufferCreateFlags wraps the bitmask VkBufferCreateFlags.
type BufferCreateFlags int32

const (
	// BUFFER_CREATE_SPARSE_BINDING_BIT wraps VK_BUFFER_CREATE_SPARSE_BINDING_BIT.
	BUFFER_CREATE_SPARSE_BINDING_BIT BufferCreateFlags = 1 << 0
	// BUFFER_CREATE_SPARSE_RESIDENCY_BIT wraps VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT.
	BUFFER_CREATE_SPARSE_RESIDENCY_BIT BufferCreateFlags = 1 << 1
	// BUFFER_CREATE_SPARSE_ALIASED_BIT wraps VK_BUFFER_CREATE_SPARSE_ALIASED_BIT.
	BUFFER_CREATE_SPARSE_ALIASED_BIT BufferCreateFlags = 1 << 2
	// BUFFER_CREATE_PROTECTED_BIT wraps VK_BUFFER_CREATE_PROTECTED_BIT.
	BUFFER_CREATE_PROTECTED_BIT BufferCreateFlags = 1 << 3
	// BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT wraps VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT.
	BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT BufferCreateFlags = 1 << 4
	// BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT wraps VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT.
	BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT BufferCreateFlags = BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT
	// BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR wraps VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR.
	BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR BufferCreateFlags = BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT
	// BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT wraps VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT.
	BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT BufferCreateFlags = 1 << 5
	// BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR wraps VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR.
	BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR BufferCreateFlags = 1 << 6
)

func (e BufferCreateFlags) String() string {
	return fmt.Sprintf("VkBufferCreateFlags(%b)", e)
}

// BufferUsageFlags wraps the bitmask VkBufferUsageFlags.
type BufferUsageFlags int32

const (
	// BUFFER_USAGE_TRANSFER_SRC_BIT wraps VK_BUFFER_USAGE_TRANSFER_SRC_BIT.
	BUFFER_USAGE_TRANSFER_SRC_BIT BufferUsageFlags = 1 << 0
	// BUFFER_USAGE_TRANSFER_DST_BIT wraps VK_BUFFER_USAGE_TRANSFER_DST_BIT.
	BUFFER_USAGE_TRANSFER_DST_BIT BufferUsageFlags = 1 << 1
	// BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT wraps VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT.
	BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT BufferUsageFlags = 1 << 2
	// BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT wraps VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT.
	BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT BufferUsageFlags = 1 << 3
	// BUFFER_USAGE_UNIFORM_BUFFER_BIT wraps VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT.
	BUFFER_USAGE_UNIFORM_BUFFER_BIT BufferUsageFlags = 1 << 4
	// BUFFER_USAGE_STORAGE_BUFFER_BIT wraps VK_BUFFER_USAGE_STORAGE_BUFFER_BIT.
	BUFFER_USAGE_STORAGE_BUFFER_BIT BufferUsageFlags = 1 << 5
	// BUFFER_USAGE_INDEX_BUFFER_BIT wraps VK_BUFFER_USAGE_INDEX_BUFFER_BIT.
	BUFFER_USAGE_INDEX_BUFFER_BIT BufferUsageFlags = 1 << 6
	// BUFFER_USAGE_VERTEX_BUFFER_BIT wraps VK_BUFFER_USAGE_VERTEX_BUFFER_BIT.
	BUFFER_USAGE_VERTEX_BUFFER_BIT BufferUsageFlags = 1 << 7
	// BUFFER_USAGE_INDIRECT_BUFFER_BIT wraps VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT.
	BUFFER_USAGE_INDIRECT_BUFFER_BIT BufferUsageFlags = 1 << 8
	// BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT wraps VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT.
	BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT BufferUsageFlags = 1 << 17
	// BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR wraps VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR.
	BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR BufferUsageFlags = 1 << 13
	// BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR wraps VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR.
	BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR BufferUsageFlags = 1 << 14
	// BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT wraps VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT.
	BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT BufferUsageFlags = 1 << 11
	// BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT wraps VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT.
	BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT BufferUsageFlags = 1 << 12
	// BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT wraps VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT.
	BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT BufferUsageFlags = 1 << 9
	// BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR wraps VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR.
	BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR BufferUsageFlags = 1 << 19
	// BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR wraps VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR.
	BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR BufferUsageFlags = 1 << 20
	// BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR wraps VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR.
	BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR BufferUsageFlags = 1 << 10
	// BUFFER_USAGE_RAY_TRACING_BIT_NV wraps VK_BUFFER_USAGE_RAY_TRACING_BIT_NV.
	BUFFER_USAGE_RAY_TRACING_BIT_NV BufferUsageFlags = BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR
	// BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT wraps VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT.
	BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT BufferUsageFlags = BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT
	// BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR wraps VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR.
	BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR BufferUsageFlags = BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT
	// BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR wraps VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR.
	BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR BufferUsageFlags = 1 << 15
	// BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR wraps VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR.
	BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR BufferUsageFlags = 1 << 16
	// BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT wraps VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT.
	BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT BufferUsageFlags = 1 << 21
	// BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT wraps VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT.
	BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT BufferUsageFlags = 1 << 22
	// BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT wraps VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT.
	BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT BufferUsageFlags = 1 << 26
	// BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT wraps VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT.
	BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT BufferUsageFlags = 1 << 23
	// BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT wraps VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT.
	BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT BufferUsageFlags = 1 << 24
	// BUFFER_USAGE_TILE_MEMORY_BIT_QCOM wraps VK_BUFFER_USAGE_TILE_MEMORY_BIT_QCOM.
	BUFFER_USAGE_TILE_MEMORY_BIT_QCOM BufferUsageFlags = 1 << 27
)

func (e BufferUsageFlags) String() string {
	return fmt.Sprintf("VkBufferUsageFlags(%b)", e)
}

// BufferUsageFlags2 wraps the bitmask VkBufferUsageFlags2.
type BufferUsageFlags2 int64

// BufferUsageFlags2KHR wraps the bitmask VkBufferUsageFlags2KHR. An alias for BufferUsageFlags2.
type BufferUsageFlags2KHR = BufferUsageFlags2

const (
	// BUFFER_USAGE_2_TRANSFER_SRC_BIT wraps VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT.
	BUFFER_USAGE_2_TRANSFER_SRC_BIT BufferUsageFlags2 = 1 << 0
	// BUFFER_USAGE_2_TRANSFER_DST_BIT wraps VK_BUFFER_USAGE_2_TRANSFER_DST_BIT.
	BUFFER_USAGE_2_TRANSFER_DST_BIT BufferUsageFlags2 = 1 << 1
	// BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT wraps VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT.
	BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT BufferUsageFlags2 = 1 << 2
	// BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT wraps VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT.
	BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT BufferUsageFlags2 = 1 << 3
	// BUFFER_USAGE_2_UNIFORM_BUFFER_BIT wraps VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT.
	BUFFER_USAGE_2_UNIFORM_BUFFER_BIT BufferUsageFlags2 = 1 << 4
	// BUFFER_USAGE_2_STORAGE_BUFFER_BIT wraps VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT.
	BUFFER_USAGE_2_STORAGE_BUFFER_BIT BufferUsageFlags2 = 1 << 5
	// BUFFER_USAGE_2_INDEX_BUFFER_BIT wraps VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT.
	BUFFER_USAGE_2_INDEX_BUFFER_BIT BufferUsageFlags2 = 1 << 6
	// BUFFER_USAGE_2_VERTEX_BUFFER_BIT wraps VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT.
	BUFFER_USAGE_2_VERTEX_BUFFER_BIT BufferUsageFlags2 = 1 << 7
	// BUFFER_USAGE_2_INDIRECT_BUFFER_BIT wraps VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT.
	BUFFER_USAGE_2_INDIRECT_BUFFER_BIT BufferUsageFlags2 = 1 << 8
	// BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT wraps VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT.
	BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT BufferUsageFlags2 = 1 << 17
	// BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR wraps VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR.
	BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR BufferUsageFlags2 = BUFFER_USAGE_2_TRANSFER_SRC_BIT
	// BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR wraps VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR.
	BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR BufferUsageFlags2 = BUFFER_USAGE_2_TRANSFER_DST_BIT
	// BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR wraps VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR.
	BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR BufferUsageFlags2 = BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT
	// BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR wraps VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR.
	BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR BufferUsageFlags2 = BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT
	// BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR wraps VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR.
	BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR BufferUsageFlags2 = BUFFER_USAGE_2_UNIFORM_BUFFER_BIT
	// BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR wraps VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR.
	BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR BufferUsageFlags2 = BUFFER_USAGE_2_STORAGE_BUFFER_BIT
	// BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR wraps VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR.
	BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR BufferUsageFlags2 = BUFFER_USAGE_2_INDEX_BUFFER_BIT
	// BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR wraps VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR.
	BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR BufferUsageFlags2 = BUFFER_USAGE_2_VERTEX_BUFFER_BIT
	// BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR wraps VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR.
	BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR BufferUsageFlags2 = BUFFER_USAGE_2_INDIRECT_BUFFER_BIT
	// BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT wraps VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT.
	BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT BufferUsageFlags2 = 1 << 9
	// BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR wraps VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR.
	BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR BufferUsageFlags2 = 1 << 10
	// BUFFER_USAGE_2_RAY_TRACING_BIT_NV wraps VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV.
	BUFFER_USAGE_2_RAY_TRACING_BIT_NV BufferUsageFlags2 = BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR
	// BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT wraps VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT.
	BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT BufferUsageFlags2 = 1 << 11
	// BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT wraps VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT.
	BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT BufferUsageFlags2 = 1 << 12
	// BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR wraps VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR.
	BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR BufferUsageFlags2 = 1 << 13
	// BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR wraps VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR.
	BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR BufferUsageFlags2 = 1 << 14
	// BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR wraps VK_BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR.
	BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR BufferUsageFlags2 = 1 << 15
	// BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR wraps VK_BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR.
	BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR BufferUsageFlags2 = 1 << 16
	// BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR wraps VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR.
	BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR BufferUsageFlags2 = BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT
	// BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR wraps VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR.
	BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR BufferUsageFlags2 = 1 << 19
	// BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR wraps VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR.
	BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR BufferUsageFlags2 = 1 << 20
	// BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT wraps VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT.
	BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT BufferUsageFlags2 = 1 << 21
	// BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT wraps VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT.
	BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT BufferUsageFlags2 = 1 << 22
	// BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT wraps VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT.
	BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT BufferUsageFlags2 = 1 << 26
	// BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT wraps VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT.
	BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT BufferUsageFlags2 = 1 << 23
	// BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT wraps VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT.
	BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT BufferUsageFlags2 = 1 << 24
	// BUFFER_USAGE_2_DATA_GRAPH_FOREIGN_DESCRIPTOR_BIT_ARM wraps VK_BUFFER_USAGE_2_DATA_GRAPH_FOREIGN_DESCRIPTOR_BIT_ARM.
	BUFFER_USAGE_2_DATA_GRAPH_FOREIGN_DESCRIPTOR_BIT_ARM BufferUsageFlags2 = 1 << 29
	// BUFFER_USAGE_2_TILE_MEMORY_BIT_QCOM wraps VK_BUFFER_USAGE_2_TILE_MEMORY_BIT_QCOM.
	BUFFER_USAGE_2_TILE_MEMORY_BIT_QCOM BufferUsageFlags2 = 1 << 27
	// BUFFER_USAGE_2_PREPROCESS_BUFFER_BIT_EXT wraps VK_BUFFER_USAGE_2_PREPROCESS_BUFFER_BIT_EXT.
	BUFFER_USAGE_2_PREPROCESS_BUFFER_BIT_EXT BufferUsageFlags2 = 1 << 31
)

func (e BufferUsageFlags2) String() string {
	return fmt.Sprintf("VkBufferUsageFlags2(%b)", e)
}

// BufferViewCreateFlags wraps the bitmask VkBufferViewCreateFlags.
type BufferViewCreateFlags int32

func (e BufferViewCreateFlags) String() string {
	return fmt.Sprintf("VkBufferViewCreateFlags(%b)", e)
}

// BuildAccelerationStructureFlagsKHR wraps the bitmask VkBuildAccelerationStructureFlagsKHR.
type BuildAccelerationStructureFlagsKHR int32

// BuildAccelerationStructureFlagsNV wraps the bitmask VkBuildAccelerationStructureFlagsNV. An alias for BuildAccelerationStructureFlagsKHR.
type BuildAccelerationStructureFlagsNV = BuildAccelerationStructureFlagsKHR

const (
	// BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR wraps VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR.
	BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR BuildAccelerationStructureFlagsKHR = 1 << 0
	// BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR wraps VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR.
	BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR BuildAccelerationStructureFlagsKHR = 1 << 1
	// BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR wraps VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR.
	BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR BuildAccelerationStructureFlagsKHR = 1 << 2
	// BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR wraps VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR.
	BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR BuildAccelerationStructureFlagsKHR = 1 << 3
	// BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR wraps VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR.
	BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR BuildAccelerationStructureFlagsKHR = 1 << 4
	// BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV wraps VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV.
	BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV BuildAccelerationStructureFlagsKHR = BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR
	// BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV wraps VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV.
	BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV BuildAccelerationStructureFlagsKHR = BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR
	// BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV wraps VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV.
	BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV BuildAccelerationStructureFlagsKHR = BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR
	// BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV wraps VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV.
	BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV BuildAccelerationStructureFlagsKHR = BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR
	// BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV wraps VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV.
	BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV BuildAccelerationStructureFlagsKHR = BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR
	// BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV wraps VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV.
	BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV BuildAccelerationStructureFlagsKHR = 1 << 5
	// BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_BIT_EXT wraps VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_BIT_EXT.
	BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_BIT_EXT BuildAccelerationStructureFlagsKHR = 1 << 6
	// BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT wraps VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT.
	BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT BuildAccelerationStructureFlagsKHR = BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_BIT_EXT
	// BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_BIT_EXT wraps VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_BIT_EXT.
	BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_BIT_EXT BuildAccelerationStructureFlagsKHR = 1 << 7
	// BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT wraps VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT.
	BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT BuildAccelerationStructureFlagsKHR = BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_BIT_EXT
	// BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_BIT_EXT wraps VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_BIT_EXT.
	BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_BIT_EXT BuildAccelerationStructureFlagsKHR = 1 << 8
	// BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT wraps VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT.
	BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT BuildAccelerationStructureFlagsKHR = BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_BIT_EXT
	// BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_BIT_KHR wraps VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_BIT_KHR.
	BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_BIT_KHR BuildAccelerationStructureFlagsKHR = 1 << 11
	// BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR wraps VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR.
	BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR BuildAccelerationStructureFlagsKHR = BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_BIT_KHR
	// BUILD_ACCELERATION_STRUCTURE_ALLOW_CLUSTER_OPACITY_MICROMAPS_BIT_NV wraps VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_CLUSTER_OPACITY_MICROMAPS_BIT_NV.
	BUILD_ACCELERATION_STRUCTURE_ALLOW_CLUSTER_OPACITY_MICROMAPS_BIT_NV BuildAccelerationStructureFlagsKHR = 1 << 12
)

func (e BuildAccelerationStructureFlagsKHR) String() string {
	return fmt.Sprintf("VkBuildAccelerationStructureFlagsKHR(%b)", e)
}

// BuildMicromapFlagsEXT wraps the bitmask VkBuildMicromapFlagsEXT.
type BuildMicromapFlagsEXT int32

const (
	// BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT wraps VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT.
	BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT BuildMicromapFlagsEXT = 1 << 0
	// BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT wraps VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT.
	BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT BuildMicromapFlagsEXT = 1 << 1
	// BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT wraps VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT.
	BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT BuildMicromapFlagsEXT = 1 << 2
)

func (e BuildMicromapFlagsEXT) String() string {
	return fmt.Sprintf("VkBuildMicromapFlagsEXT(%b)", e)
}

// ClusterAccelerationStructureAddressResolutionFlagsNV wraps the bitmask VkClusterAccelerationStructureAddressResolutionFlagsNV.
type ClusterAccelerationStructureAddressResolutionFlagsNV int32

const (
	// CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_NONE_NV wraps VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_NONE_NV.
	CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_NONE_NV ClusterAccelerationStructureAddressResolutionFlagsNV = 0
	// CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_IMPLICIT_DATA_BIT_NV wraps VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_IMPLICIT_DATA_BIT_NV.
	CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_IMPLICIT_DATA_BIT_NV ClusterAccelerationStructureAddressResolutionFlagsNV = 1 << 0
	// CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SCRATCH_DATA_BIT_NV wraps VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SCRATCH_DATA_BIT_NV.
	CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SCRATCH_DATA_BIT_NV ClusterAccelerationStructureAddressResolutionFlagsNV = 1 << 1
	// CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_ADDRESS_ARRAY_BIT_NV wraps VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_ADDRESS_ARRAY_BIT_NV.
	CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_ADDRESS_ARRAY_BIT_NV ClusterAccelerationStructureAddressResolutionFlagsNV = 1 << 2
	// CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_SIZES_ARRAY_BIT_NV wraps VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_SIZES_ARRAY_BIT_NV.
	CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_SIZES_ARRAY_BIT_NV ClusterAccelerationStructureAddressResolutionFlagsNV = 1 << 3
	// CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_ARRAY_BIT_NV wraps VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_ARRAY_BIT_NV.
	CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_ARRAY_BIT_NV ClusterAccelerationStructureAddressResolutionFlagsNV = 1 << 4
	// CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_COUNT_BIT_NV wraps VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_COUNT_BIT_NV.
	CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_COUNT_BIT_NV ClusterAccelerationStructureAddressResolutionFlagsNV = 1 << 5
)

func (e ClusterAccelerationStructureAddressResolutionFlagsNV) String() string {
	return fmt.Sprintf("VkClusterAccelerationStructureAddressResolutionFlagsNV(%b)", e)
}

// ClusterAccelerationStructureClusterFlagsNV wraps the bitmask VkClusterAccelerationStructureClusterFlagsNV.
type ClusterAccelerationStructureClusterFlagsNV int32

const (
	// CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_ALLOW_DISABLE_OPACITY_MICROMAPS_NV wraps VK_CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_ALLOW_DISABLE_OPACITY_MICROMAPS_NV.
	CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_ALLOW_DISABLE_OPACITY_MICROMAPS_NV ClusterAccelerationStructureClusterFlagsNV = 1 << 0
)

func (e ClusterAccelerationStructureClusterFlagsNV) String() string {
	return fmt.Sprintf("VkClusterAccelerationStructureClusterFlagsNV(%b)", e)
}

// ClusterAccelerationStructureGeometryFlagsNV wraps the bitmask VkClusterAccelerationStructureGeometryFlagsNV.
type ClusterAccelerationStructureGeometryFlagsNV int32

const (
	// CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_CULL_DISABLE_BIT_NV wraps VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_CULL_DISABLE_BIT_NV.
	CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_CULL_DISABLE_BIT_NV ClusterAccelerationStructureGeometryFlagsNV = 1 << 0
	// CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_NO_DUPLICATE_ANYHIT_INVOCATION_BIT_NV wraps VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_NO_DUPLICATE_ANYHIT_INVOCATION_BIT_NV.
	CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_NO_DUPLICATE_ANYHIT_INVOCATION_BIT_NV ClusterAccelerationStructureGeometryFlagsNV = 1 << 1
	// CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_OPAQUE_BIT_NV wraps VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_OPAQUE_BIT_NV.
	CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_OPAQUE_BIT_NV ClusterAccelerationStructureGeometryFlagsNV = 1 << 2
)

func (e ClusterAccelerationStructureGeometryFlagsNV) String() string {
	return fmt.Sprintf("VkClusterAccelerationStructureGeometryFlagsNV(%b)", e)
}

// ClusterAccelerationStructureIndexFormatFlagsNV wraps the bitmask VkClusterAccelerationStructureIndexFormatFlagsNV.
type ClusterAccelerationStructureIndexFormatFlagsNV int32

const (
	// CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_8BIT_NV wraps VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_8BIT_NV.
	CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_8BIT_NV ClusterAccelerationStructureIndexFormatFlagsNV = 1 << 0
	// CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_16BIT_NV wraps VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_16BIT_NV.
	CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_16BIT_NV ClusterAccelerationStructureIndexFormatFlagsNV = 1 << 1
	// CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_32BIT_NV wraps VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_32BIT_NV.
	CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_32BIT_NV ClusterAccelerationStructureIndexFormatFlagsNV = 1 << 2
)

func (e ClusterAccelerationStructureIndexFormatFlagsNV) String() string {
	return fmt.Sprintf("VkClusterAccelerationStructureIndexFormatFlagsNV(%b)", e)
}

// ColorComponentFlags wraps the bitmask VkColorComponentFlags.
type ColorComponentFlags int32

const (
	// COLOR_COMPONENT_R_BIT wraps VK_COLOR_COMPONENT_R_BIT.
	COLOR_COMPONENT_R_BIT ColorComponentFlags = 1 << 0
	// COLOR_COMPONENT_G_BIT wraps VK_COLOR_COMPONENT_G_BIT.
	COLOR_COMPONENT_G_BIT ColorComponentFlags = 1 << 1
	// COLOR_COMPONENT_B_BIT wraps VK_COLOR_COMPONENT_B_BIT.
	COLOR_COMPONENT_B_BIT ColorComponentFlags = 1 << 2
	// COLOR_COMPONENT_A_BIT wraps VK_COLOR_COMPONENT_A_BIT.
	COLOR_COMPONENT_A_BIT ColorComponentFlags = 1 << 3
)

func (e ColorComponentFlags) String() string {
	return fmt.Sprintf("VkColorComponentFlags(%b)", e)
}

// CommandBufferResetFlags wraps the bitmask VkCommandBufferResetFlags.
type CommandBufferResetFlags int32

const (
	// COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT wraps VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT.
	COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT CommandBufferResetFlags = 1 << 0
)

func (e CommandBufferResetFlags) String() string {
	return fmt.Sprintf("VkCommandBufferResetFlags(%b)", e)
}

// CommandBufferUsageFlags wraps the bitmask VkCommandBufferUsageFlags.
type CommandBufferUsageFlags int32

const (
	// COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT wraps VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT.
	COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT CommandBufferUsageFlags = 1 << 0
	// COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT wraps VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT.
	COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT CommandBufferUsageFlags = 1 << 1
	// COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT wraps VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT.
	COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT CommandBufferUsageFlags = 1 << 2
)

func (e CommandBufferUsageFlags) String() string {
	return fmt.Sprintf("VkCommandBufferUsageFlags(%b)", e)
}

// CommandPoolCreateFlags wraps the bitmask VkCommandPoolCreateFlags.
type CommandPoolCreateFlags int32

const (
	// COMMAND_POOL_CREATE_TRANSIENT_BIT wraps VK_COMMAND_POOL_CREATE_TRANSIENT_BIT.
	COMMAND_POOL_CREATE_TRANSIENT_BIT CommandPoolCreateFlags = 1 << 0
	// COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT wraps VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT.
	COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT CommandPoolCreateFlags = 1 << 1
	// COMMAND_POOL_CREATE_PROTECTED_BIT wraps VK_COMMAND_POOL_CREATE_PROTECTED_BIT.
	COMMAND_POOL_CREATE_PROTECTED_BIT CommandPoolCreateFlags = 1 << 2
)

func (e CommandPoolCreateFlags) String() string {
	return fmt.Sprintf("VkCommandPoolCreateFlags(%b)", e)
}

// CommandPoolResetFlags wraps the bitmask VkCommandPoolResetFlags.
type CommandPoolResetFlags int32

const (
	// COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT wraps VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT.
	COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT CommandPoolResetFlags = 1 << 0
)

func (e CommandPoolResetFlags) String() string {
	return fmt.Sprintf("VkCommandPoolResetFlags(%b)", e)
}

// CommandPoolTrimFlags wraps the bitmask VkCommandPoolTrimFlags.
type CommandPoolTrimFlags int32

// CommandPoolTrimFlagsKHR wraps the bitmask VkCommandPoolTrimFlagsKHR. An alias for CommandPoolTrimFlags.
type CommandPoolTrimFlagsKHR = CommandPoolTrimFlags

func (e CommandPoolTrimFlags) String() string {
	return fmt.Sprintf("VkCommandPoolTrimFlags(%b)", e)
}

// CompositeAlphaFlagsKHR wraps the bitmask VkCompositeAlphaFlagsKHR.
type CompositeAlphaFlagsKHR int32

const (
	// COMPOSITE_ALPHA_OPAQUE_BIT_KHR wraps VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR.
	COMPOSITE_ALPHA_OPAQUE_BIT_KHR CompositeAlphaFlagsKHR = 1 << 0
	// COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR wraps VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR.
	COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR CompositeAlphaFlagsKHR = 1 << 1
	// COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR wraps VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR.
	COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR CompositeAlphaFlagsKHR = 1 << 2
	// COMPOSITE_ALPHA_INHERIT_BIT_KHR wraps VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR.
	COMPOSITE_ALPHA_INHERIT_BIT_KHR CompositeAlphaFlagsKHR = 1 << 3
)

func (e CompositeAlphaFlagsKHR) String() string {
	return fmt.Sprintf("VkCompositeAlphaFlagsKHR(%b)", e)
}

// ConditionalRenderingFlagsEXT wraps the bitmask VkConditionalRenderingFlagsEXT.
type ConditionalRenderingFlagsEXT int32

const (
	// CONDITIONAL_RENDERING_INVERTED_BIT_EXT wraps VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT.
	CONDITIONAL_RENDERING_INVERTED_BIT_EXT ConditionalRenderingFlagsEXT = 1 << 0
)

func (e ConditionalRenderingFlagsEXT) String() string {
	return fmt.Sprintf("VkConditionalRenderingFlagsEXT(%b)", e)
}

// CullModeFlags wraps the bitmask VkCullModeFlags.
type CullModeFlags int32

const (
	// CULL_MODE_NONE wraps VK_CULL_MODE_NONE.
	CULL_MODE_NONE CullModeFlags = 0
	// CULL_MODE_FRONT_BIT wraps VK_CULL_MODE_FRONT_BIT.
	CULL_MODE_FRONT_BIT CullModeFlags = 1 << 0
	// CULL_MODE_BACK_BIT wraps VK_CULL_MODE_BACK_BIT.
	CULL_MODE_BACK_BIT CullModeFlags = 1 << 1
	// CULL_MODE_FRONT_AND_BACK wraps VK_CULL_MODE_FRONT_AND_BACK.
	CULL_MODE_FRONT_AND_BACK CullModeFlags = 0x00000003
)

func (e CullModeFlags) String() string {
	return fmt.Sprintf("VkCullModeFlags(%b)", e)
}

// DataGraphPipelineDispatchFlagsARM wraps the bitmask VkDataGraphPipelineDispatchFlagsARM.
type DataGraphPipelineDispatchFlagsARM int64

func (e DataGraphPipelineDispatchFlagsARM) String() string {
	return fmt.Sprintf("VkDataGraphPipelineDispatchFlagsARM(%b)", e)
}

// DataGraphPipelineSessionCreateFlagsARM wraps the bitmask VkDataGraphPipelineSessionCreateFlagsARM.
type DataGraphPipelineSessionCreateFlagsARM int64

const (
	// DATA_GRAPH_PIPELINE_SESSION_CREATE_PROTECTED_BIT_ARM wraps VK_DATA_GRAPH_PIPELINE_SESSION_CREATE_PROTECTED_BIT_ARM.
	DATA_GRAPH_PIPELINE_SESSION_CREATE_PROTECTED_BIT_ARM DataGraphPipelineSessionCreateFlagsARM = 1 << 0
)

func (e DataGraphPipelineSessionCreateFlagsARM) String() string {
	return fmt.Sprintf("VkDataGraphPipelineSessionCreateFlagsARM(%b)", e)
}

// DebugReportFlagsEXT wraps the bitmask VkDebugReportFlagsEXT.
type DebugReportFlagsEXT int32

const (
	// DEBUG_REPORT_INFORMATION_BIT_EXT wraps VK_DEBUG_REPORT_INFORMATION_BIT_EXT.
	DEBUG_REPORT_INFORMATION_BIT_EXT DebugReportFlagsEXT = 1 << 0
	// DEBUG_REPORT_WARNING_BIT_EXT wraps VK_DEBUG_REPORT_WARNING_BIT_EXT.
	DEBUG_REPORT_WARNING_BIT_EXT DebugReportFlagsEXT = 1 << 1
	// DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT wraps VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT.
	DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT DebugReportFlagsEXT = 1 << 2
	// DEBUG_REPORT_ERROR_BIT_EXT wraps VK_DEBUG_REPORT_ERROR_BIT_EXT.
	DEBUG_REPORT_ERROR_BIT_EXT DebugReportFlagsEXT = 1 << 3
	// DEBUG_REPORT_DEBUG_BIT_EXT wraps VK_DEBUG_REPORT_DEBUG_BIT_EXT.
	DEBUG_REPORT_DEBUG_BIT_EXT DebugReportFlagsEXT = 1 << 4
)

func (e DebugReportFlagsEXT) String() string {
	return fmt.Sprintf("VkDebugReportFlagsEXT(%b)", e)
}

// DebugUtilsMessageSeverityFlagsEXT wraps the bitmask VkDebugUtilsMessageSeverityFlagsEXT.
type DebugUtilsMessageSeverityFlagsEXT int32

const (
	// DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT wraps VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT.
	DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT DebugUtilsMessageSeverityFlagsEXT = 1 << 0
	// DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT wraps VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT.
	DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT DebugUtilsMessageSeverityFlagsEXT = 1 << 4
	// DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT wraps VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT.
	DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT DebugUtilsMessageSeverityFlagsEXT = 1 << 8
	// DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT wraps VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT.
	DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT DebugUtilsMessageSeverityFlagsEXT = 1 << 12
)

func (e DebugUtilsMessageSeverityFlagsEXT) String() string {
	return fmt.Sprintf("VkDebugUtilsMessageSeverityFlagsEXT(%b)", e)
}

// DebugUtilsMessageTypeFlagsEXT wraps the bitmask VkDebugUtilsMessageTypeFlagsEXT.
type DebugUtilsMessageTypeFlagsEXT int32

const (
	// DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT wraps VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT.
	DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT DebugUtilsMessageTypeFlagsEXT = 1 << 0
	// DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT wraps VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT.
	DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT DebugUtilsMessageTypeFlagsEXT = 1 << 1
	// DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT wraps VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT.
	DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT DebugUtilsMessageTypeFlagsEXT = 1 << 2
	// DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT wraps VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT.
	DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT DebugUtilsMessageTypeFlagsEXT = 1 << 3
)

func (e DebugUtilsMessageTypeFlagsEXT) String() string {
	return fmt.Sprintf("VkDebugUtilsMessageTypeFlagsEXT(%b)", e)
}

// DebugUtilsMessengerCallbackDataFlagsEXT wraps the bitmask VkDebugUtilsMessengerCallbackDataFlagsEXT.
type DebugUtilsMessengerCallbackDataFlagsEXT int32

func (e DebugUtilsMessengerCallbackDataFlagsEXT) String() string {
	return fmt.Sprintf("VkDebugUtilsMessengerCallbackDataFlagsEXT(%b)", e)
}

// DebugUtilsMessengerCreateFlagsEXT wraps the bitmask VkDebugUtilsMessengerCreateFlagsEXT.
type DebugUtilsMessengerCreateFlagsEXT int32

func (e DebugUtilsMessengerCreateFlagsEXT) String() string {
	return fmt.Sprintf("VkDebugUtilsMessengerCreateFlagsEXT(%b)", e)
}

// DependencyFlags wraps the bitmask VkDependencyFlags.
type DependencyFlags int32

const (
	// DEPENDENCY_BY_REGION_BIT wraps VK_DEPENDENCY_BY_REGION_BIT.
	DEPENDENCY_BY_REGION_BIT DependencyFlags = 1 << 0
	// DEPENDENCY_DEVICE_GROUP_BIT wraps VK_DEPENDENCY_DEVICE_GROUP_BIT.
	DEPENDENCY_DEVICE_GROUP_BIT DependencyFlags = 1 << 2
	// DEPENDENCY_VIEW_LOCAL_BIT wraps VK_DEPENDENCY_VIEW_LOCAL_BIT.
	DEPENDENCY_VIEW_LOCAL_BIT DependencyFlags = 1 << 1
	// DEPENDENCY_VIEW_LOCAL_BIT_KHR wraps VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR.
	DEPENDENCY_VIEW_LOCAL_BIT_KHR DependencyFlags = DEPENDENCY_VIEW_LOCAL_BIT
	// DEPENDENCY_DEVICE_GROUP_BIT_KHR wraps VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR.
	DEPENDENCY_DEVICE_GROUP_BIT_KHR DependencyFlags = DEPENDENCY_DEVICE_GROUP_BIT
	// DEPENDENCY_FEEDBACK_LOOP_BIT_EXT wraps VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT.
	DEPENDENCY_FEEDBACK_LOOP_BIT_EXT DependencyFlags = 1 << 3
	// DEPENDENCY_QUEUE_FAMILY_OWNERSHIP_TRANSFER_USE_ALL_STAGES_BIT_KHR wraps VK_DEPENDENCY_QUEUE_FAMILY_OWNERSHIP_TRANSFER_USE_ALL_STAGES_BIT_KHR.
	DEPENDENCY_QUEUE_FAMILY_OWNERSHIP_TRANSFER_USE_ALL_STAGES_BIT_KHR DependencyFlags = 1 << 5
	// DEPENDENCY_ASYMMETRIC_EVENT_BIT_KHR wraps VK_DEPENDENCY_ASYMMETRIC_EVENT_BIT_KHR.
	DEPENDENCY_ASYMMETRIC_EVENT_BIT_KHR DependencyFlags = 1 << 6
)

func (e DependencyFlags) String() string {
	return fmt.Sprintf("VkDependencyFlags(%b)", e)
}

// DescriptorBindingFlags wraps the bitmask VkDescriptorBindingFlags.
type DescriptorBindingFlags int32

// DescriptorBindingFlagsEXT wraps the bitmask VkDescriptorBindingFlagsEXT. An alias for DescriptorBindingFlags.
type DescriptorBindingFlagsEXT = DescriptorBindingFlags

const (
	// DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT wraps VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT.
	DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT DescriptorBindingFlags = 1 << 0
	// DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT wraps VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT.
	DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT DescriptorBindingFlags = 1 << 1
	// DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT wraps VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT.
	DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT DescriptorBindingFlags = 1 << 2
	// DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT wraps VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT.
	DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT DescriptorBindingFlags = 1 << 3
	// DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT wraps VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT.
	DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT DescriptorBindingFlags = DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT
	// DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT wraps VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT.
	DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT DescriptorBindingFlags = DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT
	// DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT wraps VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT.
	DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT DescriptorBindingFlags = DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT
	// DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT wraps VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT.
	DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT DescriptorBindingFlags = DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT
)

func (e DescriptorBindingFlags) String() string {
	return fmt.Sprintf("VkDescriptorBindingFlags(%b)", e)
}

// DescriptorPoolCreateFlags wraps the bitmask VkDescriptorPoolCreateFlags.
type DescriptorPoolCreateFlags int32

const (
	// DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT wraps VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT.
	DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT DescriptorPoolCreateFlags = 1 << 0
	// DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT wraps VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT.
	DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT DescriptorPoolCreateFlags = 1 << 1
	// DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT wraps VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT.
	DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT DescriptorPoolCreateFlags = DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT
	// DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE wraps VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE.
	DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE DescriptorPoolCreateFlags = DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT
	// DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT wraps VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT.
	DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT DescriptorPoolCreateFlags = 1 << 2
	// DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV wraps VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV.
	DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV DescriptorPoolCreateFlags = 1 << 3
	// DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV wraps VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV.
	DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV DescriptorPoolCreateFlags = 1 << 4
)

func (e DescriptorPoolCreateFlags) String() string {
	return fmt.Sprintf("VkDescriptorPoolCreateFlags(%b)", e)
}

// DescriptorPoolResetFlags wraps the bitmask VkDescriptorPoolResetFlags.
type DescriptorPoolResetFlags int32

func (e DescriptorPoolResetFlags) String() string {
	return fmt.Sprintf("VkDescriptorPoolResetFlags(%b)", e)
}

// DescriptorSetLayoutCreateFlags wraps the bitmask VkDescriptorSetLayoutCreateFlags.
type DescriptorSetLayoutCreateFlags int32

const (
	// DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT wraps VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT.
	DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT DescriptorSetLayoutCreateFlags = 1 << 1
	// DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT wraps VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT.
	DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT DescriptorSetLayoutCreateFlags = 1 << 0
	// DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR wraps VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR.
	DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR DescriptorSetLayoutCreateFlags = DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT
	// DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT wraps VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT.
	DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT DescriptorSetLayoutCreateFlags = DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT
	// DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT wraps VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT.
	DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT DescriptorSetLayoutCreateFlags = 1 << 4
	// DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT wraps VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT.
	DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT DescriptorSetLayoutCreateFlags = 1 << 5
	// DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE wraps VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE.
	DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE DescriptorSetLayoutCreateFlags = DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT
	// DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV wraps VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV.
	DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV DescriptorSetLayoutCreateFlags = 1 << 7
	// DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT wraps VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT.
	DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT DescriptorSetLayoutCreateFlags = 1 << 2
	// DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV wraps VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV.
	DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV DescriptorSetLayoutCreateFlags = 1 << 6
)

func (e DescriptorSetLayoutCreateFlags) String() string {
	return fmt.Sprintf("VkDescriptorSetLayoutCreateFlags(%b)", e)
}

// DescriptorUpdateTemplateCreateFlags wraps the bitmask VkDescriptorUpdateTemplateCreateFlags.
type DescriptorUpdateTemplateCreateFlags int32

// DescriptorUpdateTemplateCreateFlagsKHR wraps the bitmask VkDescriptorUpdateTemplateCreateFlagsKHR. An alias for DescriptorUpdateTemplateCreateFlags.
type DescriptorUpdateTemplateCreateFlagsKHR = DescriptorUpdateTemplateCreateFlags

func (e DescriptorUpdateTemplateCreateFlags) String() string {
	return fmt.Sprintf("VkDescriptorUpdateTemplateCreateFlags(%b)", e)
}

// DeviceAddressBindingFlagsEXT wraps the bitmask VkDeviceAddressBindingFlagsEXT.
type DeviceAddressBindingFlagsEXT int32

const (
	// DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT wraps VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT.
	DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT DeviceAddressBindingFlagsEXT = 1 << 0
)

func (e DeviceAddressBindingFlagsEXT) String() string {
	return fmt.Sprintf("VkDeviceAddressBindingFlagsEXT(%b)", e)
}

// DeviceCreateFlags wraps the bitmask VkDeviceCreateFlags.
type DeviceCreateFlags int32

func (e DeviceCreateFlags) String() string {
	return fmt.Sprintf("VkDeviceCreateFlags(%b)", e)
}

// DeviceDiagnosticsConfigFlagsNV wraps the bitmask VkDeviceDiagnosticsConfigFlagsNV.
type DeviceDiagnosticsConfigFlagsNV int32

const (
	// DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV wraps VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV.
	DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV DeviceDiagnosticsConfigFlagsNV = 1 << 0
	// DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV wraps VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV.
	DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV DeviceDiagnosticsConfigFlagsNV = 1 << 1
	// DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV wraps VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV.
	DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV DeviceDiagnosticsConfigFlagsNV = 1 << 2
	// DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV wraps VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV.
	DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV DeviceDiagnosticsConfigFlagsNV = 1 << 3
)

func (e DeviceDiagnosticsConfigFlagsNV) String() string {
	return fmt.Sprintf("VkDeviceDiagnosticsConfigFlagsNV(%b)", e)
}

// DeviceGroupPresentModeFlagsKHR wraps the bitmask VkDeviceGroupPresentModeFlagsKHR.
type DeviceGroupPresentModeFlagsKHR int32

const (
	// DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR wraps VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR.
	DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR DeviceGroupPresentModeFlagsKHR = 1 << 0
	// DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR wraps VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR.
	DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR DeviceGroupPresentModeFlagsKHR = 1 << 1
	// DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR wraps VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR.
	DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR DeviceGroupPresentModeFlagsKHR = 1 << 2
	// DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR wraps VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR.
	DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR DeviceGroupPresentModeFlagsKHR = 1 << 3
)

func (e DeviceGroupPresentModeFlagsKHR) String() string {
	return fmt.Sprintf("VkDeviceGroupPresentModeFlagsKHR(%b)", e)
}

// DeviceMemoryReportFlagsEXT wraps the bitmask VkDeviceMemoryReportFlagsEXT.
type DeviceMemoryReportFlagsEXT int32

func (e DeviceMemoryReportFlagsEXT) String() string {
	return fmt.Sprintf("VkDeviceMemoryReportFlagsEXT(%b)", e)
}

// DeviceQueueCreateFlags wraps the bitmask VkDeviceQueueCreateFlags.
type DeviceQueueCreateFlags int32

const (
	// DEVICE_QUEUE_CREATE_PROTECTED_BIT wraps VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT.
	DEVICE_QUEUE_CREATE_PROTECTED_BIT DeviceQueueCreateFlags = 1 << 0
)

func (e DeviceQueueCreateFlags) String() string {
	return fmt.Sprintf("VkDeviceQueueCreateFlags(%b)", e)
}

// DirectDriverLoadingFlagsLUNARG wraps the bitmask VkDirectDriverLoadingFlagsLUNARG.
type DirectDriverLoadingFlagsLUNARG int32

func (e DirectDriverLoadingFlagsLUNARG) String() string {
	return fmt.Sprintf("VkDirectDriverLoadingFlagsLUNARG(%b)", e)
}

// DisplayModeCreateFlagsKHR wraps the bitmask VkDisplayModeCreateFlagsKHR.
type DisplayModeCreateFlagsKHR int32

func (e DisplayModeCreateFlagsKHR) String() string {
	return fmt.Sprintf("VkDisplayModeCreateFlagsKHR(%b)", e)
}

// DisplayPlaneAlphaFlagsKHR wraps the bitmask VkDisplayPlaneAlphaFlagsKHR.
type DisplayPlaneAlphaFlagsKHR int32

const (
	// DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR wraps VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR.
	DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR DisplayPlaneAlphaFlagsKHR = 1 << 0
	// DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR wraps VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR.
	DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR DisplayPlaneAlphaFlagsKHR = 1 << 1
	// DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR wraps VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR.
	DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR DisplayPlaneAlphaFlagsKHR = 1 << 2
	// DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR wraps VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR.
	DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR DisplayPlaneAlphaFlagsKHR = 1 << 3
)

func (e DisplayPlaneAlphaFlagsKHR) String() string {
	return fmt.Sprintf("VkDisplayPlaneAlphaFlagsKHR(%b)", e)
}

// DisplaySurfaceCreateFlagsKHR wraps the bitmask VkDisplaySurfaceCreateFlagsKHR.
type DisplaySurfaceCreateFlagsKHR int32

func (e DisplaySurfaceCreateFlagsKHR) String() string {
	return fmt.Sprintf("VkDisplaySurfaceCreateFlagsKHR(%b)", e)
}

// EventCreateFlags wraps the bitmask VkEventCreateFlags.
type EventCreateFlags int32

const (
	// EVENT_CREATE_DEVICE_ONLY_BIT wraps VK_EVENT_CREATE_DEVICE_ONLY_BIT.
	EVENT_CREATE_DEVICE_ONLY_BIT EventCreateFlags = 1 << 0
	// EVENT_CREATE_DEVICE_ONLY_BIT_KHR wraps VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR.
	EVENT_CREATE_DEVICE_ONLY_BIT_KHR EventCreateFlags = EVENT_CREATE_DEVICE_ONLY_BIT
)

func (e EventCreateFlags) String() string {
	return fmt.Sprintf("VkEventCreateFlags(%b)", e)
}

// ExternalFenceFeatureFlags wraps the bitmask VkExternalFenceFeatureFlags.
type ExternalFenceFeatureFlags int32

// ExternalFenceFeatureFlagsKHR wraps the bitmask VkExternalFenceFeatureFlagsKHR. An alias for ExternalFenceFeatureFlags.
type ExternalFenceFeatureFlagsKHR = ExternalFenceFeatureFlags

const (
	// EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT wraps VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT.
	EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT ExternalFenceFeatureFlags = 1 << 0
	// EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT wraps VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT.
	EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT ExternalFenceFeatureFlags = 1 << 1
	// EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR wraps VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR.
	EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR ExternalFenceFeatureFlags = EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT
	// EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR wraps VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR.
	EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR ExternalFenceFeatureFlags = EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT
)

func (e ExternalFenceFeatureFlags) String() string {
	return fmt.Sprintf("VkExternalFenceFeatureFlags(%b)", e)
}

// ExternalFenceHandleTypeFlags wraps the bitmask VkExternalFenceHandleTypeFlags.
type ExternalFenceHandleTypeFlags int32

// ExternalFenceHandleTypeFlagsKHR wraps the bitmask VkExternalFenceHandleTypeFlagsKHR. An alias for ExternalFenceHandleTypeFlags.
type ExternalFenceHandleTypeFlagsKHR = ExternalFenceHandleTypeFlags

const (
	// EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT wraps VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT.
	EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT ExternalFenceHandleTypeFlags = 1 << 0
	// EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT wraps VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT.
	EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT ExternalFenceHandleTypeFlags = 1 << 1
	// EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT wraps VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT.
	EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT ExternalFenceHandleTypeFlags = 1 << 2
	// EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT wraps VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT.
	EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT ExternalFenceHandleTypeFlags = 1 << 3
	// EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR wraps VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR.
	EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR ExternalFenceHandleTypeFlags = EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT
	// EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR wraps VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR.
	EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR ExternalFenceHandleTypeFlags = EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT
	// EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR wraps VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR.
	EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR ExternalFenceHandleTypeFlags = EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
	// EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR wraps VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR.
	EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR ExternalFenceHandleTypeFlags = EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT
)

func (e ExternalFenceHandleTypeFlags) String() string {
	return fmt.Sprintf("VkExternalFenceHandleTypeFlags(%b)", e)
}

// ExternalMemoryFeatureFlags wraps the bitmask VkExternalMemoryFeatureFlags.
type ExternalMemoryFeatureFlags int32

// ExternalMemoryFeatureFlagsKHR wraps the bitmask VkExternalMemoryFeatureFlagsKHR. An alias for ExternalMemoryFeatureFlags.
type ExternalMemoryFeatureFlagsKHR = ExternalMemoryFeatureFlags

const (
	// EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT wraps VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT.
	EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT ExternalMemoryFeatureFlags = 1 << 0
	// EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT wraps VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT.
	EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT ExternalMemoryFeatureFlags = 1 << 1
	// EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT wraps VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT.
	EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT ExternalMemoryFeatureFlags = 1 << 2
	// EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR wraps VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR.
	EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR ExternalMemoryFeatureFlags = EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT
	// EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR wraps VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR.
	EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR ExternalMemoryFeatureFlags = EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT
	// EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR wraps VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR.
	EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR ExternalMemoryFeatureFlags = EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT
)

func (e ExternalMemoryFeatureFlags) String() string {
	return fmt.Sprintf("VkExternalMemoryFeatureFlags(%b)", e)
}

// ExternalMemoryFeatureFlagsNV wraps the bitmask VkExternalMemoryFeatureFlagsNV.
type ExternalMemoryFeatureFlagsNV int32

const (
	// EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV wraps VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV.
	EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV ExternalMemoryFeatureFlagsNV = 1 << 0
	// EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV wraps VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV.
	EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV ExternalMemoryFeatureFlagsNV = 1 << 1
	// EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV wraps VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV.
	EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV ExternalMemoryFeatureFlagsNV = 1 << 2
)

func (e ExternalMemoryFeatureFlagsNV) String() string {
	return fmt.Sprintf("VkExternalMemoryFeatureFlagsNV(%b)", e)
}

// ExternalMemoryHandleTypeFlags wraps the bitmask VkExternalMemoryHandleTypeFlags.
type ExternalMemoryHandleTypeFlags int32

// ExternalMemoryHandleTypeFlagsKHR wraps the bitmask VkExternalMemoryHandleTypeFlagsKHR. An alias for ExternalMemoryHandleTypeFlags.
type ExternalMemoryHandleTypeFlagsKHR = ExternalMemoryHandleTypeFlags

const (
	// EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT.
	EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT ExternalMemoryHandleTypeFlags = 1 << 0
	// EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT.
	EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT ExternalMemoryHandleTypeFlags = 1 << 1
	// EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT.
	EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT ExternalMemoryHandleTypeFlags = 1 << 2
	// EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT.
	EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT ExternalMemoryHandleTypeFlags = 1 << 3
	// EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT.
	EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT ExternalMemoryHandleTypeFlags = 1 << 4
	// EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT.
	EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT ExternalMemoryHandleTypeFlags = 1 << 5
	// EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT.
	EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT ExternalMemoryHandleTypeFlags = 1 << 6
	// EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR.
	EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR ExternalMemoryHandleTypeFlags = EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT
	// EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR.
	EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR ExternalMemoryHandleTypeFlags = EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT
	// EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR.
	EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR ExternalMemoryHandleTypeFlags = EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
	// EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR.
	EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR ExternalMemoryHandleTypeFlags = EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT
	// EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR.
	EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR ExternalMemoryHandleTypeFlags = EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT
	// EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR.
	EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR ExternalMemoryHandleTypeFlags = EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT
	// EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR.
	EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR ExternalMemoryHandleTypeFlags = EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT
	// EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT.
	EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT ExternalMemoryHandleTypeFlags = 1 << 9
	// EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT.
	EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT ExternalMemoryHandleTypeFlags = 1 << 7
	// EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT.
	EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT ExternalMemoryHandleTypeFlags = 1 << 8
	// EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV.
	EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV ExternalMemoryHandleTypeFlags = 1 << 12
)

func (e ExternalMemoryHandleTypeFlags) String() string {
	return fmt.Sprintf("VkExternalMemoryHandleTypeFlags(%b)", e)
}

// ExternalMemoryHandleTypeFlagsNV wraps the bitmask VkExternalMemoryHandleTypeFlagsNV.
type ExternalMemoryHandleTypeFlagsNV int32

const (
	// EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV.
	EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV ExternalMemoryHandleTypeFlagsNV = 1 << 0
	// EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV.
	EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV ExternalMemoryHandleTypeFlagsNV = 1 << 1
	// EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV.
	EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV ExternalMemoryHandleTypeFlagsNV = 1 << 2
	// EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV wraps VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV.
	EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV ExternalMemoryHandleTypeFlagsNV = 1 << 3
)

func (e ExternalMemoryHandleTypeFlagsNV) String() string {
	return fmt.Sprintf("VkExternalMemoryHandleTypeFlagsNV(%b)", e)
}

// ExternalSemaphoreFeatureFlags wraps the bitmask VkExternalSemaphoreFeatureFlags.
type ExternalSemaphoreFeatureFlags int32

// ExternalSemaphoreFeatureFlagsKHR wraps the bitmask VkExternalSemaphoreFeatureFlagsKHR. An alias for ExternalSemaphoreFeatureFlags.
type ExternalSemaphoreFeatureFlagsKHR = ExternalSemaphoreFeatureFlags

const (
	// EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT wraps VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT.
	EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT ExternalSemaphoreFeatureFlags = 1 << 0
	// EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT wraps VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT.
	EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT ExternalSemaphoreFeatureFlags = 1 << 1
	// EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR wraps VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR.
	EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR ExternalSemaphoreFeatureFlags = EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT
	// EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR wraps VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR.
	EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR ExternalSemaphoreFeatureFlags = EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT
)

func (e ExternalSemaphoreFeatureFlags) String() string {
	return fmt.Sprintf("VkExternalSemaphoreFeatureFlags(%b)", e)
}

// ExternalSemaphoreHandleTypeFlags wraps the bitmask VkExternalSemaphoreHandleTypeFlags.
type ExternalSemaphoreHandleTypeFlags int32

// ExternalSemaphoreHandleTypeFlagsKHR wraps the bitmask VkExternalSemaphoreHandleTypeFlagsKHR. An alias for ExternalSemaphoreHandleTypeFlags.
type ExternalSemaphoreHandleTypeFlagsKHR = ExternalSemaphoreHandleTypeFlags

const (
	// EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT wraps VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT.
	EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT ExternalSemaphoreHandleTypeFlags = 1 << 0
	// EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT wraps VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT.
	EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT ExternalSemaphoreHandleTypeFlags = 1 << 1
	// EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT wraps VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT.
	EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT ExternalSemaphoreHandleTypeFlags = 1 << 2
	// EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT wraps VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT.
	EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT ExternalSemaphoreHandleTypeFlags = 1 << 3
	// EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT wraps VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT.
	EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT ExternalSemaphoreHandleTypeFlags = EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT
	// EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT wraps VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT.
	EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT ExternalSemaphoreHandleTypeFlags = 1 << 4
	// EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR wraps VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR.
	EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR ExternalSemaphoreHandleTypeFlags = EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT
	// EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR wraps VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR.
	EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR ExternalSemaphoreHandleTypeFlags = EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT
	// EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR wraps VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR.
	EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR ExternalSemaphoreHandleTypeFlags = EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT
	// EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR wraps VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR.
	EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR ExternalSemaphoreHandleTypeFlags = EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT
	// EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR wraps VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR.
	EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR ExternalSemaphoreHandleTypeFlags = EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT
)

func (e ExternalSemaphoreHandleTypeFlags) String() string {
	return fmt.Sprintf("VkExternalSemaphoreHandleTypeFlags(%b)", e)
}

// FenceCreateFlags wraps the bitmask VkFenceCreateFlags.
type FenceCreateFlags int32

const (
	// FENCE_CREATE_SIGNALED_BIT wraps VK_FENCE_CREATE_SIGNALED_BIT.
	FENCE_CREATE_SIGNALED_BIT FenceCreateFlags = 1 << 0
)

func (e FenceCreateFlags) String() string {
	return fmt.Sprintf("VkFenceCreateFlags(%b)", e)
}

// FenceImportFlags wraps the bitmask VkFenceImportFlags.
type FenceImportFlags int32

// FenceImportFlagsKHR wraps the bitmask VkFenceImportFlagsKHR. An alias for FenceImportFlags.
type FenceImportFlagsKHR = FenceImportFlags

const (
	// FENCE_IMPORT_TEMPORARY_BIT wraps VK_FENCE_IMPORT_TEMPORARY_BIT.
	FENCE_IMPORT_TEMPORARY_BIT FenceImportFlags = 1 << 0
	// FENCE_IMPORT_TEMPORARY_BIT_KHR wraps VK_FENCE_IMPORT_TEMPORARY_BIT_KHR.
	FENCE_IMPORT_TEMPORARY_BIT_KHR FenceImportFlags = FENCE_IMPORT_TEMPORARY_BIT
)

func (e FenceImportFlags) String() string {
	return fmt.Sprintf("VkFenceImportFlags(%b)", e)
}

// FormatFeatureFlags wraps the bitmask VkFormatFeatureFlags.
type FormatFeatureFlags int32

const (
	// FORMAT_FEATURE_SAMPLED_IMAGE_BIT wraps VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT.
	FORMAT_FEATURE_SAMPLED_IMAGE_BIT FormatFeatureFlags = 1 << 0
	// FORMAT_FEATURE_STORAGE_IMAGE_BIT wraps VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT.
	FORMAT_FEATURE_STORAGE_IMAGE_BIT FormatFeatureFlags = 1 << 1
	// FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT wraps VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT.
	FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT FormatFeatureFlags = 1 << 2
	// FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT wraps VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT.
	FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT FormatFeatureFlags = 1 << 3
	// FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT wraps VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT.
	FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT FormatFeatureFlags = 1 << 4
	// FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT wraps VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT.
	FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT FormatFeatureFlags = 1 << 5
	// FORMAT_FEATURE_VERTEX_BUFFER_BIT wraps VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT.
	FORMAT_FEATURE_VERTEX_BUFFER_BIT FormatFeatureFlags = 1 << 6
	// FORMAT_FEATURE_COLOR_ATTACHMENT_BIT wraps VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT.
	FORMAT_FEATURE_COLOR_ATTACHMENT_BIT FormatFeatureFlags = 1 << 7
	// FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT wraps VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT.
	FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT FormatFeatureFlags = 1 << 8
	// FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT wraps VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT.
	FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT FormatFeatureFlags = 1 << 9
	// FORMAT_FEATURE_BLIT_SRC_BIT wraps VK_FORMAT_FEATURE_BLIT_SRC_BIT.
	FORMAT_FEATURE_BLIT_SRC_BIT FormatFeatureFlags = 1 << 10
	// FORMAT_FEATURE_BLIT_DST_BIT wraps VK_FORMAT_FEATURE_BLIT_DST_BIT.
	FORMAT_FEATURE_BLIT_DST_BIT FormatFeatureFlags = 1 << 11
	// FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT wraps VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT.
	FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT FormatFeatureFlags = 1 << 12
	// FORMAT_FEATURE_TRANSFER_SRC_BIT wraps VK_FORMAT_FEATURE_TRANSFER_SRC_BIT.
	FORMAT_FEATURE_TRANSFER_SRC_BIT FormatFeatureFlags = 1 << 14
	// FORMAT_FEATURE_TRANSFER_DST_BIT wraps VK_FORMAT_FEATURE_TRANSFER_DST_BIT.
	FORMAT_FEATURE_TRANSFER_DST_BIT FormatFeatureFlags = 1 << 15
	// FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT wraps VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT.
	FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT FormatFeatureFlags = 1 << 17
	// FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT wraps VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT.
	FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT FormatFeatureFlags = 1 << 18
	// FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT wraps VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT.
	FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT FormatFeatureFlags = 1 << 19
	// FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT wraps VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT.
	FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT FormatFeatureFlags = 1 << 20
	// FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT wraps VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT.
	FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT FormatFeatureFlags = 1 << 21
	// FORMAT_FEATURE_DISJOINT_BIT wraps VK_FORMAT_FEATURE_DISJOINT_BIT.
	FORMAT_FEATURE_DISJOINT_BIT FormatFeatureFlags = 1 << 22
	// FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT wraps VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT.
	FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT FormatFeatureFlags = 1 << 23
	// FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT wraps VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT.
	FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT FormatFeatureFlags = 1 << 16
	// FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG wraps VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG.
	FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT
	// FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR wraps VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR.
	FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR FormatFeatureFlags = 1 << 25
	// FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR wraps VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR.
	FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR FormatFeatureFlags = 1 << 26
	// FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR wraps VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR.
	FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR FormatFeatureFlags = FORMAT_FEATURE_TRANSFER_SRC_BIT
	// FORMAT_FEATURE_TRANSFER_DST_BIT_KHR wraps VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR.
	FORMAT_FEATURE_TRANSFER_DST_BIT_KHR FormatFeatureFlags = FORMAT_FEATURE_TRANSFER_DST_BIT
	// FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT wraps VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT.
	FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT
	// FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR wraps VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR.
	FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR FormatFeatureFlags = 1 << 29
	// FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR wraps VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR.
	FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR FormatFeatureFlags = FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT
	// FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR wraps VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR.
	FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT
	// FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR wraps VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR.
	FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT
	// FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR wraps VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR.
	FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT
	// FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR wraps VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR.
	FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT
	// FORMAT_FEATURE_DISJOINT_BIT_KHR wraps VK_FORMAT_FEATURE_DISJOINT_BIT_KHR.
	FORMAT_FEATURE_DISJOINT_BIT_KHR FormatFeatureFlags = FORMAT_FEATURE_DISJOINT_BIT
	// FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR wraps VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR.
	FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR FormatFeatureFlags = FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT
	// FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT wraps VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT.
	FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT FormatFeatureFlags = 1 << 13
	// FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT wraps VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT.
	FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT FormatFeatureFlags = 1 << 24
	// FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR wraps VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR.
	FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR FormatFeatureFlags = 1 << 30
	// FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR wraps VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR.
	FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR FormatFeatureFlags = 1 << 27
	// FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR wraps VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR.
	FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR FormatFeatureFlags = 1 << 28
)

func (e FormatFeatureFlags) String() string {
	return fmt.Sprintf("VkFormatFeatureFlags(%b)", e)
}

// FormatFeatureFlags2 wraps the bitmask VkFormatFeatureFlags2.
type FormatFeatureFlags2 int64

// FormatFeatureFlags2KHR wraps the bitmask VkFormatFeatureFlags2KHR. An alias for FormatFeatureFlags2.
type FormatFeatureFlags2KHR = FormatFeatureFlags2

const (
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT FormatFeatureFlags2 = 1 << 0
	// FORMAT_FEATURE_2_STORAGE_IMAGE_BIT wraps VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT.
	FORMAT_FEATURE_2_STORAGE_IMAGE_BIT FormatFeatureFlags2 = 1 << 1
	// FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT wraps VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT.
	FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT FormatFeatureFlags2 = 1 << 2
	// FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT wraps VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT.
	FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT FormatFeatureFlags2 = 1 << 3
	// FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT wraps VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT.
	FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT FormatFeatureFlags2 = 1 << 4
	// FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT wraps VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT.
	FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT FormatFeatureFlags2 = 1 << 5
	// FORMAT_FEATURE_2_VERTEX_BUFFER_BIT wraps VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT.
	FORMAT_FEATURE_2_VERTEX_BUFFER_BIT FormatFeatureFlags2 = 1 << 6
	// FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT wraps VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT.
	FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT FormatFeatureFlags2 = 1 << 7
	// FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT wraps VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT.
	FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT FormatFeatureFlags2 = 1 << 8
	// FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT wraps VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT.
	FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT FormatFeatureFlags2 = 1 << 9
	// FORMAT_FEATURE_2_BLIT_SRC_BIT wraps VK_FORMAT_FEATURE_2_BLIT_SRC_BIT.
	FORMAT_FEATURE_2_BLIT_SRC_BIT FormatFeatureFlags2 = 1 << 10
	// FORMAT_FEATURE_2_BLIT_DST_BIT wraps VK_FORMAT_FEATURE_2_BLIT_DST_BIT.
	FORMAT_FEATURE_2_BLIT_DST_BIT FormatFeatureFlags2 = 1 << 11
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT FormatFeatureFlags2 = 1 << 12
	// FORMAT_FEATURE_2_TRANSFER_SRC_BIT wraps VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT.
	FORMAT_FEATURE_2_TRANSFER_SRC_BIT FormatFeatureFlags2 = 1 << 14
	// FORMAT_FEATURE_2_TRANSFER_DST_BIT wraps VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT.
	FORMAT_FEATURE_2_TRANSFER_DST_BIT FormatFeatureFlags2 = 1 << 15
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT FormatFeatureFlags2 = 1 << 16
	// FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT wraps VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT.
	FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT FormatFeatureFlags2 = 1 << 17
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT FormatFeatureFlags2 = 1 << 18
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT FormatFeatureFlags2 = 1 << 19
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT FormatFeatureFlags2 = 1 << 20
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT FormatFeatureFlags2 = 1 << 21
	// FORMAT_FEATURE_2_DISJOINT_BIT wraps VK_FORMAT_FEATURE_2_DISJOINT_BIT.
	FORMAT_FEATURE_2_DISJOINT_BIT FormatFeatureFlags2 = 1 << 22
	// FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT wraps VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT.
	FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT FormatFeatureFlags2 = 1 << 23
	// FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT wraps VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT.
	FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT FormatFeatureFlags2 = 1 << 31
	// FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT wraps VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT.
	FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT FormatFeatureFlags2 = 1 << 32
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT FormatFeatureFlags2 = 1 << 33
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT FormatFeatureFlags2 = 1 << 13
	// FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT wraps VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT.
	FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT FormatFeatureFlags2 = 1 << 46
	// FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR wraps VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR.
	FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR FormatFeatureFlags2 = 1 << 25
	// FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR wraps VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR.
	FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR FormatFeatureFlags2 = 1 << 26
	// FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR wraps VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR.
	FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR FormatFeatureFlags2 = 1 << 29
	// FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT wraps VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT.
	FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT FormatFeatureFlags2 = 1 << 24
	// FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR wraps VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR.
	FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR FormatFeatureFlags2 = 1 << 30
	// FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT wraps VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT.
	FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT FormatFeatureFlags2 = FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT
	// FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR wraps VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR.
	FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR FormatFeatureFlags2 = 1 << 27
	// FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR wraps VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR.
	FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR FormatFeatureFlags2 = 1 << 28
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT
	// FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR wraps VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR.
	FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_STORAGE_IMAGE_BIT
	// FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR wraps VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR.
	FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT
	// FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR wraps VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR.
	FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT
	// FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR wraps VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR.
	FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT
	// FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR wraps VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR.
	FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT
	// FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR wraps VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR.
	FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_VERTEX_BUFFER_BIT
	// FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR wraps VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR.
	FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT
	// FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR wraps VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR.
	FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT
	// FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR wraps VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR.
	FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT
	// FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR wraps VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR.
	FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_BLIT_SRC_BIT
	// FORMAT_FEATURE_2_BLIT_DST_BIT_KHR wraps VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR.
	FORMAT_FEATURE_2_BLIT_DST_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_BLIT_DST_BIT
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT
	// FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR wraps VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR.
	FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_TRANSFER_SRC_BIT
	// FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR wraps VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR.
	FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_TRANSFER_DST_BIT
	// FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR wraps VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR.
	FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT
	// FORMAT_FEATURE_2_DISJOINT_BIT_KHR wraps VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR.
	FORMAT_FEATURE_2_DISJOINT_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_DISJOINT_BIT
	// FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR wraps VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR.
	FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT
	// FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR wraps VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR.
	FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT
	// FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR wraps VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR.
	FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR FormatFeatureFlags2 = FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT
	// FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT wraps VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT.
	FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT FormatFeatureFlags2 = FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT
	// FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_RADIUS_BUFFER_BIT_NV wraps VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_RADIUS_BUFFER_BIT_NV.
	FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_RADIUS_BUFFER_BIT_NV FormatFeatureFlags2 = 1 << 51
	// FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV wraps VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV.
	FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV FormatFeatureFlags2 = 1 << 38
	// FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM wraps VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM.
	FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM FormatFeatureFlags2 = 1 << 34
	// FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM wraps VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM.
	FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM FormatFeatureFlags2 = 1 << 35
	// FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM wraps VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM.
	FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM FormatFeatureFlags2 = 1 << 36
	// FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM wraps VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM.
	FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM FormatFeatureFlags2 = 1 << 37
	// FORMAT_FEATURE_2_TENSOR_SHADER_BIT_ARM wraps VK_FORMAT_FEATURE_2_TENSOR_SHADER_BIT_ARM.
	FORMAT_FEATURE_2_TENSOR_SHADER_BIT_ARM FormatFeatureFlags2 = 1 << 39
	// FORMAT_FEATURE_2_TENSOR_IMAGE_ALIASING_BIT_ARM wraps VK_FORMAT_FEATURE_2_TENSOR_IMAGE_ALIASING_BIT_ARM.
	FORMAT_FEATURE_2_TENSOR_IMAGE_ALIASING_BIT_ARM FormatFeatureFlags2 = 1 << 43
	// FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV wraps VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV.
	FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV FormatFeatureFlags2 = 1 << 40
	// FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV wraps VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV.
	FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV FormatFeatureFlags2 = 1 << 41
	// FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV wraps VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV.
	FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV FormatFeatureFlags2 = 1 << 42
	// FORMAT_FEATURE_2_TENSOR_DATA_GRAPH_BIT_ARM wraps VK_FORMAT_FEATURE_2_TENSOR_DATA_GRAPH_BIT_ARM.
	FORMAT_FEATURE_2_TENSOR_DATA_GRAPH_BIT_ARM FormatFeatureFlags2 = 1 << 48
	// FORMAT_FEATURE_2_COPY_IMAGE_INDIRECT_DST_BIT_KHR wraps VK_FORMAT_FEATURE_2_COPY_IMAGE_INDIRECT_DST_BIT_KHR.
	FORMAT_FEATURE_2_COPY_IMAGE_INDIRECT_DST_BIT_KHR FormatFeatureFlags2 = 1 << 59
	// FORMAT_FEATURE_2_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR wraps VK_FORMAT_FEATURE_2_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR.
	FORMAT_FEATURE_2_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR FormatFeatureFlags2 = 1 << 49
	// FORMAT_FEATURE_2_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR wraps VK_FORMAT_FEATURE_2_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR.
	FORMAT_FEATURE_2_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR FormatFeatureFlags2 = 1 << 50
)

func (e FormatFeatureFlags2) String() string {
	return fmt.Sprintf("VkFormatFeatureFlags2(%b)", e)
}

// FrameBoundaryFlagsEXT wraps the bitmask VkFrameBoundaryFlagsEXT.
type FrameBoundaryFlagsEXT int32

const (
	// FRAME_BOUNDARY_FRAME_END_BIT_EXT wraps VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT.
	FRAME_BOUNDARY_FRAME_END_BIT_EXT FrameBoundaryFlagsEXT = 1 << 0
)

func (e FrameBoundaryFlagsEXT) String() string {
	return fmt.Sprintf("VkFrameBoundaryFlagsEXT(%b)", e)
}

// FramebufferCreateFlags wraps the bitmask VkFramebufferCreateFlags.
type FramebufferCreateFlags int32

const (
	// FRAMEBUFFER_CREATE_IMAGELESS_BIT wraps VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT.
	FRAMEBUFFER_CREATE_IMAGELESS_BIT FramebufferCreateFlags = 1 << 0
	// FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR wraps VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR.
	FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR FramebufferCreateFlags = FRAMEBUFFER_CREATE_IMAGELESS_BIT
)

func (e FramebufferCreateFlags) String() string {
	return fmt.Sprintf("VkFramebufferCreateFlags(%b)", e)
}

// GeometryFlagsKHR wraps the bitmask VkGeometryFlagsKHR.
type GeometryFlagsKHR int32

// GeometryFlagsNV wraps the bitmask VkGeometryFlagsNV. An alias for GeometryFlagsKHR.
type GeometryFlagsNV = GeometryFlagsKHR

const (
	// GEOMETRY_OPAQUE_BIT_KHR wraps VK_GEOMETRY_OPAQUE_BIT_KHR.
	GEOMETRY_OPAQUE_BIT_KHR GeometryFlagsKHR = 1 << 0
	// GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR wraps VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR.
	GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR GeometryFlagsKHR = 1 << 1
	// GEOMETRY_OPAQUE_BIT_NV wraps VK_GEOMETRY_OPAQUE_BIT_NV.
	GEOMETRY_OPAQUE_BIT_NV GeometryFlagsKHR = GEOMETRY_OPAQUE_BIT_KHR
	// GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV wraps VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV.
	GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV GeometryFlagsKHR = GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR
)

func (e GeometryFlagsKHR) String() string {
	return fmt.Sprintf("VkGeometryFlagsKHR(%b)", e)
}

// GeometryInstanceFlagsKHR wraps the bitmask VkGeometryInstanceFlagsKHR.
type GeometryInstanceFlagsKHR int32

// GeometryInstanceFlagsNV wraps the bitmask VkGeometryInstanceFlagsNV. An alias for GeometryInstanceFlagsKHR.
type GeometryInstanceFlagsNV = GeometryInstanceFlagsKHR

const (
	// GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR wraps VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR.
	GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR GeometryInstanceFlagsKHR = 1 << 0
	// GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR wraps VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR.
	GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR GeometryInstanceFlagsKHR = 1 << 1
	// GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR wraps VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR.
	GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR GeometryInstanceFlagsKHR = 1 << 2
	// GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR wraps VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR.
	GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR GeometryInstanceFlagsKHR = 1 << 3
	// GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR wraps VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR.
	GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR GeometryInstanceFlagsKHR = GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR
	// GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV wraps VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV.
	GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV GeometryInstanceFlagsKHR = GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR
	// GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV wraps VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV.
	GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV GeometryInstanceFlagsKHR = GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR
	// GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV wraps VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV.
	GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV GeometryInstanceFlagsKHR = GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR
	// GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV wraps VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV.
	GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV GeometryInstanceFlagsKHR = GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR
	// GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_BIT_EXT wraps VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_BIT_EXT.
	GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_BIT_EXT GeometryInstanceFlagsKHR = 1 << 4
	// GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT wraps VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT.
	GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT GeometryInstanceFlagsKHR = GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_BIT_EXT
	// GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_BIT_EXT wraps VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_BIT_EXT.
	GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_BIT_EXT GeometryInstanceFlagsKHR = 1 << 5
	// GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT wraps VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT.
	GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT GeometryInstanceFlagsKHR = GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_BIT_EXT
)

func (e GeometryInstanceFlagsKHR) String() string {
	return fmt.Sprintf("VkGeometryInstanceFlagsKHR(%b)", e)
}

// GraphicsPipelineLibraryFlagsEXT wraps the bitmask VkGraphicsPipelineLibraryFlagsEXT.
type GraphicsPipelineLibraryFlagsEXT int32

const (
	// GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT wraps VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT.
	GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT GraphicsPipelineLibraryFlagsEXT = 1 << 0
	// GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT wraps VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT.
	GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT GraphicsPipelineLibraryFlagsEXT = 1 << 1
	// GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT wraps VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT.
	GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT GraphicsPipelineLibraryFlagsEXT = 1 << 2
	// GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT wraps VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT.
	GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT GraphicsPipelineLibraryFlagsEXT = 1 << 3
)

func (e GraphicsPipelineLibraryFlagsEXT) String() string {
	return fmt.Sprintf("VkGraphicsPipelineLibraryFlagsEXT(%b)", e)
}

// HeadlessSurfaceCreateFlagsEXT wraps the bitmask VkHeadlessSurfaceCreateFlagsEXT.
type HeadlessSurfaceCreateFlagsEXT int32

func (e HeadlessSurfaceCreateFlagsEXT) String() string {
	return fmt.Sprintf("VkHeadlessSurfaceCreateFlagsEXT(%b)", e)
}

// HostImageCopyFlags wraps the bitmask VkHostImageCopyFlags.
type HostImageCopyFlags int32

// HostImageCopyFlagsEXT wraps the bitmask VkHostImageCopyFlagsEXT. An alias for HostImageCopyFlags.
type HostImageCopyFlagsEXT = HostImageCopyFlags

const (
	// HOST_IMAGE_COPY_MEMCPY_BIT wraps VK_HOST_IMAGE_COPY_MEMCPY_BIT.
	HOST_IMAGE_COPY_MEMCPY_BIT HostImageCopyFlags = 1 << 0
	// HOST_IMAGE_COPY_MEMCPY wraps VK_HOST_IMAGE_COPY_MEMCPY.
	//
	// Deprecated: Use HOST_IMAGE_COPY_MEMCPY_BIT instead.
	HOST_IMAGE_COPY_MEMCPY HostImageCopyFlags = HOST_IMAGE_COPY_MEMCPY_BIT
	// HOST_IMAGE_COPY_MEMCPY_BIT_EXT wraps VK_HOST_IMAGE_COPY_MEMCPY_BIT_EXT.
	HOST_IMAGE_COPY_MEMCPY_BIT_EXT HostImageCopyFlags = HOST_IMAGE_COPY_MEMCPY_BIT
	// HOST_IMAGE_COPY_MEMCPY_EXT wraps VK_HOST_IMAGE_COPY_MEMCPY_EXT.
	HOST_IMAGE_COPY_MEMCPY_EXT HostImageCopyFlags = HOST_IMAGE_COPY_MEMCPY_BIT
)

func (e HostImageCopyFlags) String() string {
	return fmt.Sprintf("VkHostImageCopyFlags(%b)", e)
}

// ImageAspectFlags wraps the bitmask VkImageAspectFlags.
type ImageAspectFlags int32

const (
	// IMAGE_ASPECT_COLOR_BIT wraps VK_IMAGE_ASPECT_COLOR_BIT.
	IMAGE_ASPECT_COLOR_BIT ImageAspectFlags = 1 << 0
	// IMAGE_ASPECT_DEPTH_BIT wraps VK_IMAGE_ASPECT_DEPTH_BIT.
	IMAGE_ASPECT_DEPTH_BIT ImageAspectFlags = 1 << 1
	// IMAGE_ASPECT_STENCIL_BIT wraps VK_IMAGE_ASPECT_STENCIL_BIT.
	IMAGE_ASPECT_STENCIL_BIT ImageAspectFlags = 1 << 2
	// IMAGE_ASPECT_METADATA_BIT wraps VK_IMAGE_ASPECT_METADATA_BIT.
	IMAGE_ASPECT_METADATA_BIT ImageAspectFlags = 1 << 3
	// IMAGE_ASPECT_PLANE_0_BIT wraps VK_IMAGE_ASPECT_PLANE_0_BIT.
	IMAGE_ASPECT_PLANE_0_BIT ImageAspectFlags = 1 << 4
	// IMAGE_ASPECT_PLANE_1_BIT wraps VK_IMAGE_ASPECT_PLANE_1_BIT.
	IMAGE_ASPECT_PLANE_1_BIT ImageAspectFlags = 1 << 5
	// IMAGE_ASPECT_PLANE_2_BIT wraps VK_IMAGE_ASPECT_PLANE_2_BIT.
	IMAGE_ASPECT_PLANE_2_BIT ImageAspectFlags = 1 << 6
	// IMAGE_ASPECT_NONE wraps VK_IMAGE_ASPECT_NONE.
	IMAGE_ASPECT_NONE ImageAspectFlags = 0
	// IMAGE_ASPECT_PLANE_0_BIT_KHR wraps VK_IMAGE_ASPECT_PLANE_0_BIT_KHR.
	IMAGE_ASPECT_PLANE_0_BIT_KHR ImageAspectFlags = IMAGE_ASPECT_PLANE_0_BIT
	// IMAGE_ASPECT_PLANE_1_BIT_KHR wraps VK_IMAGE_ASPECT_PLANE_1_BIT_KHR.
	IMAGE_ASPECT_PLANE_1_BIT_KHR ImageAspectFlags = IMAGE_ASPECT_PLANE_1_BIT
	// IMAGE_ASPECT_PLANE_2_BIT_KHR wraps VK_IMAGE_ASPECT_PLANE_2_BIT_KHR.
	IMAGE_ASPECT_PLANE_2_BIT_KHR ImageAspectFlags = IMAGE_ASPECT_PLANE_2_BIT
	// IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT wraps VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT.
	IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT ImageAspectFlags = 1 << 7
	// IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT wraps VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT.
	IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT ImageAspectFlags = 1 << 8
	// IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT wraps VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT.
	IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT ImageAspectFlags = 1 << 9
	// IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT wraps VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT.
	IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT ImageAspectFlags = 1 << 10
	// IMAGE_ASPECT_NONE_KHR wraps VK_IMAGE_ASPECT_NONE_KHR.
	IMAGE_ASPECT_NONE_KHR ImageAspectFlags = IMAGE_ASPECT_NONE
)

func (e ImageAspectFlags) String() string {
	return fmt.Sprintf("VkImageAspectFlags(%b)", e)
}

// ImageCompressionFixedRateFlagsEXT wraps the bitmask VkImageCompressionFixedRateFlagsEXT.
type ImageCompressionFixedRateFlagsEXT int32

const (
	// IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT ImageCompressionFixedRateFlagsEXT = 0
	// IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 0
	// IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 1
	// IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 2
	// IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 3
	// IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 4
	// IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 5
	// IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 6
	// IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 7
	// IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 8
	// IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 9
	// IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 10
	// IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 11
	// IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 12
	// IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 13
	// IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 14
	// IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 15
	// IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 16
	// IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 17
	// IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 18
	// IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 19
	// IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 20
	// IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 21
	// IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 22
	// IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT ImageCompressionFixedRateFlagsEXT = 1 << 23
)

func (e ImageCompressionFixedRateFlagsEXT) String() string {
	return fmt.Sprintf("VkImageCompressionFixedRateFlagsEXT(%b)", e)
}

// ImageCompressionFlagsEXT wraps the bitmask VkImageCompressionFlagsEXT.
type ImageCompressionFlagsEXT int32

const (
	// IMAGE_COMPRESSION_DEFAULT_EXT wraps VK_IMAGE_COMPRESSION_DEFAULT_EXT.
	IMAGE_COMPRESSION_DEFAULT_EXT ImageCompressionFlagsEXT = 0
	// IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT ImageCompressionFlagsEXT = 1 << 0
	// IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT wraps VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT.
	IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT ImageCompressionFlagsEXT = 1 << 1
	// IMAGE_COMPRESSION_DISABLED_EXT wraps VK_IMAGE_COMPRESSION_DISABLED_EXT.
	IMAGE_COMPRESSION_DISABLED_EXT ImageCompressionFlagsEXT = 1 << 2
)

func (e ImageCompressionFlagsEXT) String() string {
	return fmt.Sprintf("VkImageCompressionFlagsEXT(%b)", e)
}

// ImageCreateFlags wraps the bitmask VkImageCreateFlags.
type ImageCreateFlags int32

const (
	// IMAGE_CREATE_SPARSE_BINDING_BIT wraps VK_IMAGE_CREATE_SPARSE_BINDING_BIT.
	IMAGE_CREATE_SPARSE_BINDING_BIT ImageCreateFlags = 1 << 0
	// IMAGE_CREATE_SPARSE_RESIDENCY_BIT wraps VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT.
	IMAGE_CREATE_SPARSE_RESIDENCY_BIT ImageCreateFlags = 1 << 1
	// IMAGE_CREATE_SPARSE_ALIASED_BIT wraps VK_IMAGE_CREATE_SPARSE_ALIASED_BIT.
	IMAGE_CREATE_SPARSE_ALIASED_BIT ImageCreateFlags = 1 << 2
	// IMAGE_CREATE_MUTABLE_FORMAT_BIT wraps VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT.
	IMAGE_CREATE_MUTABLE_FORMAT_BIT ImageCreateFlags = 1 << 3
	// IMAGE_CREATE_CUBE_COMPATIBLE_BIT wraps VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT.
	IMAGE_CREATE_CUBE_COMPATIBLE_BIT ImageCreateFlags = 1 << 4
	// IMAGE_CREATE_ALIAS_BIT wraps VK_IMAGE_CREATE_ALIAS_BIT.
	IMAGE_CREATE_ALIAS_BIT ImageCreateFlags = 1 << 10
	// IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT wraps VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT.
	IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT ImageCreateFlags = 1 << 6
	// IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT wraps VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT.
	IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT ImageCreateFlags = 1 << 5
	// IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT wraps VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT.
	IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT ImageCreateFlags = 1 << 7
	// IMAGE_CREATE_EXTENDED_USAGE_BIT wraps VK_IMAGE_CREATE_EXTENDED_USAGE_BIT.
	IMAGE_CREATE_EXTENDED_USAGE_BIT ImageCreateFlags = 1 << 8
	// IMAGE_CREATE_PROTECTED_BIT wraps VK_IMAGE_CREATE_PROTECTED_BIT.
	IMAGE_CREATE_PROTECTED_BIT ImageCreateFlags = 1 << 11
	// IMAGE_CREATE_DISJOINT_BIT wraps VK_IMAGE_CREATE_DISJOINT_BIT.
	IMAGE_CREATE_DISJOINT_BIT ImageCreateFlags = 1 << 9
	// IMAGE_CREATE_CORNER_SAMPLED_BIT_NV wraps VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV.
	IMAGE_CREATE_CORNER_SAMPLED_BIT_NV ImageCreateFlags = 1 << 13
	// IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR wraps VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR.
	IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR ImageCreateFlags = IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT
	// IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR wraps VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR.
	IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR ImageCreateFlags = IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT
	// IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR wraps VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR.
	IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR ImageCreateFlags = IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT
	// IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR wraps VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR.
	IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR ImageCreateFlags = IMAGE_CREATE_EXTENDED_USAGE_BIT
	// IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT wraps VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT.
	IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT ImageCreateFlags = 1 << 12
	// IMAGE_CREATE_DISJOINT_BIT_KHR wraps VK_IMAGE_CREATE_DISJOINT_BIT_KHR.
	IMAGE_CREATE_DISJOINT_BIT_KHR ImageCreateFlags = IMAGE_CREATE_DISJOINT_BIT
	// IMAGE_CREATE_ALIAS_BIT_KHR wraps VK_IMAGE_CREATE_ALIAS_BIT_KHR.
	IMAGE_CREATE_ALIAS_BIT_KHR ImageCreateFlags = IMAGE_CREATE_ALIAS_BIT
	// IMAGE_CREATE_SUBSAMPLED_BIT_EXT wraps VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT.
	IMAGE_CREATE_SUBSAMPLED_BIT_EXT ImageCreateFlags = 1 << 14
	// IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT wraps VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT.
	IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT ImageCreateFlags = 1 << 16
	// IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT wraps VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT.
	IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT ImageCreateFlags = 1 << 18
	// IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT wraps VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT.
	IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT ImageCreateFlags = 1 << 17
	// IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM wraps VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM.
	IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM ImageCreateFlags = IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_EXT
	// IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR wraps VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR.
	IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR ImageCreateFlags = 1 << 20
	// IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_EXT wraps VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_EXT.
	IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_EXT ImageCreateFlags = 1 << 15
)

func (e ImageCreateFlags) String() string {
	return fmt.Sprintf("VkImageCreateFlags(%b)", e)
}

// ImageUsageFlags wraps the bitmask VkImageUsageFlags.
type ImageUsageFlags int32

const (
	// IMAGE_USAGE_TRANSFER_SRC_BIT wraps VK_IMAGE_USAGE_TRANSFER_SRC_BIT.
	IMAGE_USAGE_TRANSFER_SRC_BIT ImageUsageFlags = 1 << 0
	// IMAGE_USAGE_TRANSFER_DST_BIT wraps VK_IMAGE_USAGE_TRANSFER_DST_BIT.
	IMAGE_USAGE_TRANSFER_DST_BIT ImageUsageFlags = 1 << 1
	// IMAGE_USAGE_SAMPLED_BIT wraps VK_IMAGE_USAGE_SAMPLED_BIT.
	IMAGE_USAGE_SAMPLED_BIT ImageUsageFlags = 1 << 2
	// IMAGE_USAGE_STORAGE_BIT wraps VK_IMAGE_USAGE_STORAGE_BIT.
	IMAGE_USAGE_STORAGE_BIT ImageUsageFlags = 1 << 3
	// IMAGE_USAGE_COLOR_ATTACHMENT_BIT wraps VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT.
	IMAGE_USAGE_COLOR_ATTACHMENT_BIT ImageUsageFlags = 1 << 4
	// IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT wraps VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT.
	IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT ImageUsageFlags = 1 << 5
	// IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT wraps VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT.
	IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT ImageUsageFlags = 1 << 6
	// IMAGE_USAGE_INPUT_ATTACHMENT_BIT wraps VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT.
	IMAGE_USAGE_INPUT_ATTACHMENT_BIT ImageUsageFlags = 1 << 7
	// IMAGE_USAGE_HOST_TRANSFER_BIT wraps VK_IMAGE_USAGE_HOST_TRANSFER_BIT.
	IMAGE_USAGE_HOST_TRANSFER_BIT ImageUsageFlags = 1 << 22
	// IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR wraps VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR.
	IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR ImageUsageFlags = 1 << 10
	// IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR wraps VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR.
	IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR ImageUsageFlags = 1 << 11
	// IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR wraps VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR.
	IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR ImageUsageFlags = 1 << 12
	// IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV wraps VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV.
	IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV ImageUsageFlags = IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR
	// IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT wraps VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT.
	IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT ImageUsageFlags = 1 << 9
	// IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR wraps VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR.
	IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR ImageUsageFlags = 1 << 8
	// IMAGE_USAGE_HOST_TRANSFER_BIT_EXT wraps VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT.
	IMAGE_USAGE_HOST_TRANSFER_BIT_EXT ImageUsageFlags = IMAGE_USAGE_HOST_TRANSFER_BIT
	// IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR wraps VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR.
	IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR ImageUsageFlags = 1 << 13
	// IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR wraps VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR.
	IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR ImageUsageFlags = 1 << 14
	// IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR wraps VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR.
	IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR ImageUsageFlags = 1 << 15
	// IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT wraps VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT.
	IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT ImageUsageFlags = 1 << 19
	// IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI wraps VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI.
	IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI ImageUsageFlags = 1 << 18
	// IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM wraps VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM.
	IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM ImageUsageFlags = 1 << 20
	// IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM wraps VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM.
	IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM ImageUsageFlags = 1 << 21
	// IMAGE_USAGE_TENSOR_ALIASING_BIT_ARM wraps VK_IMAGE_USAGE_TENSOR_ALIASING_BIT_ARM.
	IMAGE_USAGE_TENSOR_ALIASING_BIT_ARM ImageUsageFlags = 1 << 23
	// IMAGE_USAGE_TILE_MEMORY_BIT_QCOM wraps VK_IMAGE_USAGE_TILE_MEMORY_BIT_QCOM.
	IMAGE_USAGE_TILE_MEMORY_BIT_QCOM ImageUsageFlags = 1 << 27
	// IMAGE_USAGE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR wraps VK_IMAGE_USAGE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR.
	IMAGE_USAGE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR ImageUsageFlags = 1 << 25
	// IMAGE_USAGE_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR wraps VK_IMAGE_USAGE_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR.
	IMAGE_USAGE_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR ImageUsageFlags = 1 << 26
)

func (e ImageUsageFlags) String() string {
	return fmt.Sprintf("VkImageUsageFlags(%b)", e)
}

// ImageViewCreateFlags wraps the bitmask VkImageViewCreateFlags.
type ImageViewCreateFlags int32

const (
	// IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT wraps VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT.
	IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT ImageViewCreateFlags = 1 << 0
	// IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT wraps VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT.
	IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT ImageViewCreateFlags = 1 << 2
	// IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT wraps VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT.
	IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT ImageViewCreateFlags = 1 << 1
)

func (e ImageViewCreateFlags) String() string {
	return fmt.Sprintf("VkImageViewCreateFlags(%b)", e)
}

// IndirectCommandsInputModeFlagsEXT wraps the bitmask VkIndirectCommandsInputModeFlagsEXT.
type IndirectCommandsInputModeFlagsEXT int32

const (
	// INDIRECT_COMMANDS_INPUT_MODE_VULKAN_INDEX_BUFFER_EXT wraps VK_INDIRECT_COMMANDS_INPUT_MODE_VULKAN_INDEX_BUFFER_EXT.
	INDIRECT_COMMANDS_INPUT_MODE_VULKAN_INDEX_BUFFER_EXT IndirectCommandsInputModeFlagsEXT = 1 << 0
	// INDIRECT_COMMANDS_INPUT_MODE_DXGI_INDEX_BUFFER_EXT wraps VK_INDIRECT_COMMANDS_INPUT_MODE_DXGI_INDEX_BUFFER_EXT.
	INDIRECT_COMMANDS_INPUT_MODE_DXGI_INDEX_BUFFER_EXT IndirectCommandsInputModeFlagsEXT = 1 << 1
)

func (e IndirectCommandsInputModeFlagsEXT) String() string {
	return fmt.Sprintf("VkIndirectCommandsInputModeFlagsEXT(%b)", e)
}

// IndirectCommandsLayoutUsageFlagsEXT wraps the bitmask VkIndirectCommandsLayoutUsageFlagsEXT.
type IndirectCommandsLayoutUsageFlagsEXT int32

const (
	// INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_EXT wraps VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_EXT.
	INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_EXT IndirectCommandsLayoutUsageFlagsEXT = 1 << 0
	// INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_EXT wraps VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_EXT.
	INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_EXT IndirectCommandsLayoutUsageFlagsEXT = 1 << 1
)

func (e IndirectCommandsLayoutUsageFlagsEXT) String() string {
	return fmt.Sprintf("VkIndirectCommandsLayoutUsageFlagsEXT(%b)", e)
}

// IndirectCommandsLayoutUsageFlagsNV wraps the bitmask VkIndirectCommandsLayoutUsageFlagsNV.
type IndirectCommandsLayoutUsageFlagsNV int32

const (
	// INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV wraps VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV.
	INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV IndirectCommandsLayoutUsageFlagsNV = 1 << 0
	// INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV wraps VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV.
	INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV IndirectCommandsLayoutUsageFlagsNV = 1 << 1
	// INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV wraps VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV.
	INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV IndirectCommandsLayoutUsageFlagsNV = 1 << 2
)

func (e IndirectCommandsLayoutUsageFlagsNV) String() string {
	return fmt.Sprintf("VkIndirectCommandsLayoutUsageFlagsNV(%b)", e)
}

// IndirectStateFlagsNV wraps the bitmask VkIndirectStateFlagsNV.
type IndirectStateFlagsNV int32

const (
	// INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV wraps VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV.
	INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV IndirectStateFlagsNV = 1 << 0
)

func (e IndirectStateFlagsNV) String() string {
	return fmt.Sprintf("VkIndirectStateFlagsNV(%b)", e)
}

// InstanceCreateFlags wraps the bitmask VkInstanceCreateFlags.
type InstanceCreateFlags int32

const (
	// INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR wraps VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR.
	INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR InstanceCreateFlags = 1 << 0
)

func (e InstanceCreateFlags) String() string {
	return fmt.Sprintf("VkInstanceCreateFlags(%b)", e)
}

// MemoryAllocateFlags wraps the bitmask VkMemoryAllocateFlags.
type MemoryAllocateFlags int32

// MemoryAllocateFlagsKHR wraps the bitmask VkMemoryAllocateFlagsKHR. An alias for MemoryAllocateFlags.
type MemoryAllocateFlagsKHR = MemoryAllocateFlags

const (
	// MEMORY_ALLOCATE_DEVICE_MASK_BIT wraps VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT.
	MEMORY_ALLOCATE_DEVICE_MASK_BIT MemoryAllocateFlags = 1 << 0
	// MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT wraps VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT.
	MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT MemoryAllocateFlags = 1 << 1
	// MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT wraps VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT.
	MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT MemoryAllocateFlags = 1 << 2
	// MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR wraps VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR.
	MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR MemoryAllocateFlags = MEMORY_ALLOCATE_DEVICE_MASK_BIT
	// MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR wraps VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR.
	MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR MemoryAllocateFlags = MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT
	// MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR wraps VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR.
	MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR MemoryAllocateFlags = MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT
	// MEMORY_ALLOCATE_ZERO_INITIALIZE_BIT_EXT wraps VK_MEMORY_ALLOCATE_ZERO_INITIALIZE_BIT_EXT.
	MEMORY_ALLOCATE_ZERO_INITIALIZE_BIT_EXT MemoryAllocateFlags = 1 << 3
)

func (e MemoryAllocateFlags) String() string {
	return fmt.Sprintf("VkMemoryAllocateFlags(%b)", e)
}

// MemoryDecompressionMethodFlagsNV wraps the bitmask VkMemoryDecompressionMethodFlagsNV.
type MemoryDecompressionMethodFlagsNV int64

const (
	// MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV wraps VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV.
	MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV MemoryDecompressionMethodFlagsNV = 1 << 0
)

func (e MemoryDecompressionMethodFlagsNV) String() string {
	return fmt.Sprintf("VkMemoryDecompressionMethodFlagsNV(%b)", e)
}

// MemoryHeapFlags wraps the bitmask VkMemoryHeapFlags.
type MemoryHeapFlags int32

const (
	// MEMORY_HEAP_DEVICE_LOCAL_BIT wraps VK_MEMORY_HEAP_DEVICE_LOCAL_BIT.
	MEMORY_HEAP_DEVICE_LOCAL_BIT MemoryHeapFlags = 1 << 0
	// MEMORY_HEAP_MULTI_INSTANCE_BIT wraps VK_MEMORY_HEAP_MULTI_INSTANCE_BIT.
	MEMORY_HEAP_MULTI_INSTANCE_BIT MemoryHeapFlags = 1 << 1
	// MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR wraps VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR.
	MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR MemoryHeapFlags = MEMORY_HEAP_MULTI_INSTANCE_BIT
	// MEMORY_HEAP_TILE_MEMORY_BIT_QCOM wraps VK_MEMORY_HEAP_TILE_MEMORY_BIT_QCOM.
	MEMORY_HEAP_TILE_MEMORY_BIT_QCOM MemoryHeapFlags = 1 << 3
)

func (e MemoryHeapFlags) String() string {
	return fmt.Sprintf("VkMemoryHeapFlags(%b)", e)
}

// MemoryMapFlags wraps the bitmask VkMemoryMapFlags.
type MemoryMapFlags int32

const (
	// MEMORY_MAP_PLACED_BIT_EXT wraps VK_MEMORY_MAP_PLACED_BIT_EXT.
	MEMORY_MAP_PLACED_BIT_EXT MemoryMapFlags = 1 << 0
)

func (e MemoryMapFlags) String() string {
	return fmt.Sprintf("VkMemoryMapFlags(%b)", e)
}

// MemoryPropertyFlags wraps the bitmask VkMemoryPropertyFlags.
type MemoryPropertyFlags int32

const (
	// MEMORY_PROPERTY_DEVICE_LOCAL_BIT wraps VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT.
	MEMORY_PROPERTY_DEVICE_LOCAL_BIT MemoryPropertyFlags = 1 << 0
	// MEMORY_PROPERTY_HOST_VISIBLE_BIT wraps VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT.
	MEMORY_PROPERTY_HOST_VISIBLE_BIT MemoryPropertyFlags = 1 << 1
	// MEMORY_PROPERTY_HOST_COHERENT_BIT wraps VK_MEMORY_PROPERTY_HOST_COHERENT_BIT.
	MEMORY_PROPERTY_HOST_COHERENT_BIT MemoryPropertyFlags = 1 << 2
	// MEMORY_PROPERTY_HOST_CACHED_BIT wraps VK_MEMORY_PROPERTY_HOST_CACHED_BIT.
	MEMORY_PROPERTY_HOST_CACHED_BIT MemoryPropertyFlags = 1 << 3
	// MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT wraps VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT.
	MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT MemoryPropertyFlags = 1 << 4
	// MEMORY_PROPERTY_PROTECTED_BIT wraps VK_MEMORY_PROPERTY_PROTECTED_BIT.
	MEMORY_PROPERTY_PROTECTED_BIT MemoryPropertyFlags = 1 << 5
	// MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD wraps VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD.
	MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD MemoryPropertyFlags = 1 << 6
	// MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD wraps VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD.
	MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD MemoryPropertyFlags = 1 << 7
	// MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV wraps VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV.
	MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV MemoryPropertyFlags = 1 << 8
)

func (e MemoryPropertyFlags) String() string {
	return fmt.Sprintf("VkMemoryPropertyFlags(%b)", e)
}

// MemoryUnmapFlags wraps the bitmask VkMemoryUnmapFlags.
type MemoryUnmapFlags int32

// MemoryUnmapFlagsKHR wraps the bitmask VkMemoryUnmapFlagsKHR. An alias for MemoryUnmapFlags.
type MemoryUnmapFlagsKHR = MemoryUnmapFlags

const (
	// MEMORY_UNMAP_RESERVE_BIT_EXT wraps VK_MEMORY_UNMAP_RESERVE_BIT_EXT.
	MEMORY_UNMAP_RESERVE_BIT_EXT MemoryUnmapFlags = 1 << 0
)

func (e MemoryUnmapFlags) String() string {
	return fmt.Sprintf("VkMemoryUnmapFlags(%b)", e)
}

// MicromapCreateFlagsEXT wraps the bitmask VkMicromapCreateFlagsEXT.
type MicromapCreateFlagsEXT int32

const (
	// MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT wraps VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT.
	MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT MicromapCreateFlagsEXT = 1 << 0
)

func (e MicromapCreateFlagsEXT) String() string {
	return fmt.Sprintf("VkMicromapCreateFlagsEXT(%b)", e)
}

// OpticalFlowExecuteFlagsNV wraps the bitmask VkOpticalFlowExecuteFlagsNV.
type OpticalFlowExecuteFlagsNV int32

const (
	// OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV wraps VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV.
	OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV OpticalFlowExecuteFlagsNV = 1 << 0
)

func (e OpticalFlowExecuteFlagsNV) String() string {
	return fmt.Sprintf("VkOpticalFlowExecuteFlagsNV(%b)", e)
}

// OpticalFlowGridSizeFlagsNV wraps the bitmask VkOpticalFlowGridSizeFlagsNV.
type OpticalFlowGridSizeFlagsNV int32

const (
	// OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV wraps VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV.
	OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV OpticalFlowGridSizeFlagsNV = 0
	// OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV wraps VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV.
	OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV OpticalFlowGridSizeFlagsNV = 1 << 0
	// OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV wraps VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV.
	OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV OpticalFlowGridSizeFlagsNV = 1 << 1
	// OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV wraps VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV.
	OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV OpticalFlowGridSizeFlagsNV = 1 << 2
	// OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV wraps VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV.
	OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV OpticalFlowGridSizeFlagsNV = 1 << 3
)

func (e OpticalFlowGridSizeFlagsNV) String() string {
	return fmt.Sprintf("VkOpticalFlowGridSizeFlagsNV(%b)", e)
}

// OpticalFlowSessionCreateFlagsNV wraps the bitmask VkOpticalFlowSessionCreateFlagsNV.
type OpticalFlowSessionCreateFlagsNV int32

const (
	// OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV wraps VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV.
	OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV OpticalFlowSessionCreateFlagsNV = 1 << 0
	// OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV wraps VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV.
	OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV OpticalFlowSessionCreateFlagsNV = 1 << 1
	// OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV wraps VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV.
	OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV OpticalFlowSessionCreateFlagsNV = 1 << 2
	// OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV wraps VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV.
	OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV OpticalFlowSessionCreateFlagsNV = 1 << 3
	// OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV wraps VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV.
	OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV OpticalFlowSessionCreateFlagsNV = 1 << 4
)

func (e OpticalFlowSessionCreateFlagsNV) String() string {
	return fmt.Sprintf("VkOpticalFlowSessionCreateFlagsNV(%b)", e)
}

// OpticalFlowUsageFlagsNV wraps the bitmask VkOpticalFlowUsageFlagsNV.
type OpticalFlowUsageFlagsNV int32

const (
	// OPTICAL_FLOW_USAGE_UNKNOWN_NV wraps VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV.
	OPTICAL_FLOW_USAGE_UNKNOWN_NV OpticalFlowUsageFlagsNV = 0
	// OPTICAL_FLOW_USAGE_INPUT_BIT_NV wraps VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV.
	OPTICAL_FLOW_USAGE_INPUT_BIT_NV OpticalFlowUsageFlagsNV = 1 << 0
	// OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV wraps VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV.
	OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV OpticalFlowUsageFlagsNV = 1 << 1
	// OPTICAL_FLOW_USAGE_HINT_BIT_NV wraps VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV.
	OPTICAL_FLOW_USAGE_HINT_BIT_NV OpticalFlowUsageFlagsNV = 1 << 2
	// OPTICAL_FLOW_USAGE_COST_BIT_NV wraps VK_OPTICAL_FLOW_USAGE_COST_BIT_NV.
	OPTICAL_FLOW_USAGE_COST_BIT_NV OpticalFlowUsageFlagsNV = 1 << 3
	// OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV wraps VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV.
	OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV OpticalFlowUsageFlagsNV = 1 << 4
)

func (e OpticalFlowUsageFlagsNV) String() string {
	return fmt.Sprintf("VkOpticalFlowUsageFlagsNV(%b)", e)
}

// PartitionedAccelerationStructureInstanceFlagsNV wraps the bitmask VkPartitionedAccelerationStructureInstanceFlagsNV.
type PartitionedAccelerationStructureInstanceFlagsNV int32

const (
	// PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FACING_CULL_DISABLE_BIT_NV wraps VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FACING_CULL_DISABLE_BIT_NV.
	PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FACING_CULL_DISABLE_BIT_NV PartitionedAccelerationStructureInstanceFlagsNV = 1 << 0
	// PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FLIP_FACING_BIT_NV wraps VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FLIP_FACING_BIT_NV.
	PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FLIP_FACING_BIT_NV PartitionedAccelerationStructureInstanceFlagsNV = 1 << 1
	// PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_OPAQUE_BIT_NV wraps VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_OPAQUE_BIT_NV.
	PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_OPAQUE_BIT_NV PartitionedAccelerationStructureInstanceFlagsNV = 1 << 2
	// PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_NO_OPAQUE_BIT_NV wraps VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_NO_OPAQUE_BIT_NV.
	PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_NO_OPAQUE_BIT_NV PartitionedAccelerationStructureInstanceFlagsNV = 1 << 3
	// PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_ENABLE_EXPLICIT_BOUNDING_BOX_NV wraps VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_ENABLE_EXPLICIT_BOUNDING_BOX_NV.
	PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_ENABLE_EXPLICIT_BOUNDING_BOX_NV PartitionedAccelerationStructureInstanceFlagsNV = 1 << 4
)

func (e PartitionedAccelerationStructureInstanceFlagsNV) String() string {
	return fmt.Sprintf("VkPartitionedAccelerationStructureInstanceFlagsNV(%b)", e)
}

// PeerMemoryFeatureFlags wraps the bitmask VkPeerMemoryFeatureFlags.
type PeerMemoryFeatureFlags int32

// PeerMemoryFeatureFlagsKHR wraps the bitmask VkPeerMemoryFeatureFlagsKHR. An alias for PeerMemoryFeatureFlags.
type PeerMemoryFeatureFlagsKHR = PeerMemoryFeatureFlags

const (
	// PEER_MEMORY_FEATURE_COPY_SRC_BIT wraps VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT.
	PEER_MEMORY_FEATURE_COPY_SRC_BIT PeerMemoryFeatureFlags = 1 << 0
	// PEER_MEMORY_FEATURE_COPY_DST_BIT wraps VK_PEER_MEMORY_FEATURE_COPY_DST_BIT.
	PEER_MEMORY_FEATURE_COPY_DST_BIT PeerMemoryFeatureFlags = 1 << 1
	// PEER_MEMORY_FEATURE_GENERIC_SRC_BIT wraps VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT.
	PEER_MEMORY_FEATURE_GENERIC_SRC_BIT PeerMemoryFeatureFlags = 1 << 2
	// PEER_MEMORY_FEATURE_GENERIC_DST_BIT wraps VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT.
	PEER_MEMORY_FEATURE_GENERIC_DST_BIT PeerMemoryFeatureFlags = 1 << 3
	// PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR wraps VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR.
	PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR PeerMemoryFeatureFlags = PEER_MEMORY_FEATURE_COPY_SRC_BIT
	// PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR wraps VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR.
	PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR PeerMemoryFeatureFlags = PEER_MEMORY_FEATURE_COPY_DST_BIT
	// PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR wraps VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR.
	PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR PeerMemoryFeatureFlags = PEER_MEMORY_FEATURE_GENERIC_SRC_BIT
	// PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR wraps VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR.
	PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR PeerMemoryFeatureFlags = PEER_MEMORY_FEATURE_GENERIC_DST_BIT
)

func (e PeerMemoryFeatureFlags) String() string {
	return fmt.Sprintf("VkPeerMemoryFeatureFlags(%b)", e)
}

// PerformanceCounterDescriptionFlagsKHR wraps the bitmask VkPerformanceCounterDescriptionFlagsKHR.
type PerformanceCounterDescriptionFlagsKHR int32

const (
	// PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR wraps VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR.
	PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR PerformanceCounterDescriptionFlagsKHR = 1 << 0
	// PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR wraps VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR.
	//
	// Deprecated: Use PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR instead.
	PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR PerformanceCounterDescriptionFlagsKHR = PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR
	// PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR wraps VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR.
	PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR PerformanceCounterDescriptionFlagsKHR = 1 << 1
	// PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR wraps VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR.
	//
	// Deprecated: Use PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR instead.
	PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR PerformanceCounterDescriptionFlagsKHR = PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR
)

func (e PerformanceCounterDescriptionFlagsKHR) String() string {
	return fmt.Sprintf("VkPerformanceCounterDescriptionFlagsKHR(%b)", e)
}

// PhysicalDeviceSchedulingControlsFlagsARM wraps the bitmask VkPhysicalDeviceSchedulingControlsFlagsARM.
type PhysicalDeviceSchedulingControlsFlagsARM int64

const (
	// PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM wraps VK_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM.
	PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM PhysicalDeviceSchedulingControlsFlagsARM = 1 << 0
)

func (e PhysicalDeviceSchedulingControlsFlagsARM) String() string {
	return fmt.Sprintf("VkPhysicalDeviceSchedulingControlsFlagsARM(%b)", e)
}

// PipelineCacheCreateFlags wraps the bitmask VkPipelineCacheCreateFlags.
type PipelineCacheCreateFlags int32

const (
	// PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT wraps VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT.
	PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT PipelineCacheCreateFlags = 1 << 0
	// PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT wraps VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT.
	PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT PipelineCacheCreateFlags = PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT
	// PIPELINE_CACHE_CREATE_INTERNALLY_SYNCHRONIZED_MERGE_BIT_KHR wraps VK_PIPELINE_CACHE_CREATE_INTERNALLY_SYNCHRONIZED_MERGE_BIT_KHR.
	PIPELINE_CACHE_CREATE_INTERNALLY_SYNCHRONIZED_MERGE_BIT_KHR PipelineCacheCreateFlags = 1 << 3
)

func (e PipelineCacheCreateFlags) String() string {
	return fmt.Sprintf("VkPipelineCacheCreateFlags(%b)", e)
}

// PipelineColorBlendStateCreateFlags wraps the bitmask VkPipelineColorBlendStateCreateFlags.
type PipelineColorBlendStateCreateFlags int32

const (
	// PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM wraps VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM.
	PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM PipelineColorBlendStateCreateFlags = PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT
	// PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT wraps VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT.
	PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT PipelineColorBlendStateCreateFlags = 1 << 0
)

func (e PipelineColorBlendStateCreateFlags) String() string {
	return fmt.Sprintf("VkPipelineColorBlendStateCreateFlags(%b)", e)
}

// PipelineCompilerControlFlagsAMD wraps the bitmask VkPipelineCompilerControlFlagsAMD.
type PipelineCompilerControlFlagsAMD int32

func (e PipelineCompilerControlFlagsAMD) String() string {
	return fmt.Sprintf("VkPipelineCompilerControlFlagsAMD(%b)", e)
}

// PipelineCoverageModulationStateCreateFlagsNV wraps the bitmask VkPipelineCoverageModulationStateCreateFlagsNV.
type PipelineCoverageModulationStateCreateFlagsNV int32

func (e PipelineCoverageModulationStateCreateFlagsNV) String() string {
	return fmt.Sprintf("VkPipelineCoverageModulationStateCreateFlagsNV(%b)", e)
}

// PipelineCoverageReductionStateCreateFlagsNV wraps the bitmask VkPipelineCoverageReductionStateCreateFlagsNV.
type PipelineCoverageReductionStateCreateFlagsNV int32

func (e PipelineCoverageReductionStateCreateFlagsNV) String() string {
	return fmt.Sprintf("VkPipelineCoverageReductionStateCreateFlagsNV(%b)", e)
}

// PipelineCoverageToColorStateCreateFlagsNV wraps the bitmask VkPipelineCoverageToColorStateCreateFlagsNV.
type PipelineCoverageToColorStateCreateFlagsNV int32

func (e PipelineCoverageToColorStateCreateFlagsNV) String() string {
	return fmt.Sprintf("VkPipelineCoverageToColorStateCreateFlagsNV(%b)", e)
}

// PipelineCreateFlags wraps the bitmask VkPipelineCreateFlags.
type PipelineCreateFlags int32

const (
	// PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT wraps VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT.
	PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT PipelineCreateFlags = 1 << 0
	// PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT wraps VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT.
	PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT PipelineCreateFlags = 1 << 1
	// PIPELINE_CREATE_DERIVATIVE_BIT wraps VK_PIPELINE_CREATE_DERIVATIVE_BIT.
	PIPELINE_CREATE_DERIVATIVE_BIT PipelineCreateFlags = 1 << 2
	// PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT wraps VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT.
	PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT PipelineCreateFlags = 1 << 3
	// PIPELINE_CREATE_DISPATCH_BASE_BIT wraps VK_PIPELINE_CREATE_DISPATCH_BASE_BIT.
	PIPELINE_CREATE_DISPATCH_BASE_BIT PipelineCreateFlags = 1 << 4
	// PIPELINE_CREATE_DISPATCH_BASE wraps VK_PIPELINE_CREATE_DISPATCH_BASE.
	PIPELINE_CREATE_DISPATCH_BASE PipelineCreateFlags = PIPELINE_CREATE_DISPATCH_BASE_BIT
	// PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT wraps VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT.
	PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT PipelineCreateFlags = 1 << 8
	// PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT wraps VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT.
	PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT PipelineCreateFlags = 1 << 9
	// PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT wraps VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT.
	PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT PipelineCreateFlags = 1 << 27
	// PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT wraps VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT.
	PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT PipelineCreateFlags = 1 << 30
	// PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR wraps VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR.
	PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR PipelineCreateFlags = PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT
	// PIPELINE_CREATE_DISPATCH_BASE_BIT_KHR wraps VK_PIPELINE_CREATE_DISPATCH_BASE_BIT_KHR.
	PIPELINE_CREATE_DISPATCH_BASE_BIT_KHR PipelineCreateFlags = PIPELINE_CREATE_DISPATCH_BASE_BIT
	// PIPELINE_CREATE_DISPATCH_BASE_KHR wraps VK_PIPELINE_CREATE_DISPATCH_BASE_KHR.
	PIPELINE_CREATE_DISPATCH_BASE_KHR PipelineCreateFlags = PIPELINE_CREATE_DISPATCH_BASE_BIT
	// PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR wraps VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR.
	PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR PipelineCreateFlags = 1 << 14
	// PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR wraps VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR.
	PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR PipelineCreateFlags = 1 << 15
	// PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR wraps VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR.
	PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR PipelineCreateFlags = 1 << 16
	// PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR wraps VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR.
	PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR PipelineCreateFlags = 1 << 17
	// PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR wraps VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR.
	PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR PipelineCreateFlags = 1 << 12
	// PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR wraps VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR.
	PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR PipelineCreateFlags = 1 << 13
	// PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR wraps VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR.
	PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR PipelineCreateFlags = 1 << 19
	// PIPELINE_CREATE_DEFER_COMPILE_BIT_NV wraps VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV.
	PIPELINE_CREATE_DEFER_COMPILE_BIT_NV PipelineCreateFlags = 1 << 5
	// PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT wraps VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT.
	PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT PipelineCreateFlags = 1 << 22
	// PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT wraps VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT.
	PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT PipelineCreateFlags = PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT
	// PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR wraps VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR.
	PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR PipelineCreateFlags = 1 << 21
	// PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR wraps VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR.
	PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR PipelineCreateFlags = PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR
	// PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR wraps VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR.
	PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR PipelineCreateFlags = 1 << 6
	// PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR wraps VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR.
	PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR PipelineCreateFlags = 1 << 7
	// PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV wraps VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV.
	PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV PipelineCreateFlags = 1 << 18
	// PIPELINE_CREATE_LIBRARY_BIT_KHR wraps VK_PIPELINE_CREATE_LIBRARY_BIT_KHR.
	PIPELINE_CREATE_LIBRARY_BIT_KHR PipelineCreateFlags = 1 << 11
	// PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT wraps VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT.
	PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT PipelineCreateFlags = PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT
	// PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT wraps VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT.
	PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT PipelineCreateFlags = PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT
	// PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT wraps VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT.
	PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT PipelineCreateFlags = 1 << 29
	// PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT wraps VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT.
	PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT PipelineCreateFlags = 1 << 23
	// PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT wraps VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT.
	PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT PipelineCreateFlags = 1 << 10
	// PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV wraps VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV.
	PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV PipelineCreateFlags = 1 << 20
	// PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT wraps VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT.
	PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT PipelineCreateFlags = 1 << 25
	// PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT wraps VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT.
	PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT PipelineCreateFlags = 1 << 26
	// PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT wraps VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT.
	PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT PipelineCreateFlags = 1 << 24
	// PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT wraps VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT.
	PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT PipelineCreateFlags = PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT
	// PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT wraps VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT.
	PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT PipelineCreateFlags = PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT
)

func (e PipelineCreateFlags) String() string {
	return fmt.Sprintf("VkPipelineCreateFlags(%b)", e)
}

// PipelineCreateFlags2 wraps the bitmask VkPipelineCreateFlags2.
type PipelineCreateFlags2 int64

// PipelineCreateFlags2KHR wraps the bitmask VkPipelineCreateFlags2KHR. An alias for PipelineCreateFlags2.
type PipelineCreateFlags2KHR = PipelineCreateFlags2

const (
	// PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT wraps VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT.
	PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT PipelineCreateFlags2 = 1 << 0
	// PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT wraps VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT.
	PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT PipelineCreateFlags2 = 1 << 1
	// PIPELINE_CREATE_2_DERIVATIVE_BIT wraps VK_PIPELINE_CREATE_2_DERIVATIVE_BIT.
	PIPELINE_CREATE_2_DERIVATIVE_BIT PipelineCreateFlags2 = 1 << 2
	// PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT wraps VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT.
	PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT PipelineCreateFlags2 = 1 << 3
	// PIPELINE_CREATE_2_DISPATCH_BASE_BIT wraps VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT.
	PIPELINE_CREATE_2_DISPATCH_BASE_BIT PipelineCreateFlags2 = 1 << 4
	// PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT wraps VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT.
	PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT PipelineCreateFlags2 = 1 << 8
	// PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT wraps VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT.
	PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT PipelineCreateFlags2 = 1 << 9
	// PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT wraps VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT.
	PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT PipelineCreateFlags2 = 1 << 27
	// PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT wraps VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT.
	PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT PipelineCreateFlags2 = 1 << 30
	// PIPELINE_CREATE_2_RAY_TRACING_SKIP_BUILT_IN_PRIMITIVES_BIT_KHR wraps VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_BUILT_IN_PRIMITIVES_BIT_KHR.
	PIPELINE_CREATE_2_RAY_TRACING_SKIP_BUILT_IN_PRIMITIVES_BIT_KHR PipelineCreateFlags2 = PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR
	// PIPELINE_CREATE_2_RAY_TRACING_ALLOW_SPHERES_AND_LINEAR_SWEPT_SPHERES_BIT_NV wraps VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_SPHERES_AND_LINEAR_SWEPT_SPHERES_BIT_NV.
	PIPELINE_CREATE_2_RAY_TRACING_ALLOW_SPHERES_AND_LINEAR_SWEPT_SPHERES_BIT_NV PipelineCreateFlags2 = 1 << 33
	// PIPELINE_CREATE_2_ENABLE_LEGACY_DITHERING_BIT_EXT wraps VK_PIPELINE_CREATE_2_ENABLE_LEGACY_DITHERING_BIT_EXT.
	PIPELINE_CREATE_2_ENABLE_LEGACY_DITHERING_BIT_EXT PipelineCreateFlags2 = 1 << 34
	// PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR wraps VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR.
	PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR PipelineCreateFlags2 = PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT
	// PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR wraps VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR.
	PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR PipelineCreateFlags2 = PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT
	// PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR wraps VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR.
	PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR PipelineCreateFlags2 = PIPELINE_CREATE_2_DERIVATIVE_BIT
	// PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR wraps VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR.
	PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR PipelineCreateFlags2 = PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT
	// PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR wraps VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR.
	PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR PipelineCreateFlags2 = PIPELINE_CREATE_2_DISPATCH_BASE_BIT
	// PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV wraps VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV.
	PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV PipelineCreateFlags2 = 1 << 5
	// PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR wraps VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR.
	PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR PipelineCreateFlags2 = 1 << 6
	// PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR wraps VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR.
	PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR PipelineCreateFlags2 = 1 << 7
	// PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR wraps VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR.
	PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR PipelineCreateFlags2 = PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT
	// PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR wraps VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR.
	PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR PipelineCreateFlags2 = PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT
	// PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT wraps VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT.
	PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT PipelineCreateFlags2 = 1 << 10
	// PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT wraps VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT.
	PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT PipelineCreateFlags2 = 1 << 23
	// PIPELINE_CREATE_2_LIBRARY_BIT_KHR wraps VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR.
	PIPELINE_CREATE_2_LIBRARY_BIT_KHR PipelineCreateFlags2 = 1 << 11
	// PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR wraps VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR.
	PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR PipelineCreateFlags2 = 1 << 12
	// PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR wraps VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR.
	PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR PipelineCreateFlags2 = 1 << 13
	// PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR wraps VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR.
	PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR PipelineCreateFlags2 = 1 << 14
	// PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR wraps VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR.
	PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR PipelineCreateFlags2 = 1 << 15
	// PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR wraps VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR.
	PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR PipelineCreateFlags2 = 1 << 16
	// PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR wraps VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR.
	PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR PipelineCreateFlags2 = 1 << 17
	// PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR wraps VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR.
	PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR PipelineCreateFlags2 = 1 << 19
	// PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV wraps VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV.
	PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV PipelineCreateFlags2 = 1 << 18
	// PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV wraps VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV.
	PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV PipelineCreateFlags2 = 1 << 20
	// PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR wraps VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR.
	PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR PipelineCreateFlags2 = 1 << 21
	// PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT wraps VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT.
	PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT PipelineCreateFlags2 = 1 << 22
	// PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT wraps VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT.
	PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT PipelineCreateFlags2 = 1 << 24
	// PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT wraps VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT.
	PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT PipelineCreateFlags2 = 1 << 25
	// PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT wraps VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT.
	PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT PipelineCreateFlags2 = 1 << 26
	// PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT wraps VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT.
	PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT PipelineCreateFlags2 = PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT
	// PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT wraps VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT.
	PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT PipelineCreateFlags2 = PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT
	// PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV wraps VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV.
	PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV PipelineCreateFlags2 = 1 << 28
	// PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT wraps VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT.
	PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT PipelineCreateFlags2 = 1 << 29
	// PIPELINE_CREATE_2_DISALLOW_OPACITY_MICROMAP_BIT_ARM wraps VK_PIPELINE_CREATE_2_DISALLOW_OPACITY_MICROMAP_BIT_ARM.
	PIPELINE_CREATE_2_DISALLOW_OPACITY_MICROMAP_BIT_ARM PipelineCreateFlags2 = 1 << 37
	// PIPELINE_CREATE_2_CAPTURE_DATA_BIT_KHR wraps VK_PIPELINE_CREATE_2_CAPTURE_DATA_BIT_KHR.
	PIPELINE_CREATE_2_CAPTURE_DATA_BIT_KHR PipelineCreateFlags2 = 1 << 31
	// PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_EXT wraps VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_EXT.
	PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_EXT PipelineCreateFlags2 = 1 << 38
	// PIPELINE_CREATE_2_PER_LAYER_FRAGMENT_DENSITY_BIT_VALVE wraps VK_PIPELINE_CREATE_2_PER_LAYER_FRAGMENT_DENSITY_BIT_VALVE.
	PIPELINE_CREATE_2_PER_LAYER_FRAGMENT_DENSITY_BIT_VALVE PipelineCreateFlags2 = 1 << 40
)

func (e PipelineCreateFlags2) String() string {
	return fmt.Sprintf("VkPipelineCreateFlags2(%b)", e)
}

// PipelineCreationFeedbackFlags wraps the bitmask VkPipelineCreationFeedbackFlags.
type PipelineCreationFeedbackFlags int32

// PipelineCreationFeedbackFlagsEXT wraps the bitmask VkPipelineCreationFeedbackFlagsEXT. An alias for PipelineCreationFeedbackFlags.
type PipelineCreationFeedbackFlagsEXT = PipelineCreationFeedbackFlags

const (
	// PIPELINE_CREATION_FEEDBACK_VALID_BIT wraps VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT.
	PIPELINE_CREATION_FEEDBACK_VALID_BIT PipelineCreationFeedbackFlags = 1 << 0
	// PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT wraps VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT.
	PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT PipelineCreationFeedbackFlags = 1 << 1
	// PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT wraps VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT.
	PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT PipelineCreationFeedbackFlags = 1 << 2
	// PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT wraps VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT.
	PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT PipelineCreationFeedbackFlags = PIPELINE_CREATION_FEEDBACK_VALID_BIT
	// PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT wraps VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT.
	PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT PipelineCreationFeedbackFlags = PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT
	// PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT wraps VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT.
	PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT PipelineCreationFeedbackFlags = PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT
)

func (e PipelineCreationFeedbackFlags) String() string {
	return fmt.Sprintf("VkPipelineCreationFeedbackFlags(%b)", e)
}

// PipelineDepthStencilStateCreateFlags wraps the bitmask VkPipelineDepthStencilStateCreateFlags.
type PipelineDepthStencilStateCreateFlags int32

const (
	// PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM wraps VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM.
	PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM PipelineDepthStencilStateCreateFlags = PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT
	// PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM wraps VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM.
	PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM PipelineDepthStencilStateCreateFlags = PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT
	// PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT wraps VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT.
	PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT PipelineDepthStencilStateCreateFlags = 1 << 0
	// PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT wraps VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT.
	PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT PipelineDepthStencilStateCreateFlags = 1 << 1
)

func (e PipelineDepthStencilStateCreateFlags) String() string {
	return fmt.Sprintf("VkPipelineDepthStencilStateCreateFlags(%b)", e)
}

// PipelineDiscardRectangleStateCreateFlagsEXT wraps the bitmask VkPipelineDiscardRectangleStateCreateFlagsEXT.
type PipelineDiscardRectangleStateCreateFlagsEXT int32

func (e PipelineDiscardRectangleStateCreateFlagsEXT) String() string {
	return fmt.Sprintf("VkPipelineDiscardRectangleStateCreateFlagsEXT(%b)", e)
}

// PipelineDynamicStateCreateFlags wraps the bitmask VkPipelineDynamicStateCreateFlags.
type PipelineDynamicStateCreateFlags int32

func (e PipelineDynamicStateCreateFlags) String() string {
	return fmt.Sprintf("VkPipelineDynamicStateCreateFlags(%b)", e)
}

// PipelineInputAssemblyStateCreateFlags wraps the bitmask VkPipelineInputAssemblyStateCreateFlags.
type PipelineInputAssemblyStateCreateFlags int32

func (e PipelineInputAssemblyStateCreateFlags) String() string {
	return fmt.Sprintf("VkPipelineInputAssemblyStateCreateFlags(%b)", e)
}

// PipelineLayoutCreateFlags wraps the bitmask VkPipelineLayoutCreateFlags.
type PipelineLayoutCreateFlags int32

const (
	// PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT wraps VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT.
	PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT PipelineLayoutCreateFlags = 1 << 1
)

func (e PipelineLayoutCreateFlags) String() string {
	return fmt.Sprintf("VkPipelineLayoutCreateFlags(%b)", e)
}

// PipelineMultisampleStateCreateFlags wraps the bitmask VkPipelineMultisampleStateCreateFlags.
type PipelineMultisampleStateCreateFlags int32

func (e PipelineMultisampleStateCreateFlags) String() string {
	return fmt.Sprintf("VkPipelineMultisampleStateCreateFlags(%b)", e)
}

// PipelineRasterizationConservativeStateCreateFlagsEXT wraps the bitmask VkPipelineRasterizationConservativeStateCreateFlagsEXT.
type PipelineRasterizationConservativeStateCreateFlagsEXT int32

func (e PipelineRasterizationConservativeStateCreateFlagsEXT) String() string {
	return fmt.Sprintf("VkPipelineRasterizationConservativeStateCreateFlagsEXT(%b)", e)
}

// PipelineRasterizationDepthClipStateCreateFlagsEXT wraps the bitmask VkPipelineRasterizationDepthClipStateCreateFlagsEXT.
type PipelineRasterizationDepthClipStateCreateFlagsEXT int32

func (e PipelineRasterizationDepthClipStateCreateFlagsEXT) String() string {
	return fmt.Sprintf("VkPipelineRasterizationDepthClipStateCreateFlagsEXT(%b)", e)
}

// PipelineRasterizationStateCreateFlags wraps the bitmask VkPipelineRasterizationStateCreateFlags.
type PipelineRasterizationStateCreateFlags int32

func (e PipelineRasterizationStateCreateFlags) String() string {
	return fmt.Sprintf("VkPipelineRasterizationStateCreateFlags(%b)", e)
}

// PipelineRasterizationStateStreamCreateFlagsEXT wraps the bitmask VkPipelineRasterizationStateStreamCreateFlagsEXT.
type PipelineRasterizationStateStreamCreateFlagsEXT int32

func (e PipelineRasterizationStateStreamCreateFlagsEXT) String() string {
	return fmt.Sprintf("VkPipelineRasterizationStateStreamCreateFlagsEXT(%b)", e)
}

// PipelineShaderStageCreateFlags wraps the bitmask VkPipelineShaderStageCreateFlags.
type PipelineShaderStageCreateFlags int32

const (
	// PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT wraps VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT.
	PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT PipelineShaderStageCreateFlags = 1 << 0
	// PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT wraps VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT.
	PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT PipelineShaderStageCreateFlags = 1 << 1
	// PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT wraps VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT.
	PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT PipelineShaderStageCreateFlags = PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT
	// PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT wraps VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT.
	PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT PipelineShaderStageCreateFlags = PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT
)

func (e PipelineShaderStageCreateFlags) String() string {
	return fmt.Sprintf("VkPipelineShaderStageCreateFlags(%b)", e)
}

// PipelineStageFlags wraps the bitmask VkPipelineStageFlags.
type PipelineStageFlags int32

const (
	// PIPELINE_STAGE_TOP_OF_PIPE_BIT wraps VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT.
	PIPELINE_STAGE_TOP_OF_PIPE_BIT PipelineStageFlags = 1 << 0
	// PIPELINE_STAGE_DRAW_INDIRECT_BIT wraps VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT.
	PIPELINE_STAGE_DRAW_INDIRECT_BIT PipelineStageFlags = 1 << 1
	// PIPELINE_STAGE_VERTEX_INPUT_BIT wraps VK_PIPELINE_STAGE_VERTEX_INPUT_BIT.
	PIPELINE_STAGE_VERTEX_INPUT_BIT PipelineStageFlags = 1 << 2
	// PIPELINE_STAGE_VERTEX_SHADER_BIT wraps VK_PIPELINE_STAGE_VERTEX_SHADER_BIT.
	PIPELINE_STAGE_VERTEX_SHADER_BIT PipelineStageFlags = 1 << 3
	// PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT wraps VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT.
	PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT PipelineStageFlags = 1 << 4
	// PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT wraps VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT.
	PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT PipelineStageFlags = 1 << 5
	// PIPELINE_STAGE_GEOMETRY_SHADER_BIT wraps VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT.
	PIPELINE_STAGE_GEOMETRY_SHADER_BIT PipelineStageFlags = 1 << 6
	// PIPELINE_STAGE_FRAGMENT_SHADER_BIT wraps VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT.
	PIPELINE_STAGE_FRAGMENT_SHADER_BIT PipelineStageFlags = 1 << 7
	// PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT wraps VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT.
	PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT PipelineStageFlags = 1 << 8
	// PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT wraps VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT.
	PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT PipelineStageFlags = 1 << 9
	// PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT wraps VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT.
	PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT PipelineStageFlags = 1 << 10
	// PIPELINE_STAGE_COMPUTE_SHADER_BIT wraps VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT.
	PIPELINE_STAGE_COMPUTE_SHADER_BIT PipelineStageFlags = 1 << 11
	// PIPELINE_STAGE_TRANSFER_BIT wraps VK_PIPELINE_STAGE_TRANSFER_BIT.
	PIPELINE_STAGE_TRANSFER_BIT PipelineStageFlags = 1 << 12
	// PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT wraps VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT.
	PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT PipelineStageFlags = 1 << 13
	// PIPELINE_STAGE_HOST_BIT wraps VK_PIPELINE_STAGE_HOST_BIT.
	PIPELINE_STAGE_HOST_BIT PipelineStageFlags = 1 << 14
	// PIPELINE_STAGE_ALL_GRAPHICS_BIT wraps VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT.
	PIPELINE_STAGE_ALL_GRAPHICS_BIT PipelineStageFlags = 1 << 15
	// PIPELINE_STAGE_ALL_COMMANDS_BIT wraps VK_PIPELINE_STAGE_ALL_COMMANDS_BIT.
	PIPELINE_STAGE_ALL_COMMANDS_BIT PipelineStageFlags = 1 << 16
	// PIPELINE_STAGE_NONE wraps VK_PIPELINE_STAGE_NONE.
	PIPELINE_STAGE_NONE PipelineStageFlags = 0
	// PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT wraps VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT.
	PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT PipelineStageFlags = 1 << 24
	// PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT wraps VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT.
	PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT PipelineStageFlags = 1 << 18
	// PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR wraps VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR.
	PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR PipelineStageFlags = 1 << 25
	// PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR wraps VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR.
	PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR PipelineStageFlags = 1 << 21
	// PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV wraps VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV.
	PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV PipelineStageFlags = PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR
	// PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV wraps VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV.
	PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV PipelineStageFlags = PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR
	// PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV wraps VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV.
	PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV PipelineStageFlags = PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR
	// PIPELINE_STAGE_TASK_SHADER_BIT_NV wraps VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV.
	PIPELINE_STAGE_TASK_SHADER_BIT_NV PipelineStageFlags = PIPELINE_STAGE_TASK_SHADER_BIT_EXT
	// PIPELINE_STAGE_MESH_SHADER_BIT_NV wraps VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV.
	PIPELINE_STAGE_MESH_SHADER_BIT_NV PipelineStageFlags = PIPELINE_STAGE_MESH_SHADER_BIT_EXT
	// PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT wraps VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT.
	PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT PipelineStageFlags = 1 << 23
	// PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR wraps VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR.
	PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR PipelineStageFlags = 1 << 22
	// PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV wraps VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV.
	PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV PipelineStageFlags = PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_EXT
	// PIPELINE_STAGE_NONE_KHR wraps VK_PIPELINE_STAGE_NONE_KHR.
	PIPELINE_STAGE_NONE_KHR PipelineStageFlags = PIPELINE_STAGE_NONE
	// PIPELINE_STAGE_TASK_SHADER_BIT_EXT wraps VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT.
	PIPELINE_STAGE_TASK_SHADER_BIT_EXT PipelineStageFlags = 1 << 19
	// PIPELINE_STAGE_MESH_SHADER_BIT_EXT wraps VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT.
	PIPELINE_STAGE_MESH_SHADER_BIT_EXT PipelineStageFlags = 1 << 20
	// PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_EXT wraps VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_EXT.
	PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_EXT PipelineStageFlags = 1 << 17
)

func (e PipelineStageFlags) String() string {
	return fmt.Sprintf("VkPipelineStageFlags(%b)", e)
}

// PipelineStageFlags2 wraps the bitmask VkPipelineStageFlags2.
type PipelineStageFlags2 int64

// PipelineStageFlags2KHR wraps the bitmask VkPipelineStageFlags2KHR. An alias for PipelineStageFlags2.
type PipelineStageFlags2KHR = PipelineStageFlags2

const (
	// PIPELINE_STAGE_2_NONE wraps VK_PIPELINE_STAGE_2_NONE.
	PIPELINE_STAGE_2_NONE PipelineStageFlags2 = 0
	// PIPELINE_STAGE_2_TOP_OF_PIPE_BIT wraps VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT.
	PIPELINE_STAGE_2_TOP_OF_PIPE_BIT PipelineStageFlags2 = 1 << 0
	// PIPELINE_STAGE_2_DRAW_INDIRECT_BIT wraps VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT.
	PIPELINE_STAGE_2_DRAW_INDIRECT_BIT PipelineStageFlags2 = 1 << 1
	// PIPELINE_STAGE_2_VERTEX_INPUT_BIT wraps VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT.
	PIPELINE_STAGE_2_VERTEX_INPUT_BIT PipelineStageFlags2 = 1 << 2
	// PIPELINE_STAGE_2_VERTEX_SHADER_BIT wraps VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT.
	PIPELINE_STAGE_2_VERTEX_SHADER_BIT PipelineStageFlags2 = 1 << 3
	// PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT wraps VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT.
	PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT PipelineStageFlags2 = 1 << 4
	// PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT wraps VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT.
	PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT PipelineStageFlags2 = 1 << 5
	// PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT wraps VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT.
	PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT PipelineStageFlags2 = 1 << 6
	// PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT wraps VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT.
	PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT PipelineStageFlags2 = 1 << 7
	// PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT wraps VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT.
	PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT PipelineStageFlags2 = 1 << 8
	// PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT wraps VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT.
	PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT PipelineStageFlags2 = 1 << 9
	// PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT wraps VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT.
	PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT PipelineStageFlags2 = 1 << 10
	// PIPELINE_STAGE_2_COMPUTE_SHADER_BIT wraps VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT.
	PIPELINE_STAGE_2_COMPUTE_SHADER_BIT PipelineStageFlags2 = 1 << 11
	// PIPELINE_STAGE_2_ALL_TRANSFER_BIT wraps VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT.
	PIPELINE_STAGE_2_ALL_TRANSFER_BIT PipelineStageFlags2 = 1 << 12
	// PIPELINE_STAGE_2_TRANSFER_BIT wraps VK_PIPELINE_STAGE_2_TRANSFER_BIT.
	PIPELINE_STAGE_2_TRANSFER_BIT PipelineStageFlags2 = PIPELINE_STAGE_2_ALL_TRANSFER_BIT
	// PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT wraps VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT.
	PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT PipelineStageFlags2 = 1 << 13
	// PIPELINE_STAGE_2_HOST_BIT wraps VK_PIPELINE_STAGE_2_HOST_BIT.
	PIPELINE_STAGE_2_HOST_BIT PipelineStageFlags2 = 1 << 14
	// PIPELINE_STAGE_2_ALL_GRAPHICS_BIT wraps VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT.
	PIPELINE_STAGE_2_ALL_GRAPHICS_BIT PipelineStageFlags2 = 1 << 15
	// PIPELINE_STAGE_2_ALL_COMMANDS_BIT wraps VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT.
	PIPELINE_STAGE_2_ALL_COMMANDS_BIT PipelineStageFlags2 = 1 << 16
	// PIPELINE_STAGE_2_COPY_BIT wraps VK_PIPELINE_STAGE_2_COPY_BIT.
	PIPELINE_STAGE_2_COPY_BIT PipelineStageFlags2 = 1 << 32
	// PIPELINE_STAGE_2_RESOLVE_BIT wraps VK_PIPELINE_STAGE_2_RESOLVE_BIT.
	PIPELINE_STAGE_2_RESOLVE_BIT PipelineStageFlags2 = 1 << 33
	// PIPELINE_STAGE_2_BLIT_BIT wraps VK_PIPELINE_STAGE_2_BLIT_BIT.
	PIPELINE_STAGE_2_BLIT_BIT PipelineStageFlags2 = 1 << 34
	// PIPELINE_STAGE_2_CLEAR_BIT wraps VK_PIPELINE_STAGE_2_CLEAR_BIT.
	PIPELINE_STAGE_2_CLEAR_BIT PipelineStageFlags2 = 1 << 35
	// PIPELINE_STAGE_2_INDEX_INPUT_BIT wraps VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT.
	PIPELINE_STAGE_2_INDEX_INPUT_BIT PipelineStageFlags2 = 1 << 36
	// PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT wraps VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT.
	PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT PipelineStageFlags2 = 1 << 37
	// PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT wraps VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT.
	PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT PipelineStageFlags2 = 1 << 38
	// PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR wraps VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR.
	PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR PipelineStageFlags2 = 1 << 26
	// PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR wraps VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR.
	PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR PipelineStageFlags2 = 1 << 27
	// PIPELINE_STAGE_2_NONE_KHR wraps VK_PIPELINE_STAGE_2_NONE_KHR.
	PIPELINE_STAGE_2_NONE_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_NONE
	// PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR wraps VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR.
	PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_TOP_OF_PIPE_BIT
	// PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR wraps VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR.
	PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_DRAW_INDIRECT_BIT
	// PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR wraps VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR.
	PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_VERTEX_INPUT_BIT
	// PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR wraps VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR.
	PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_VERTEX_SHADER_BIT
	// PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR wraps VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR.
	PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT
	// PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR wraps VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR.
	PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT
	// PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR wraps VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR.
	PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT
	// PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR wraps VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR.
	PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT
	// PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR wraps VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR.
	PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT
	// PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR wraps VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR.
	PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT
	// PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR wraps VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR.
	PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT
	// PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR wraps VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR.
	PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_COMPUTE_SHADER_BIT
	// PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR wraps VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR.
	PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_ALL_TRANSFER_BIT
	// PIPELINE_STAGE_2_TRANSFER_BIT_KHR wraps VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR.
	PIPELINE_STAGE_2_TRANSFER_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_ALL_TRANSFER_BIT
	// PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR wraps VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR.
	PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT
	// PIPELINE_STAGE_2_HOST_BIT_KHR wraps VK_PIPELINE_STAGE_2_HOST_BIT_KHR.
	PIPELINE_STAGE_2_HOST_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_HOST_BIT
	// PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR wraps VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR.
	PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_ALL_GRAPHICS_BIT
	// PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR wraps VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR.
	PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_ALL_COMMANDS_BIT
	// PIPELINE_STAGE_2_COPY_BIT_KHR wraps VK_PIPELINE_STAGE_2_COPY_BIT_KHR.
	PIPELINE_STAGE_2_COPY_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_COPY_BIT
	// PIPELINE_STAGE_2_RESOLVE_BIT_KHR wraps VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR.
	PIPELINE_STAGE_2_RESOLVE_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_RESOLVE_BIT
	// PIPELINE_STAGE_2_BLIT_BIT_KHR wraps VK_PIPELINE_STAGE_2_BLIT_BIT_KHR.
	PIPELINE_STAGE_2_BLIT_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_BLIT_BIT
	// PIPELINE_STAGE_2_CLEAR_BIT_KHR wraps VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR.
	PIPELINE_STAGE_2_CLEAR_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_CLEAR_BIT
	// PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR wraps VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR.
	PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_INDEX_INPUT_BIT
	// PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR wraps VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR.
	PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT
	// PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR wraps VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR.
	PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR PipelineStageFlags2 = PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT
	// PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT wraps VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT.
	PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT PipelineStageFlags2 = 1 << 24
	// PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT wraps VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT.
	PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT PipelineStageFlags2 = 1 << 18
	// PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV wraps VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV.
	PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV PipelineStageFlags2 = PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT
	// PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT wraps VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT.
	PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT PipelineStageFlags2 = 1 << 17
	// PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR wraps VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR.
	PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR PipelineStageFlags2 = 1 << 22
	// PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV wraps VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV.
	PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV PipelineStageFlags2 = PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR
	// PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR wraps VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR.
	PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR PipelineStageFlags2 = 1 << 25
	// PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR wraps VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR.
	PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR PipelineStageFlags2 = 1 << 21
	// PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV wraps VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV.
	PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV PipelineStageFlags2 = PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR
	// PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV wraps VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV.
	PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV PipelineStageFlags2 = PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR
	// PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT wraps VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT.
	PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT PipelineStageFlags2 = 1 << 23
	// PIPELINE_STAGE_2_TASK_SHADER_BIT_NV wraps VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV.
	PIPELINE_STAGE_2_TASK_SHADER_BIT_NV PipelineStageFlags2 = PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT
	// PIPELINE_STAGE_2_MESH_SHADER_BIT_NV wraps VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV.
	PIPELINE_STAGE_2_MESH_SHADER_BIT_NV PipelineStageFlags2 = PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT
	// PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT wraps VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT.
	PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT PipelineStageFlags2 = 1 << 19
	// PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT wraps VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT.
	PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT PipelineStageFlags2 = 1 << 20
	// PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI wraps VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI.
	PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI PipelineStageFlags2 = 1 << 39
	// PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI wraps VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI.
	PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI PipelineStageFlags2 = PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI
	// PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI wraps VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI.
	PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI PipelineStageFlags2 = 1 << 40
	// PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR wraps VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR.
	PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR PipelineStageFlags2 = 1 << 28
	// PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT wraps VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT.
	PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT PipelineStageFlags2 = 1 << 30
	// PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI wraps VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI.
	PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI PipelineStageFlags2 = 1 << 41
	// PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV wraps VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV.
	PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV PipelineStageFlags2 = 1 << 29
	// PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV wraps VK_PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV.
	PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV PipelineStageFlags2 = 1 << 44
	// PIPELINE_STAGE_2_DATA_GRAPH_BIT_ARM wraps VK_PIPELINE_STAGE_2_DATA_GRAPH_BIT_ARM.
	PIPELINE_STAGE_2_DATA_GRAPH_BIT_ARM PipelineStageFlags2 = 1 << 42
	// PIPELINE_STAGE_2_COPY_INDIRECT_BIT_KHR wraps VK_PIPELINE_STAGE_2_COPY_INDIRECT_BIT_KHR.
	PIPELINE_STAGE_2_COPY_INDIRECT_BIT_KHR PipelineStageFlags2 = 1 << 46
)

func (e PipelineStageFlags2) String() string {
	return fmt.Sprintf("VkPipelineStageFlags2(%b)", e)
}

// PipelineTessellationStateCreateFlags wraps the bitmask VkPipelineTessellationStateCreateFlags.
type PipelineTessellationStateCreateFlags int32

func (e PipelineTessellationStateCreateFlags) String() string {
	return fmt.Sprintf("VkPipelineTessellationStateCreateFlags(%b)", e)
}

// PipelineVertexInputStateCreateFlags wraps the bitmask VkPipelineVertexInputStateCreateFlags.
type PipelineVertexInputStateCreateFlags int32

func (e PipelineVertexInputStateCreateFlags) String() string {
	return fmt.Sprintf("VkPipelineVertexInputStateCreateFlags(%b)", e)
}

// PipelineViewportStateCreateFlags wraps the bitmask VkPipelineViewportStateCreateFlags.
type PipelineViewportStateCreateFlags int32

func (e PipelineViewportStateCreateFlags) String() string {
	return fmt.Sprintf("VkPipelineViewportStateCreateFlags(%b)", e)
}

// PipelineViewportSwizzleStateCreateFlagsNV wraps the bitmask VkPipelineViewportSwizzleStateCreateFlagsNV.
type PipelineViewportSwizzleStateCreateFlagsNV int32

func (e PipelineViewportSwizzleStateCreateFlagsNV) String() string {
	return fmt.Sprintf("VkPipelineViewportSwizzleStateCreateFlagsNV(%b)", e)
}

// PresentGravityFlagsKHR wraps the bitmask VkPresentGravityFlagsKHR.
type PresentGravityFlagsKHR int32

// PresentGravityFlagsEXT wraps the bitmask VkPresentGravityFlagsEXT. An alias for PresentGravityFlagsKHR.
type PresentGravityFlagsEXT = PresentGravityFlagsKHR

const (
	// PRESENT_GRAVITY_MIN_BIT_KHR wraps VK_PRESENT_GRAVITY_MIN_BIT_KHR.
	PRESENT_GRAVITY_MIN_BIT_KHR PresentGravityFlagsKHR = 1 << 0
	// PRESENT_GRAVITY_MIN_BIT_EXT wraps VK_PRESENT_GRAVITY_MIN_BIT_EXT.
	PRESENT_GRAVITY_MIN_BIT_EXT PresentGravityFlagsKHR = PRESENT_GRAVITY_MIN_BIT_KHR
	// PRESENT_GRAVITY_MAX_BIT_KHR wraps VK_PRESENT_GRAVITY_MAX_BIT_KHR.
	PRESENT_GRAVITY_MAX_BIT_KHR PresentGravityFlagsKHR = 1 << 1
	// PRESENT_GRAVITY_MAX_BIT_EXT wraps VK_PRESENT_GRAVITY_MAX_BIT_EXT.
	PRESENT_GRAVITY_MAX_BIT_EXT PresentGravityFlagsKHR = PRESENT_GRAVITY_MAX_BIT_KHR
	// PRESENT_GRAVITY_CENTERED_BIT_KHR wraps VK_PRESENT_GRAVITY_CENTERED_BIT_KHR.
	PRESENT_GRAVITY_CENTERED_BIT_KHR PresentGravityFlagsKHR = 1 << 2
	// PRESENT_GRAVITY_CENTERED_BIT_EXT wraps VK_PRESENT_GRAVITY_CENTERED_BIT_EXT.
	PRESENT_GRAVITY_CENTERED_BIT_EXT PresentGravityFlagsKHR = PRESENT_GRAVITY_CENTERED_BIT_KHR
)

func (e PresentGravityFlagsKHR) String() string {
	return fmt.Sprintf("VkPresentGravityFlagsKHR(%b)", e)
}

// PresentScalingFlagsKHR wraps the bitmask VkPresentScalingFlagsKHR.
type PresentScalingFlagsKHR int32

// PresentScalingFlagsEXT wraps the bitmask VkPresentScalingFlagsEXT. An alias for PresentScalingFlagsKHR.
type PresentScalingFlagsEXT = PresentScalingFlagsKHR

const (
	// PRESENT_SCALING_ONE_TO_ONE_BIT_KHR wraps VK_PRESENT_SCALING_ONE_TO_ONE_BIT_KHR.
	PRESENT_SCALING_ONE_TO_ONE_BIT_KHR PresentScalingFlagsKHR = 1 << 0
	// PRESENT_SCALING_ONE_TO_ONE_BIT_EXT wraps VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT.
	PRESENT_SCALING_ONE_TO_ONE_BIT_EXT PresentScalingFlagsKHR = PRESENT_SCALING_ONE_TO_ONE_BIT_KHR
	// PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_KHR wraps VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_KHR.
	PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_KHR PresentScalingFlagsKHR = 1 << 1
	// PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT wraps VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT.
	PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT PresentScalingFlagsKHR = PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_KHR
	// PRESENT_SCALING_STRETCH_BIT_KHR wraps VK_PRESENT_SCALING_STRETCH_BIT_KHR.
	PRESENT_SCALING_STRETCH_BIT_KHR PresentScalingFlagsKHR = 1 << 2
	// PRESENT_SCALING_STRETCH_BIT_EXT wraps VK_PRESENT_SCALING_STRETCH_BIT_EXT.
	PRESENT_SCALING_STRETCH_BIT_EXT PresentScalingFlagsKHR = PRESENT_SCALING_STRETCH_BIT_KHR
)

func (e PresentScalingFlagsKHR) String() string {
	return fmt.Sprintf("VkPresentScalingFlagsKHR(%b)", e)
}

// PrivateDataSlotCreateFlags wraps the bitmask VkPrivateDataSlotCreateFlags.
type PrivateDataSlotCreateFlags int32

// PrivateDataSlotCreateFlagsEXT wraps the bitmask VkPrivateDataSlotCreateFlagsEXT. An alias for PrivateDataSlotCreateFlags.
type PrivateDataSlotCreateFlagsEXT = PrivateDataSlotCreateFlags

func (e PrivateDataSlotCreateFlags) String() string {
	return fmt.Sprintf("VkPrivateDataSlotCreateFlags(%b)", e)
}

// QueryControlFlags wraps the bitmask VkQueryControlFlags.
type QueryControlFlags int32

const (
	// QUERY_CONTROL_PRECISE_BIT wraps VK_QUERY_CONTROL_PRECISE_BIT.
	QUERY_CONTROL_PRECISE_BIT QueryControlFlags = 1 << 0
)

func (e QueryControlFlags) String() string {
	return fmt.Sprintf("VkQueryControlFlags(%b)", e)
}

// QueryPipelineStatisticFlags wraps the bitmask VkQueryPipelineStatisticFlags.
type QueryPipelineStatisticFlags int32

const (
	// QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT wraps VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT.
	QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT QueryPipelineStatisticFlags = 1 << 0
	// QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT wraps VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT.
	QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT QueryPipelineStatisticFlags = 1 << 1
	// QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT wraps VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT.
	QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT QueryPipelineStatisticFlags = 1 << 2
	// QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT wraps VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT.
	QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT QueryPipelineStatisticFlags = 1 << 3
	// QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT wraps VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT.
	QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT QueryPipelineStatisticFlags = 1 << 4
	// QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT wraps VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT.
	QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT QueryPipelineStatisticFlags = 1 << 5
	// QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT wraps VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT.
	QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT QueryPipelineStatisticFlags = 1 << 6
	// QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT wraps VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT.
	QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT QueryPipelineStatisticFlags = 1 << 7
	// QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT wraps VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT.
	QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT QueryPipelineStatisticFlags = 1 << 8
	// QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT wraps VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT.
	QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT QueryPipelineStatisticFlags = 1 << 9
	// QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT wraps VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT.
	QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT QueryPipelineStatisticFlags = 1 << 10
	// QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT wraps VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT.
	QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT QueryPipelineStatisticFlags = 1 << 11
	// QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT wraps VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT.
	QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT QueryPipelineStatisticFlags = 1 << 12
	// QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI wraps VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI.
	QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI QueryPipelineStatisticFlags = 1 << 13
)

func (e QueryPipelineStatisticFlags) String() string {
	return fmt.Sprintf("VkQueryPipelineStatisticFlags(%b)", e)
}

// QueryPoolCreateFlags wraps the bitmask VkQueryPoolCreateFlags.
type QueryPoolCreateFlags int32

const (
	// QUERY_POOL_CREATE_RESET_BIT_KHR wraps VK_QUERY_POOL_CREATE_RESET_BIT_KHR.
	QUERY_POOL_CREATE_RESET_BIT_KHR QueryPoolCreateFlags = 1 << 0
)

func (e QueryPoolCreateFlags) String() string {
	return fmt.Sprintf("VkQueryPoolCreateFlags(%b)", e)
}

// QueryResultFlags wraps the bitmask VkQueryResultFlags.
type QueryResultFlags int32

const (
	// QUERY_RESULT_64_BIT wraps VK_QUERY_RESULT_64_BIT.
	QUERY_RESULT_64_BIT QueryResultFlags = 1 << 0
	// QUERY_RESULT_WAIT_BIT wraps VK_QUERY_RESULT_WAIT_BIT.
	QUERY_RESULT_WAIT_BIT QueryResultFlags = 1 << 1
	// QUERY_RESULT_WITH_AVAILABILITY_BIT wraps VK_QUERY_RESULT_WITH_AVAILABILITY_BIT.
	QUERY_RESULT_WITH_AVAILABILITY_BIT QueryResultFlags = 1 << 2
	// QUERY_RESULT_PARTIAL_BIT wraps VK_QUERY_RESULT_PARTIAL_BIT.
	QUERY_RESULT_PARTIAL_BIT QueryResultFlags = 1 << 3
	// QUERY_RESULT_WITH_STATUS_BIT_KHR wraps VK_QUERY_RESULT_WITH_STATUS_BIT_KHR.
	QUERY_RESULT_WITH_STATUS_BIT_KHR QueryResultFlags = 1 << 4
)

func (e QueryResultFlags) String() string {
	return fmt.Sprintf("VkQueryResultFlags(%b)", e)
}

// QueueFlags wraps the bitmask VkQueueFlags.
type QueueFlags int32

const (
	// QUEUE_GRAPHICS_BIT wraps VK_QUEUE_GRAPHICS_BIT.
	QUEUE_GRAPHICS_BIT QueueFlags = 1 << 0
	// QUEUE_COMPUTE_BIT wraps VK_QUEUE_COMPUTE_BIT.
	QUEUE_COMPUTE_BIT QueueFlags = 1 << 1
	// QUEUE_TRANSFER_BIT wraps VK_QUEUE_TRANSFER_BIT.
	QUEUE_TRANSFER_BIT QueueFlags = 1 << 2
	// QUEUE_SPARSE_BINDING_BIT wraps VK_QUEUE_SPARSE_BINDING_BIT.
	QUEUE_SPARSE_BINDING_BIT QueueFlags = 1 << 3
	// QUEUE_PROTECTED_BIT wraps VK_QUEUE_PROTECTED_BIT.
	QUEUE_PROTECTED_BIT QueueFlags = 1 << 4
	// QUEUE_VIDEO_DECODE_BIT_KHR wraps VK_QUEUE_VIDEO_DECODE_BIT_KHR.
	QUEUE_VIDEO_DECODE_BIT_KHR QueueFlags = 1 << 5
	// QUEUE_VIDEO_ENCODE_BIT_KHR wraps VK_QUEUE_VIDEO_ENCODE_BIT_KHR.
	QUEUE_VIDEO_ENCODE_BIT_KHR QueueFlags = 1 << 6
	// QUEUE_OPTICAL_FLOW_BIT_NV wraps VK_QUEUE_OPTICAL_FLOW_BIT_NV.
	QUEUE_OPTICAL_FLOW_BIT_NV QueueFlags = 1 << 8
	// QUEUE_DATA_GRAPH_BIT_ARM wraps VK_QUEUE_DATA_GRAPH_BIT_ARM.
	QUEUE_DATA_GRAPH_BIT_ARM QueueFlags = 1 << 10
)

func (e QueueFlags) String() string {
	return fmt.Sprintf("VkQueueFlags(%b)", e)
}

// RenderPassCreateFlags wraps the bitmask VkRenderPassCreateFlags.
type RenderPassCreateFlags int32

const (
	// RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM wraps VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM.
	RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM RenderPassCreateFlags = 1 << 1
	// RENDER_PASS_CREATE_PER_LAYER_FRAGMENT_DENSITY_BIT_VALVE wraps VK_RENDER_PASS_CREATE_PER_LAYER_FRAGMENT_DENSITY_BIT_VALVE.
	RENDER_PASS_CREATE_PER_LAYER_FRAGMENT_DENSITY_BIT_VALVE RenderPassCreateFlags = 1 << 2
)

func (e RenderPassCreateFlags) String() string {
	return fmt.Sprintf("VkRenderPassCreateFlags(%b)", e)
}

// RenderingFlags wraps the bitmask VkRenderingFlags.
type RenderingFlags int32

// RenderingFlagsKHR wraps the bitmask VkRenderingFlagsKHR. An alias for RenderingFlags.
type RenderingFlagsKHR = RenderingFlags

const (
	// RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT wraps VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT.
	RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT RenderingFlags = 1 << 0
	// RENDERING_SUSPENDING_BIT wraps VK_RENDERING_SUSPENDING_BIT.
	RENDERING_SUSPENDING_BIT RenderingFlags = 1 << 1
	// RENDERING_RESUMING_BIT wraps VK_RENDERING_RESUMING_BIT.
	RENDERING_RESUMING_BIT RenderingFlags = 1 << 2
	// RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR wraps VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR.
	RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR RenderingFlags = RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT
	// RENDERING_SUSPENDING_BIT_KHR wraps VK_RENDERING_SUSPENDING_BIT_KHR.
	RENDERING_SUSPENDING_BIT_KHR RenderingFlags = RENDERING_SUSPENDING_BIT
	// RENDERING_RESUMING_BIT_KHR wraps VK_RENDERING_RESUMING_BIT_KHR.
	RENDERING_RESUMING_BIT_KHR RenderingFlags = RENDERING_RESUMING_BIT
	// RENDERING_CONTENTS_INLINE_BIT_EXT wraps VK_RENDERING_CONTENTS_INLINE_BIT_EXT.
	RENDERING_CONTENTS_INLINE_BIT_EXT RenderingFlags = RENDERING_CONTENTS_INLINE_BIT_KHR
	// RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT wraps VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT.
	RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT RenderingFlags = 1 << 3
	// RENDERING_CONTENTS_INLINE_BIT_KHR wraps VK_RENDERING_CONTENTS_INLINE_BIT_KHR.
	RENDERING_CONTENTS_INLINE_BIT_KHR RenderingFlags = 1 << 4
	// RENDERING_PER_LAYER_FRAGMENT_DENSITY_BIT_VALVE wraps VK_RENDERING_PER_LAYER_FRAGMENT_DENSITY_BIT_VALVE.
	RENDERING_PER_LAYER_FRAGMENT_DENSITY_BIT_VALVE RenderingFlags = 1 << 5
)

func (e RenderingFlags) String() string {
	return fmt.Sprintf("VkRenderingFlags(%b)", e)
}

// ResolveModeFlags wraps the bitmask VkResolveModeFlags.
type ResolveModeFlags int32

// ResolveModeFlagsKHR wraps the bitmask VkResolveModeFlagsKHR. An alias for ResolveModeFlags.
type ResolveModeFlagsKHR = ResolveModeFlags

const (
	// RESOLVE_MODE_NONE wraps VK_RESOLVE_MODE_NONE.
	RESOLVE_MODE_NONE ResolveModeFlags = 0
	// RESOLVE_MODE_SAMPLE_ZERO_BIT wraps VK_RESOLVE_MODE_SAMPLE_ZERO_BIT.
	RESOLVE_MODE_SAMPLE_ZERO_BIT ResolveModeFlags = 1 << 0
	// RESOLVE_MODE_AVERAGE_BIT wraps VK_RESOLVE_MODE_AVERAGE_BIT.
	RESOLVE_MODE_AVERAGE_BIT ResolveModeFlags = 1 << 1
	// RESOLVE_MODE_MIN_BIT wraps VK_RESOLVE_MODE_MIN_BIT.
	RESOLVE_MODE_MIN_BIT ResolveModeFlags = 1 << 2
	// RESOLVE_MODE_MAX_BIT wraps VK_RESOLVE_MODE_MAX_BIT.
	RESOLVE_MODE_MAX_BIT ResolveModeFlags = 1 << 3
	// RESOLVE_MODE_NONE_KHR wraps VK_RESOLVE_MODE_NONE_KHR.
	RESOLVE_MODE_NONE_KHR ResolveModeFlags = RESOLVE_MODE_NONE
	// RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR wraps VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR.
	RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR ResolveModeFlags = RESOLVE_MODE_SAMPLE_ZERO_BIT
	// RESOLVE_MODE_AVERAGE_BIT_KHR wraps VK_RESOLVE_MODE_AVERAGE_BIT_KHR.
	RESOLVE_MODE_AVERAGE_BIT_KHR ResolveModeFlags = RESOLVE_MODE_AVERAGE_BIT
	// RESOLVE_MODE_MIN_BIT_KHR wraps VK_RESOLVE_MODE_MIN_BIT_KHR.
	RESOLVE_MODE_MIN_BIT_KHR ResolveModeFlags = RESOLVE_MODE_MIN_BIT
	// RESOLVE_MODE_MAX_BIT_KHR wraps VK_RESOLVE_MODE_MAX_BIT_KHR.
	RESOLVE_MODE_MAX_BIT_KHR ResolveModeFlags = RESOLVE_MODE_MAX_BIT
)

func (e ResolveModeFlags) String() string {
	return fmt.Sprintf("VkResolveModeFlags(%b)", e)
}

// SampleCountFlags wraps the bitmask VkSampleCountFlags.
type SampleCountFlags int32

const (
	// SAMPLE_COUNT_1_BIT wraps VK_SAMPLE_COUNT_1_BIT.
	SAMPLE_COUNT_1_BIT SampleCountFlags = 1 << 0
	// SAMPLE_COUNT_2_BIT wraps VK_SAMPLE_COUNT_2_BIT.
	SAMPLE_COUNT_2_BIT SampleCountFlags = 1 << 1
	// SAMPLE_COUNT_4_BIT wraps VK_SAMPLE_COUNT_4_BIT.
	SAMPLE_COUNT_4_BIT SampleCountFlags = 1 << 2
	// SAMPLE_COUNT_8_BIT wraps VK_SAMPLE_COUNT_8_BIT.
	SAMPLE_COUNT_8_BIT SampleCountFlags = 1 << 3
	// SAMPLE_COUNT_16_BIT wraps VK_SAMPLE_COUNT_16_BIT.
	SAMPLE_COUNT_16_BIT SampleCountFlags = 1 << 4
	// SAMPLE_COUNT_32_BIT wraps VK_SAMPLE_COUNT_32_BIT.
	SAMPLE_COUNT_32_BIT SampleCountFlags = 1 << 5
	// SAMPLE_COUNT_64_BIT wraps VK_SAMPLE_COUNT_64_BIT.
	SAMPLE_COUNT_64_BIT SampleCountFlags = 1 << 6
)

func (e SampleCountFlags) String() string {
	return fmt.Sprintf("VkSampleCountFlags(%b)", e)
}

// SamplerCreateFlags wraps the bitmask VkSamplerCreateFlags.
type SamplerCreateFlags int32

const (
	// SAMPLER_CREATE_SUBSAMPLED_BIT_EXT wraps VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT.
	SAMPLER_CREATE_SUBSAMPLED_BIT_EXT SamplerCreateFlags = 1 << 0
	// SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT wraps VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT.
	SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT SamplerCreateFlags = 1 << 1
	// SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT wraps VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT.
	SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT SamplerCreateFlags = 1 << 3
	// SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT wraps VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT.
	SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT SamplerCreateFlags = 1 << 2
	// SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM wraps VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM.
	SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM SamplerCreateFlags = 1 << 4
)

func (e SamplerCreateFlags) String() string {
	return fmt.Sprintf("VkSamplerCreateFlags(%b)", e)
}

// SemaphoreCreateFlags wraps the bitmask VkSemaphoreCreateFlags.
type SemaphoreCreateFlags int32

func (e SemaphoreCreateFlags) String() string {
	return fmt.Sprintf("VkSemaphoreCreateFlags(%b)", e)
}

// SemaphoreImportFlags wraps the bitmask VkSemaphoreImportFlags.
type SemaphoreImportFlags int32

// SemaphoreImportFlagsKHR wraps the bitmask VkSemaphoreImportFlagsKHR. An alias for SemaphoreImportFlags.
type SemaphoreImportFlagsKHR = SemaphoreImportFlags

const (
	// SEMAPHORE_IMPORT_TEMPORARY_BIT wraps VK_SEMAPHORE_IMPORT_TEMPORARY_BIT.
	SEMAPHORE_IMPORT_TEMPORARY_BIT SemaphoreImportFlags = 1 << 0
	// SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR wraps VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR.
	SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR SemaphoreImportFlags = SEMAPHORE_IMPORT_TEMPORARY_BIT
)

func (e SemaphoreImportFlags) String() string {
	return fmt.Sprintf("VkSemaphoreImportFlags(%b)", e)
}

// SemaphoreWaitFlags wraps the bitmask VkSemaphoreWaitFlags.
type SemaphoreWaitFlags int32

// SemaphoreWaitFlagsKHR wraps the bitmask VkSemaphoreWaitFlagsKHR. An alias for SemaphoreWaitFlags.
type SemaphoreWaitFlagsKHR = SemaphoreWaitFlags

const (
	// SEMAPHORE_WAIT_ANY_BIT wraps VK_SEMAPHORE_WAIT_ANY_BIT.
	SEMAPHORE_WAIT_ANY_BIT SemaphoreWaitFlags = 1 << 0
	// SEMAPHORE_WAIT_ANY_BIT_KHR wraps VK_SEMAPHORE_WAIT_ANY_BIT_KHR.
	SEMAPHORE_WAIT_ANY_BIT_KHR SemaphoreWaitFlags = SEMAPHORE_WAIT_ANY_BIT
)

func (e SemaphoreWaitFlags) String() string {
	return fmt.Sprintf("VkSemaphoreWaitFlags(%b)", e)
}

// ShaderCorePropertiesFlagsAMD wraps the bitmask VkShaderCorePropertiesFlagsAMD.
type ShaderCorePropertiesFlagsAMD int32

func (e ShaderCorePropertiesFlagsAMD) String() string {
	return fmt.Sprintf("VkShaderCorePropertiesFlagsAMD(%b)", e)
}

// ShaderCreateFlagsEXT wraps the bitmask VkShaderCreateFlagsEXT.
type ShaderCreateFlagsEXT int32

const (
	// SHADER_CREATE_LINK_STAGE_BIT_EXT wraps VK_SHADER_CREATE_LINK_STAGE_BIT_EXT.
	SHADER_CREATE_LINK_STAGE_BIT_EXT ShaderCreateFlagsEXT = 1 << 0
	// SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT wraps VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT.
	SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT ShaderCreateFlagsEXT = 1 << 1
	// SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT wraps VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT.
	SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT ShaderCreateFlagsEXT = 1 << 2
	// SHADER_CREATE_NO_TASK_SHADER_BIT_EXT wraps VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT.
	SHADER_CREATE_NO_TASK_SHADER_BIT_EXT ShaderCreateFlagsEXT = 1 << 3
	// SHADER_CREATE_DISPATCH_BASE_BIT_EXT wraps VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT.
	SHADER_CREATE_DISPATCH_BASE_BIT_EXT ShaderCreateFlagsEXT = 1 << 4
	// SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT wraps VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT.
	SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT ShaderCreateFlagsEXT = 1 << 5
	// SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT wraps VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT.
	SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT ShaderCreateFlagsEXT = 1 << 6
	// SHADER_CREATE_INDIRECT_BINDABLE_BIT_EXT wraps VK_SHADER_CREATE_INDIRECT_BINDABLE_BIT_EXT.
	SHADER_CREATE_INDIRECT_BINDABLE_BIT_EXT ShaderCreateFlagsEXT = 1 << 7
)

func (e ShaderCreateFlagsEXT) String() string {
	return fmt.Sprintf("VkShaderCreateFlagsEXT(%b)", e)
}

// ShaderModuleCreateFlags wraps the bitmask VkShaderModuleCreateFlags.
type ShaderModuleCreateFlags int32

func (e ShaderModuleCreateFlags) String() string {
	return fmt.Sprintf("VkShaderModuleCreateFlags(%b)", e)
}

// ShaderStageFlags wraps the bitmask VkShaderStageFlags.
type ShaderStageFlags int32

const (
	// SHADER_STAGE_VERTEX_BIT wraps VK_SHADER_STAGE_VERTEX_BIT.
	SHADER_STAGE_VERTEX_BIT ShaderStageFlags = 1 << 0
	// SHADER_STAGE_TESSELLATION_CONTROL_BIT wraps VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT.
	SHADER_STAGE_TESSELLATION_CONTROL_BIT ShaderStageFlags = 1 << 1
	// SHADER_STAGE_TESSELLATION_EVALUATION_BIT wraps VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT.
	SHADER_STAGE_TESSELLATION_EVALUATION_BIT ShaderStageFlags = 1 << 2
	// SHADER_STAGE_GEOMETRY_BIT wraps VK_SHADER_STAGE_GEOMETRY_BIT.
	SHADER_STAGE_GEOMETRY_BIT ShaderStageFlags = 1 << 3
	// SHADER_STAGE_FRAGMENT_BIT wraps VK_SHADER_STAGE_FRAGMENT_BIT.
	SHADER_STAGE_FRAGMENT_BIT ShaderStageFlags = 1 << 4
	// SHADER_STAGE_COMPUTE_BIT wraps VK_SHADER_STAGE_COMPUTE_BIT.
	SHADER_STAGE_COMPUTE_BIT ShaderStageFlags = 1 << 5
	// SHADER_STAGE_ALL_GRAPHICS wraps VK_SHADER_STAGE_ALL_GRAPHICS.
	SHADER_STAGE_ALL_GRAPHICS ShaderStageFlags = 0x0000001F
	// SHADER_STAGE_ALL wraps VK_SHADER_STAGE_ALL.
	SHADER_STAGE_ALL ShaderStageFlags = 0x7FFFFFFF
	// SHADER_STAGE_RAYGEN_BIT_KHR wraps VK_SHADER_STAGE_RAYGEN_BIT_KHR.
	SHADER_STAGE_RAYGEN_BIT_KHR ShaderStageFlags = 1 << 8
	// SHADER_STAGE_ANY_HIT_BIT_KHR wraps VK_SHADER_STAGE_ANY_HIT_BIT_KHR.
	SHADER_STAGE_ANY_HIT_BIT_KHR ShaderStageFlags = 1 << 9
	// SHADER_STAGE_CLOSEST_HIT_BIT_KHR wraps VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR.
	SHADER_STAGE_CLOSEST_HIT_BIT_KHR ShaderStageFlags = 1 << 10
	// SHADER_STAGE_MISS_BIT_KHR wraps VK_SHADER_STAGE_MISS_BIT_KHR.
	SHADER_STAGE_MISS_BIT_KHR ShaderStageFlags = 1 << 11
	// SHADER_STAGE_INTERSECTION_BIT_KHR wraps VK_SHADER_STAGE_INTERSECTION_BIT_KHR.
	SHADER_STAGE_INTERSECTION_BIT_KHR ShaderStageFlags = 1 << 12
	// SHADER_STAGE_CALLABLE_BIT_KHR wraps VK_SHADER_STAGE_CALLABLE_BIT_KHR.
	SHADER_STAGE_CALLABLE_BIT_KHR ShaderStageFlags = 1 << 13
	// SHADER_STAGE_RAYGEN_BIT_NV wraps VK_SHADER_STAGE_RAYGEN_BIT_NV.
	SHADER_STAGE_RAYGEN_BIT_NV ShaderStageFlags = SHADER_STAGE_RAYGEN_BIT_KHR
	// SHADER_STAGE_ANY_HIT_BIT_NV wraps VK_SHADER_STAGE_ANY_HIT_BIT_NV.
	SHADER_STAGE_ANY_HIT_BIT_NV ShaderStageFlags = SHADER_STAGE_ANY_HIT_BIT_KHR
	// SHADER_STAGE_CLOSEST_HIT_BIT_NV wraps VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV.
	SHADER_STAGE_CLOSEST_HIT_BIT_NV ShaderStageFlags = SHADER_STAGE_CLOSEST_HIT_BIT_KHR
	// SHADER_STAGE_MISS_BIT_NV wraps VK_SHADER_STAGE_MISS_BIT_NV.
	SHADER_STAGE_MISS_BIT_NV ShaderStageFlags = SHADER_STAGE_MISS_BIT_KHR
	// SHADER_STAGE_INTERSECTION_BIT_NV wraps VK_SHADER_STAGE_INTERSECTION_BIT_NV.
	SHADER_STAGE_INTERSECTION_BIT_NV ShaderStageFlags = SHADER_STAGE_INTERSECTION_BIT_KHR
	// SHADER_STAGE_CALLABLE_BIT_NV wraps VK_SHADER_STAGE_CALLABLE_BIT_NV.
	SHADER_STAGE_CALLABLE_BIT_NV ShaderStageFlags = SHADER_STAGE_CALLABLE_BIT_KHR
	// SHADER_STAGE_TASK_BIT_NV wraps VK_SHADER_STAGE_TASK_BIT_NV.
	SHADER_STAGE_TASK_BIT_NV ShaderStageFlags = SHADER_STAGE_TASK_BIT_EXT
	// SHADER_STAGE_MESH_BIT_NV wraps VK_SHADER_STAGE_MESH_BIT_NV.
	SHADER_STAGE_MESH_BIT_NV ShaderStageFlags = SHADER_STAGE_MESH_BIT_EXT
	// SHADER_STAGE_TASK_BIT_EXT wraps VK_SHADER_STAGE_TASK_BIT_EXT.
	SHADER_STAGE_TASK_BIT_EXT ShaderStageFlags = 1 << 6
	// SHADER_STAGE_MESH_BIT_EXT wraps VK_SHADER_STAGE_MESH_BIT_EXT.
	SHADER_STAGE_MESH_BIT_EXT ShaderStageFlags = 1 << 7
	// SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI wraps VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI.
	SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI ShaderStageFlags = 1 << 14
	// SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI wraps VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI.
	SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI ShaderStageFlags = 1 << 19
)

func (e ShaderStageFlags) String() string {
	return fmt.Sprintf("VkShaderStageFlags(%b)", e)
}

// SparseImageFormatFlags wraps the bitmask VkSparseImageFormatFlags.
type SparseImageFormatFlags int32

const (
	// SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT wraps VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT.
	SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT SparseImageFormatFlags = 1 << 0
	// SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT wraps VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT.
	SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT SparseImageFormatFlags = 1 << 1
	// SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT wraps VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT.
	SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT SparseImageFormatFlags = 1 << 2
)

func (e SparseImageFormatFlags) String() string {
	return fmt.Sprintf("VkSparseImageFormatFlags(%b)", e)
}

// SparseMemoryBindFlags wraps the bitmask VkSparseMemoryBindFlags.
type SparseMemoryBindFlags int32

const (
	// SPARSE_MEMORY_BIND_METADATA_BIT wraps VK_SPARSE_MEMORY_BIND_METADATA_BIT.
	SPARSE_MEMORY_BIND_METADATA_BIT SparseMemoryBindFlags = 1 << 0
)

func (e SparseMemoryBindFlags) String() string {
	return fmt.Sprintf("VkSparseMemoryBindFlags(%b)", e)
}

// StencilFaceFlags wraps the bitmask VkStencilFaceFlags.
type StencilFaceFlags int32

const (
	// STENCIL_FACE_FRONT_BIT wraps VK_STENCIL_FACE_FRONT_BIT.
	STENCIL_FACE_FRONT_BIT StencilFaceFlags = 1 << 0
	// STENCIL_FACE_BACK_BIT wraps VK_STENCIL_FACE_BACK_BIT.
	STENCIL_FACE_BACK_BIT StencilFaceFlags = 1 << 1
	// STENCIL_FACE_FRONT_AND_BACK wraps VK_STENCIL_FACE_FRONT_AND_BACK.
	STENCIL_FACE_FRONT_AND_BACK StencilFaceFlags = 0x00000003
	// STENCIL_FRONT_AND_BACK wraps VK_STENCIL_FRONT_AND_BACK.
	//
	// Deprecated: Use STENCIL_FACE_FRONT_AND_BACK instead.
	STENCIL_FRONT_AND_BACK StencilFaceFlags = STENCIL_FACE_FRONT_AND_BACK
)

func (e StencilFaceFlags) String() string {
	return fmt.Sprintf("VkStencilFaceFlags(%b)", e)
}

// SubgroupFeatureFlags wraps the bitmask VkSubgroupFeatureFlags.
type SubgroupFeatureFlags int32

const (
	// SUBGROUP_FEATURE_BASIC_BIT wraps VK_SUBGROUP_FEATURE_BASIC_BIT.
	SUBGROUP_FEATURE_BASIC_BIT SubgroupFeatureFlags = 1 << 0
	// SUBGROUP_FEATURE_VOTE_BIT wraps VK_SUBGROUP_FEATURE_VOTE_BIT.
	SUBGROUP_FEATURE_VOTE_BIT SubgroupFeatureFlags = 1 << 1
	// SUBGROUP_FEATURE_ARITHMETIC_BIT wraps VK_SUBGROUP_FEATURE_ARITHMETIC_BIT.
	SUBGROUP_FEATURE_ARITHMETIC_BIT SubgroupFeatureFlags = 1 << 2
	// SUBGROUP_FEATURE_BALLOT_BIT wraps VK_SUBGROUP_FEATURE_BALLOT_BIT.
	SUBGROUP_FEATURE_BALLOT_BIT SubgroupFeatureFlags = 1 << 3
	// SUBGROUP_FEATURE_SHUFFLE_BIT wraps VK_SUBGROUP_FEATURE_SHUFFLE_BIT.
	SUBGROUP_FEATURE_SHUFFLE_BIT SubgroupFeatureFlags = 1 << 4
	// SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT wraps VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT.
	SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT SubgroupFeatureFlags = 1 << 5
	// SUBGROUP_FEATURE_CLUSTERED_BIT wraps VK_SUBGROUP_FEATURE_CLUSTERED_BIT.
	SUBGROUP_FEATURE_CLUSTERED_BIT SubgroupFeatureFlags = 1 << 6
	// SUBGROUP_FEATURE_QUAD_BIT wraps VK_SUBGROUP_FEATURE_QUAD_BIT.
	SUBGROUP_FEATURE_QUAD_BIT SubgroupFeatureFlags = 1 << 7
	// SUBGROUP_FEATURE_ROTATE_BIT wraps VK_SUBGROUP_FEATURE_ROTATE_BIT.
	SUBGROUP_FEATURE_ROTATE_BIT SubgroupFeatureFlags = 1 << 9
	// SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT wraps VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT.
	SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT SubgroupFeatureFlags = 1 << 10
	// SUBGROUP_FEATURE_PARTITIONED_BIT_NV wraps VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV.
	SUBGROUP_FEATURE_PARTITIONED_BIT_NV SubgroupFeatureFlags = 1 << 8
	// SUBGROUP_FEATURE_ROTATE_BIT_KHR wraps VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR.
	SUBGROUP_FEATURE_ROTATE_BIT_KHR SubgroupFeatureFlags = SUBGROUP_FEATURE_ROTATE_BIT
	// SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR wraps VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR.
	SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR SubgroupFeatureFlags = SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT
)

func (e SubgroupFeatureFlags) String() string {
	return fmt.Sprintf("VkSubgroupFeatureFlags(%b)", e)
}

// SubmitFlags wraps the bitmask VkSubmitFlags.
type SubmitFlags int32

// SubmitFlagsKHR wraps the bitmask VkSubmitFlagsKHR. An alias for SubmitFlags.
type SubmitFlagsKHR = SubmitFlags

const (
	// SUBMIT_PROTECTED_BIT wraps VK_SUBMIT_PROTECTED_BIT.
	SUBMIT_PROTECTED_BIT SubmitFlags = 1 << 0
	// SUBMIT_PROTECTED_BIT_KHR wraps VK_SUBMIT_PROTECTED_BIT_KHR.
	SUBMIT_PROTECTED_BIT_KHR SubmitFlags = SUBMIT_PROTECTED_BIT
)

func (e SubmitFlags) String() string {
	return fmt.Sprintf("VkSubmitFlags(%b)", e)
}

// SubpassDescriptionFlags wraps the bitmask VkSubpassDescriptionFlags.
type SubpassDescriptionFlags int32

const (
	// SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX wraps VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX.
	SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX SubpassDescriptionFlags = 1 << 0
	// SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX wraps VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX.
	SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX SubpassDescriptionFlags = 1 << 1
	// SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM wraps VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM.
	SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM SubpassDescriptionFlags = 1 << 2
	// SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM wraps VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM.
	SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM SubpassDescriptionFlags = 1 << 3
	// SUBPASS_DESCRIPTION_TILE_SHADING_APRON_BIT_QCOM wraps VK_SUBPASS_DESCRIPTION_TILE_SHADING_APRON_BIT_QCOM.
	SUBPASS_DESCRIPTION_TILE_SHADING_APRON_BIT_QCOM SubpassDescriptionFlags = 1 << 8
	// SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM wraps VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM.
	SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM SubpassDescriptionFlags = SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT
	// SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM wraps VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM.
	SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM SubpassDescriptionFlags = SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT
	// SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM wraps VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM.
	SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM SubpassDescriptionFlags = SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT
	// SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT wraps VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT.
	SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT SubpassDescriptionFlags = 1 << 4
	// SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT wraps VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT.
	SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT SubpassDescriptionFlags = 1 << 5
	// SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT wraps VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT.
	SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT SubpassDescriptionFlags = 1 << 6
	// SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT wraps VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT.
	SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT SubpassDescriptionFlags = 1 << 7
)

func (e SubpassDescriptionFlags) String() string {
	return fmt.Sprintf("VkSubpassDescriptionFlags(%b)", e)
}

// SurfaceCounterFlagsEXT wraps the bitmask VkSurfaceCounterFlagsEXT.
type SurfaceCounterFlagsEXT int32

const (
	// SURFACE_COUNTER_VBLANK_BIT_EXT wraps VK_SURFACE_COUNTER_VBLANK_BIT_EXT.
	SURFACE_COUNTER_VBLANK_BIT_EXT SurfaceCounterFlagsEXT = 1 << 0
	// SURFACE_COUNTER_VBLANK_EXT wraps VK_SURFACE_COUNTER_VBLANK_EXT.
	//
	// Deprecated: Use SURFACE_COUNTER_VBLANK_BIT_EXT instead.
	SURFACE_COUNTER_VBLANK_EXT SurfaceCounterFlagsEXT = SURFACE_COUNTER_VBLANK_BIT_EXT
)

func (e SurfaceCounterFlagsEXT) String() string {
	return fmt.Sprintf("VkSurfaceCounterFlagsEXT(%b)", e)
}

// SurfaceTransformFlagsKHR wraps the bitmask VkSurfaceTransformFlagsKHR.
type SurfaceTransformFlagsKHR int32

const (
	// SURFACE_TRANSFORM_IDENTITY_BIT_KHR wraps VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR.
	SURFACE_TRANSFORM_IDENTITY_BIT_KHR SurfaceTransformFlagsKHR = 1 << 0
	// SURFACE_TRANSFORM_ROTATE_90_BIT_KHR wraps VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR.
	SURFACE_TRANSFORM_ROTATE_90_BIT_KHR SurfaceTransformFlagsKHR = 1 << 1
	// SURFACE_TRANSFORM_ROTATE_180_BIT_KHR wraps VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR.
	SURFACE_TRANSFORM_ROTATE_180_BIT_KHR SurfaceTransformFlagsKHR = 1 << 2
	// SURFACE_TRANSFORM_ROTATE_270_BIT_KHR wraps VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR.
	SURFACE_TRANSFORM_ROTATE_270_BIT_KHR SurfaceTransformFlagsKHR = 1 << 3
	// SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR wraps VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR.
	SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR SurfaceTransformFlagsKHR = 1 << 4
	// SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR wraps VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR.
	SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR SurfaceTransformFlagsKHR = 1 << 5
	// SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR wraps VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR.
	SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR SurfaceTransformFlagsKHR = 1 << 6
	// SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR wraps VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR.
	SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR SurfaceTransformFlagsKHR = 1 << 7
	// SURFACE_TRANSFORM_INHERIT_BIT_KHR wraps VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR.
	SURFACE_TRANSFORM_INHERIT_BIT_KHR SurfaceTransformFlagsKHR = 1 << 8
)

func (e SurfaceTransformFlagsKHR) String() string {
	return fmt.Sprintf("VkSurfaceTransformFlagsKHR(%b)", e)
}

// SwapchainCreateFlagsKHR wraps the bitmask VkSwapchainCreateFlagsKHR.
type SwapchainCreateFlagsKHR int32

const (
	// SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR wraps VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR.
	SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR SwapchainCreateFlagsKHR = 1 << 0
	// SWAPCHAIN_CREATE_PROTECTED_BIT_KHR wraps VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR.
	SWAPCHAIN_CREATE_PROTECTED_BIT_KHR SwapchainCreateFlagsKHR = 1 << 1
	// SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR wraps VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR.
	SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR SwapchainCreateFlagsKHR = 1 << 2
	// SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT wraps VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT.
	SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT SwapchainCreateFlagsKHR = SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_KHR
	// SWAPCHAIN_CREATE_PRESENT_ID_2_BIT_KHR wraps VK_SWAPCHAIN_CREATE_PRESENT_ID_2_BIT_KHR.
	SWAPCHAIN_CREATE_PRESENT_ID_2_BIT_KHR SwapchainCreateFlagsKHR = 1 << 6
	// SWAPCHAIN_CREATE_PRESENT_WAIT_2_BIT_KHR wraps VK_SWAPCHAIN_CREATE_PRESENT_WAIT_2_BIT_KHR.
	SWAPCHAIN_CREATE_PRESENT_WAIT_2_BIT_KHR SwapchainCreateFlagsKHR = 1 << 7
	// SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_KHR wraps VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_KHR.
	SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_KHR SwapchainCreateFlagsKHR = 1 << 3
)

func (e SwapchainCreateFlagsKHR) String() string {
	return fmt.Sprintf("VkSwapchainCreateFlagsKHR(%b)", e)
}

// TensorCreateFlagsARM wraps the bitmask VkTensorCreateFlagsARM.
type TensorCreateFlagsARM int64

const (
	// TENSOR_CREATE_MUTABLE_FORMAT_BIT_ARM wraps VK_TENSOR_CREATE_MUTABLE_FORMAT_BIT_ARM.
	TENSOR_CREATE_MUTABLE_FORMAT_BIT_ARM TensorCreateFlagsARM = 1 << 0
	// TENSOR_CREATE_PROTECTED_BIT_ARM wraps VK_TENSOR_CREATE_PROTECTED_BIT_ARM.
	TENSOR_CREATE_PROTECTED_BIT_ARM TensorCreateFlagsARM = 1 << 1
	// TENSOR_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_ARM wraps VK_TENSOR_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_ARM.
	TENSOR_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_ARM TensorCreateFlagsARM = 1 << 2
)

func (e TensorCreateFlagsARM) String() string {
	return fmt.Sprintf("VkTensorCreateFlagsARM(%b)", e)
}

// TensorUsageFlagsARM wraps the bitmask VkTensorUsageFlagsARM.
type TensorUsageFlagsARM int64

const (
	// TENSOR_USAGE_SHADER_BIT_ARM wraps VK_TENSOR_USAGE_SHADER_BIT_ARM.
	TENSOR_USAGE_SHADER_BIT_ARM TensorUsageFlagsARM = 1 << 1
	// TENSOR_USAGE_TRANSFER_SRC_BIT_ARM wraps VK_TENSOR_USAGE_TRANSFER_SRC_BIT_ARM.
	TENSOR_USAGE_TRANSFER_SRC_BIT_ARM TensorUsageFlagsARM = 1 << 2
	// TENSOR_USAGE_TRANSFER_DST_BIT_ARM wraps VK_TENSOR_USAGE_TRANSFER_DST_BIT_ARM.
	TENSOR_USAGE_TRANSFER_DST_BIT_ARM TensorUsageFlagsARM = 1 << 3
	// TENSOR_USAGE_IMAGE_ALIASING_BIT_ARM wraps VK_TENSOR_USAGE_IMAGE_ALIASING_BIT_ARM.
	TENSOR_USAGE_IMAGE_ALIASING_BIT_ARM TensorUsageFlagsARM = 1 << 4
	// TENSOR_USAGE_DATA_GRAPH_BIT_ARM wraps VK_TENSOR_USAGE_DATA_GRAPH_BIT_ARM.
	TENSOR_USAGE_DATA_GRAPH_BIT_ARM TensorUsageFlagsARM = 1 << 5
)

func (e TensorUsageFlagsARM) String() string {
	return fmt.Sprintf("VkTensorUsageFlagsARM(%b)", e)
}

// TensorViewCreateFlagsARM wraps the bitmask VkTensorViewCreateFlagsARM.
type TensorViewCreateFlagsARM int64

const (
	// TENSOR_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_ARM wraps VK_TENSOR_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_ARM.
	TENSOR_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_ARM TensorViewCreateFlagsARM = 1 << 0
)

func (e TensorViewCreateFlagsARM) String() string {
	return fmt.Sprintf("VkTensorViewCreateFlagsARM(%b)", e)
}

// TileShadingRenderPassFlagsQCOM wraps the bitmask VkTileShadingRenderPassFlagsQCOM.
type TileShadingRenderPassFlagsQCOM int32

const (
	// TILE_SHADING_RENDER_PASS_ENABLE_BIT_QCOM wraps VK_TILE_SHADING_RENDER_PASS_ENABLE_BIT_QCOM.
	TILE_SHADING_RENDER_PASS_ENABLE_BIT_QCOM TileShadingRenderPassFlagsQCOM = 1 << 0
	// TILE_SHADING_RENDER_PASS_PER_TILE_EXECUTION_BIT_QCOM wraps VK_TILE_SHADING_RENDER_PASS_PER_TILE_EXECUTION_BIT_QCOM.
	TILE_SHADING_RENDER_PASS_PER_TILE_EXECUTION_BIT_QCOM TileShadingRenderPassFlagsQCOM = 1 << 1
)

func (e TileShadingRenderPassFlagsQCOM) String() string {
	return fmt.Sprintf("VkTileShadingRenderPassFlagsQCOM(%b)", e)
}

// ToolPurposeFlags wraps the bitmask VkToolPurposeFlags.
type ToolPurposeFlags int32

// ToolPurposeFlagsEXT wraps the bitmask VkToolPurposeFlagsEXT. An alias for ToolPurposeFlags.
type ToolPurposeFlagsEXT = ToolPurposeFlags

const (
	// TOOL_PURPOSE_VALIDATION_BIT wraps VK_TOOL_PURPOSE_VALIDATION_BIT.
	TOOL_PURPOSE_VALIDATION_BIT ToolPurposeFlags = 1 << 0
	// TOOL_PURPOSE_PROFILING_BIT wraps VK_TOOL_PURPOSE_PROFILING_BIT.
	TOOL_PURPOSE_PROFILING_BIT ToolPurposeFlags = 1 << 1
	// TOOL_PURPOSE_TRACING_BIT wraps VK_TOOL_PURPOSE_TRACING_BIT.
	TOOL_PURPOSE_TRACING_BIT ToolPurposeFlags = 1 << 2
	// TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT wraps VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT.
	TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT ToolPurposeFlags = 1 << 3
	// TOOL_PURPOSE_MODIFYING_FEATURES_BIT wraps VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT.
	TOOL_PURPOSE_MODIFYING_FEATURES_BIT ToolPurposeFlags = 1 << 4
	// TOOL_PURPOSE_VALIDATION_BIT_EXT wraps VK_TOOL_PURPOSE_VALIDATION_BIT_EXT.
	TOOL_PURPOSE_VALIDATION_BIT_EXT ToolPurposeFlags = TOOL_PURPOSE_VALIDATION_BIT
	// TOOL_PURPOSE_PROFILING_BIT_EXT wraps VK_TOOL_PURPOSE_PROFILING_BIT_EXT.
	TOOL_PURPOSE_PROFILING_BIT_EXT ToolPurposeFlags = TOOL_PURPOSE_PROFILING_BIT
	// TOOL_PURPOSE_TRACING_BIT_EXT wraps VK_TOOL_PURPOSE_TRACING_BIT_EXT.
	TOOL_PURPOSE_TRACING_BIT_EXT ToolPurposeFlags = TOOL_PURPOSE_TRACING_BIT
	// TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT wraps VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT.
	TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT ToolPurposeFlags = TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT
	// TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT wraps VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT.
	TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT ToolPurposeFlags = TOOL_PURPOSE_MODIFYING_FEATURES_BIT
	// TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT wraps VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT.
	TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT ToolPurposeFlags = 1 << 5
	// TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT wraps VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT.
	TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT ToolPurposeFlags = 1 << 6
)

func (e ToolPurposeFlags) String() string {
	return fmt.Sprintf("VkToolPurposeFlags(%b)", e)
}

// ValidationCacheCreateFlagsEXT wraps the bitmask VkValidationCacheCreateFlagsEXT.
type ValidationCacheCreateFlagsEXT int32

func (e ValidationCacheCreateFlagsEXT) String() string {
	return fmt.Sprintf("VkValidationCacheCreateFlagsEXT(%b)", e)
}

// VideoBeginCodingFlagsKHR wraps the bitmask VkVideoBeginCodingFlagsKHR.
type VideoBeginCodingFlagsKHR int32

func (e VideoBeginCodingFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoBeginCodingFlagsKHR(%b)", e)
}

// VideoCapabilityFlagsKHR wraps the bitmask VkVideoCapabilityFlagsKHR.
type VideoCapabilityFlagsKHR int32

const (
	// VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR wraps VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR.
	VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR VideoCapabilityFlagsKHR = 1 << 0
	// VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR wraps VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR.
	VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR VideoCapabilityFlagsKHR = 1 << 1
)

func (e VideoCapabilityFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoCapabilityFlagsKHR(%b)", e)
}

// VideoChromaSubsamplingFlagsKHR wraps the bitmask VkVideoChromaSubsamplingFlagsKHR.
type VideoChromaSubsamplingFlagsKHR int32

const (
	// VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR wraps VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR.
	VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR VideoChromaSubsamplingFlagsKHR = 0
	// VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR wraps VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR.
	VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR VideoChromaSubsamplingFlagsKHR = 1 << 0
	// VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR wraps VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR.
	VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR VideoChromaSubsamplingFlagsKHR = 1 << 1
	// VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR wraps VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR.
	VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR VideoChromaSubsamplingFlagsKHR = 1 << 2
	// VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR wraps VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR.
	VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR VideoChromaSubsamplingFlagsKHR = 1 << 3
)

func (e VideoChromaSubsamplingFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoChromaSubsamplingFlagsKHR(%b)", e)
}

// VideoCodecOperationFlagsKHR wraps the bitmask VkVideoCodecOperationFlagsKHR.
type VideoCodecOperationFlagsKHR int32

const (
	// VIDEO_CODEC_OPERATION_NONE_KHR wraps VK_VIDEO_CODEC_OPERATION_NONE_KHR.
	VIDEO_CODEC_OPERATION_NONE_KHR VideoCodecOperationFlagsKHR = 0
	// VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR wraps VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR.
	VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR VideoCodecOperationFlagsKHR = 1 << 16
	// VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR wraps VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR.
	VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR VideoCodecOperationFlagsKHR = 1 << 17
	// VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR wraps VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR.
	VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR VideoCodecOperationFlagsKHR = 1 << 0
	// VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR wraps VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR.
	VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR VideoCodecOperationFlagsKHR = 1 << 1
	// VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR wraps VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR.
	VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR VideoCodecOperationFlagsKHR = 1 << 2
	// VIDEO_CODEC_OPERATION_ENCODE_AV1_BIT_KHR wraps VK_VIDEO_CODEC_OPERATION_ENCODE_AV1_BIT_KHR.
	VIDEO_CODEC_OPERATION_ENCODE_AV1_BIT_KHR VideoCodecOperationFlagsKHR = 1 << 18
	// VIDEO_CODEC_OPERATION_DECODE_VP9_BIT_KHR wraps VK_VIDEO_CODEC_OPERATION_DECODE_VP9_BIT_KHR.
	VIDEO_CODEC_OPERATION_DECODE_VP9_BIT_KHR VideoCodecOperationFlagsKHR = 1 << 3
)

func (e VideoCodecOperationFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoCodecOperationFlagsKHR(%b)", e)
}

// VideoCodingControlFlagsKHR wraps the bitmask VkVideoCodingControlFlagsKHR.
type VideoCodingControlFlagsKHR int32

const (
	// VIDEO_CODING_CONTROL_RESET_BIT_KHR wraps VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR.
	VIDEO_CODING_CONTROL_RESET_BIT_KHR VideoCodingControlFlagsKHR = 1 << 0
	// VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR wraps VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR.
	VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR VideoCodingControlFlagsKHR = 1 << 1
	// VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR wraps VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR.
	VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR VideoCodingControlFlagsKHR = 1 << 2
)

func (e VideoCodingControlFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoCodingControlFlagsKHR(%b)", e)
}

// VideoComponentBitDepthFlagsKHR wraps the bitmask VkVideoComponentBitDepthFlagsKHR.
type VideoComponentBitDepthFlagsKHR int32

const (
	// VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR wraps VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR.
	VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR VideoComponentBitDepthFlagsKHR = 0
	// VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR wraps VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR.
	VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR VideoComponentBitDepthFlagsKHR = 1 << 0
	// VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR wraps VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR.
	VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR VideoComponentBitDepthFlagsKHR = 1 << 2
	// VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR wraps VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR.
	VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR VideoComponentBitDepthFlagsKHR = 1 << 4
)

func (e VideoComponentBitDepthFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoComponentBitDepthFlagsKHR(%b)", e)
}

// VideoDecodeCapabilityFlagsKHR wraps the bitmask VkVideoDecodeCapabilityFlagsKHR.
type VideoDecodeCapabilityFlagsKHR int32

const (
	// VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR wraps VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR.
	VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR VideoDecodeCapabilityFlagsKHR = 1 << 0
	// VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR wraps VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR.
	VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR VideoDecodeCapabilityFlagsKHR = 1 << 1
)

func (e VideoDecodeCapabilityFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoDecodeCapabilityFlagsKHR(%b)", e)
}

// VideoDecodeFlagsKHR wraps the bitmask VkVideoDecodeFlagsKHR.
type VideoDecodeFlagsKHR int32

func (e VideoDecodeFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoDecodeFlagsKHR(%b)", e)
}

// VideoDecodeH264PictureLayoutFlagsKHR wraps the bitmask VkVideoDecodeH264PictureLayoutFlagsKHR.
type VideoDecodeH264PictureLayoutFlagsKHR int32

const (
	// VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR wraps VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR.
	VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR VideoDecodeH264PictureLayoutFlagsKHR = 0
	// VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR wraps VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR.
	VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR VideoDecodeH264PictureLayoutFlagsKHR = 1 << 0
	// VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR wraps VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR.
	VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR VideoDecodeH264PictureLayoutFlagsKHR = 1 << 1
)

func (e VideoDecodeH264PictureLayoutFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoDecodeH264PictureLayoutFlagsKHR(%b)", e)
}

// VideoDecodeUsageFlagsKHR wraps the bitmask VkVideoDecodeUsageFlagsKHR.
type VideoDecodeUsageFlagsKHR int32

const (
	// VIDEO_DECODE_USAGE_DEFAULT_KHR wraps VK_VIDEO_DECODE_USAGE_DEFAULT_KHR.
	VIDEO_DECODE_USAGE_DEFAULT_KHR VideoDecodeUsageFlagsKHR = 0
	// VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR wraps VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR.
	VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR VideoDecodeUsageFlagsKHR = 1 << 0
	// VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR wraps VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR.
	VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR VideoDecodeUsageFlagsKHR = 1 << 1
	// VIDEO_DECODE_USAGE_STREAMING_BIT_KHR wraps VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR.
	VIDEO_DECODE_USAGE_STREAMING_BIT_KHR VideoDecodeUsageFlagsKHR = 1 << 2
)

func (e VideoDecodeUsageFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoDecodeUsageFlagsKHR(%b)", e)
}

// VideoEncodeAV1CapabilityFlagsKHR wraps the bitmask VkVideoEncodeAV1CapabilityFlagsKHR.
type VideoEncodeAV1CapabilityFlagsKHR int32

const (
	// VIDEO_ENCODE_AV1_CAPABILITY_PER_RATE_CONTROL_GROUP_MIN_MAX_Q_INDEX_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_CAPABILITY_PER_RATE_CONTROL_GROUP_MIN_MAX_Q_INDEX_BIT_KHR.
	VIDEO_ENCODE_AV1_CAPABILITY_PER_RATE_CONTROL_GROUP_MIN_MAX_Q_INDEX_BIT_KHR VideoEncodeAV1CapabilityFlagsKHR = 1 << 0
	// VIDEO_ENCODE_AV1_CAPABILITY_GENERATE_OBU_EXTENSION_HEADER_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_CAPABILITY_GENERATE_OBU_EXTENSION_HEADER_BIT_KHR.
	VIDEO_ENCODE_AV1_CAPABILITY_GENERATE_OBU_EXTENSION_HEADER_BIT_KHR VideoEncodeAV1CapabilityFlagsKHR = 1 << 1
	// VIDEO_ENCODE_AV1_CAPABILITY_PRIMARY_REFERENCE_CDF_ONLY_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_CAPABILITY_PRIMARY_REFERENCE_CDF_ONLY_BIT_KHR.
	VIDEO_ENCODE_AV1_CAPABILITY_PRIMARY_REFERENCE_CDF_ONLY_BIT_KHR VideoEncodeAV1CapabilityFlagsKHR = 1 << 2
	// VIDEO_ENCODE_AV1_CAPABILITY_FRAME_SIZE_OVERRIDE_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_CAPABILITY_FRAME_SIZE_OVERRIDE_BIT_KHR.
	VIDEO_ENCODE_AV1_CAPABILITY_FRAME_SIZE_OVERRIDE_BIT_KHR VideoEncodeAV1CapabilityFlagsKHR = 1 << 3
	// VIDEO_ENCODE_AV1_CAPABILITY_MOTION_VECTOR_SCALING_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_CAPABILITY_MOTION_VECTOR_SCALING_BIT_KHR.
	VIDEO_ENCODE_AV1_CAPABILITY_MOTION_VECTOR_SCALING_BIT_KHR VideoEncodeAV1CapabilityFlagsKHR = 1 << 4
	// VIDEO_ENCODE_AV1_CAPABILITY_COMPOUND_PREDICTION_INTRA_REFRESH_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_CAPABILITY_COMPOUND_PREDICTION_INTRA_REFRESH_BIT_KHR.
	VIDEO_ENCODE_AV1_CAPABILITY_COMPOUND_PREDICTION_INTRA_REFRESH_BIT_KHR VideoEncodeAV1CapabilityFlagsKHR = 1 << 5
)

func (e VideoEncodeAV1CapabilityFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeAV1CapabilityFlagsKHR(%b)", e)
}

// VideoEncodeAV1RateControlFlagsKHR wraps the bitmask VkVideoEncodeAV1RateControlFlagsKHR.
type VideoEncodeAV1RateControlFlagsKHR int32

const (
	// VIDEO_ENCODE_AV1_RATE_CONTROL_REGULAR_GOP_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REGULAR_GOP_BIT_KHR.
	VIDEO_ENCODE_AV1_RATE_CONTROL_REGULAR_GOP_BIT_KHR VideoEncodeAV1RateControlFlagsKHR = 1 << 0
	// VIDEO_ENCODE_AV1_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR.
	VIDEO_ENCODE_AV1_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR VideoEncodeAV1RateControlFlagsKHR = 1 << 1
	// VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR.
	VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR VideoEncodeAV1RateControlFlagsKHR = 1 << 2
	// VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR.
	VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR VideoEncodeAV1RateControlFlagsKHR = 1 << 3
)

func (e VideoEncodeAV1RateControlFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeAV1RateControlFlagsKHR(%b)", e)
}

// VideoEncodeAV1StdFlagsKHR wraps the bitmask VkVideoEncodeAV1StdFlagsKHR.
type VideoEncodeAV1StdFlagsKHR int32

const (
	// VIDEO_ENCODE_AV1_STD_UNIFORM_TILE_SPACING_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_STD_UNIFORM_TILE_SPACING_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_AV1_STD_UNIFORM_TILE_SPACING_FLAG_SET_BIT_KHR VideoEncodeAV1StdFlagsKHR = 1 << 0
	// VIDEO_ENCODE_AV1_STD_SKIP_MODE_PRESENT_UNSET_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_STD_SKIP_MODE_PRESENT_UNSET_BIT_KHR.
	VIDEO_ENCODE_AV1_STD_SKIP_MODE_PRESENT_UNSET_BIT_KHR VideoEncodeAV1StdFlagsKHR = 1 << 1
	// VIDEO_ENCODE_AV1_STD_PRIMARY_REF_FRAME_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_STD_PRIMARY_REF_FRAME_BIT_KHR.
	VIDEO_ENCODE_AV1_STD_PRIMARY_REF_FRAME_BIT_KHR VideoEncodeAV1StdFlagsKHR = 1 << 2
	// VIDEO_ENCODE_AV1_STD_DELTA_Q_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_STD_DELTA_Q_BIT_KHR.
	VIDEO_ENCODE_AV1_STD_DELTA_Q_BIT_KHR VideoEncodeAV1StdFlagsKHR = 1 << 3
)

func (e VideoEncodeAV1StdFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeAV1StdFlagsKHR(%b)", e)
}

// VideoEncodeAV1SuperblockSizeFlagsKHR wraps the bitmask VkVideoEncodeAV1SuperblockSizeFlagsKHR.
type VideoEncodeAV1SuperblockSizeFlagsKHR int32

const (
	// VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_64_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_64_BIT_KHR.
	VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_64_BIT_KHR VideoEncodeAV1SuperblockSizeFlagsKHR = 1 << 0
	// VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_128_BIT_KHR wraps VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_128_BIT_KHR.
	VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_128_BIT_KHR VideoEncodeAV1SuperblockSizeFlagsKHR = 1 << 1
)

func (e VideoEncodeAV1SuperblockSizeFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeAV1SuperblockSizeFlagsKHR(%b)", e)
}

// VideoEncodeCapabilityFlagsKHR wraps the bitmask VkVideoEncodeCapabilityFlagsKHR.
type VideoEncodeCapabilityFlagsKHR int32

const (
	// VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR wraps VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR.
	VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR VideoEncodeCapabilityFlagsKHR = 1 << 0
	// VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR wraps VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR.
	VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR VideoEncodeCapabilityFlagsKHR = 1 << 1
	// VIDEO_ENCODE_CAPABILITY_QUANTIZATION_DELTA_MAP_BIT_KHR wraps VK_VIDEO_ENCODE_CAPABILITY_QUANTIZATION_DELTA_MAP_BIT_KHR.
	VIDEO_ENCODE_CAPABILITY_QUANTIZATION_DELTA_MAP_BIT_KHR VideoEncodeCapabilityFlagsKHR = 1 << 2
	// VIDEO_ENCODE_CAPABILITY_EMPHASIS_MAP_BIT_KHR wraps VK_VIDEO_ENCODE_CAPABILITY_EMPHASIS_MAP_BIT_KHR.
	VIDEO_ENCODE_CAPABILITY_EMPHASIS_MAP_BIT_KHR VideoEncodeCapabilityFlagsKHR = 1 << 3
)

func (e VideoEncodeCapabilityFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeCapabilityFlagsKHR(%b)", e)
}

// VideoEncodeContentFlagsKHR wraps the bitmask VkVideoEncodeContentFlagsKHR.
type VideoEncodeContentFlagsKHR int32

const (
	// VIDEO_ENCODE_CONTENT_DEFAULT_KHR wraps VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR.
	VIDEO_ENCODE_CONTENT_DEFAULT_KHR VideoEncodeContentFlagsKHR = 0
	// VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR wraps VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR.
	VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR VideoEncodeContentFlagsKHR = 1 << 0
	// VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR wraps VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR.
	VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR VideoEncodeContentFlagsKHR = 1 << 1
	// VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR wraps VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR.
	VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR VideoEncodeContentFlagsKHR = 1 << 2
)

func (e VideoEncodeContentFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeContentFlagsKHR(%b)", e)
}

// VideoEncodeFeedbackFlagsKHR wraps the bitmask VkVideoEncodeFeedbackFlagsKHR.
type VideoEncodeFeedbackFlagsKHR int32

const (
	// VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR wraps VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR.
	VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR VideoEncodeFeedbackFlagsKHR = 1 << 0
	// VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR wraps VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR.
	VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR VideoEncodeFeedbackFlagsKHR = 1 << 1
	// VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR wraps VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR.
	VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR VideoEncodeFeedbackFlagsKHR = 1 << 2
)

func (e VideoEncodeFeedbackFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeFeedbackFlagsKHR(%b)", e)
}

// VideoEncodeFlagsKHR wraps the bitmask VkVideoEncodeFlagsKHR.
type VideoEncodeFlagsKHR int32

const (
	// VIDEO_ENCODE_INTRA_REFRESH_BIT_KHR wraps VK_VIDEO_ENCODE_INTRA_REFRESH_BIT_KHR.
	VIDEO_ENCODE_INTRA_REFRESH_BIT_KHR VideoEncodeFlagsKHR = 1 << 2
	// VIDEO_ENCODE_WITH_QUANTIZATION_DELTA_MAP_BIT_KHR wraps VK_VIDEO_ENCODE_WITH_QUANTIZATION_DELTA_MAP_BIT_KHR.
	VIDEO_ENCODE_WITH_QUANTIZATION_DELTA_MAP_BIT_KHR VideoEncodeFlagsKHR = 1 << 0
	// VIDEO_ENCODE_WITH_EMPHASIS_MAP_BIT_KHR wraps VK_VIDEO_ENCODE_WITH_EMPHASIS_MAP_BIT_KHR.
	VIDEO_ENCODE_WITH_EMPHASIS_MAP_BIT_KHR VideoEncodeFlagsKHR = 1 << 1
)

func (e VideoEncodeFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeFlagsKHR(%b)", e)
}

// VideoEncodeH264CapabilityFlagsKHR wraps the bitmask VkVideoEncodeH264CapabilityFlagsKHR.
type VideoEncodeH264CapabilityFlagsKHR int32

const (
	// VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR wraps VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR.
	VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR VideoEncodeH264CapabilityFlagsKHR = 1 << 0
	// VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR wraps VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR.
	VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR VideoEncodeH264CapabilityFlagsKHR = 1 << 1
	// VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR wraps VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR.
	VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR VideoEncodeH264CapabilityFlagsKHR = 1 << 2
	// VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR wraps VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR.
	VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR VideoEncodeH264CapabilityFlagsKHR = 1 << 3
	// VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR wraps VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR.
	VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR VideoEncodeH264CapabilityFlagsKHR = 1 << 4
	// VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR wraps VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR.
	VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR VideoEncodeH264CapabilityFlagsKHR = 1 << 5
	// VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR wraps VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR.
	VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR VideoEncodeH264CapabilityFlagsKHR = 1 << 6
	// VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR wraps VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR.
	VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR VideoEncodeH264CapabilityFlagsKHR = 1 << 7
	// VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR wraps VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR.
	VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR VideoEncodeH264CapabilityFlagsKHR = 1 << 8
	// VIDEO_ENCODE_H264_CAPABILITY_B_PICTURE_INTRA_REFRESH_BIT_KHR wraps VK_VIDEO_ENCODE_H264_CAPABILITY_B_PICTURE_INTRA_REFRESH_BIT_KHR.
	VIDEO_ENCODE_H264_CAPABILITY_B_PICTURE_INTRA_REFRESH_BIT_KHR VideoEncodeH264CapabilityFlagsKHR = 1 << 10
	// VIDEO_ENCODE_H264_CAPABILITY_MB_QP_DIFF_WRAPAROUND_BIT_KHR wraps VK_VIDEO_ENCODE_H264_CAPABILITY_MB_QP_DIFF_WRAPAROUND_BIT_KHR.
	VIDEO_ENCODE_H264_CAPABILITY_MB_QP_DIFF_WRAPAROUND_BIT_KHR VideoEncodeH264CapabilityFlagsKHR = 1 << 9
)

func (e VideoEncodeH264CapabilityFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeH264CapabilityFlagsKHR(%b)", e)
}

// VideoEncodeH264RateControlFlagsKHR wraps the bitmask VkVideoEncodeH264RateControlFlagsKHR.
type VideoEncodeH264RateControlFlagsKHR int32

const (
	// VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR wraps VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR.
	VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR VideoEncodeH264RateControlFlagsKHR = 1 << 0
	// VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR wraps VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR.
	VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR VideoEncodeH264RateControlFlagsKHR = 1 << 1
	// VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR wraps VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR.
	VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR VideoEncodeH264RateControlFlagsKHR = 1 << 2
	// VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR wraps VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR.
	VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR VideoEncodeH264RateControlFlagsKHR = 1 << 3
	// VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR wraps VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR.
	VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR VideoEncodeH264RateControlFlagsKHR = 1 << 4
)

func (e VideoEncodeH264RateControlFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeH264RateControlFlagsKHR(%b)", e)
}

// VideoEncodeH264StdFlagsKHR wraps the bitmask VkVideoEncodeH264StdFlagsKHR.
type VideoEncodeH264StdFlagsKHR int32

const (
	// VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 0
	// VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 1
	// VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 2
	// VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR.
	VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 3
	// VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR.
	VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 4
	// VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR.
	VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 5
	// VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 6
	// VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR.
	VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 7
	// VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR.
	VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 8
	// VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 9
	// VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR.
	VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 10
	// VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR.
	VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 11
	// VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 12
	// VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR.
	VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 13
	// VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 14
	// VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR.
	VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 15
	// VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR.
	VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 16
	// VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR.
	VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 17
	// VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR.
	VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 19
	// VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR wraps VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR.
	VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR VideoEncodeH264StdFlagsKHR = 1 << 20
)

func (e VideoEncodeH264StdFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeH264StdFlagsKHR(%b)", e)
}

// VideoEncodeH265CapabilityFlagsKHR wraps the bitmask VkVideoEncodeH265CapabilityFlagsKHR.
type VideoEncodeH265CapabilityFlagsKHR int32

const (
	// VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR.
	VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR VideoEncodeH265CapabilityFlagsKHR = 1 << 0
	// VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR.
	VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR VideoEncodeH265CapabilityFlagsKHR = 1 << 1
	// VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR.
	VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR VideoEncodeH265CapabilityFlagsKHR = 1 << 2
	// VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR.
	VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR VideoEncodeH265CapabilityFlagsKHR = 1 << 3
	// VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR.
	VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR VideoEncodeH265CapabilityFlagsKHR = 1 << 4
	// VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR.
	VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR VideoEncodeH265CapabilityFlagsKHR = 1 << 5
	// VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR.
	VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR VideoEncodeH265CapabilityFlagsKHR = 1 << 6
	// VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR.
	VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR VideoEncodeH265CapabilityFlagsKHR = 1 << 7
	// VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR.
	VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR VideoEncodeH265CapabilityFlagsKHR = 1 << 8
	// VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR.
	VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR VideoEncodeH265CapabilityFlagsKHR = 1 << 9
	// VIDEO_ENCODE_H265_CAPABILITY_B_PICTURE_INTRA_REFRESH_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CAPABILITY_B_PICTURE_INTRA_REFRESH_BIT_KHR.
	VIDEO_ENCODE_H265_CAPABILITY_B_PICTURE_INTRA_REFRESH_BIT_KHR VideoEncodeH265CapabilityFlagsKHR = 1 << 11
	// VIDEO_ENCODE_H265_CAPABILITY_CU_QP_DIFF_WRAPAROUND_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CAPABILITY_CU_QP_DIFF_WRAPAROUND_BIT_KHR.
	VIDEO_ENCODE_H265_CAPABILITY_CU_QP_DIFF_WRAPAROUND_BIT_KHR VideoEncodeH265CapabilityFlagsKHR = 1 << 10
)

func (e VideoEncodeH265CapabilityFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeH265CapabilityFlagsKHR(%b)", e)
}

// VideoEncodeH265CtbSizeFlagsKHR wraps the bitmask VkVideoEncodeH265CtbSizeFlagsKHR.
type VideoEncodeH265CtbSizeFlagsKHR int32

const (
	// VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR.
	VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR VideoEncodeH265CtbSizeFlagsKHR = 1 << 0
	// VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR.
	VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR VideoEncodeH265CtbSizeFlagsKHR = 1 << 1
	// VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR wraps VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR.
	VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR VideoEncodeH265CtbSizeFlagsKHR = 1 << 2
)

func (e VideoEncodeH265CtbSizeFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeH265CtbSizeFlagsKHR(%b)", e)
}

// VideoEncodeH265RateControlFlagsKHR wraps the bitmask VkVideoEncodeH265RateControlFlagsKHR.
type VideoEncodeH265RateControlFlagsKHR int32

const (
	// VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR wraps VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR.
	VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR VideoEncodeH265RateControlFlagsKHR = 1 << 0
	// VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR wraps VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR.
	VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR VideoEncodeH265RateControlFlagsKHR = 1 << 1
	// VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR wraps VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR.
	VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR VideoEncodeH265RateControlFlagsKHR = 1 << 2
	// VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR wraps VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR.
	VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR VideoEncodeH265RateControlFlagsKHR = 1 << 3
	// VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR wraps VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR.
	VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR VideoEncodeH265RateControlFlagsKHR = 1 << 4
)

func (e VideoEncodeH265RateControlFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeH265RateControlFlagsKHR(%b)", e)
}

// VideoEncodeH265StdFlagsKHR wraps the bitmask VkVideoEncodeH265StdFlagsKHR.
type VideoEncodeH265StdFlagsKHR int32

const (
	// VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 0
	// VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 1
	// VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 2
	// VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 3
	// VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 4
	// VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR.
	VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 5
	// VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 6
	// VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 7
	// VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR.
	VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 8
	// VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 9
	// VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 10
	// VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 11
	// VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 12
	// VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 13
	// VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 14
	// VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 15
	// VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 16
	// VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 17
	// VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR.
	VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 18
	// VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR.
	VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 19
	// VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR wraps VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR.
	VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR VideoEncodeH265StdFlagsKHR = 1 << 20
)

func (e VideoEncodeH265StdFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeH265StdFlagsKHR(%b)", e)
}

// VideoEncodeH265TransformBlockSizeFlagsKHR wraps the bitmask VkVideoEncodeH265TransformBlockSizeFlagsKHR.
type VideoEncodeH265TransformBlockSizeFlagsKHR int32

const (
	// VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR wraps VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR.
	VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR VideoEncodeH265TransformBlockSizeFlagsKHR = 1 << 0
	// VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR wraps VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR.
	VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR VideoEncodeH265TransformBlockSizeFlagsKHR = 1 << 1
	// VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR wraps VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR.
	VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR VideoEncodeH265TransformBlockSizeFlagsKHR = 1 << 2
	// VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR wraps VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR.
	VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR VideoEncodeH265TransformBlockSizeFlagsKHR = 1 << 3
)

func (e VideoEncodeH265TransformBlockSizeFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeH265TransformBlockSizeFlagsKHR(%b)", e)
}

// VideoEncodeIntraRefreshModeFlagsKHR wraps the bitmask VkVideoEncodeIntraRefreshModeFlagsKHR.
type VideoEncodeIntraRefreshModeFlagsKHR int32

const (
	// VIDEO_ENCODE_INTRA_REFRESH_MODE_NONE_KHR wraps VK_VIDEO_ENCODE_INTRA_REFRESH_MODE_NONE_KHR.
	VIDEO_ENCODE_INTRA_REFRESH_MODE_NONE_KHR VideoEncodeIntraRefreshModeFlagsKHR = 0
	// VIDEO_ENCODE_INTRA_REFRESH_MODE_PER_PICTURE_PARTITION_BIT_KHR wraps VK_VIDEO_ENCODE_INTRA_REFRESH_MODE_PER_PICTURE_PARTITION_BIT_KHR.
	VIDEO_ENCODE_INTRA_REFRESH_MODE_PER_PICTURE_PARTITION_BIT_KHR VideoEncodeIntraRefreshModeFlagsKHR = 1 << 0
	// VIDEO_ENCODE_INTRA_REFRESH_MODE_BLOCK_BASED_BIT_KHR wraps VK_VIDEO_ENCODE_INTRA_REFRESH_MODE_BLOCK_BASED_BIT_KHR.
	VIDEO_ENCODE_INTRA_REFRESH_MODE_BLOCK_BASED_BIT_KHR VideoEncodeIntraRefreshModeFlagsKHR = 1 << 1
	// VIDEO_ENCODE_INTRA_REFRESH_MODE_BLOCK_ROW_BASED_BIT_KHR wraps VK_VIDEO_ENCODE_INTRA_REFRESH_MODE_BLOCK_ROW_BASED_BIT_KHR.
	VIDEO_ENCODE_INTRA_REFRESH_MODE_BLOCK_ROW_BASED_BIT_KHR VideoEncodeIntraRefreshModeFlagsKHR = 1 << 2
	// VIDEO_ENCODE_INTRA_REFRESH_MODE_BLOCK_COLUMN_BASED_BIT_KHR wraps VK_VIDEO_ENCODE_INTRA_REFRESH_MODE_BLOCK_COLUMN_BASED_BIT_KHR.
	VIDEO_ENCODE_INTRA_REFRESH_MODE_BLOCK_COLUMN_BASED_BIT_KHR VideoEncodeIntraRefreshModeFlagsKHR = 1 << 3
)

func (e VideoEncodeIntraRefreshModeFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeIntraRefreshModeFlagsKHR(%b)", e)
}

// VideoEncodeRateControlFlagsKHR wraps the bitmask VkVideoEncodeRateControlFlagsKHR.
type VideoEncodeRateControlFlagsKHR int32

func (e VideoEncodeRateControlFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeRateControlFlagsKHR(%b)", e)
}

// VideoEncodeRateControlModeFlagsKHR wraps the bitmask VkVideoEncodeRateControlModeFlagsKHR.
type VideoEncodeRateControlModeFlagsKHR int32

const (
	// VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR wraps VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR.
	VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR VideoEncodeRateControlModeFlagsKHR = 0
	// VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR wraps VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR.
	VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR VideoEncodeRateControlModeFlagsKHR = 1 << 0
	// VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR wraps VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR.
	VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR VideoEncodeRateControlModeFlagsKHR = 1 << 1
	// VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR wraps VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR.
	VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR VideoEncodeRateControlModeFlagsKHR = 1 << 2
)

func (e VideoEncodeRateControlModeFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeRateControlModeFlagsKHR(%b)", e)
}

// VideoEncodeRgbChromaOffsetFlagsVALVE wraps the bitmask VkVideoEncodeRgbChromaOffsetFlagsVALVE.
type VideoEncodeRgbChromaOffsetFlagsVALVE int32

const (
	// VIDEO_ENCODE_RGB_CHROMA_OFFSET_COSITED_EVEN_BIT_VALVE wraps VK_VIDEO_ENCODE_RGB_CHROMA_OFFSET_COSITED_EVEN_BIT_VALVE.
	VIDEO_ENCODE_RGB_CHROMA_OFFSET_COSITED_EVEN_BIT_VALVE VideoEncodeRgbChromaOffsetFlagsVALVE = 1 << 0
	// VIDEO_ENCODE_RGB_CHROMA_OFFSET_MIDPOINT_BIT_VALVE wraps VK_VIDEO_ENCODE_RGB_CHROMA_OFFSET_MIDPOINT_BIT_VALVE.
	VIDEO_ENCODE_RGB_CHROMA_OFFSET_MIDPOINT_BIT_VALVE VideoEncodeRgbChromaOffsetFlagsVALVE = 1 << 1
)

func (e VideoEncodeRgbChromaOffsetFlagsVALVE) String() string {
	return fmt.Sprintf("VkVideoEncodeRgbChromaOffsetFlagsVALVE(%b)", e)
}

// VideoEncodeRgbModelConversionFlagsVALVE wraps the bitmask VkVideoEncodeRgbModelConversionFlagsVALVE.
type VideoEncodeRgbModelConversionFlagsVALVE int32

const (
	// VIDEO_ENCODE_RGB_MODEL_CONVERSION_RGB_IDENTITY_BIT_VALVE wraps VK_VIDEO_ENCODE_RGB_MODEL_CONVERSION_RGB_IDENTITY_BIT_VALVE.
	VIDEO_ENCODE_RGB_MODEL_CONVERSION_RGB_IDENTITY_BIT_VALVE VideoEncodeRgbModelConversionFlagsVALVE = 1 << 0
	// VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_IDENTITY_BIT_VALVE wraps VK_VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_IDENTITY_BIT_VALVE.
	VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_IDENTITY_BIT_VALVE VideoEncodeRgbModelConversionFlagsVALVE = 1 << 1
	// VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_709_BIT_VALVE wraps VK_VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_709_BIT_VALVE.
	VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_709_BIT_VALVE VideoEncodeRgbModelConversionFlagsVALVE = 1 << 2
	// VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_601_BIT_VALVE wraps VK_VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_601_BIT_VALVE.
	VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_601_BIT_VALVE VideoEncodeRgbModelConversionFlagsVALVE = 1 << 3
	// VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_2020_BIT_VALVE wraps VK_VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_2020_BIT_VALVE.
	VIDEO_ENCODE_RGB_MODEL_CONVERSION_YCBCR_2020_BIT_VALVE VideoEncodeRgbModelConversionFlagsVALVE = 1 << 4
)

func (e VideoEncodeRgbModelConversionFlagsVALVE) String() string {
	return fmt.Sprintf("VkVideoEncodeRgbModelConversionFlagsVALVE(%b)", e)
}

// VideoEncodeRgbRangeCompressionFlagsVALVE wraps the bitmask VkVideoEncodeRgbRangeCompressionFlagsVALVE.
type VideoEncodeRgbRangeCompressionFlagsVALVE int32

const (
	// VIDEO_ENCODE_RGB_RANGE_COMPRESSION_FULL_RANGE_BIT_VALVE wraps VK_VIDEO_ENCODE_RGB_RANGE_COMPRESSION_FULL_RANGE_BIT_VALVE.
	VIDEO_ENCODE_RGB_RANGE_COMPRESSION_FULL_RANGE_BIT_VALVE VideoEncodeRgbRangeCompressionFlagsVALVE = 1 << 0
	// VIDEO_ENCODE_RGB_RANGE_COMPRESSION_NARROW_RANGE_BIT_VALVE wraps VK_VIDEO_ENCODE_RGB_RANGE_COMPRESSION_NARROW_RANGE_BIT_VALVE.
	VIDEO_ENCODE_RGB_RANGE_COMPRESSION_NARROW_RANGE_BIT_VALVE VideoEncodeRgbRangeCompressionFlagsVALVE = 1 << 1
)

func (e VideoEncodeRgbRangeCompressionFlagsVALVE) String() string {
	return fmt.Sprintf("VkVideoEncodeRgbRangeCompressionFlagsVALVE(%b)", e)
}

// VideoEncodeUsageFlagsKHR wraps the bitmask VkVideoEncodeUsageFlagsKHR.
type VideoEncodeUsageFlagsKHR int32

const (
	// VIDEO_ENCODE_USAGE_DEFAULT_KHR wraps VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR.
	VIDEO_ENCODE_USAGE_DEFAULT_KHR VideoEncodeUsageFlagsKHR = 0
	// VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR wraps VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR.
	VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR VideoEncodeUsageFlagsKHR = 1 << 0
	// VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR wraps VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR.
	VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR VideoEncodeUsageFlagsKHR = 1 << 1
	// VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR wraps VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR.
	VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR VideoEncodeUsageFlagsKHR = 1 << 2
	// VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR wraps VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR.
	VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR VideoEncodeUsageFlagsKHR = 1 << 3
)

func (e VideoEncodeUsageFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEncodeUsageFlagsKHR(%b)", e)
}

// VideoEndCodingFlagsKHR wraps the bitmask VkVideoEndCodingFlagsKHR.
type VideoEndCodingFlagsKHR int32

func (e VideoEndCodingFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoEndCodingFlagsKHR(%b)", e)
}

// VideoSessionCreateFlagsKHR wraps the bitmask VkVideoSessionCreateFlagsKHR.
type VideoSessionCreateFlagsKHR int32

const (
	// VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR wraps VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR.
	VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR VideoSessionCreateFlagsKHR = 1 << 0
	// VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR wraps VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR.
	VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR VideoSessionCreateFlagsKHR = 1 << 1
	// VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR wraps VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR.
	VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR VideoSessionCreateFlagsKHR = 1 << 2
	// VIDEO_SESSION_CREATE_ALLOW_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR wraps VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR.
	VIDEO_SESSION_CREATE_ALLOW_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR VideoSessionCreateFlagsKHR = 1 << 3
	// VIDEO_SESSION_CREATE_ALLOW_ENCODE_EMPHASIS_MAP_BIT_KHR wraps VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_EMPHASIS_MAP_BIT_KHR.
	VIDEO_SESSION_CREATE_ALLOW_ENCODE_EMPHASIS_MAP_BIT_KHR VideoSessionCreateFlagsKHR = 1 << 4
	// VIDEO_SESSION_CREATE_INLINE_SESSION_PARAMETERS_BIT_KHR wraps VK_VIDEO_SESSION_CREATE_INLINE_SESSION_PARAMETERS_BIT_KHR.
	VIDEO_SESSION_CREATE_INLINE_SESSION_PARAMETERS_BIT_KHR VideoSessionCreateFlagsKHR = 1 << 5
)

func (e VideoSessionCreateFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoSessionCreateFlagsKHR(%b)", e)
}

// VideoSessionParametersCreateFlagsKHR wraps the bitmask VkVideoSessionParametersCreateFlagsKHR.
type VideoSessionParametersCreateFlagsKHR int32

const (
	// VIDEO_SESSION_PARAMETERS_CREATE_QUANTIZATION_MAP_COMPATIBLE_BIT_KHR wraps VK_VIDEO_SESSION_PARAMETERS_CREATE_QUANTIZATION_MAP_COMPATIBLE_BIT_KHR.
	VIDEO_SESSION_PARAMETERS_CREATE_QUANTIZATION_MAP_COMPATIBLE_BIT_KHR VideoSessionParametersCreateFlagsKHR = 1 << 0
)

func (e VideoSessionParametersCreateFlagsKHR) String() string {
	return fmt.Sprintf("VkVideoSessionParametersCreateFlagsKHR(%b)", e)
}
