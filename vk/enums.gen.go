package vk

import "fmt"

// AttachmentLoadOp wraps the enum VkAttachmentLoadOp.
type AttachmentLoadOp int32

const (
	// ATTACHMENT_LOAD_OP_LOAD wraps VK_ATTACHMENT_LOAD_OP_LOAD.
	ATTACHMENT_LOAD_OP_LOAD AttachmentLoadOp = 0
	// ATTACHMENT_LOAD_OP_CLEAR wraps VK_ATTACHMENT_LOAD_OP_CLEAR.
	ATTACHMENT_LOAD_OP_CLEAR AttachmentLoadOp = 1
	// ATTACHMENT_LOAD_OP_DONT_CARE wraps VK_ATTACHMENT_LOAD_OP_DONT_CARE.
	ATTACHMENT_LOAD_OP_DONT_CARE AttachmentLoadOp = 2
)

func (e AttachmentLoadOp) String() string {
	switch e {
	case ATTACHMENT_LOAD_OP_LOAD:
		return "VK_ATTACHMENT_LOAD_OP_LOAD"
	case ATTACHMENT_LOAD_OP_CLEAR:
		return "VK_ATTACHMENT_LOAD_OP_CLEAR"
	case ATTACHMENT_LOAD_OP_DONT_CARE:
		return "VK_ATTACHMENT_LOAD_OP_DONT_CARE"
	default:
		return fmt.Sprintf("VkAttachmentLoadOp(%d)", e)
	}
}

// AttachmentStoreOp wraps the enum VkAttachmentStoreOp.
type AttachmentStoreOp int32

const (
	// ATTACHMENT_STORE_OP_STORE wraps VK_ATTACHMENT_STORE_OP_STORE.
	ATTACHMENT_STORE_OP_STORE AttachmentStoreOp = 0
	// ATTACHMENT_STORE_OP_DONT_CARE wraps VK_ATTACHMENT_STORE_OP_DONT_CARE.
	ATTACHMENT_STORE_OP_DONT_CARE AttachmentStoreOp = 1
)

func (e AttachmentStoreOp) String() string {
	switch e {
	case ATTACHMENT_STORE_OP_STORE:
		return "VK_ATTACHMENT_STORE_OP_STORE"
	case ATTACHMENT_STORE_OP_DONT_CARE:
		return "VK_ATTACHMENT_STORE_OP_DONT_CARE"
	default:
		return fmt.Sprintf("VkAttachmentStoreOp(%d)", e)
	}
}

// BlendFactor wraps the enum VkBlendFactor.
type BlendFactor int32

const (
	// BLEND_FACTOR_ZERO wraps VK_BLEND_FACTOR_ZERO.
	BLEND_FACTOR_ZERO BlendFactor = 0
	// BLEND_FACTOR_ONE wraps VK_BLEND_FACTOR_ONE.
	BLEND_FACTOR_ONE BlendFactor = 1
	// BLEND_FACTOR_SRC_COLOR wraps VK_BLEND_FACTOR_SRC_COLOR.
	BLEND_FACTOR_SRC_COLOR BlendFactor = 2
	// BLEND_FACTOR_ONE_MINUS_SRC_COLOR wraps VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR.
	BLEND_FACTOR_ONE_MINUS_SRC_COLOR BlendFactor = 3
	// BLEND_FACTOR_DST_COLOR wraps VK_BLEND_FACTOR_DST_COLOR.
	BLEND_FACTOR_DST_COLOR BlendFactor = 4
	// BLEND_FACTOR_ONE_MINUS_DST_COLOR wraps VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR.
	BLEND_FACTOR_ONE_MINUS_DST_COLOR BlendFactor = 5
	// BLEND_FACTOR_SRC_ALPHA wraps VK_BLEND_FACTOR_SRC_ALPHA.
	BLEND_FACTOR_SRC_ALPHA BlendFactor = 6
	// BLEND_FACTOR_ONE_MINUS_SRC_ALPHA wraps VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA.
	BLEND_FACTOR_ONE_MINUS_SRC_ALPHA BlendFactor = 7
	// BLEND_FACTOR_DST_ALPHA wraps VK_BLEND_FACTOR_DST_ALPHA.
	BLEND_FACTOR_DST_ALPHA BlendFactor = 8
	// BLEND_FACTOR_ONE_MINUS_DST_ALPHA wraps VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA.
	BLEND_FACTOR_ONE_MINUS_DST_ALPHA BlendFactor = 9
	// BLEND_FACTOR_CONSTANT_COLOR wraps VK_BLEND_FACTOR_CONSTANT_COLOR.
	BLEND_FACTOR_CONSTANT_COLOR BlendFactor = 10
	// BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR wraps VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR.
	BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR BlendFactor = 11
	// BLEND_FACTOR_CONSTANT_ALPHA wraps VK_BLEND_FACTOR_CONSTANT_ALPHA.
	BLEND_FACTOR_CONSTANT_ALPHA BlendFactor = 12
	// BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA wraps VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA.
	BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA BlendFactor = 13
	// BLEND_FACTOR_SRC_ALPHA_SATURATE wraps VK_BLEND_FACTOR_SRC_ALPHA_SATURATE.
	BLEND_FACTOR_SRC_ALPHA_SATURATE BlendFactor = 14
	// BLEND_FACTOR_SRC1_COLOR wraps VK_BLEND_FACTOR_SRC1_COLOR.
	BLEND_FACTOR_SRC1_COLOR BlendFactor = 15
	// BLEND_FACTOR_ONE_MINUS_SRC1_COLOR wraps VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR.
	BLEND_FACTOR_ONE_MINUS_SRC1_COLOR BlendFactor = 16
	// BLEND_FACTOR_SRC1_ALPHA wraps VK_BLEND_FACTOR_SRC1_ALPHA.
	BLEND_FACTOR_SRC1_ALPHA BlendFactor = 17
	// BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA wraps VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA.
	BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA BlendFactor = 18
)

func (e BlendFactor) String() string {
	switch e {
	case BLEND_FACTOR_ZERO:
		return "VK_BLEND_FACTOR_ZERO"
	case BLEND_FACTOR_ONE:
		return "VK_BLEND_FACTOR_ONE"
	case BLEND_FACTOR_SRC_COLOR:
		return "VK_BLEND_FACTOR_SRC_COLOR"
	case BLEND_FACTOR_ONE_MINUS_SRC_COLOR:
		return "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR"
	case BLEND_FACTOR_DST_COLOR:
		return "VK_BLEND_FACTOR_DST_COLOR"
	case BLEND_FACTOR_ONE_MINUS_DST_COLOR:
		return "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR"
	case BLEND_FACTOR_SRC_ALPHA:
		return "VK_BLEND_FACTOR_SRC_ALPHA"
	case BLEND_FACTOR_ONE_MINUS_SRC_ALPHA:
		return "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA"
	case BLEND_FACTOR_DST_ALPHA:
		return "VK_BLEND_FACTOR_DST_ALPHA"
	case BLEND_FACTOR_ONE_MINUS_DST_ALPHA:
		return "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA"
	case BLEND_FACTOR_CONSTANT_COLOR:
		return "VK_BLEND_FACTOR_CONSTANT_COLOR"
	case BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR:
		return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR"
	case BLEND_FACTOR_CONSTANT_ALPHA:
		return "VK_BLEND_FACTOR_CONSTANT_ALPHA"
	case BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA:
		return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA"
	case BLEND_FACTOR_SRC_ALPHA_SATURATE:
		return "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE"
	case BLEND_FACTOR_SRC1_COLOR:
		return "VK_BLEND_FACTOR_SRC1_COLOR"
	case BLEND_FACTOR_ONE_MINUS_SRC1_COLOR:
		return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR"
	case BLEND_FACTOR_SRC1_ALPHA:
		return "VK_BLEND_FACTOR_SRC1_ALPHA"
	case BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA:
		return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA"
	default:
		return fmt.Sprintf("VkBlendFactor(%d)", e)
	}
}

// BlendOp wraps the enum VkBlendOp.
type BlendOp int32

const (
	// BLEND_OP_ADD wraps VK_BLEND_OP_ADD.
	BLEND_OP_ADD BlendOp = 0
	// BLEND_OP_SUBTRACT wraps VK_BLEND_OP_SUBTRACT.
	BLEND_OP_SUBTRACT BlendOp = 1
	// BLEND_OP_REVERSE_SUBTRACT wraps VK_BLEND_OP_REVERSE_SUBTRACT.
	BLEND_OP_REVERSE_SUBTRACT BlendOp = 2
	// BLEND_OP_MIN wraps VK_BLEND_OP_MIN.
	BLEND_OP_MIN BlendOp = 3
	// BLEND_OP_MAX wraps VK_BLEND_OP_MAX.
	BLEND_OP_MAX BlendOp = 4
)

func (e BlendOp) String() string {
	switch e {
	case BLEND_OP_ADD:
		return "VK_BLEND_OP_ADD"
	case BLEND_OP_SUBTRACT:
		return "VK_BLEND_OP_SUBTRACT"
	case BLEND_OP_REVERSE_SUBTRACT:
		return "VK_BLEND_OP_REVERSE_SUBTRACT"
	case BLEND_OP_MIN:
		return "VK_BLEND_OP_MIN"
	case BLEND_OP_MAX:
		return "VK_BLEND_OP_MAX"
	default:
		return fmt.Sprintf("VkBlendOp(%d)", e)
	}
}

// BorderColor wraps the enum VkBorderColor.
type BorderColor int32

const (
	// BORDER_COLOR_FLOAT_TRANSPARENT_BLACK wraps VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK.
	BORDER_COLOR_FLOAT_TRANSPARENT_BLACK BorderColor = 0
	// BORDER_COLOR_INT_TRANSPARENT_BLACK wraps VK_BORDER_COLOR_INT_TRANSPARENT_BLACK.
	BORDER_COLOR_INT_TRANSPARENT_BLACK BorderColor = 1
	// BORDER_COLOR_FLOAT_OPAQUE_BLACK wraps VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK.
	BORDER_COLOR_FLOAT_OPAQUE_BLACK BorderColor = 2
	// BORDER_COLOR_INT_OPAQUE_BLACK wraps VK_BORDER_COLOR_INT_OPAQUE_BLACK.
	BORDER_COLOR_INT_OPAQUE_BLACK BorderColor = 3
	// BORDER_COLOR_FLOAT_OPAQUE_WHITE wraps VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE.
	BORDER_COLOR_FLOAT_OPAQUE_WHITE BorderColor = 4
	// BORDER_COLOR_INT_OPAQUE_WHITE wraps VK_BORDER_COLOR_INT_OPAQUE_WHITE.
	BORDER_COLOR_INT_OPAQUE_WHITE BorderColor = 5
)

func (e BorderColor) String() string {
	switch e {
	case BORDER_COLOR_FLOAT_TRANSPARENT_BLACK:
		return "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK"
	case BORDER_COLOR_INT_TRANSPARENT_BLACK:
		return "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK"
	case BORDER_COLOR_FLOAT_OPAQUE_BLACK:
		return "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK"
	case BORDER_COLOR_INT_OPAQUE_BLACK:
		return "VK_BORDER_COLOR_INT_OPAQUE_BLACK"
	case BORDER_COLOR_FLOAT_OPAQUE_WHITE:
		return "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE"
	case BORDER_COLOR_INT_OPAQUE_WHITE:
		return "VK_BORDER_COLOR_INT_OPAQUE_WHITE"
	default:
		return fmt.Sprintf("VkBorderColor(%d)", e)
	}
}

// ChromaLocation wraps the enum VkChromaLocation.
type ChromaLocation int32

const (
	// CHROMA_LOCATION_COSITED_EVEN wraps VK_CHROMA_LOCATION_COSITED_EVEN.
	CHROMA_LOCATION_COSITED_EVEN ChromaLocation = 0
	// CHROMA_LOCATION_MIDPOINT wraps VK_CHROMA_LOCATION_MIDPOINT.
	CHROMA_LOCATION_MIDPOINT ChromaLocation = 1
)

func (e ChromaLocation) String() string {
	switch e {
	case CHROMA_LOCATION_COSITED_EVEN:
		return "VK_CHROMA_LOCATION_COSITED_EVEN"
	case CHROMA_LOCATION_MIDPOINT:
		return "VK_CHROMA_LOCATION_MIDPOINT"
	default:
		return fmt.Sprintf("VkChromaLocation(%d)", e)
	}
}

// CommandBufferLevel wraps the enum VkCommandBufferLevel.
type CommandBufferLevel int32

const (
	// COMMAND_BUFFER_LEVEL_PRIMARY wraps VK_COMMAND_BUFFER_LEVEL_PRIMARY.
	COMMAND_BUFFER_LEVEL_PRIMARY CommandBufferLevel = 0
	// COMMAND_BUFFER_LEVEL_SECONDARY wraps VK_COMMAND_BUFFER_LEVEL_SECONDARY.
	COMMAND_BUFFER_LEVEL_SECONDARY CommandBufferLevel = 1
)

func (e CommandBufferLevel) String() string {
	switch e {
	case COMMAND_BUFFER_LEVEL_PRIMARY:
		return "VK_COMMAND_BUFFER_LEVEL_PRIMARY"
	case COMMAND_BUFFER_LEVEL_SECONDARY:
		return "VK_COMMAND_BUFFER_LEVEL_SECONDARY"
	default:
		return fmt.Sprintf("VkCommandBufferLevel(%d)", e)
	}
}

// CompareOp wraps the enum VkCompareOp.
type CompareOp int32

const (
	// COMPARE_OP_NEVER wraps VK_COMPARE_OP_NEVER.
	COMPARE_OP_NEVER CompareOp = 0
	// COMPARE_OP_LESS wraps VK_COMPARE_OP_LESS.
	COMPARE_OP_LESS CompareOp = 1
	// COMPARE_OP_EQUAL wraps VK_COMPARE_OP_EQUAL.
	COMPARE_OP_EQUAL CompareOp = 2
	// COMPARE_OP_LESS_OR_EQUAL wraps VK_COMPARE_OP_LESS_OR_EQUAL.
	COMPARE_OP_LESS_OR_EQUAL CompareOp = 3
	// COMPARE_OP_GREATER wraps VK_COMPARE_OP_GREATER.
	COMPARE_OP_GREATER CompareOp = 4
	// COMPARE_OP_NOT_EQUAL wraps VK_COMPARE_OP_NOT_EQUAL.
	COMPARE_OP_NOT_EQUAL CompareOp = 5
	// COMPARE_OP_GREATER_OR_EQUAL wraps VK_COMPARE_OP_GREATER_OR_EQUAL.
	COMPARE_OP_GREATER_OR_EQUAL CompareOp = 6
	// COMPARE_OP_ALWAYS wraps VK_COMPARE_OP_ALWAYS.
	COMPARE_OP_ALWAYS CompareOp = 7
)

func (e CompareOp) String() string {
	switch e {
	case COMPARE_OP_NEVER:
		return "VK_COMPARE_OP_NEVER"
	case COMPARE_OP_LESS:
		return "VK_COMPARE_OP_LESS"
	case COMPARE_OP_EQUAL:
		return "VK_COMPARE_OP_EQUAL"
	case COMPARE_OP_LESS_OR_EQUAL:
		return "VK_COMPARE_OP_LESS_OR_EQUAL"
	case COMPARE_OP_GREATER:
		return "VK_COMPARE_OP_GREATER"
	case COMPARE_OP_NOT_EQUAL:
		return "VK_COMPARE_OP_NOT_EQUAL"
	case COMPARE_OP_GREATER_OR_EQUAL:
		return "VK_COMPARE_OP_GREATER_OR_EQUAL"
	case COMPARE_OP_ALWAYS:
		return "VK_COMPARE_OP_ALWAYS"
	default:
		return fmt.Sprintf("VkCompareOp(%d)", e)
	}
}

// ComponentSwizzle wraps the enum VkComponentSwizzle.
type ComponentSwizzle int32

const (
	// COMPONENT_SWIZZLE_IDENTITY wraps VK_COMPONENT_SWIZZLE_IDENTITY.
	COMPONENT_SWIZZLE_IDENTITY ComponentSwizzle = 0
	// COMPONENT_SWIZZLE_ZERO wraps VK_COMPONENT_SWIZZLE_ZERO.
	COMPONENT_SWIZZLE_ZERO ComponentSwizzle = 1
	// COMPONENT_SWIZZLE_ONE wraps VK_COMPONENT_SWIZZLE_ONE.
	COMPONENT_SWIZZLE_ONE ComponentSwizzle = 2
	// COMPONENT_SWIZZLE_R wraps VK_COMPONENT_SWIZZLE_R.
	COMPONENT_SWIZZLE_R ComponentSwizzle = 3
	// COMPONENT_SWIZZLE_G wraps VK_COMPONENT_SWIZZLE_G.
	COMPONENT_SWIZZLE_G ComponentSwizzle = 4
	// COMPONENT_SWIZZLE_B wraps VK_COMPONENT_SWIZZLE_B.
	COMPONENT_SWIZZLE_B ComponentSwizzle = 5
	// COMPONENT_SWIZZLE_A wraps VK_COMPONENT_SWIZZLE_A.
	COMPONENT_SWIZZLE_A ComponentSwizzle = 6
)

func (e ComponentSwizzle) String() string {
	switch e {
	case COMPONENT_SWIZZLE_IDENTITY:
		return "VK_COMPONENT_SWIZZLE_IDENTITY"
	case COMPONENT_SWIZZLE_ZERO:
		return "VK_COMPONENT_SWIZZLE_ZERO"
	case COMPONENT_SWIZZLE_ONE:
		return "VK_COMPONENT_SWIZZLE_ONE"
	case COMPONENT_SWIZZLE_R:
		return "VK_COMPONENT_SWIZZLE_R"
	case COMPONENT_SWIZZLE_G:
		return "VK_COMPONENT_SWIZZLE_G"
	case COMPONENT_SWIZZLE_B:
		return "VK_COMPONENT_SWIZZLE_B"
	case COMPONENT_SWIZZLE_A:
		return "VK_COMPONENT_SWIZZLE_A"
	default:
		return fmt.Sprintf("VkComponentSwizzle(%d)", e)
	}
}

// DescriptorType wraps the enum VkDescriptorType.
type DescriptorType int32

const (
	// DESCRIPTOR_TYPE_SAMPLER wraps VK_DESCRIPTOR_TYPE_SAMPLER.
	DESCRIPTOR_TYPE_SAMPLER DescriptorType = 0
	// DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER wraps VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER.
	DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER DescriptorType = 1
	// DESCRIPTOR_TYPE_SAMPLED_IMAGE wraps VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE.
	DESCRIPTOR_TYPE_SAMPLED_IMAGE DescriptorType = 2
	// DESCRIPTOR_TYPE_STORAGE_IMAGE wraps VK_DESCRIPTOR_TYPE_STORAGE_IMAGE.
	DESCRIPTOR_TYPE_STORAGE_IMAGE DescriptorType = 3
	// DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER wraps VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER.
	DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER DescriptorType = 4
	// DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER wraps VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER.
	DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER DescriptorType = 5
	// DESCRIPTOR_TYPE_UNIFORM_BUFFER wraps VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER.
	DESCRIPTOR_TYPE_UNIFORM_BUFFER DescriptorType = 6
	// DESCRIPTOR_TYPE_STORAGE_BUFFER wraps VK_DESCRIPTOR_TYPE_STORAGE_BUFFER.
	DESCRIPTOR_TYPE_STORAGE_BUFFER DescriptorType = 7
	// DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC wraps VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC.
	DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC DescriptorType = 8
	// DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC wraps VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC.
	DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC DescriptorType = 9
	// DESCRIPTOR_TYPE_INPUT_ATTACHMENT wraps VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT.
	DESCRIPTOR_TYPE_INPUT_ATTACHMENT DescriptorType = 10
)

func (e DescriptorType) String() string {
	switch e {
	case DESCRIPTOR_TYPE_SAMPLER:
		return "VK_DESCRIPTOR_TYPE_SAMPLER"
	case DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER:
		return "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER"
	case DESCRIPTOR_TYPE_SAMPLED_IMAGE:
		return "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE"
	case DESCRIPTOR_TYPE_STORAGE_IMAGE:
		return "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE"
	case DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER:
		return "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER"
	case DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
		return "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER"
	case DESCRIPTOR_TYPE_UNIFORM_BUFFER:
		return "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER"
	case DESCRIPTOR_TYPE_STORAGE_BUFFER:
		return "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER"
	case DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC:
		return "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC"
	case DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC:
		return "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC"
	case DESCRIPTOR_TYPE_INPUT_ATTACHMENT:
		return "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT"
	default:
		return fmt.Sprintf("VkDescriptorType(%d)", e)
	}
}

// DescriptorUpdateTemplateType wraps the enum VkDescriptorUpdateTemplateType.
type DescriptorUpdateTemplateType int32

const (
	// DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET wraps VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET.
	DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET DescriptorUpdateTemplateType = 0
)

func (e DescriptorUpdateTemplateType) String() string {
	switch e {
	case DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET:
		return "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET"
	default:
		return fmt.Sprintf("VkDescriptorUpdateTemplateType(%d)", e)
	}
}

// DriverId wraps the enum VkDriverId.
type DriverId int32

const (
	// DRIVER_ID_AMD_PROPRIETARY wraps VK_DRIVER_ID_AMD_PROPRIETARY.
	DRIVER_ID_AMD_PROPRIETARY DriverId = 1
	// DRIVER_ID_AMD_OPEN_SOURCE wraps VK_DRIVER_ID_AMD_OPEN_SOURCE.
	DRIVER_ID_AMD_OPEN_SOURCE DriverId = 2
	// DRIVER_ID_MESA_RADV wraps VK_DRIVER_ID_MESA_RADV.
	DRIVER_ID_MESA_RADV DriverId = 3
	// DRIVER_ID_NVIDIA_PROPRIETARY wraps VK_DRIVER_ID_NVIDIA_PROPRIETARY.
	DRIVER_ID_NVIDIA_PROPRIETARY DriverId = 4
	// DRIVER_ID_INTEL_PROPRIETARY_WINDOWS wraps VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS.
	DRIVER_ID_INTEL_PROPRIETARY_WINDOWS DriverId = 5
	// DRIVER_ID_INTEL_OPEN_SOURCE_MESA wraps VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA.
	DRIVER_ID_INTEL_OPEN_SOURCE_MESA DriverId = 6
	// DRIVER_ID_IMAGINATION_PROPRIETARY wraps VK_DRIVER_ID_IMAGINATION_PROPRIETARY.
	DRIVER_ID_IMAGINATION_PROPRIETARY DriverId = 7
	// DRIVER_ID_QUALCOMM_PROPRIETARY wraps VK_DRIVER_ID_QUALCOMM_PROPRIETARY.
	DRIVER_ID_QUALCOMM_PROPRIETARY DriverId = 8
	// DRIVER_ID_ARM_PROPRIETARY wraps VK_DRIVER_ID_ARM_PROPRIETARY.
	DRIVER_ID_ARM_PROPRIETARY DriverId = 9
	// DRIVER_ID_GOOGLE_SWIFTSHADER wraps VK_DRIVER_ID_GOOGLE_SWIFTSHADER.
	DRIVER_ID_GOOGLE_SWIFTSHADER DriverId = 10
	// DRIVER_ID_GGP_PROPRIETARY wraps VK_DRIVER_ID_GGP_PROPRIETARY.
	DRIVER_ID_GGP_PROPRIETARY DriverId = 11
	// DRIVER_ID_BROADCOM_PROPRIETARY wraps VK_DRIVER_ID_BROADCOM_PROPRIETARY.
	DRIVER_ID_BROADCOM_PROPRIETARY DriverId = 12
	// DRIVER_ID_MESA_LLVMPIPE wraps VK_DRIVER_ID_MESA_LLVMPIPE.
	DRIVER_ID_MESA_LLVMPIPE DriverId = 13
	// DRIVER_ID_MOLTENVK wraps VK_DRIVER_ID_MOLTENVK.
	DRIVER_ID_MOLTENVK DriverId = 14
	// DRIVER_ID_COREAVI_PROPRIETARY wraps VK_DRIVER_ID_COREAVI_PROPRIETARY.
	DRIVER_ID_COREAVI_PROPRIETARY DriverId = 15
	// DRIVER_ID_JUICE_PROPRIETARY wraps VK_DRIVER_ID_JUICE_PROPRIETARY.
	DRIVER_ID_JUICE_PROPRIETARY DriverId = 16
	// DRIVER_ID_VERISILICON_PROPRIETARY wraps VK_DRIVER_ID_VERISILICON_PROPRIETARY.
	DRIVER_ID_VERISILICON_PROPRIETARY DriverId = 17
	// DRIVER_ID_MESA_TURNIP wraps VK_DRIVER_ID_MESA_TURNIP.
	DRIVER_ID_MESA_TURNIP DriverId = 18
	// DRIVER_ID_MESA_V3DV wraps VK_DRIVER_ID_MESA_V3DV.
	DRIVER_ID_MESA_V3DV DriverId = 19
	// DRIVER_ID_MESA_PANVK wraps VK_DRIVER_ID_MESA_PANVK.
	DRIVER_ID_MESA_PANVK DriverId = 20
	// DRIVER_ID_SAMSUNG_PROPRIETARY wraps VK_DRIVER_ID_SAMSUNG_PROPRIETARY.
	DRIVER_ID_SAMSUNG_PROPRIETARY DriverId = 21
	// DRIVER_ID_MESA_VENUS wraps VK_DRIVER_ID_MESA_VENUS.
	DRIVER_ID_MESA_VENUS DriverId = 22
	// DRIVER_ID_MESA_DOZEN wraps VK_DRIVER_ID_MESA_DOZEN.
	DRIVER_ID_MESA_DOZEN DriverId = 23
	// DRIVER_ID_MESA_NVK wraps VK_DRIVER_ID_MESA_NVK.
	DRIVER_ID_MESA_NVK DriverId = 24
	// DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA wraps VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA.
	DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA DriverId = 25
	// DRIVER_ID_MESA_HONEYKRISP wraps VK_DRIVER_ID_MESA_HONEYKRISP.
	DRIVER_ID_MESA_HONEYKRISP DriverId = 26
	// DRIVER_ID_VULKAN_SC_EMULATION_ON_VULKAN wraps VK_DRIVER_ID_VULKAN_SC_EMULATION_ON_VULKAN.
	DRIVER_ID_VULKAN_SC_EMULATION_ON_VULKAN DriverId = 27
)

func (e DriverId) String() string {
	switch e {
	case DRIVER_ID_AMD_PROPRIETARY:
		return "VK_DRIVER_ID_AMD_PROPRIETARY"
	case DRIVER_ID_AMD_OPEN_SOURCE:
		return "VK_DRIVER_ID_AMD_OPEN_SOURCE"
	case DRIVER_ID_MESA_RADV:
		return "VK_DRIVER_ID_MESA_RADV"
	case DRIVER_ID_NVIDIA_PROPRIETARY:
		return "VK_DRIVER_ID_NVIDIA_PROPRIETARY"
	case DRIVER_ID_INTEL_PROPRIETARY_WINDOWS:
		return "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS"
	case DRIVER_ID_INTEL_OPEN_SOURCE_MESA:
		return "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA"
	case DRIVER_ID_IMAGINATION_PROPRIETARY:
		return "VK_DRIVER_ID_IMAGINATION_PROPRIETARY"
	case DRIVER_ID_QUALCOMM_PROPRIETARY:
		return "VK_DRIVER_ID_QUALCOMM_PROPRIETARY"
	case DRIVER_ID_ARM_PROPRIETARY:
		return "VK_DRIVER_ID_ARM_PROPRIETARY"
	case DRIVER_ID_GOOGLE_SWIFTSHADER:
		return "VK_DRIVER_ID_GOOGLE_SWIFTSHADER"
	case DRIVER_ID_GGP_PROPRIETARY:
		return "VK_DRIVER_ID_GGP_PROPRIETARY"
	case DRIVER_ID_BROADCOM_PROPRIETARY:
		return "VK_DRIVER_ID_BROADCOM_PROPRIETARY"
	case DRIVER_ID_MESA_LLVMPIPE:
		return "VK_DRIVER_ID_MESA_LLVMPIPE"
	case DRIVER_ID_MOLTENVK:
		return "VK_DRIVER_ID_MOLTENVK"
	case DRIVER_ID_COREAVI_PROPRIETARY:
		return "VK_DRIVER_ID_COREAVI_PROPRIETARY"
	case DRIVER_ID_JUICE_PROPRIETARY:
		return "VK_DRIVER_ID_JUICE_PROPRIETARY"
	case DRIVER_ID_VERISILICON_PROPRIETARY:
		return "VK_DRIVER_ID_VERISILICON_PROPRIETARY"
	case DRIVER_ID_MESA_TURNIP:
		return "VK_DRIVER_ID_MESA_TURNIP"
	case DRIVER_ID_MESA_V3DV:
		return "VK_DRIVER_ID_MESA_V3DV"
	case DRIVER_ID_MESA_PANVK:
		return "VK_DRIVER_ID_MESA_PANVK"
	case DRIVER_ID_SAMSUNG_PROPRIETARY:
		return "VK_DRIVER_ID_SAMSUNG_PROPRIETARY"
	case DRIVER_ID_MESA_VENUS:
		return "VK_DRIVER_ID_MESA_VENUS"
	case DRIVER_ID_MESA_DOZEN:
		return "VK_DRIVER_ID_MESA_DOZEN"
	case DRIVER_ID_MESA_NVK:
		return "VK_DRIVER_ID_MESA_NVK"
	case DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA:
		return "VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA"
	case DRIVER_ID_MESA_HONEYKRISP:
		return "VK_DRIVER_ID_MESA_HONEYKRISP"
	case DRIVER_ID_VULKAN_SC_EMULATION_ON_VULKAN:
		return "VK_DRIVER_ID_VULKAN_SC_EMULATION_ON_VULKAN"
	default:
		return fmt.Sprintf("VkDriverId(%d)", e)
	}
}

// DynamicState wraps the enum VkDynamicState.
type DynamicState int32

const (
	// DYNAMIC_STATE_VIEWPORT wraps VK_DYNAMIC_STATE_VIEWPORT.
	DYNAMIC_STATE_VIEWPORT DynamicState = 0
	// DYNAMIC_STATE_SCISSOR wraps VK_DYNAMIC_STATE_SCISSOR.
	DYNAMIC_STATE_SCISSOR DynamicState = 1
	// DYNAMIC_STATE_LINE_WIDTH wraps VK_DYNAMIC_STATE_LINE_WIDTH.
	DYNAMIC_STATE_LINE_WIDTH DynamicState = 2
	// DYNAMIC_STATE_DEPTH_BIAS wraps VK_DYNAMIC_STATE_DEPTH_BIAS.
	DYNAMIC_STATE_DEPTH_BIAS DynamicState = 3
	// DYNAMIC_STATE_BLEND_CONSTANTS wraps VK_DYNAMIC_STATE_BLEND_CONSTANTS.
	DYNAMIC_STATE_BLEND_CONSTANTS DynamicState = 4
	// DYNAMIC_STATE_DEPTH_BOUNDS wraps VK_DYNAMIC_STATE_DEPTH_BOUNDS.
	DYNAMIC_STATE_DEPTH_BOUNDS DynamicState = 5
	// DYNAMIC_STATE_STENCIL_COMPARE_MASK wraps VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK.
	DYNAMIC_STATE_STENCIL_COMPARE_MASK DynamicState = 6
	// DYNAMIC_STATE_STENCIL_WRITE_MASK wraps VK_DYNAMIC_STATE_STENCIL_WRITE_MASK.
	DYNAMIC_STATE_STENCIL_WRITE_MASK DynamicState = 7
	// DYNAMIC_STATE_STENCIL_REFERENCE wraps VK_DYNAMIC_STATE_STENCIL_REFERENCE.
	DYNAMIC_STATE_STENCIL_REFERENCE DynamicState = 8
)

func (e DynamicState) String() string {
	switch e {
	case DYNAMIC_STATE_VIEWPORT:
		return "VK_DYNAMIC_STATE_VIEWPORT"
	case DYNAMIC_STATE_SCISSOR:
		return "VK_DYNAMIC_STATE_SCISSOR"
	case DYNAMIC_STATE_LINE_WIDTH:
		return "VK_DYNAMIC_STATE_LINE_WIDTH"
	case DYNAMIC_STATE_DEPTH_BIAS:
		return "VK_DYNAMIC_STATE_DEPTH_BIAS"
	case DYNAMIC_STATE_BLEND_CONSTANTS:
		return "VK_DYNAMIC_STATE_BLEND_CONSTANTS"
	case DYNAMIC_STATE_DEPTH_BOUNDS:
		return "VK_DYNAMIC_STATE_DEPTH_BOUNDS"
	case DYNAMIC_STATE_STENCIL_COMPARE_MASK:
		return "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK"
	case DYNAMIC_STATE_STENCIL_WRITE_MASK:
		return "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK"
	case DYNAMIC_STATE_STENCIL_REFERENCE:
		return "VK_DYNAMIC_STATE_STENCIL_REFERENCE"
	default:
		return fmt.Sprintf("VkDynamicState(%d)", e)
	}
}

// Filter wraps the enum VkFilter.
type Filter int32

const (
	// FILTER_NEAREST wraps VK_FILTER_NEAREST.
	FILTER_NEAREST Filter = 0
	// FILTER_LINEAR wraps VK_FILTER_LINEAR.
	FILTER_LINEAR Filter = 1
)

func (e Filter) String() string {
	switch e {
	case FILTER_NEAREST:
		return "VK_FILTER_NEAREST"
	case FILTER_LINEAR:
		return "VK_FILTER_LINEAR"
	default:
		return fmt.Sprintf("VkFilter(%d)", e)
	}
}

// Format wraps the enum VkFormat.
type Format int32

const (
	// FORMAT_UNDEFINED wraps VK_FORMAT_UNDEFINED.
	FORMAT_UNDEFINED Format = 0
	// FORMAT_R4G4_UNORM_PACK8 wraps VK_FORMAT_R4G4_UNORM_PACK8.
	FORMAT_R4G4_UNORM_PACK8 Format = 1
	// FORMAT_R4G4B4A4_UNORM_PACK16 wraps VK_FORMAT_R4G4B4A4_UNORM_PACK16.
	FORMAT_R4G4B4A4_UNORM_PACK16 Format = 2
	// FORMAT_B4G4R4A4_UNORM_PACK16 wraps VK_FORMAT_B4G4R4A4_UNORM_PACK16.
	FORMAT_B4G4R4A4_UNORM_PACK16 Format = 3
	// FORMAT_R5G6B5_UNORM_PACK16 wraps VK_FORMAT_R5G6B5_UNORM_PACK16.
	FORMAT_R5G6B5_UNORM_PACK16 Format = 4
	// FORMAT_B5G6R5_UNORM_PACK16 wraps VK_FORMAT_B5G6R5_UNORM_PACK16.
	FORMAT_B5G6R5_UNORM_PACK16 Format = 5
	// FORMAT_R5G5B5A1_UNORM_PACK16 wraps VK_FORMAT_R5G5B5A1_UNORM_PACK16.
	FORMAT_R5G5B5A1_UNORM_PACK16 Format = 6
	// FORMAT_B5G5R5A1_UNORM_PACK16 wraps VK_FORMAT_B5G5R5A1_UNORM_PACK16.
	FORMAT_B5G5R5A1_UNORM_PACK16 Format = 7
	// FORMAT_A1R5G5B5_UNORM_PACK16 wraps VK_FORMAT_A1R5G5B5_UNORM_PACK16.
	FORMAT_A1R5G5B5_UNORM_PACK16 Format = 8
	// FORMAT_R8_UNORM wraps VK_FORMAT_R8_UNORM.
	FORMAT_R8_UNORM Format = 9
	// FORMAT_R8_SNORM wraps VK_FORMAT_R8_SNORM.
	FORMAT_R8_SNORM Format = 10
	// FORMAT_R8_USCALED wraps VK_FORMAT_R8_USCALED.
	FORMAT_R8_USCALED Format = 11
	// FORMAT_R8_SSCALED wraps VK_FORMAT_R8_SSCALED.
	FORMAT_R8_SSCALED Format = 12
	// FORMAT_R8_UINT wraps VK_FORMAT_R8_UINT.
	FORMAT_R8_UINT Format = 13
	// FORMAT_R8_SINT wraps VK_FORMAT_R8_SINT.
	FORMAT_R8_SINT Format = 14
	// FORMAT_R8_SRGB wraps VK_FORMAT_R8_SRGB.
	FORMAT_R8_SRGB Format = 15
	// FORMAT_R8G8_UNORM wraps VK_FORMAT_R8G8_UNORM.
	FORMAT_R8G8_UNORM Format = 16
	// FORMAT_R8G8_SNORM wraps VK_FORMAT_R8G8_SNORM.
	FORMAT_R8G8_SNORM Format = 17
	// FORMAT_R8G8_USCALED wraps VK_FORMAT_R8G8_USCALED.
	FORMAT_R8G8_USCALED Format = 18
	// FORMAT_R8G8_SSCALED wraps VK_FORMAT_R8G8_SSCALED.
	FORMAT_R8G8_SSCALED Format = 19
	// FORMAT_R8G8_UINT wraps VK_FORMAT_R8G8_UINT.
	FORMAT_R8G8_UINT Format = 20
	// FORMAT_R8G8_SINT wraps VK_FORMAT_R8G8_SINT.
	FORMAT_R8G8_SINT Format = 21
	// FORMAT_R8G8_SRGB wraps VK_FORMAT_R8G8_SRGB.
	FORMAT_R8G8_SRGB Format = 22
	// FORMAT_R8G8B8_UNORM wraps VK_FORMAT_R8G8B8_UNORM.
	FORMAT_R8G8B8_UNORM Format = 23
	// FORMAT_R8G8B8_SNORM wraps VK_FORMAT_R8G8B8_SNORM.
	FORMAT_R8G8B8_SNORM Format = 24
	// FORMAT_R8G8B8_USCALED wraps VK_FORMAT_R8G8B8_USCALED.
	FORMAT_R8G8B8_USCALED Format = 25
	// FORMAT_R8G8B8_SSCALED wraps VK_FORMAT_R8G8B8_SSCALED.
	FORMAT_R8G8B8_SSCALED Format = 26
	// FORMAT_R8G8B8_UINT wraps VK_FORMAT_R8G8B8_UINT.
	FORMAT_R8G8B8_UINT Format = 27
	// FORMAT_R8G8B8_SINT wraps VK_FORMAT_R8G8B8_SINT.
	FORMAT_R8G8B8_SINT Format = 28
	// FORMAT_R8G8B8_SRGB wraps VK_FORMAT_R8G8B8_SRGB.
	FORMAT_R8G8B8_SRGB Format = 29
	// FORMAT_B8G8R8_UNORM wraps VK_FORMAT_B8G8R8_UNORM.
	FORMAT_B8G8R8_UNORM Format = 30
	// FORMAT_B8G8R8_SNORM wraps VK_FORMAT_B8G8R8_SNORM.
	FORMAT_B8G8R8_SNORM Format = 31
	// FORMAT_B8G8R8_USCALED wraps VK_FORMAT_B8G8R8_USCALED.
	FORMAT_B8G8R8_USCALED Format = 32
	// FORMAT_B8G8R8_SSCALED wraps VK_FORMAT_B8G8R8_SSCALED.
	FORMAT_B8G8R8_SSCALED Format = 33
	// FORMAT_B8G8R8_UINT wraps VK_FORMAT_B8G8R8_UINT.
	FORMAT_B8G8R8_UINT Format = 34
	// FORMAT_B8G8R8_SINT wraps VK_FORMAT_B8G8R8_SINT.
	FORMAT_B8G8R8_SINT Format = 35
	// FORMAT_B8G8R8_SRGB wraps VK_FORMAT_B8G8R8_SRGB.
	FORMAT_B8G8R8_SRGB Format = 36
	// FORMAT_R8G8B8A8_UNORM wraps VK_FORMAT_R8G8B8A8_UNORM.
	FORMAT_R8G8B8A8_UNORM Format = 37
	// FORMAT_R8G8B8A8_SNORM wraps VK_FORMAT_R8G8B8A8_SNORM.
	FORMAT_R8G8B8A8_SNORM Format = 38
	// FORMAT_R8G8B8A8_USCALED wraps VK_FORMAT_R8G8B8A8_USCALED.
	FORMAT_R8G8B8A8_USCALED Format = 39
	// FORMAT_R8G8B8A8_SSCALED wraps VK_FORMAT_R8G8B8A8_SSCALED.
	FORMAT_R8G8B8A8_SSCALED Format = 40
	// FORMAT_R8G8B8A8_UINT wraps VK_FORMAT_R8G8B8A8_UINT.
	FORMAT_R8G8B8A8_UINT Format = 41
	// FORMAT_R8G8B8A8_SINT wraps VK_FORMAT_R8G8B8A8_SINT.
	FORMAT_R8G8B8A8_SINT Format = 42
	// FORMAT_R8G8B8A8_SRGB wraps VK_FORMAT_R8G8B8A8_SRGB.
	FORMAT_R8G8B8A8_SRGB Format = 43
	// FORMAT_B8G8R8A8_UNORM wraps VK_FORMAT_B8G8R8A8_UNORM.
	FORMAT_B8G8R8A8_UNORM Format = 44
	// FORMAT_B8G8R8A8_SNORM wraps VK_FORMAT_B8G8R8A8_SNORM.
	FORMAT_B8G8R8A8_SNORM Format = 45
	// FORMAT_B8G8R8A8_USCALED wraps VK_FORMAT_B8G8R8A8_USCALED.
	FORMAT_B8G8R8A8_USCALED Format = 46
	// FORMAT_B8G8R8A8_SSCALED wraps VK_FORMAT_B8G8R8A8_SSCALED.
	FORMAT_B8G8R8A8_SSCALED Format = 47
	// FORMAT_B8G8R8A8_UINT wraps VK_FORMAT_B8G8R8A8_UINT.
	FORMAT_B8G8R8A8_UINT Format = 48
	// FORMAT_B8G8R8A8_SINT wraps VK_FORMAT_B8G8R8A8_SINT.
	FORMAT_B8G8R8A8_SINT Format = 49
	// FORMAT_B8G8R8A8_SRGB wraps VK_FORMAT_B8G8R8A8_SRGB.
	FORMAT_B8G8R8A8_SRGB Format = 50
	// FORMAT_A8B8G8R8_UNORM_PACK32 wraps VK_FORMAT_A8B8G8R8_UNORM_PACK32.
	FORMAT_A8B8G8R8_UNORM_PACK32 Format = 51
	// FORMAT_A8B8G8R8_SNORM_PACK32 wraps VK_FORMAT_A8B8G8R8_SNORM_PACK32.
	FORMAT_A8B8G8R8_SNORM_PACK32 Format = 52
	// FORMAT_A8B8G8R8_USCALED_PACK32 wraps VK_FORMAT_A8B8G8R8_USCALED_PACK32.
	FORMAT_A8B8G8R8_USCALED_PACK32 Format = 53
	// FORMAT_A8B8G8R8_SSCALED_PACK32 wraps VK_FORMAT_A8B8G8R8_SSCALED_PACK32.
	FORMAT_A8B8G8R8_SSCALED_PACK32 Format = 54
	// FORMAT_A8B8G8R8_UINT_PACK32 wraps VK_FORMAT_A8B8G8R8_UINT_PACK32.
	FORMAT_A8B8G8R8_UINT_PACK32 Format = 55
	// FORMAT_A8B8G8R8_SINT_PACK32 wraps VK_FORMAT_A8B8G8R8_SINT_PACK32.
	FORMAT_A8B8G8R8_SINT_PACK32 Format = 56
	// FORMAT_A8B8G8R8_SRGB_PACK32 wraps VK_FORMAT_A8B8G8R8_SRGB_PACK32.
	FORMAT_A8B8G8R8_SRGB_PACK32 Format = 57
	// FORMAT_A2R10G10B10_UNORM_PACK32 wraps VK_FORMAT_A2R10G10B10_UNORM_PACK32.
	FORMAT_A2R10G10B10_UNORM_PACK32 Format = 58
	// FORMAT_A2R10G10B10_SNORM_PACK32 wraps VK_FORMAT_A2R10G10B10_SNORM_PACK32.
	FORMAT_A2R10G10B10_SNORM_PACK32 Format = 59
	// FORMAT_A2R10G10B10_USCALED_PACK32 wraps VK_FORMAT_A2R10G10B10_USCALED_PACK32.
	FORMAT_A2R10G10B10_USCALED_PACK32 Format = 60
	// FORMAT_A2R10G10B10_SSCALED_PACK32 wraps VK_FORMAT_A2R10G10B10_SSCALED_PACK32.
	FORMAT_A2R10G10B10_SSCALED_PACK32 Format = 61
	// FORMAT_A2R10G10B10_UINT_PACK32 wraps VK_FORMAT_A2R10G10B10_UINT_PACK32.
	FORMAT_A2R10G10B10_UINT_PACK32 Format = 62
	// FORMAT_A2R10G10B10_SINT_PACK32 wraps VK_FORMAT_A2R10G10B10_SINT_PACK32.
	FORMAT_A2R10G10B10_SINT_PACK32 Format = 63
	// FORMAT_A2B10G10R10_UNORM_PACK32 wraps VK_FORMAT_A2B10G10R10_UNORM_PACK32.
	FORMAT_A2B10G10R10_UNORM_PACK32 Format = 64
	// FORMAT_A2B10G10R10_SNORM_PACK32 wraps VK_FORMAT_A2B10G10R10_SNORM_PACK32.
	FORMAT_A2B10G10R10_SNORM_PACK32 Format = 65
	// FORMAT_A2B10G10R10_USCALED_PACK32 wraps VK_FORMAT_A2B10G10R10_USCALED_PACK32.
	FORMAT_A2B10G10R10_USCALED_PACK32 Format = 66
	// FORMAT_A2B10G10R10_SSCALED_PACK32 wraps VK_FORMAT_A2B10G10R10_SSCALED_PACK32.
	FORMAT_A2B10G10R10_SSCALED_PACK32 Format = 67
	// FORMAT_A2B10G10R10_UINT_PACK32 wraps VK_FORMAT_A2B10G10R10_UINT_PACK32.
	FORMAT_A2B10G10R10_UINT_PACK32 Format = 68
	// FORMAT_A2B10G10R10_SINT_PACK32 wraps VK_FORMAT_A2B10G10R10_SINT_PACK32.
	FORMAT_A2B10G10R10_SINT_PACK32 Format = 69
	// FORMAT_R16_UNORM wraps VK_FORMAT_R16_UNORM.
	FORMAT_R16_UNORM Format = 70
	// FORMAT_R16_SNORM wraps VK_FORMAT_R16_SNORM.
	FORMAT_R16_SNORM Format = 71
	// FORMAT_R16_USCALED wraps VK_FORMAT_R16_USCALED.
	FORMAT_R16_USCALED Format = 72
	// FORMAT_R16_SSCALED wraps VK_FORMAT_R16_SSCALED.
	FORMAT_R16_SSCALED Format = 73
	// FORMAT_R16_UINT wraps VK_FORMAT_R16_UINT.
	FORMAT_R16_UINT Format = 74
	// FORMAT_R16_SINT wraps VK_FORMAT_R16_SINT.
	FORMAT_R16_SINT Format = 75
	// FORMAT_R16_SFLOAT wraps VK_FORMAT_R16_SFLOAT.
	FORMAT_R16_SFLOAT Format = 76
	// FORMAT_R16G16_UNORM wraps VK_FORMAT_R16G16_UNORM.
	FORMAT_R16G16_UNORM Format = 77
	// FORMAT_R16G16_SNORM wraps VK_FORMAT_R16G16_SNORM.
	FORMAT_R16G16_SNORM Format = 78
	// FORMAT_R16G16_USCALED wraps VK_FORMAT_R16G16_USCALED.
	FORMAT_R16G16_USCALED Format = 79
	// FORMAT_R16G16_SSCALED wraps VK_FORMAT_R16G16_SSCALED.
	FORMAT_R16G16_SSCALED Format = 80
	// FORMAT_R16G16_UINT wraps VK_FORMAT_R16G16_UINT.
	FORMAT_R16G16_UINT Format = 81
	// FORMAT_R16G16_SINT wraps VK_FORMAT_R16G16_SINT.
	FORMAT_R16G16_SINT Format = 82
	// FORMAT_R16G16_SFLOAT wraps VK_FORMAT_R16G16_SFLOAT.
	FORMAT_R16G16_SFLOAT Format = 83
	// FORMAT_R16G16B16_UNORM wraps VK_FORMAT_R16G16B16_UNORM.
	FORMAT_R16G16B16_UNORM Format = 84
	// FORMAT_R16G16B16_SNORM wraps VK_FORMAT_R16G16B16_SNORM.
	FORMAT_R16G16B16_SNORM Format = 85
	// FORMAT_R16G16B16_USCALED wraps VK_FORMAT_R16G16B16_USCALED.
	FORMAT_R16G16B16_USCALED Format = 86
	// FORMAT_R16G16B16_SSCALED wraps VK_FORMAT_R16G16B16_SSCALED.
	FORMAT_R16G16B16_SSCALED Format = 87
	// FORMAT_R16G16B16_UINT wraps VK_FORMAT_R16G16B16_UINT.
	FORMAT_R16G16B16_UINT Format = 88
	// FORMAT_R16G16B16_SINT wraps VK_FORMAT_R16G16B16_SINT.
	FORMAT_R16G16B16_SINT Format = 89
	// FORMAT_R16G16B16_SFLOAT wraps VK_FORMAT_R16G16B16_SFLOAT.
	FORMAT_R16G16B16_SFLOAT Format = 90
	// FORMAT_R16G16B16A16_UNORM wraps VK_FORMAT_R16G16B16A16_UNORM.
	FORMAT_R16G16B16A16_UNORM Format = 91
	// FORMAT_R16G16B16A16_SNORM wraps VK_FORMAT_R16G16B16A16_SNORM.
	FORMAT_R16G16B16A16_SNORM Format = 92
	// FORMAT_R16G16B16A16_USCALED wraps VK_FORMAT_R16G16B16A16_USCALED.
	FORMAT_R16G16B16A16_USCALED Format = 93
	// FORMAT_R16G16B16A16_SSCALED wraps VK_FORMAT_R16G16B16A16_SSCALED.
	FORMAT_R16G16B16A16_SSCALED Format = 94
	// FORMAT_R16G16B16A16_UINT wraps VK_FORMAT_R16G16B16A16_UINT.
	FORMAT_R16G16B16A16_UINT Format = 95
	// FORMAT_R16G16B16A16_SINT wraps VK_FORMAT_R16G16B16A16_SINT.
	FORMAT_R16G16B16A16_SINT Format = 96
	// FORMAT_R16G16B16A16_SFLOAT wraps VK_FORMAT_R16G16B16A16_SFLOAT.
	FORMAT_R16G16B16A16_SFLOAT Format = 97
	// FORMAT_R32_UINT wraps VK_FORMAT_R32_UINT.
	FORMAT_R32_UINT Format = 98
	// FORMAT_R32_SINT wraps VK_FORMAT_R32_SINT.
	FORMAT_R32_SINT Format = 99
	// FORMAT_R32_SFLOAT wraps VK_FORMAT_R32_SFLOAT.
	FORMAT_R32_SFLOAT Format = 100
	// FORMAT_R32G32_UINT wraps VK_FORMAT_R32G32_UINT.
	FORMAT_R32G32_UINT Format = 101
	// FORMAT_R32G32_SINT wraps VK_FORMAT_R32G32_SINT.
	FORMAT_R32G32_SINT Format = 102
	// FORMAT_R32G32_SFLOAT wraps VK_FORMAT_R32G32_SFLOAT.
	FORMAT_R32G32_SFLOAT Format = 103
	// FORMAT_R32G32B32_UINT wraps VK_FORMAT_R32G32B32_UINT.
	FORMAT_R32G32B32_UINT Format = 104
	// FORMAT_R32G32B32_SINT wraps VK_FORMAT_R32G32B32_SINT.
	FORMAT_R32G32B32_SINT Format = 105
	// FORMAT_R32G32B32_SFLOAT wraps VK_FORMAT_R32G32B32_SFLOAT.
	FORMAT_R32G32B32_SFLOAT Format = 106
	// FORMAT_R32G32B32A32_UINT wraps VK_FORMAT_R32G32B32A32_UINT.
	FORMAT_R32G32B32A32_UINT Format = 107
	// FORMAT_R32G32B32A32_SINT wraps VK_FORMAT_R32G32B32A32_SINT.
	FORMAT_R32G32B32A32_SINT Format = 108
	// FORMAT_R32G32B32A32_SFLOAT wraps VK_FORMAT_R32G32B32A32_SFLOAT.
	FORMAT_R32G32B32A32_SFLOAT Format = 109
	// FORMAT_R64_UINT wraps VK_FORMAT_R64_UINT.
	FORMAT_R64_UINT Format = 110
	// FORMAT_R64_SINT wraps VK_FORMAT_R64_SINT.
	FORMAT_R64_SINT Format = 111
	// FORMAT_R64_SFLOAT wraps VK_FORMAT_R64_SFLOAT.
	FORMAT_R64_SFLOAT Format = 112
	// FORMAT_R64G64_UINT wraps VK_FORMAT_R64G64_UINT.
	FORMAT_R64G64_UINT Format = 113
	// FORMAT_R64G64_SINT wraps VK_FORMAT_R64G64_SINT.
	FORMAT_R64G64_SINT Format = 114
	// FORMAT_R64G64_SFLOAT wraps VK_FORMAT_R64G64_SFLOAT.
	FORMAT_R64G64_SFLOAT Format = 115
	// FORMAT_R64G64B64_UINT wraps VK_FORMAT_R64G64B64_UINT.
	FORMAT_R64G64B64_UINT Format = 116
	// FORMAT_R64G64B64_SINT wraps VK_FORMAT_R64G64B64_SINT.
	FORMAT_R64G64B64_SINT Format = 117
	// FORMAT_R64G64B64_SFLOAT wraps VK_FORMAT_R64G64B64_SFLOAT.
	FORMAT_R64G64B64_SFLOAT Format = 118
	// FORMAT_R64G64B64A64_UINT wraps VK_FORMAT_R64G64B64A64_UINT.
	FORMAT_R64G64B64A64_UINT Format = 119
	// FORMAT_R64G64B64A64_SINT wraps VK_FORMAT_R64G64B64A64_SINT.
	FORMAT_R64G64B64A64_SINT Format = 120
	// FORMAT_R64G64B64A64_SFLOAT wraps VK_FORMAT_R64G64B64A64_SFLOAT.
	FORMAT_R64G64B64A64_SFLOAT Format = 121
	// FORMAT_B10G11R11_UFLOAT_PACK32 wraps VK_FORMAT_B10G11R11_UFLOAT_PACK32.
	FORMAT_B10G11R11_UFLOAT_PACK32 Format = 122
	// FORMAT_E5B9G9R9_UFLOAT_PACK32 wraps VK_FORMAT_E5B9G9R9_UFLOAT_PACK32.
	FORMAT_E5B9G9R9_UFLOAT_PACK32 Format = 123
	// FORMAT_D16_UNORM wraps VK_FORMAT_D16_UNORM.
	FORMAT_D16_UNORM Format = 124
	// FORMAT_X8_D24_UNORM_PACK32 wraps VK_FORMAT_X8_D24_UNORM_PACK32.
	FORMAT_X8_D24_UNORM_PACK32 Format = 125
	// FORMAT_D32_SFLOAT wraps VK_FORMAT_D32_SFLOAT.
	FORMAT_D32_SFLOAT Format = 126
	// FORMAT_S8_UINT wraps VK_FORMAT_S8_UINT.
	FORMAT_S8_UINT Format = 127
	// FORMAT_D16_UNORM_S8_UINT wraps VK_FORMAT_D16_UNORM_S8_UINT.
	FORMAT_D16_UNORM_S8_UINT Format = 128
	// FORMAT_D24_UNORM_S8_UINT wraps VK_FORMAT_D24_UNORM_S8_UINT.
	FORMAT_D24_UNORM_S8_UINT Format = 129
	// FORMAT_D32_SFLOAT_S8_UINT wraps VK_FORMAT_D32_SFLOAT_S8_UINT.
	FORMAT_D32_SFLOAT_S8_UINT Format = 130
	// FORMAT_BC1_RGB_UNORM_BLOCK wraps VK_FORMAT_BC1_RGB_UNORM_BLOCK.
	FORMAT_BC1_RGB_UNORM_BLOCK Format = 131
	// FORMAT_BC1_RGB_SRGB_BLOCK wraps VK_FORMAT_BC1_RGB_SRGB_BLOCK.
	FORMAT_BC1_RGB_SRGB_BLOCK Format = 132
	// FORMAT_BC1_RGBA_UNORM_BLOCK wraps VK_FORMAT_BC1_RGBA_UNORM_BLOCK.
	FORMAT_BC1_RGBA_UNORM_BLOCK Format = 133
	// FORMAT_BC1_RGBA_SRGB_BLOCK wraps VK_FORMAT_BC1_RGBA_SRGB_BLOCK.
	FORMAT_BC1_RGBA_SRGB_BLOCK Format = 134
	// FORMAT_BC2_UNORM_BLOCK wraps VK_FORMAT_BC2_UNORM_BLOCK.
	FORMAT_BC2_UNORM_BLOCK Format = 135
	// FORMAT_BC2_SRGB_BLOCK wraps VK_FORMAT_BC2_SRGB_BLOCK.
	FORMAT_BC2_SRGB_BLOCK Format = 136
	// FORMAT_BC3_UNORM_BLOCK wraps VK_FORMAT_BC3_UNORM_BLOCK.
	FORMAT_BC3_UNORM_BLOCK Format = 137
	// FORMAT_BC3_SRGB_BLOCK wraps VK_FORMAT_BC3_SRGB_BLOCK.
	FORMAT_BC3_SRGB_BLOCK Format = 138
	// FORMAT_BC4_UNORM_BLOCK wraps VK_FORMAT_BC4_UNORM_BLOCK.
	FORMAT_BC4_UNORM_BLOCK Format = 139
	// FORMAT_BC4_SNORM_BLOCK wraps VK_FORMAT_BC4_SNORM_BLOCK.
	FORMAT_BC4_SNORM_BLOCK Format = 140
	// FORMAT_BC5_UNORM_BLOCK wraps VK_FORMAT_BC5_UNORM_BLOCK.
	FORMAT_BC5_UNORM_BLOCK Format = 141
	// FORMAT_BC5_SNORM_BLOCK wraps VK_FORMAT_BC5_SNORM_BLOCK.
	FORMAT_BC5_SNORM_BLOCK Format = 142
	// FORMAT_BC6H_UFLOAT_BLOCK wraps VK_FORMAT_BC6H_UFLOAT_BLOCK.
	FORMAT_BC6H_UFLOAT_BLOCK Format = 143
	// FORMAT_BC6H_SFLOAT_BLOCK wraps VK_FORMAT_BC6H_SFLOAT_BLOCK.
	FORMAT_BC6H_SFLOAT_BLOCK Format = 144
	// FORMAT_BC7_UNORM_BLOCK wraps VK_FORMAT_BC7_UNORM_BLOCK.
	FORMAT_BC7_UNORM_BLOCK Format = 145
	// FORMAT_BC7_SRGB_BLOCK wraps VK_FORMAT_BC7_SRGB_BLOCK.
	FORMAT_BC7_SRGB_BLOCK Format = 146
	// FORMAT_ETC2_R8G8B8_UNORM_BLOCK wraps VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK.
	FORMAT_ETC2_R8G8B8_UNORM_BLOCK Format = 147
	// FORMAT_ETC2_R8G8B8_SRGB_BLOCK wraps VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK.
	FORMAT_ETC2_R8G8B8_SRGB_BLOCK Format = 148
	// FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK wraps VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK.
	FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK Format = 149
	// FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK wraps VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK.
	FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK Format = 150
	// FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK wraps VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK.
	FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK Format = 151
	// FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK wraps VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK.
	FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK Format = 152
	// FORMAT_EAC_R11_UNORM_BLOCK wraps VK_FORMAT_EAC_R11_UNORM_BLOCK.
	FORMAT_EAC_R11_UNORM_BLOCK Format = 153
	// FORMAT_EAC_R11_SNORM_BLOCK wraps VK_FORMAT_EAC_R11_SNORM_BLOCK.
	FORMAT_EAC_R11_SNORM_BLOCK Format = 154
	// FORMAT_EAC_R11G11_UNORM_BLOCK wraps VK_FORMAT_EAC_R11G11_UNORM_BLOCK.
	FORMAT_EAC_R11G11_UNORM_BLOCK Format = 155
	// FORMAT_EAC_R11G11_SNORM_BLOCK wraps VK_FORMAT_EAC_R11G11_SNORM_BLOCK.
	FORMAT_EAC_R11G11_SNORM_BLOCK Format = 156
	// FORMAT_ASTC_4x4_UNORM_BLOCK wraps VK_FORMAT_ASTC_4x4_UNORM_BLOCK.
	FORMAT_ASTC_4x4_UNORM_BLOCK Format = 157
	// FORMAT_ASTC_4x4_SRGB_BLOCK wraps VK_FORMAT_ASTC_4x4_SRGB_BLOCK.
	FORMAT_ASTC_4x4_SRGB_BLOCK Format = 158
	// FORMAT_ASTC_5x4_UNORM_BLOCK wraps VK_FORMAT_ASTC_5x4_UNORM_BLOCK.
	FORMAT_ASTC_5x4_UNORM_BLOCK Format = 159
	// FORMAT_ASTC_5x4_SRGB_BLOCK wraps VK_FORMAT_ASTC_5x4_SRGB_BLOCK.
	FORMAT_ASTC_5x4_SRGB_BLOCK Format = 160
	// FORMAT_ASTC_5x5_UNORM_BLOCK wraps VK_FORMAT_ASTC_5x5_UNORM_BLOCK.
	FORMAT_ASTC_5x5_UNORM_BLOCK Format = 161
	// FORMAT_ASTC_5x5_SRGB_BLOCK wraps VK_FORMAT_ASTC_5x5_SRGB_BLOCK.
	FORMAT_ASTC_5x5_SRGB_BLOCK Format = 162
	// FORMAT_ASTC_6x5_UNORM_BLOCK wraps VK_FORMAT_ASTC_6x5_UNORM_BLOCK.
	FORMAT_ASTC_6x5_UNORM_BLOCK Format = 163
	// FORMAT_ASTC_6x5_SRGB_BLOCK wraps VK_FORMAT_ASTC_6x5_SRGB_BLOCK.
	FORMAT_ASTC_6x5_SRGB_BLOCK Format = 164
	// FORMAT_ASTC_6x6_UNORM_BLOCK wraps VK_FORMAT_ASTC_6x6_UNORM_BLOCK.
	FORMAT_ASTC_6x6_UNORM_BLOCK Format = 165
	// FORMAT_ASTC_6x6_SRGB_BLOCK wraps VK_FORMAT_ASTC_6x6_SRGB_BLOCK.
	FORMAT_ASTC_6x6_SRGB_BLOCK Format = 166
	// FORMAT_ASTC_8x5_UNORM_BLOCK wraps VK_FORMAT_ASTC_8x5_UNORM_BLOCK.
	FORMAT_ASTC_8x5_UNORM_BLOCK Format = 167
	// FORMAT_ASTC_8x5_SRGB_BLOCK wraps VK_FORMAT_ASTC_8x5_SRGB_BLOCK.
	FORMAT_ASTC_8x5_SRGB_BLOCK Format = 168
	// FORMAT_ASTC_8x6_UNORM_BLOCK wraps VK_FORMAT_ASTC_8x6_UNORM_BLOCK.
	FORMAT_ASTC_8x6_UNORM_BLOCK Format = 169
	// FORMAT_ASTC_8x6_SRGB_BLOCK wraps VK_FORMAT_ASTC_8x6_SRGB_BLOCK.
	FORMAT_ASTC_8x6_SRGB_BLOCK Format = 170
	// FORMAT_ASTC_8x8_UNORM_BLOCK wraps VK_FORMAT_ASTC_8x8_UNORM_BLOCK.
	FORMAT_ASTC_8x8_UNORM_BLOCK Format = 171
	// FORMAT_ASTC_8x8_SRGB_BLOCK wraps VK_FORMAT_ASTC_8x8_SRGB_BLOCK.
	FORMAT_ASTC_8x8_SRGB_BLOCK Format = 172
	// FORMAT_ASTC_10x5_UNORM_BLOCK wraps VK_FORMAT_ASTC_10x5_UNORM_BLOCK.
	FORMAT_ASTC_10x5_UNORM_BLOCK Format = 173
	// FORMAT_ASTC_10x5_SRGB_BLOCK wraps VK_FORMAT_ASTC_10x5_SRGB_BLOCK.
	FORMAT_ASTC_10x5_SRGB_BLOCK Format = 174
	// FORMAT_ASTC_10x6_UNORM_BLOCK wraps VK_FORMAT_ASTC_10x6_UNORM_BLOCK.
	FORMAT_ASTC_10x6_UNORM_BLOCK Format = 175
	// FORMAT_ASTC_10x6_SRGB_BLOCK wraps VK_FORMAT_ASTC_10x6_SRGB_BLOCK.
	FORMAT_ASTC_10x6_SRGB_BLOCK Format = 176
	// FORMAT_ASTC_10x8_UNORM_BLOCK wraps VK_FORMAT_ASTC_10x8_UNORM_BLOCK.
	FORMAT_ASTC_10x8_UNORM_BLOCK Format = 177
	// FORMAT_ASTC_10x8_SRGB_BLOCK wraps VK_FORMAT_ASTC_10x8_SRGB_BLOCK.
	FORMAT_ASTC_10x8_SRGB_BLOCK Format = 178
	// FORMAT_ASTC_10x10_UNORM_BLOCK wraps VK_FORMAT_ASTC_10x10_UNORM_BLOCK.
	FORMAT_ASTC_10x10_UNORM_BLOCK Format = 179
	// FORMAT_ASTC_10x10_SRGB_BLOCK wraps VK_FORMAT_ASTC_10x10_SRGB_BLOCK.
	FORMAT_ASTC_10x10_SRGB_BLOCK Format = 180
	// FORMAT_ASTC_12x10_UNORM_BLOCK wraps VK_FORMAT_ASTC_12x10_UNORM_BLOCK.
	FORMAT_ASTC_12x10_UNORM_BLOCK Format = 181
	// FORMAT_ASTC_12x10_SRGB_BLOCK wraps VK_FORMAT_ASTC_12x10_SRGB_BLOCK.
	FORMAT_ASTC_12x10_SRGB_BLOCK Format = 182
	// FORMAT_ASTC_12x12_UNORM_BLOCK wraps VK_FORMAT_ASTC_12x12_UNORM_BLOCK.
	FORMAT_ASTC_12x12_UNORM_BLOCK Format = 183
	// FORMAT_ASTC_12x12_SRGB_BLOCK wraps VK_FORMAT_ASTC_12x12_SRGB_BLOCK.
	FORMAT_ASTC_12x12_SRGB_BLOCK Format = 184
)

func (e Format) String() string {
	switch e {
	case FORMAT_UNDEFINED:
		return "VK_FORMAT_UNDEFINED"
	case FORMAT_R4G4_UNORM_PACK8:
		return "VK_FORMAT_R4G4_UNORM_PACK8"
	case FORMAT_R4G4B4A4_UNORM_PACK16:
		return "VK_FORMAT_R4G4B4A4_UNORM_PACK16"
	case FORMAT_B4G4R4A4_UNORM_PACK16:
		return "VK_FORMAT_B4G4R4A4_UNORM_PACK16"
	case FORMAT_R5G6B5_UNORM_PACK16:
		return "VK_FORMAT_R5G6B5_UNORM_PACK16"
	case FORMAT_B5G6R5_UNORM_PACK16:
		return "VK_FORMAT_B5G6R5_UNORM_PACK16"
	case FORMAT_R5G5B5A1_UNORM_PACK16:
		return "VK_FORMAT_R5G5B5A1_UNORM_PACK16"
	case FORMAT_B5G5R5A1_UNORM_PACK16:
		return "VK_FORMAT_B5G5R5A1_UNORM_PACK16"
	case FORMAT_A1R5G5B5_UNORM_PACK16:
		return "VK_FORMAT_A1R5G5B5_UNORM_PACK16"
	case FORMAT_R8_UNORM:
		return "VK_FORMAT_R8_UNORM"
	case FORMAT_R8_SNORM:
		return "VK_FORMAT_R8_SNORM"
	case FORMAT_R8_USCALED:
		return "VK_FORMAT_R8_USCALED"
	case FORMAT_R8_SSCALED:
		return "VK_FORMAT_R8_SSCALED"
	case FORMAT_R8_UINT:
		return "VK_FORMAT_R8_UINT"
	case FORMAT_R8_SINT:
		return "VK_FORMAT_R8_SINT"
	case FORMAT_R8_SRGB:
		return "VK_FORMAT_R8_SRGB"
	case FORMAT_R8G8_UNORM:
		return "VK_FORMAT_R8G8_UNORM"
	case FORMAT_R8G8_SNORM:
		return "VK_FORMAT_R8G8_SNORM"
	case FORMAT_R8G8_USCALED:
		return "VK_FORMAT_R8G8_USCALED"
	case FORMAT_R8G8_SSCALED:
		return "VK_FORMAT_R8G8_SSCALED"
	case FORMAT_R8G8_UINT:
		return "VK_FORMAT_R8G8_UINT"
	case FORMAT_R8G8_SINT:
		return "VK_FORMAT_R8G8_SINT"
	case FORMAT_R8G8_SRGB:
		return "VK_FORMAT_R8G8_SRGB"
	case FORMAT_R8G8B8_UNORM:
		return "VK_FORMAT_R8G8B8_UNORM"
	case FORMAT_R8G8B8_SNORM:
		return "VK_FORMAT_R8G8B8_SNORM"
	case FORMAT_R8G8B8_USCALED:
		return "VK_FORMAT_R8G8B8_USCALED"
	case FORMAT_R8G8B8_SSCALED:
		return "VK_FORMAT_R8G8B8_SSCALED"
	case FORMAT_R8G8B8_UINT:
		return "VK_FORMAT_R8G8B8_UINT"
	case FORMAT_R8G8B8_SINT:
		return "VK_FORMAT_R8G8B8_SINT"
	case FORMAT_R8G8B8_SRGB:
		return "VK_FORMAT_R8G8B8_SRGB"
	case FORMAT_B8G8R8_UNORM:
		return "VK_FORMAT_B8G8R8_UNORM"
	case FORMAT_B8G8R8_SNORM:
		return "VK_FORMAT_B8G8R8_SNORM"
	case FORMAT_B8G8R8_USCALED:
		return "VK_FORMAT_B8G8R8_USCALED"
	case FORMAT_B8G8R8_SSCALED:
		return "VK_FORMAT_B8G8R8_SSCALED"
	case FORMAT_B8G8R8_UINT:
		return "VK_FORMAT_B8G8R8_UINT"
	case FORMAT_B8G8R8_SINT:
		return "VK_FORMAT_B8G8R8_SINT"
	case FORMAT_B8G8R8_SRGB:
		return "VK_FORMAT_B8G8R8_SRGB"
	case FORMAT_R8G8B8A8_UNORM:
		return "VK_FORMAT_R8G8B8A8_UNORM"
	case FORMAT_R8G8B8A8_SNORM:
		return "VK_FORMAT_R8G8B8A8_SNORM"
	case FORMAT_R8G8B8A8_USCALED:
		return "VK_FORMAT_R8G8B8A8_USCALED"
	case FORMAT_R8G8B8A8_SSCALED:
		return "VK_FORMAT_R8G8B8A8_SSCALED"
	case FORMAT_R8G8B8A8_UINT:
		return "VK_FORMAT_R8G8B8A8_UINT"
	case FORMAT_R8G8B8A8_SINT:
		return "VK_FORMAT_R8G8B8A8_SINT"
	case FORMAT_R8G8B8A8_SRGB:
		return "VK_FORMAT_R8G8B8A8_SRGB"
	case FORMAT_B8G8R8A8_UNORM:
		return "VK_FORMAT_B8G8R8A8_UNORM"
	case FORMAT_B8G8R8A8_SNORM:
		return "VK_FORMAT_B8G8R8A8_SNORM"
	case FORMAT_B8G8R8A8_USCALED:
		return "VK_FORMAT_B8G8R8A8_USCALED"
	case FORMAT_B8G8R8A8_SSCALED:
		return "VK_FORMAT_B8G8R8A8_SSCALED"
	case FORMAT_B8G8R8A8_UINT:
		return "VK_FORMAT_B8G8R8A8_UINT"
	case FORMAT_B8G8R8A8_SINT:
		return "VK_FORMAT_B8G8R8A8_SINT"
	case FORMAT_B8G8R8A8_SRGB:
		return "VK_FORMAT_B8G8R8A8_SRGB"
	case FORMAT_A8B8G8R8_UNORM_PACK32:
		return "VK_FORMAT_A8B8G8R8_UNORM_PACK32"
	case FORMAT_A8B8G8R8_SNORM_PACK32:
		return "VK_FORMAT_A8B8G8R8_SNORM_PACK32"
	case FORMAT_A8B8G8R8_USCALED_PACK32:
		return "VK_FORMAT_A8B8G8R8_USCALED_PACK32"
	case FORMAT_A8B8G8R8_SSCALED_PACK32:
		return "VK_FORMAT_A8B8G8R8_SSCALED_PACK32"
	case FORMAT_A8B8G8R8_UINT_PACK32:
		return "VK_FORMAT_A8B8G8R8_UINT_PACK32"
	case FORMAT_A8B8G8R8_SINT_PACK32:
		return "VK_FORMAT_A8B8G8R8_SINT_PACK32"
	case FORMAT_A8B8G8R8_SRGB_PACK32:
		return "VK_FORMAT_A8B8G8R8_SRGB_PACK32"
	case FORMAT_A2R10G10B10_UNORM_PACK32:
		return "VK_FORMAT_A2R10G10B10_UNORM_PACK32"
	case FORMAT_A2R10G10B10_SNORM_PACK32:
		return "VK_FORMAT_A2R10G10B10_SNORM_PACK32"
	case FORMAT_A2R10G10B10_USCALED_PACK32:
		return "VK_FORMAT_A2R10G10B10_USCALED_PACK32"
	case FORMAT_A2R10G10B10_SSCALED_PACK32:
		return "VK_FORMAT_A2R10G10B10_SSCALED_PACK32"
	case FORMAT_A2R10G10B10_UINT_PACK32:
		return "VK_FORMAT_A2R10G10B10_UINT_PACK32"
	case FORMAT_A2R10G10B10_SINT_PACK32:
		return "VK_FORMAT_A2R10G10B10_SINT_PACK32"
	case FORMAT_A2B10G10R10_UNORM_PACK32:
		return "VK_FORMAT_A2B10G10R10_UNORM_PACK32"
	case FORMAT_A2B10G10R10_SNORM_PACK32:
		return "VK_FORMAT_A2B10G10R10_SNORM_PACK32"
	case FORMAT_A2B10G10R10_USCALED_PACK32:
		return "VK_FORMAT_A2B10G10R10_USCALED_PACK32"
	case FORMAT_A2B10G10R10_SSCALED_PACK32:
		return "VK_FORMAT_A2B10G10R10_SSCALED_PACK32"
	case FORMAT_A2B10G10R10_UINT_PACK32:
		return "VK_FORMAT_A2B10G10R10_UINT_PACK32"
	case FORMAT_A2B10G10R10_SINT_PACK32:
		return "VK_FORMAT_A2B10G10R10_SINT_PACK32"
	case FORMAT_R16_UNORM:
		return "VK_FORMAT_R16_UNORM"
	case FORMAT_R16_SNORM:
		return "VK_FORMAT_R16_SNORM"
	case FORMAT_R16_USCALED:
		return "VK_FORMAT_R16_USCALED"
	case FORMAT_R16_SSCALED:
		return "VK_FORMAT_R16_SSCALED"
	case FORMAT_R16_UINT:
		return "VK_FORMAT_R16_UINT"
	case FORMAT_R16_SINT:
		return "VK_FORMAT_R16_SINT"
	case FORMAT_R16_SFLOAT:
		return "VK_FORMAT_R16_SFLOAT"
	case FORMAT_R16G16_UNORM:
		return "VK_FORMAT_R16G16_UNORM"
	case FORMAT_R16G16_SNORM:
		return "VK_FORMAT_R16G16_SNORM"
	case FORMAT_R16G16_USCALED:
		return "VK_FORMAT_R16G16_USCALED"
	case FORMAT_R16G16_SSCALED:
		return "VK_FORMAT_R16G16_SSCALED"
	case FORMAT_R16G16_UINT:
		return "VK_FORMAT_R16G16_UINT"
	case FORMAT_R16G16_SINT:
		return "VK_FORMAT_R16G16_SINT"
	case FORMAT_R16G16_SFLOAT:
		return "VK_FORMAT_R16G16_SFLOAT"
	case FORMAT_R16G16B16_UNORM:
		return "VK_FORMAT_R16G16B16_UNORM"
	case FORMAT_R16G16B16_SNORM:
		return "VK_FORMAT_R16G16B16_SNORM"
	case FORMAT_R16G16B16_USCALED:
		return "VK_FORMAT_R16G16B16_USCALED"
	case FORMAT_R16G16B16_SSCALED:
		return "VK_FORMAT_R16G16B16_SSCALED"
	case FORMAT_R16G16B16_UINT:
		return "VK_FORMAT_R16G16B16_UINT"
	case FORMAT_R16G16B16_SINT:
		return "VK_FORMAT_R16G16B16_SINT"
	case FORMAT_R16G16B16_SFLOAT:
		return "VK_FORMAT_R16G16B16_SFLOAT"
	case FORMAT_R16G16B16A16_UNORM:
		return "VK_FORMAT_R16G16B16A16_UNORM"
	case FORMAT_R16G16B16A16_SNORM:
		return "VK_FORMAT_R16G16B16A16_SNORM"
	case FORMAT_R16G16B16A16_USCALED:
		return "VK_FORMAT_R16G16B16A16_USCALED"
	case FORMAT_R16G16B16A16_SSCALED:
		return "VK_FORMAT_R16G16B16A16_SSCALED"
	case FORMAT_R16G16B16A16_UINT:
		return "VK_FORMAT_R16G16B16A16_UINT"
	case FORMAT_R16G16B16A16_SINT:
		return "VK_FORMAT_R16G16B16A16_SINT"
	case FORMAT_R16G16B16A16_SFLOAT:
		return "VK_FORMAT_R16G16B16A16_SFLOAT"
	case FORMAT_R32_UINT:
		return "VK_FORMAT_R32_UINT"
	case FORMAT_R32_SINT:
		return "VK_FORMAT_R32_SINT"
	case FORMAT_R32_SFLOAT:
		return "VK_FORMAT_R32_SFLOAT"
	case FORMAT_R32G32_UINT:
		return "VK_FORMAT_R32G32_UINT"
	case FORMAT_R32G32_SINT:
		return "VK_FORMAT_R32G32_SINT"
	case FORMAT_R32G32_SFLOAT:
		return "VK_FORMAT_R32G32_SFLOAT"
	case FORMAT_R32G32B32_UINT:
		return "VK_FORMAT_R32G32B32_UINT"
	case FORMAT_R32G32B32_SINT:
		return "VK_FORMAT_R32G32B32_SINT"
	case FORMAT_R32G32B32_SFLOAT:
		return "VK_FORMAT_R32G32B32_SFLOAT"
	case FORMAT_R32G32B32A32_UINT:
		return "VK_FORMAT_R32G32B32A32_UINT"
	case FORMAT_R32G32B32A32_SINT:
		return "VK_FORMAT_R32G32B32A32_SINT"
	case FORMAT_R32G32B32A32_SFLOAT:
		return "VK_FORMAT_R32G32B32A32_SFLOAT"
	case FORMAT_R64_UINT:
		return "VK_FORMAT_R64_UINT"
	case FORMAT_R64_SINT:
		return "VK_FORMAT_R64_SINT"
	case FORMAT_R64_SFLOAT:
		return "VK_FORMAT_R64_SFLOAT"
	case FORMAT_R64G64_UINT:
		return "VK_FORMAT_R64G64_UINT"
	case FORMAT_R64G64_SINT:
		return "VK_FORMAT_R64G64_SINT"
	case FORMAT_R64G64_SFLOAT:
		return "VK_FORMAT_R64G64_SFLOAT"
	case FORMAT_R64G64B64_UINT:
		return "VK_FORMAT_R64G64B64_UINT"
	case FORMAT_R64G64B64_SINT:
		return "VK_FORMAT_R64G64B64_SINT"
	case FORMAT_R64G64B64_SFLOAT:
		return "VK_FORMAT_R64G64B64_SFLOAT"
	case FORMAT_R64G64B64A64_UINT:
		return "VK_FORMAT_R64G64B64A64_UINT"
	case FORMAT_R64G64B64A64_SINT:
		return "VK_FORMAT_R64G64B64A64_SINT"
	case FORMAT_R64G64B64A64_SFLOAT:
		return "VK_FORMAT_R64G64B64A64_SFLOAT"
	case FORMAT_B10G11R11_UFLOAT_PACK32:
		return "VK_FORMAT_B10G11R11_UFLOAT_PACK32"
	case FORMAT_E5B9G9R9_UFLOAT_PACK32:
		return "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32"
	case FORMAT_D16_UNORM:
		return "VK_FORMAT_D16_UNORM"
	case FORMAT_X8_D24_UNORM_PACK32:
		return "VK_FORMAT_X8_D24_UNORM_PACK32"
	case FORMAT_D32_SFLOAT:
		return "VK_FORMAT_D32_SFLOAT"
	case FORMAT_S8_UINT:
		return "VK_FORMAT_S8_UINT"
	case FORMAT_D16_UNORM_S8_UINT:
		return "VK_FORMAT_D16_UNORM_S8_UINT"
	case FORMAT_D24_UNORM_S8_UINT:
		return "VK_FORMAT_D24_UNORM_S8_UINT"
	case FORMAT_D32_SFLOAT_S8_UINT:
		return "VK_FORMAT_D32_SFLOAT_S8_UINT"
	case FORMAT_BC1_RGB_UNORM_BLOCK:
		return "VK_FORMAT_BC1_RGB_UNORM_BLOCK"
	case FORMAT_BC1_RGB_SRGB_BLOCK:
		return "VK_FORMAT_BC1_RGB_SRGB_BLOCK"
	case FORMAT_BC1_RGBA_UNORM_BLOCK:
		return "VK_FORMAT_BC1_RGBA_UNORM_BLOCK"
	case FORMAT_BC1_RGBA_SRGB_BLOCK:
		return "VK_FORMAT_BC1_RGBA_SRGB_BLOCK"
	case FORMAT_BC2_UNORM_BLOCK:
		return "VK_FORMAT_BC2_UNORM_BLOCK"
	case FORMAT_BC2_SRGB_BLOCK:
		return "VK_FORMAT_BC2_SRGB_BLOCK"
	case FORMAT_BC3_UNORM_BLOCK:
		return "VK_FORMAT_BC3_UNORM_BLOCK"
	case FORMAT_BC3_SRGB_BLOCK:
		return "VK_FORMAT_BC3_SRGB_BLOCK"
	case FORMAT_BC4_UNORM_BLOCK:
		return "VK_FORMAT_BC4_UNORM_BLOCK"
	case FORMAT_BC4_SNORM_BLOCK:
		return "VK_FORMAT_BC4_SNORM_BLOCK"
	case FORMAT_BC5_UNORM_BLOCK:
		return "VK_FORMAT_BC5_UNORM_BLOCK"
	case FORMAT_BC5_SNORM_BLOCK:
		return "VK_FORMAT_BC5_SNORM_BLOCK"
	case FORMAT_BC6H_UFLOAT_BLOCK:
		return "VK_FORMAT_BC6H_UFLOAT_BLOCK"
	case FORMAT_BC6H_SFLOAT_BLOCK:
		return "VK_FORMAT_BC6H_SFLOAT_BLOCK"
	case FORMAT_BC7_UNORM_BLOCK:
		return "VK_FORMAT_BC7_UNORM_BLOCK"
	case FORMAT_BC7_SRGB_BLOCK:
		return "VK_FORMAT_BC7_SRGB_BLOCK"
	case FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK"
	case FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK"
	case FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK"
	case FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK"
	case FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK"
	case FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
		return "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK"
	case FORMAT_EAC_R11_UNORM_BLOCK:
		return "VK_FORMAT_EAC_R11_UNORM_BLOCK"
	case FORMAT_EAC_R11_SNORM_BLOCK:
		return "VK_FORMAT_EAC_R11_SNORM_BLOCK"
	case FORMAT_EAC_R11G11_UNORM_BLOCK:
		return "VK_FORMAT_EAC_R11G11_UNORM_BLOCK"
	case FORMAT_EAC_R11G11_SNORM_BLOCK:
		return "VK_FORMAT_EAC_R11G11_SNORM_BLOCK"
	case FORMAT_ASTC_4x4_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_4x4_UNORM_BLOCK"
	case FORMAT_ASTC_4x4_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_4x4_SRGB_BLOCK"
	case FORMAT_ASTC_5x4_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_5x4_UNORM_BLOCK"
	case FORMAT_ASTC_5x4_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_5x4_SRGB_BLOCK"
	case FORMAT_ASTC_5x5_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_5x5_UNORM_BLOCK"
	case FORMAT_ASTC_5x5_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_5x5_SRGB_BLOCK"
	case FORMAT_ASTC_6x5_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_6x5_UNORM_BLOCK"
	case FORMAT_ASTC_6x5_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_6x5_SRGB_BLOCK"
	case FORMAT_ASTC_6x6_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_6x6_UNORM_BLOCK"
	case FORMAT_ASTC_6x6_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_6x6_SRGB_BLOCK"
	case FORMAT_ASTC_8x5_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_8x5_UNORM_BLOCK"
	case FORMAT_ASTC_8x5_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_8x5_SRGB_BLOCK"
	case FORMAT_ASTC_8x6_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_8x6_UNORM_BLOCK"
	case FORMAT_ASTC_8x6_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_8x6_SRGB_BLOCK"
	case FORMAT_ASTC_8x8_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_8x8_UNORM_BLOCK"
	case FORMAT_ASTC_8x8_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_8x8_SRGB_BLOCK"
	case FORMAT_ASTC_10x5_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_10x5_UNORM_BLOCK"
	case FORMAT_ASTC_10x5_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_10x5_SRGB_BLOCK"
	case FORMAT_ASTC_10x6_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_10x6_UNORM_BLOCK"
	case FORMAT_ASTC_10x6_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_10x6_SRGB_BLOCK"
	case FORMAT_ASTC_10x8_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_10x8_UNORM_BLOCK"
	case FORMAT_ASTC_10x8_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_10x8_SRGB_BLOCK"
	case FORMAT_ASTC_10x10_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_10x10_UNORM_BLOCK"
	case FORMAT_ASTC_10x10_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_10x10_SRGB_BLOCK"
	case FORMAT_ASTC_12x10_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_12x10_UNORM_BLOCK"
	case FORMAT_ASTC_12x10_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_12x10_SRGB_BLOCK"
	case FORMAT_ASTC_12x12_UNORM_BLOCK:
		return "VK_FORMAT_ASTC_12x12_UNORM_BLOCK"
	case FORMAT_ASTC_12x12_SRGB_BLOCK:
		return "VK_FORMAT_ASTC_12x12_SRGB_BLOCK"
	default:
		return fmt.Sprintf("VkFormat(%d)", e)
	}
}

// FrontFace wraps the enum VkFrontFace.
type FrontFace int32

const (
	// FRONT_FACE_COUNTER_CLOCKWISE wraps VK_FRONT_FACE_COUNTER_CLOCKWISE.
	FRONT_FACE_COUNTER_CLOCKWISE FrontFace = 0
	// FRONT_FACE_CLOCKWISE wraps VK_FRONT_FACE_CLOCKWISE.
	FRONT_FACE_CLOCKWISE FrontFace = 1
)

func (e FrontFace) String() string {
	switch e {
	case FRONT_FACE_COUNTER_CLOCKWISE:
		return "VK_FRONT_FACE_COUNTER_CLOCKWISE"
	case FRONT_FACE_CLOCKWISE:
		return "VK_FRONT_FACE_CLOCKWISE"
	default:
		return fmt.Sprintf("VkFrontFace(%d)", e)
	}
}

// ImageLayout wraps the enum VkImageLayout.
type ImageLayout int32

const (
	// IMAGE_LAYOUT_UNDEFINED wraps VK_IMAGE_LAYOUT_UNDEFINED.
	IMAGE_LAYOUT_UNDEFINED ImageLayout = 0
	// IMAGE_LAYOUT_GENERAL wraps VK_IMAGE_LAYOUT_GENERAL.
	IMAGE_LAYOUT_GENERAL ImageLayout = 1
	// IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL wraps VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL.
	IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL ImageLayout = 2
	// IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL wraps VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL.
	IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL ImageLayout = 3
	// IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL wraps VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL.
	IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL ImageLayout = 4
	// IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL wraps VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL.
	IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL ImageLayout = 5
	// IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL wraps VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL.
	IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL ImageLayout = 6
	// IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL wraps VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL.
	IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL ImageLayout = 7
	// IMAGE_LAYOUT_PREINITIALIZED wraps VK_IMAGE_LAYOUT_PREINITIALIZED.
	IMAGE_LAYOUT_PREINITIALIZED ImageLayout = 8
)

func (e ImageLayout) String() string {
	switch e {
	case IMAGE_LAYOUT_UNDEFINED:
		return "VK_IMAGE_LAYOUT_UNDEFINED"
	case IMAGE_LAYOUT_GENERAL:
		return "VK_IMAGE_LAYOUT_GENERAL"
	case IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL:
		return "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL"
	case IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL:
		return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL"
	case IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL:
		return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL"
	case IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL:
		return "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL"
	case IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL:
		return "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL"
	case IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL:
		return "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL"
	case IMAGE_LAYOUT_PREINITIALIZED:
		return "VK_IMAGE_LAYOUT_PREINITIALIZED"
	default:
		return fmt.Sprintf("VkImageLayout(%d)", e)
	}
}

// ImageTiling wraps the enum VkImageTiling.
type ImageTiling int32

const (
	// IMAGE_TILING_OPTIMAL wraps VK_IMAGE_TILING_OPTIMAL.
	IMAGE_TILING_OPTIMAL ImageTiling = 0
	// IMAGE_TILING_LINEAR wraps VK_IMAGE_TILING_LINEAR.
	IMAGE_TILING_LINEAR ImageTiling = 1
)

func (e ImageTiling) String() string {
	switch e {
	case IMAGE_TILING_OPTIMAL:
		return "VK_IMAGE_TILING_OPTIMAL"
	case IMAGE_TILING_LINEAR:
		return "VK_IMAGE_TILING_LINEAR"
	default:
		return fmt.Sprintf("VkImageTiling(%d)", e)
	}
}

// ImageType wraps the enum VkImageType.
type ImageType int32

const (
	// IMAGE_TYPE_1D wraps VK_IMAGE_TYPE_1D.
	IMAGE_TYPE_1D ImageType = 0
	// IMAGE_TYPE_2D wraps VK_IMAGE_TYPE_2D.
	IMAGE_TYPE_2D ImageType = 1
	// IMAGE_TYPE_3D wraps VK_IMAGE_TYPE_3D.
	IMAGE_TYPE_3D ImageType = 2
)

func (e ImageType) String() string {
	switch e {
	case IMAGE_TYPE_1D:
		return "VK_IMAGE_TYPE_1D"
	case IMAGE_TYPE_2D:
		return "VK_IMAGE_TYPE_2D"
	case IMAGE_TYPE_3D:
		return "VK_IMAGE_TYPE_3D"
	default:
		return fmt.Sprintf("VkImageType(%d)", e)
	}
}

// ImageViewType wraps the enum VkImageViewType.
type ImageViewType int32

const (
	// IMAGE_VIEW_TYPE_1D wraps VK_IMAGE_VIEW_TYPE_1D.
	IMAGE_VIEW_TYPE_1D ImageViewType = 0
	// IMAGE_VIEW_TYPE_2D wraps VK_IMAGE_VIEW_TYPE_2D.
	IMAGE_VIEW_TYPE_2D ImageViewType = 1
	// IMAGE_VIEW_TYPE_3D wraps VK_IMAGE_VIEW_TYPE_3D.
	IMAGE_VIEW_TYPE_3D ImageViewType = 2
	// IMAGE_VIEW_TYPE_CUBE wraps VK_IMAGE_VIEW_TYPE_CUBE.
	IMAGE_VIEW_TYPE_CUBE ImageViewType = 3
	// IMAGE_VIEW_TYPE_1D_ARRAY wraps VK_IMAGE_VIEW_TYPE_1D_ARRAY.
	IMAGE_VIEW_TYPE_1D_ARRAY ImageViewType = 4
	// IMAGE_VIEW_TYPE_2D_ARRAY wraps VK_IMAGE_VIEW_TYPE_2D_ARRAY.
	IMAGE_VIEW_TYPE_2D_ARRAY ImageViewType = 5
	// IMAGE_VIEW_TYPE_CUBE_ARRAY wraps VK_IMAGE_VIEW_TYPE_CUBE_ARRAY.
	IMAGE_VIEW_TYPE_CUBE_ARRAY ImageViewType = 6
)

func (e ImageViewType) String() string {
	switch e {
	case IMAGE_VIEW_TYPE_1D:
		return "VK_IMAGE_VIEW_TYPE_1D"
	case IMAGE_VIEW_TYPE_2D:
		return "VK_IMAGE_VIEW_TYPE_2D"
	case IMAGE_VIEW_TYPE_3D:
		return "VK_IMAGE_VIEW_TYPE_3D"
	case IMAGE_VIEW_TYPE_CUBE:
		return "VK_IMAGE_VIEW_TYPE_CUBE"
	case IMAGE_VIEW_TYPE_1D_ARRAY:
		return "VK_IMAGE_VIEW_TYPE_1D_ARRAY"
	case IMAGE_VIEW_TYPE_2D_ARRAY:
		return "VK_IMAGE_VIEW_TYPE_2D_ARRAY"
	case IMAGE_VIEW_TYPE_CUBE_ARRAY:
		return "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
	default:
		return fmt.Sprintf("VkImageViewType(%d)", e)
	}
}

// IndexType wraps the enum VkIndexType.
type IndexType int32

const (
	// INDEX_TYPE_UINT16 wraps VK_INDEX_TYPE_UINT16.
	INDEX_TYPE_UINT16 IndexType = 0
	// INDEX_TYPE_UINT32 wraps VK_INDEX_TYPE_UINT32.
	INDEX_TYPE_UINT32 IndexType = 1
)

func (e IndexType) String() string {
	switch e {
	case INDEX_TYPE_UINT16:
		return "VK_INDEX_TYPE_UINT16"
	case INDEX_TYPE_UINT32:
		return "VK_INDEX_TYPE_UINT32"
	default:
		return fmt.Sprintf("VkIndexType(%d)", e)
	}
}

// InternalAllocationType wraps the enum VkInternalAllocationType.
type InternalAllocationType int32

const (
	// INTERNAL_ALLOCATION_TYPE_EXECUTABLE wraps VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE.
	INTERNAL_ALLOCATION_TYPE_EXECUTABLE InternalAllocationType = 0
)

func (e InternalAllocationType) String() string {
	switch e {
	case INTERNAL_ALLOCATION_TYPE_EXECUTABLE:
		return "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE"
	default:
		return fmt.Sprintf("VkInternalAllocationType(%d)", e)
	}
}

// LineRasterizationMode wraps the enum VkLineRasterizationMode.
type LineRasterizationMode int32

const (
	// LINE_RASTERIZATION_MODE_DEFAULT wraps VK_LINE_RASTERIZATION_MODE_DEFAULT.
	LINE_RASTERIZATION_MODE_DEFAULT LineRasterizationMode = 0
	// LINE_RASTERIZATION_MODE_RECTANGULAR wraps VK_LINE_RASTERIZATION_MODE_RECTANGULAR.
	LINE_RASTERIZATION_MODE_RECTANGULAR LineRasterizationMode = 1
	// LINE_RASTERIZATION_MODE_BRESENHAM wraps VK_LINE_RASTERIZATION_MODE_BRESENHAM.
	LINE_RASTERIZATION_MODE_BRESENHAM LineRasterizationMode = 2
	// LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH wraps VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH.
	LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH LineRasterizationMode = 3
)

func (e LineRasterizationMode) String() string {
	switch e {
	case LINE_RASTERIZATION_MODE_DEFAULT:
		return "VK_LINE_RASTERIZATION_MODE_DEFAULT"
	case LINE_RASTERIZATION_MODE_RECTANGULAR:
		return "VK_LINE_RASTERIZATION_MODE_RECTANGULAR"
	case LINE_RASTERIZATION_MODE_BRESENHAM:
		return "VK_LINE_RASTERIZATION_MODE_BRESENHAM"
	case LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH:
		return "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH"
	default:
		return fmt.Sprintf("VkLineRasterizationMode(%d)", e)
	}
}

// LogicOp wraps the enum VkLogicOp.
type LogicOp int32

const (
	// LOGIC_OP_CLEAR wraps VK_LOGIC_OP_CLEAR.
	LOGIC_OP_CLEAR LogicOp = 0
	// LOGIC_OP_AND wraps VK_LOGIC_OP_AND.
	LOGIC_OP_AND LogicOp = 1
	// LOGIC_OP_AND_REVERSE wraps VK_LOGIC_OP_AND_REVERSE.
	LOGIC_OP_AND_REVERSE LogicOp = 2
	// LOGIC_OP_COPY wraps VK_LOGIC_OP_COPY.
	LOGIC_OP_COPY LogicOp = 3
	// LOGIC_OP_AND_INVERTED wraps VK_LOGIC_OP_AND_INVERTED.
	LOGIC_OP_AND_INVERTED LogicOp = 4
	// LOGIC_OP_NO_OP wraps VK_LOGIC_OP_NO_OP.
	LOGIC_OP_NO_OP LogicOp = 5
	// LOGIC_OP_XOR wraps VK_LOGIC_OP_XOR.
	LOGIC_OP_XOR LogicOp = 6
	// LOGIC_OP_OR wraps VK_LOGIC_OP_OR.
	LOGIC_OP_OR LogicOp = 7
	// LOGIC_OP_NOR wraps VK_LOGIC_OP_NOR.
	LOGIC_OP_NOR LogicOp = 8
	// LOGIC_OP_EQUIVALENT wraps VK_LOGIC_OP_EQUIVALENT.
	LOGIC_OP_EQUIVALENT LogicOp = 9
	// LOGIC_OP_INVERT wraps VK_LOGIC_OP_INVERT.
	LOGIC_OP_INVERT LogicOp = 10
	// LOGIC_OP_OR_REVERSE wraps VK_LOGIC_OP_OR_REVERSE.
	LOGIC_OP_OR_REVERSE LogicOp = 11
	// LOGIC_OP_COPY_INVERTED wraps VK_LOGIC_OP_COPY_INVERTED.
	LOGIC_OP_COPY_INVERTED LogicOp = 12
	// LOGIC_OP_OR_INVERTED wraps VK_LOGIC_OP_OR_INVERTED.
	LOGIC_OP_OR_INVERTED LogicOp = 13
	// LOGIC_OP_NAND wraps VK_LOGIC_OP_NAND.
	LOGIC_OP_NAND LogicOp = 14
	// LOGIC_OP_SET wraps VK_LOGIC_OP_SET.
	LOGIC_OP_SET LogicOp = 15
)

func (e LogicOp) String() string {
	switch e {
	case LOGIC_OP_CLEAR:
		return "VK_LOGIC_OP_CLEAR"
	case LOGIC_OP_AND:
		return "VK_LOGIC_OP_AND"
	case LOGIC_OP_AND_REVERSE:
		return "VK_LOGIC_OP_AND_REVERSE"
	case LOGIC_OP_COPY:
		return "VK_LOGIC_OP_COPY"
	case LOGIC_OP_AND_INVERTED:
		return "VK_LOGIC_OP_AND_INVERTED"
	case LOGIC_OP_NO_OP:
		return "VK_LOGIC_OP_NO_OP"
	case LOGIC_OP_XOR:
		return "VK_LOGIC_OP_XOR"
	case LOGIC_OP_OR:
		return "VK_LOGIC_OP_OR"
	case LOGIC_OP_NOR:
		return "VK_LOGIC_OP_NOR"
	case LOGIC_OP_EQUIVALENT:
		return "VK_LOGIC_OP_EQUIVALENT"
	case LOGIC_OP_INVERT:
		return "VK_LOGIC_OP_INVERT"
	case LOGIC_OP_OR_REVERSE:
		return "VK_LOGIC_OP_OR_REVERSE"
	case LOGIC_OP_COPY_INVERTED:
		return "VK_LOGIC_OP_COPY_INVERTED"
	case LOGIC_OP_OR_INVERTED:
		return "VK_LOGIC_OP_OR_INVERTED"
	case LOGIC_OP_NAND:
		return "VK_LOGIC_OP_NAND"
	case LOGIC_OP_SET:
		return "VK_LOGIC_OP_SET"
	default:
		return fmt.Sprintf("VkLogicOp(%d)", e)
	}
}

// ObjectType wraps the enum VkObjectType.
type ObjectType int32

const (
	// OBJECT_TYPE_UNKNOWN wraps VK_OBJECT_TYPE_UNKNOWN.
	OBJECT_TYPE_UNKNOWN ObjectType = 0
	// OBJECT_TYPE_INSTANCE wraps VK_OBJECT_TYPE_INSTANCE.
	OBJECT_TYPE_INSTANCE ObjectType = 1
	// OBJECT_TYPE_PHYSICAL_DEVICE wraps VK_OBJECT_TYPE_PHYSICAL_DEVICE.
	OBJECT_TYPE_PHYSICAL_DEVICE ObjectType = 2
	// OBJECT_TYPE_DEVICE wraps VK_OBJECT_TYPE_DEVICE.
	OBJECT_TYPE_DEVICE ObjectType = 3
	// OBJECT_TYPE_QUEUE wraps VK_OBJECT_TYPE_QUEUE.
	OBJECT_TYPE_QUEUE ObjectType = 4
	// OBJECT_TYPE_SEMAPHORE wraps VK_OBJECT_TYPE_SEMAPHORE.
	OBJECT_TYPE_SEMAPHORE ObjectType = 5
	// OBJECT_TYPE_COMMAND_BUFFER wraps VK_OBJECT_TYPE_COMMAND_BUFFER.
	OBJECT_TYPE_COMMAND_BUFFER ObjectType = 6
	// OBJECT_TYPE_FENCE wraps VK_OBJECT_TYPE_FENCE.
	OBJECT_TYPE_FENCE ObjectType = 7
	// OBJECT_TYPE_DEVICE_MEMORY wraps VK_OBJECT_TYPE_DEVICE_MEMORY.
	OBJECT_TYPE_DEVICE_MEMORY ObjectType = 8
	// OBJECT_TYPE_BUFFER wraps VK_OBJECT_TYPE_BUFFER.
	OBJECT_TYPE_BUFFER ObjectType = 9
	// OBJECT_TYPE_IMAGE wraps VK_OBJECT_TYPE_IMAGE.
	OBJECT_TYPE_IMAGE ObjectType = 10
	// OBJECT_TYPE_EVENT wraps VK_OBJECT_TYPE_EVENT.
	OBJECT_TYPE_EVENT ObjectType = 11
	// OBJECT_TYPE_QUERY_POOL wraps VK_OBJECT_TYPE_QUERY_POOL.
	OBJECT_TYPE_QUERY_POOL ObjectType = 12
	// OBJECT_TYPE_BUFFER_VIEW wraps VK_OBJECT_TYPE_BUFFER_VIEW.
	OBJECT_TYPE_BUFFER_VIEW ObjectType = 13
	// OBJECT_TYPE_IMAGE_VIEW wraps VK_OBJECT_TYPE_IMAGE_VIEW.
	OBJECT_TYPE_IMAGE_VIEW ObjectType = 14
	// OBJECT_TYPE_SHADER_MODULE wraps VK_OBJECT_TYPE_SHADER_MODULE.
	OBJECT_TYPE_SHADER_MODULE ObjectType = 15
	// OBJECT_TYPE_PIPELINE_CACHE wraps VK_OBJECT_TYPE_PIPELINE_CACHE.
	OBJECT_TYPE_PIPELINE_CACHE ObjectType = 16
	// OBJECT_TYPE_PIPELINE_LAYOUT wraps VK_OBJECT_TYPE_PIPELINE_LAYOUT.
	OBJECT_TYPE_PIPELINE_LAYOUT ObjectType = 17
	// OBJECT_TYPE_RENDER_PASS wraps VK_OBJECT_TYPE_RENDER_PASS.
	OBJECT_TYPE_RENDER_PASS ObjectType = 18
	// OBJECT_TYPE_PIPELINE wraps VK_OBJECT_TYPE_PIPELINE.
	OBJECT_TYPE_PIPELINE ObjectType = 19
	// OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT wraps VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT.
	OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT ObjectType = 20
	// OBJECT_TYPE_SAMPLER wraps VK_OBJECT_TYPE_SAMPLER.
	OBJECT_TYPE_SAMPLER ObjectType = 21
	// OBJECT_TYPE_DESCRIPTOR_POOL wraps VK_OBJECT_TYPE_DESCRIPTOR_POOL.
	OBJECT_TYPE_DESCRIPTOR_POOL ObjectType = 22
	// OBJECT_TYPE_DESCRIPTOR_SET wraps VK_OBJECT_TYPE_DESCRIPTOR_SET.
	OBJECT_TYPE_DESCRIPTOR_SET ObjectType = 23
	// OBJECT_TYPE_FRAMEBUFFER wraps VK_OBJECT_TYPE_FRAMEBUFFER.
	OBJECT_TYPE_FRAMEBUFFER ObjectType = 24
	// OBJECT_TYPE_COMMAND_POOL wraps VK_OBJECT_TYPE_COMMAND_POOL.
	OBJECT_TYPE_COMMAND_POOL ObjectType = 25
)

func (e ObjectType) String() string {
	switch e {
	case OBJECT_TYPE_UNKNOWN:
		return "VK_OBJECT_TYPE_UNKNOWN"
	case OBJECT_TYPE_INSTANCE:
		return "VK_OBJECT_TYPE_INSTANCE"
	case OBJECT_TYPE_PHYSICAL_DEVICE:
		return "VK_OBJECT_TYPE_PHYSICAL_DEVICE"
	case OBJECT_TYPE_DEVICE:
		return "VK_OBJECT_TYPE_DEVICE"
	case OBJECT_TYPE_QUEUE:
		return "VK_OBJECT_TYPE_QUEUE"
	case OBJECT_TYPE_SEMAPHORE:
		return "VK_OBJECT_TYPE_SEMAPHORE"
	case OBJECT_TYPE_COMMAND_BUFFER:
		return "VK_OBJECT_TYPE_COMMAND_BUFFER"
	case OBJECT_TYPE_FENCE:
		return "VK_OBJECT_TYPE_FENCE"
	case OBJECT_TYPE_DEVICE_MEMORY:
		return "VK_OBJECT_TYPE_DEVICE_MEMORY"
	case OBJECT_TYPE_BUFFER:
		return "VK_OBJECT_TYPE_BUFFER"
	case OBJECT_TYPE_IMAGE:
		return "VK_OBJECT_TYPE_IMAGE"
	case OBJECT_TYPE_EVENT:
		return "VK_OBJECT_TYPE_EVENT"
	case OBJECT_TYPE_QUERY_POOL:
		return "VK_OBJECT_TYPE_QUERY_POOL"
	case OBJECT_TYPE_BUFFER_VIEW:
		return "VK_OBJECT_TYPE_BUFFER_VIEW"
	case OBJECT_TYPE_IMAGE_VIEW:
		return "VK_OBJECT_TYPE_IMAGE_VIEW"
	case OBJECT_TYPE_SHADER_MODULE:
		return "VK_OBJECT_TYPE_SHADER_MODULE"
	case OBJECT_TYPE_PIPELINE_CACHE:
		return "VK_OBJECT_TYPE_PIPELINE_CACHE"
	case OBJECT_TYPE_PIPELINE_LAYOUT:
		return "VK_OBJECT_TYPE_PIPELINE_LAYOUT"
	case OBJECT_TYPE_RENDER_PASS:
		return "VK_OBJECT_TYPE_RENDER_PASS"
	case OBJECT_TYPE_PIPELINE:
		return "VK_OBJECT_TYPE_PIPELINE"
	case OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT:
		return "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT"
	case OBJECT_TYPE_SAMPLER:
		return "VK_OBJECT_TYPE_SAMPLER"
	case OBJECT_TYPE_DESCRIPTOR_POOL:
		return "VK_OBJECT_TYPE_DESCRIPTOR_POOL"
	case OBJECT_TYPE_DESCRIPTOR_SET:
		return "VK_OBJECT_TYPE_DESCRIPTOR_SET"
	case OBJECT_TYPE_FRAMEBUFFER:
		return "VK_OBJECT_TYPE_FRAMEBUFFER"
	case OBJECT_TYPE_COMMAND_POOL:
		return "VK_OBJECT_TYPE_COMMAND_POOL"
	default:
		return fmt.Sprintf("VkObjectType(%d)", e)
	}
}

// PhysicalDeviceType wraps the enum VkPhysicalDeviceType.
type PhysicalDeviceType int32

const (
	// PHYSICAL_DEVICE_TYPE_OTHER wraps VK_PHYSICAL_DEVICE_TYPE_OTHER.
	PHYSICAL_DEVICE_TYPE_OTHER PhysicalDeviceType = 0
	// PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU wraps VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU.
	PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU PhysicalDeviceType = 1
	// PHYSICAL_DEVICE_TYPE_DISCRETE_GPU wraps VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU.
	PHYSICAL_DEVICE_TYPE_DISCRETE_GPU PhysicalDeviceType = 2
	// PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU wraps VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU.
	PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU PhysicalDeviceType = 3
	// PHYSICAL_DEVICE_TYPE_CPU wraps VK_PHYSICAL_DEVICE_TYPE_CPU.
	PHYSICAL_DEVICE_TYPE_CPU PhysicalDeviceType = 4
)

func (e PhysicalDeviceType) String() string {
	switch e {
	case PHYSICAL_DEVICE_TYPE_OTHER:
		return "VK_PHYSICAL_DEVICE_TYPE_OTHER"
	case PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU:
		return "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU"
	case PHYSICAL_DEVICE_TYPE_DISCRETE_GPU:
		return "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU"
	case PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU:
		return "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU"
	case PHYSICAL_DEVICE_TYPE_CPU:
		return "VK_PHYSICAL_DEVICE_TYPE_CPU"
	default:
		return fmt.Sprintf("VkPhysicalDeviceType(%d)", e)
	}
}

// PipelineBindPoint wraps the enum VkPipelineBindPoint.
type PipelineBindPoint int32

const (
	// PIPELINE_BIND_POINT_GRAPHICS wraps VK_PIPELINE_BIND_POINT_GRAPHICS.
	PIPELINE_BIND_POINT_GRAPHICS PipelineBindPoint = 0
	// PIPELINE_BIND_POINT_COMPUTE wraps VK_PIPELINE_BIND_POINT_COMPUTE.
	PIPELINE_BIND_POINT_COMPUTE PipelineBindPoint = 1
)

func (e PipelineBindPoint) String() string {
	switch e {
	case PIPELINE_BIND_POINT_GRAPHICS:
		return "VK_PIPELINE_BIND_POINT_GRAPHICS"
	case PIPELINE_BIND_POINT_COMPUTE:
		return "VK_PIPELINE_BIND_POINT_COMPUTE"
	default:
		return fmt.Sprintf("VkPipelineBindPoint(%d)", e)
	}
}

// PipelineCacheHeaderVersion wraps the enum VkPipelineCacheHeaderVersion.
type PipelineCacheHeaderVersion int32

const (
	// PIPELINE_CACHE_HEADER_VERSION_ONE wraps VK_PIPELINE_CACHE_HEADER_VERSION_ONE.
	PIPELINE_CACHE_HEADER_VERSION_ONE PipelineCacheHeaderVersion = 1
)

func (e PipelineCacheHeaderVersion) String() string {
	switch e {
	case PIPELINE_CACHE_HEADER_VERSION_ONE:
		return "VK_PIPELINE_CACHE_HEADER_VERSION_ONE"
	default:
		return fmt.Sprintf("VkPipelineCacheHeaderVersion(%d)", e)
	}
}

// PipelineRobustnessBufferBehavior wraps the enum VkPipelineRobustnessBufferBehavior.
type PipelineRobustnessBufferBehavior int32

const (
	// PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT wraps VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT.
	PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT PipelineRobustnessBufferBehavior = 0
	// PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED wraps VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED.
	PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED PipelineRobustnessBufferBehavior = 1
	// PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS wraps VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS.
	PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS PipelineRobustnessBufferBehavior = 2
	// PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2 wraps VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2.
	PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2 PipelineRobustnessBufferBehavior = 3
)

func (e PipelineRobustnessBufferBehavior) String() string {
	switch e {
	case PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT:
		return "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT"
	case PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED:
		return "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED"
	case PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS:
		return "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS"
	case PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2:
		return "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2"
	default:
		return fmt.Sprintf("VkPipelineRobustnessBufferBehavior(%d)", e)
	}
}

// PipelineRobustnessImageBehavior wraps the enum VkPipelineRobustnessImageBehavior.
type PipelineRobustnessImageBehavior int32

const (
	// PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT wraps VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT.
	PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT PipelineRobustnessImageBehavior = 0
	// PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED wraps VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED.
	PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED PipelineRobustnessImageBehavior = 1
	// PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS wraps VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS.
	PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS PipelineRobustnessImageBehavior = 2
	// PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2 wraps VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2.
	PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2 PipelineRobustnessImageBehavior = 3
)

func (e PipelineRobustnessImageBehavior) String() string {
	switch e {
	case PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT:
		return "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT"
	case PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED:
		return "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED"
	case PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS:
		return "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS"
	case PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2:
		return "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2"
	default:
		return fmt.Sprintf("VkPipelineRobustnessImageBehavior(%d)", e)
	}
}

// PointClippingBehavior wraps the enum VkPointClippingBehavior.
type PointClippingBehavior int32

const (
	// POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES wraps VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES.
	POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES PointClippingBehavior = 0
	// POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY wraps VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY.
	POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY PointClippingBehavior = 1
)

func (e PointClippingBehavior) String() string {
	switch e {
	case POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES:
		return "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES"
	case POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY:
		return "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY"
	default:
		return fmt.Sprintf("VkPointClippingBehavior(%d)", e)
	}
}

// PolygonMode wraps the enum VkPolygonMode.
type PolygonMode int32

const (
	// POLYGON_MODE_FILL wraps VK_POLYGON_MODE_FILL.
	POLYGON_MODE_FILL PolygonMode = 0
	// POLYGON_MODE_LINE wraps VK_POLYGON_MODE_LINE.
	POLYGON_MODE_LINE PolygonMode = 1
	// POLYGON_MODE_POINT wraps VK_POLYGON_MODE_POINT.
	POLYGON_MODE_POINT PolygonMode = 2
)

func (e PolygonMode) String() string {
	switch e {
	case POLYGON_MODE_FILL:
		return "VK_POLYGON_MODE_FILL"
	case POLYGON_MODE_LINE:
		return "VK_POLYGON_MODE_LINE"
	case POLYGON_MODE_POINT:
		return "VK_POLYGON_MODE_POINT"
	default:
		return fmt.Sprintf("VkPolygonMode(%d)", e)
	}
}

// PrimitiveTopology wraps the enum VkPrimitiveTopology.
type PrimitiveTopology int32

const (
	// PRIMITIVE_TOPOLOGY_POINT_LIST wraps VK_PRIMITIVE_TOPOLOGY_POINT_LIST.
	PRIMITIVE_TOPOLOGY_POINT_LIST PrimitiveTopology = 0
	// PRIMITIVE_TOPOLOGY_LINE_LIST wraps VK_PRIMITIVE_TOPOLOGY_LINE_LIST.
	PRIMITIVE_TOPOLOGY_LINE_LIST PrimitiveTopology = 1
	// PRIMITIVE_TOPOLOGY_LINE_STRIP wraps VK_PRIMITIVE_TOPOLOGY_LINE_STRIP.
	PRIMITIVE_TOPOLOGY_LINE_STRIP PrimitiveTopology = 2
	// PRIMITIVE_TOPOLOGY_TRIANGLE_LIST wraps VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST.
	PRIMITIVE_TOPOLOGY_TRIANGLE_LIST PrimitiveTopology = 3
	// PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP wraps VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP.
	PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP PrimitiveTopology = 4
	// PRIMITIVE_TOPOLOGY_TRIANGLE_FAN wraps VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN.
	PRIMITIVE_TOPOLOGY_TRIANGLE_FAN PrimitiveTopology = 5
	// PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY wraps VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY.
	PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY PrimitiveTopology = 6
	// PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY wraps VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY.
	PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY PrimitiveTopology = 7
	// PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY wraps VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY.
	PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY PrimitiveTopology = 8
	// PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY wraps VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY.
	PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY PrimitiveTopology = 9
	// PRIMITIVE_TOPOLOGY_PATCH_LIST wraps VK_PRIMITIVE_TOPOLOGY_PATCH_LIST.
	PRIMITIVE_TOPOLOGY_PATCH_LIST PrimitiveTopology = 10
)

func (e PrimitiveTopology) String() string {
	switch e {
	case PRIMITIVE_TOPOLOGY_POINT_LIST:
		return "VK_PRIMITIVE_TOPOLOGY_POINT_LIST"
	case PRIMITIVE_TOPOLOGY_LINE_LIST:
		return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST"
	case PRIMITIVE_TOPOLOGY_LINE_STRIP:
		return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP"
	case PRIMITIVE_TOPOLOGY_TRIANGLE_LIST:
		return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST"
	case PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP:
		return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP"
	case PRIMITIVE_TOPOLOGY_TRIANGLE_FAN:
		return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN"
	case PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY:
		return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY"
	case PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY:
		return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY"
	case PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY:
		return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY"
	case PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY:
		return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY"
	case PRIMITIVE_TOPOLOGY_PATCH_LIST:
		return "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST"
	default:
		return fmt.Sprintf("VkPrimitiveTopology(%d)", e)
	}
}

// QueryType wraps the enum VkQueryType.
type QueryType int32

const (
	// QUERY_TYPE_OCCLUSION wraps VK_QUERY_TYPE_OCCLUSION.
	QUERY_TYPE_OCCLUSION QueryType = 0
	// QUERY_TYPE_PIPELINE_STATISTICS wraps VK_QUERY_TYPE_PIPELINE_STATISTICS.
	QUERY_TYPE_PIPELINE_STATISTICS QueryType = 1
	// QUERY_TYPE_TIMESTAMP wraps VK_QUERY_TYPE_TIMESTAMP.
	QUERY_TYPE_TIMESTAMP QueryType = 2
)

func (e QueryType) String() string {
	switch e {
	case QUERY_TYPE_OCCLUSION:
		return "VK_QUERY_TYPE_OCCLUSION"
	case QUERY_TYPE_PIPELINE_STATISTICS:
		return "VK_QUERY_TYPE_PIPELINE_STATISTICS"
	case QUERY_TYPE_TIMESTAMP:
		return "VK_QUERY_TYPE_TIMESTAMP"
	default:
		return fmt.Sprintf("VkQueryType(%d)", e)
	}
}

// QueueGlobalPriority wraps the enum VkQueueGlobalPriority.
type QueueGlobalPriority int32

const (
	// QUEUE_GLOBAL_PRIORITY_LOW wraps VK_QUEUE_GLOBAL_PRIORITY_LOW.
	QUEUE_GLOBAL_PRIORITY_LOW QueueGlobalPriority = 128
	// QUEUE_GLOBAL_PRIORITY_MEDIUM wraps VK_QUEUE_GLOBAL_PRIORITY_MEDIUM.
	QUEUE_GLOBAL_PRIORITY_MEDIUM QueueGlobalPriority = 256
	// QUEUE_GLOBAL_PRIORITY_HIGH wraps VK_QUEUE_GLOBAL_PRIORITY_HIGH.
	QUEUE_GLOBAL_PRIORITY_HIGH QueueGlobalPriority = 512
	// QUEUE_GLOBAL_PRIORITY_REALTIME wraps VK_QUEUE_GLOBAL_PRIORITY_REALTIME.
	QUEUE_GLOBAL_PRIORITY_REALTIME QueueGlobalPriority = 1024
)

func (e QueueGlobalPriority) String() string {
	switch e {
	case QUEUE_GLOBAL_PRIORITY_LOW:
		return "VK_QUEUE_GLOBAL_PRIORITY_LOW"
	case QUEUE_GLOBAL_PRIORITY_MEDIUM:
		return "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM"
	case QUEUE_GLOBAL_PRIORITY_HIGH:
		return "VK_QUEUE_GLOBAL_PRIORITY_HIGH"
	case QUEUE_GLOBAL_PRIORITY_REALTIME:
		return "VK_QUEUE_GLOBAL_PRIORITY_REALTIME"
	default:
		return fmt.Sprintf("VkQueueGlobalPriority(%d)", e)
	}
}

// Result wraps the enum VkResult.
type Result int32

const (
	// SUCCESS wraps VK_SUCCESS.
	SUCCESS Result = 0
	// NOT_READY wraps VK_NOT_READY.
	NOT_READY Result = 1
	// TIMEOUT wraps VK_TIMEOUT.
	TIMEOUT Result = 2
	// EVENT_SET wraps VK_EVENT_SET.
	EVENT_SET Result = 3
	// EVENT_RESET wraps VK_EVENT_RESET.
	EVENT_RESET Result = 4
	// INCOMPLETE wraps VK_INCOMPLETE.
	INCOMPLETE Result = 5
	// ERROR_OUT_OF_HOST_MEMORY wraps VK_ERROR_OUT_OF_HOST_MEMORY.
	ERROR_OUT_OF_HOST_MEMORY Result = -1
	// ERROR_OUT_OF_DEVICE_MEMORY wraps VK_ERROR_OUT_OF_DEVICE_MEMORY.
	ERROR_OUT_OF_DEVICE_MEMORY Result = -2
	// ERROR_INITIALIZATION_FAILED wraps VK_ERROR_INITIALIZATION_FAILED.
	ERROR_INITIALIZATION_FAILED Result = -3
	// ERROR_DEVICE_LOST wraps VK_ERROR_DEVICE_LOST.
	ERROR_DEVICE_LOST Result = -4
	// ERROR_MEMORY_MAP_FAILED wraps VK_ERROR_MEMORY_MAP_FAILED.
	ERROR_MEMORY_MAP_FAILED Result = -5
	// ERROR_LAYER_NOT_PRESENT wraps VK_ERROR_LAYER_NOT_PRESENT.
	ERROR_LAYER_NOT_PRESENT Result = -6
	// ERROR_EXTENSION_NOT_PRESENT wraps VK_ERROR_EXTENSION_NOT_PRESENT.
	ERROR_EXTENSION_NOT_PRESENT Result = -7
	// ERROR_FEATURE_NOT_PRESENT wraps VK_ERROR_FEATURE_NOT_PRESENT.
	ERROR_FEATURE_NOT_PRESENT Result = -8
	// ERROR_INCOMPATIBLE_DRIVER wraps VK_ERROR_INCOMPATIBLE_DRIVER.
	ERROR_INCOMPATIBLE_DRIVER Result = -9
	// ERROR_TOO_MANY_OBJECTS wraps VK_ERROR_TOO_MANY_OBJECTS.
	ERROR_TOO_MANY_OBJECTS Result = -10
	// ERROR_FORMAT_NOT_SUPPORTED wraps VK_ERROR_FORMAT_NOT_SUPPORTED.
	ERROR_FORMAT_NOT_SUPPORTED Result = -11
	// ERROR_FRAGMENTED_POOL wraps VK_ERROR_FRAGMENTED_POOL.
	ERROR_FRAGMENTED_POOL Result = -12
	// ERROR_UNKNOWN wraps VK_ERROR_UNKNOWN.
	ERROR_UNKNOWN Result = -13
)

func (e Result) String() string {
	switch e {
	case SUCCESS:
		return "VK_SUCCESS"
	case NOT_READY:
		return "VK_NOT_READY"
	case TIMEOUT:
		return "VK_TIMEOUT"
	case EVENT_SET:
		return "VK_EVENT_SET"
	case EVENT_RESET:
		return "VK_EVENT_RESET"
	case INCOMPLETE:
		return "VK_INCOMPLETE"
	case ERROR_OUT_OF_HOST_MEMORY:
		return "VK_ERROR_OUT_OF_HOST_MEMORY"
	case ERROR_OUT_OF_DEVICE_MEMORY:
		return "VK_ERROR_OUT_OF_DEVICE_MEMORY"
	case ERROR_INITIALIZATION_FAILED:
		return "VK_ERROR_INITIALIZATION_FAILED"
	case ERROR_DEVICE_LOST:
		return "VK_ERROR_DEVICE_LOST"
	case ERROR_MEMORY_MAP_FAILED:
		return "VK_ERROR_MEMORY_MAP_FAILED"
	case ERROR_LAYER_NOT_PRESENT:
		return "VK_ERROR_LAYER_NOT_PRESENT"
	case ERROR_EXTENSION_NOT_PRESENT:
		return "VK_ERROR_EXTENSION_NOT_PRESENT"
	case ERROR_FEATURE_NOT_PRESENT:
		return "VK_ERROR_FEATURE_NOT_PRESENT"
	case ERROR_INCOMPATIBLE_DRIVER:
		return "VK_ERROR_INCOMPATIBLE_DRIVER"
	case ERROR_TOO_MANY_OBJECTS:
		return "VK_ERROR_TOO_MANY_OBJECTS"
	case ERROR_FORMAT_NOT_SUPPORTED:
		return "VK_ERROR_FORMAT_NOT_SUPPORTED"
	case ERROR_FRAGMENTED_POOL:
		return "VK_ERROR_FRAGMENTED_POOL"
	case ERROR_UNKNOWN:
		return "VK_ERROR_UNKNOWN"
	default:
		return fmt.Sprintf("VkResult(%d)", e)
	}
}

// SamplerAddressMode wraps the enum VkSamplerAddressMode.
type SamplerAddressMode int32

const (
	// SAMPLER_ADDRESS_MODE_REPEAT wraps VK_SAMPLER_ADDRESS_MODE_REPEAT.
	SAMPLER_ADDRESS_MODE_REPEAT SamplerAddressMode = 0
	// SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT wraps VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT.
	SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT SamplerAddressMode = 1
	// SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE wraps VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE.
	SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE SamplerAddressMode = 2
	// SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER wraps VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER.
	SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER SamplerAddressMode = 3
)

func (e SamplerAddressMode) String() string {
	switch e {
	case SAMPLER_ADDRESS_MODE_REPEAT:
		return "VK_SAMPLER_ADDRESS_MODE_REPEAT"
	case SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT:
		return "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT"
	case SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE:
		return "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE"
	case SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER:
		return "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER"
	default:
		return fmt.Sprintf("VkSamplerAddressMode(%d)", e)
	}
}

// SamplerMipmapMode wraps the enum VkSamplerMipmapMode.
type SamplerMipmapMode int32

const (
	// SAMPLER_MIPMAP_MODE_NEAREST wraps VK_SAMPLER_MIPMAP_MODE_NEAREST.
	SAMPLER_MIPMAP_MODE_NEAREST SamplerMipmapMode = 0
	// SAMPLER_MIPMAP_MODE_LINEAR wraps VK_SAMPLER_MIPMAP_MODE_LINEAR.
	SAMPLER_MIPMAP_MODE_LINEAR SamplerMipmapMode = 1
)

func (e SamplerMipmapMode) String() string {
	switch e {
	case SAMPLER_MIPMAP_MODE_NEAREST:
		return "VK_SAMPLER_MIPMAP_MODE_NEAREST"
	case SAMPLER_MIPMAP_MODE_LINEAR:
		return "VK_SAMPLER_MIPMAP_MODE_LINEAR"
	default:
		return fmt.Sprintf("VkSamplerMipmapMode(%d)", e)
	}
}

// SamplerReductionMode wraps the enum VkSamplerReductionMode.
type SamplerReductionMode int32

const (
	// SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE wraps VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE.
	SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE SamplerReductionMode = 0
	// SAMPLER_REDUCTION_MODE_MIN wraps VK_SAMPLER_REDUCTION_MODE_MIN.
	SAMPLER_REDUCTION_MODE_MIN SamplerReductionMode = 1
	// SAMPLER_REDUCTION_MODE_MAX wraps VK_SAMPLER_REDUCTION_MODE_MAX.
	SAMPLER_REDUCTION_MODE_MAX SamplerReductionMode = 2
)

func (e SamplerReductionMode) String() string {
	switch e {
	case SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE:
		return "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE"
	case SAMPLER_REDUCTION_MODE_MIN:
		return "VK_SAMPLER_REDUCTION_MODE_MIN"
	case SAMPLER_REDUCTION_MODE_MAX:
		return "VK_SAMPLER_REDUCTION_MODE_MAX"
	default:
		return fmt.Sprintf("VkSamplerReductionMode(%d)", e)
	}
}

// SamplerYcbcrModelConversion wraps the enum VkSamplerYcbcrModelConversion.
type SamplerYcbcrModelConversion int32

const (
	// SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY wraps VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY.
	SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY SamplerYcbcrModelConversion = 0
	// SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY wraps VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY.
	SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY SamplerYcbcrModelConversion = 1
	// SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 wraps VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709.
	SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 SamplerYcbcrModelConversion = 2
	// SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 wraps VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601.
	SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 SamplerYcbcrModelConversion = 3
	// SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 wraps VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020.
	SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 SamplerYcbcrModelConversion = 4
)

func (e SamplerYcbcrModelConversion) String() string {
	switch e {
	case SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY:
		return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY"
	case SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY:
		return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY"
	case SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709:
		return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709"
	case SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601:
		return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601"
	case SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020:
		return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020"
	default:
		return fmt.Sprintf("VkSamplerYcbcrModelConversion(%d)", e)
	}
}

// SamplerYcbcrRange wraps the enum VkSamplerYcbcrRange.
type SamplerYcbcrRange int32

const (
	// SAMPLER_YCBCR_RANGE_ITU_FULL wraps VK_SAMPLER_YCBCR_RANGE_ITU_FULL.
	SAMPLER_YCBCR_RANGE_ITU_FULL SamplerYcbcrRange = 0
	// SAMPLER_YCBCR_RANGE_ITU_NARROW wraps VK_SAMPLER_YCBCR_RANGE_ITU_NARROW.
	SAMPLER_YCBCR_RANGE_ITU_NARROW SamplerYcbcrRange = 1
)

func (e SamplerYcbcrRange) String() string {
	switch e {
	case SAMPLER_YCBCR_RANGE_ITU_FULL:
		return "VK_SAMPLER_YCBCR_RANGE_ITU_FULL"
	case SAMPLER_YCBCR_RANGE_ITU_NARROW:
		return "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW"
	default:
		return fmt.Sprintf("VkSamplerYcbcrRange(%d)", e)
	}
}

// SemaphoreType wraps the enum VkSemaphoreType.
type SemaphoreType int32

const (
	// SEMAPHORE_TYPE_BINARY wraps VK_SEMAPHORE_TYPE_BINARY.
	SEMAPHORE_TYPE_BINARY SemaphoreType = 0
	// SEMAPHORE_TYPE_TIMELINE wraps VK_SEMAPHORE_TYPE_TIMELINE.
	SEMAPHORE_TYPE_TIMELINE SemaphoreType = 1
)

func (e SemaphoreType) String() string {
	switch e {
	case SEMAPHORE_TYPE_BINARY:
		return "VK_SEMAPHORE_TYPE_BINARY"
	case SEMAPHORE_TYPE_TIMELINE:
		return "VK_SEMAPHORE_TYPE_TIMELINE"
	default:
		return fmt.Sprintf("VkSemaphoreType(%d)", e)
	}
}

// ShaderFloatControlsIndependence wraps the enum VkShaderFloatControlsIndependence.
type ShaderFloatControlsIndependence int32

const (
	// SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY wraps VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY.
	SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY ShaderFloatControlsIndependence = 0
	// SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL wraps VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL.
	SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL ShaderFloatControlsIndependence = 1
	// SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE wraps VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE.
	SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE ShaderFloatControlsIndependence = 2
)

func (e ShaderFloatControlsIndependence) String() string {
	switch e {
	case SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY:
		return "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY"
	case SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL:
		return "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL"
	case SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE:
		return "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE"
	default:
		return fmt.Sprintf("VkShaderFloatControlsIndependence(%d)", e)
	}
}

// SharingMode wraps the enum VkSharingMode.
type SharingMode int32

const (
	// SHARING_MODE_EXCLUSIVE wraps VK_SHARING_MODE_EXCLUSIVE.
	SHARING_MODE_EXCLUSIVE SharingMode = 0
	// SHARING_MODE_CONCURRENT wraps VK_SHARING_MODE_CONCURRENT.
	SHARING_MODE_CONCURRENT SharingMode = 1
)

func (e SharingMode) String() string {
	switch e {
	case SHARING_MODE_EXCLUSIVE:
		return "VK_SHARING_MODE_EXCLUSIVE"
	case SHARING_MODE_CONCURRENT:
		return "VK_SHARING_MODE_CONCURRENT"
	default:
		return fmt.Sprintf("VkSharingMode(%d)", e)
	}
}

// StencilOp wraps the enum VkStencilOp.
type StencilOp int32

const (
	// STENCIL_OP_KEEP wraps VK_STENCIL_OP_KEEP.
	STENCIL_OP_KEEP StencilOp = 0
	// STENCIL_OP_ZERO wraps VK_STENCIL_OP_ZERO.
	STENCIL_OP_ZERO StencilOp = 1
	// STENCIL_OP_REPLACE wraps VK_STENCIL_OP_REPLACE.
	STENCIL_OP_REPLACE StencilOp = 2
	// STENCIL_OP_INCREMENT_AND_CLAMP wraps VK_STENCIL_OP_INCREMENT_AND_CLAMP.
	STENCIL_OP_INCREMENT_AND_CLAMP StencilOp = 3
	// STENCIL_OP_DECREMENT_AND_CLAMP wraps VK_STENCIL_OP_DECREMENT_AND_CLAMP.
	STENCIL_OP_DECREMENT_AND_CLAMP StencilOp = 4
	// STENCIL_OP_INVERT wraps VK_STENCIL_OP_INVERT.
	STENCIL_OP_INVERT StencilOp = 5
	// STENCIL_OP_INCREMENT_AND_WRAP wraps VK_STENCIL_OP_INCREMENT_AND_WRAP.
	STENCIL_OP_INCREMENT_AND_WRAP StencilOp = 6
	// STENCIL_OP_DECREMENT_AND_WRAP wraps VK_STENCIL_OP_DECREMENT_AND_WRAP.
	STENCIL_OP_DECREMENT_AND_WRAP StencilOp = 7
)

func (e StencilOp) String() string {
	switch e {
	case STENCIL_OP_KEEP:
		return "VK_STENCIL_OP_KEEP"
	case STENCIL_OP_ZERO:
		return "VK_STENCIL_OP_ZERO"
	case STENCIL_OP_REPLACE:
		return "VK_STENCIL_OP_REPLACE"
	case STENCIL_OP_INCREMENT_AND_CLAMP:
		return "VK_STENCIL_OP_INCREMENT_AND_CLAMP"
	case STENCIL_OP_DECREMENT_AND_CLAMP:
		return "VK_STENCIL_OP_DECREMENT_AND_CLAMP"
	case STENCIL_OP_INVERT:
		return "VK_STENCIL_OP_INVERT"
	case STENCIL_OP_INCREMENT_AND_WRAP:
		return "VK_STENCIL_OP_INCREMENT_AND_WRAP"
	case STENCIL_OP_DECREMENT_AND_WRAP:
		return "VK_STENCIL_OP_DECREMENT_AND_WRAP"
	default:
		return fmt.Sprintf("VkStencilOp(%d)", e)
	}
}

// StructureType wraps the enum VkStructureType.
type StructureType int32

const (
	// STRUCTURE_TYPE_APPLICATION_INFO wraps VK_STRUCTURE_TYPE_APPLICATION_INFO.
	STRUCTURE_TYPE_APPLICATION_INFO StructureType = 0
	// STRUCTURE_TYPE_INSTANCE_CREATE_INFO wraps VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO.
	STRUCTURE_TYPE_INSTANCE_CREATE_INFO StructureType = 1
	// STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO wraps VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO.
	STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO StructureType = 2
	// STRUCTURE_TYPE_DEVICE_CREATE_INFO wraps VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO.
	STRUCTURE_TYPE_DEVICE_CREATE_INFO StructureType = 3
	// STRUCTURE_TYPE_SUBMIT_INFO wraps VK_STRUCTURE_TYPE_SUBMIT_INFO.
	STRUCTURE_TYPE_SUBMIT_INFO StructureType = 4
	// STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO wraps VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO.
	STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO StructureType = 5
	// STRUCTURE_TYPE_MAPPED_MEMORY_RANGE wraps VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE.
	STRUCTURE_TYPE_MAPPED_MEMORY_RANGE StructureType = 6
	// STRUCTURE_TYPE_BIND_SPARSE_INFO wraps VK_STRUCTURE_TYPE_BIND_SPARSE_INFO.
	STRUCTURE_TYPE_BIND_SPARSE_INFO StructureType = 7
	// STRUCTURE_TYPE_FENCE_CREATE_INFO wraps VK_STRUCTURE_TYPE_FENCE_CREATE_INFO.
	STRUCTURE_TYPE_FENCE_CREATE_INFO StructureType = 8
	// STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO wraps VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO.
	STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO StructureType = 9
	// STRUCTURE_TYPE_EVENT_CREATE_INFO wraps VK_STRUCTURE_TYPE_EVENT_CREATE_INFO.
	STRUCTURE_TYPE_EVENT_CREATE_INFO StructureType = 10
	// STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO wraps VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO.
	STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO StructureType = 11
	// STRUCTURE_TYPE_BUFFER_CREATE_INFO wraps VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO.
	STRUCTURE_TYPE_BUFFER_CREATE_INFO StructureType = 12
	// STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO wraps VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO.
	STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO StructureType = 13
	// STRUCTURE_TYPE_IMAGE_CREATE_INFO wraps VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO.
	STRUCTURE_TYPE_IMAGE_CREATE_INFO StructureType = 14
	// STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO wraps VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO.
	STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO StructureType = 15
	// STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO wraps VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO.
	STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO StructureType = 16
	// STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO wraps VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO.
	STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO StructureType = 17
	// STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO wraps VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO.
	STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO StructureType = 18
	// STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO wraps VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO.
	STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO StructureType = 19
	// STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO wraps VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO.
	STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO StructureType = 20
	// STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO wraps VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO.
	STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO StructureType = 21
	// STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO wraps VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO.
	STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO StructureType = 22
	// STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO wraps VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO.
	STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO StructureType = 23
	// STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO wraps VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO.
	STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO StructureType = 24
	// STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO wraps VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO.
	STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO StructureType = 25
	// STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO wraps VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO.
	STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO StructureType = 26
	// STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO wraps VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO.
	STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO StructureType = 27
	// STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO wraps VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO.
	STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO StructureType = 28
	// STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO wraps VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO.
	STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO StructureType = 29
	// STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO wraps VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO.
	STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO StructureType = 30
	// STRUCTURE_TYPE_SAMPLER_CREATE_INFO wraps VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO.
	STRUCTURE_TYPE_SAMPLER_CREATE_INFO StructureType = 31
	// STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO wraps VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO.
	STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO StructureType = 32
	// STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO wraps VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO.
	STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO StructureType = 33
	// STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO wraps VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO.
	STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO StructureType = 34
	// STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET wraps VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET.
	STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET StructureType = 35
	// STRUCTURE_TYPE_COPY_DESCRIPTOR_SET wraps VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET.
	STRUCTURE_TYPE_COPY_DESCRIPTOR_SET StructureType = 36
	// STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO wraps VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO.
	STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO StructureType = 37
	// STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO wraps VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO.
	STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO StructureType = 38
	// STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO wraps VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO.
	STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO StructureType = 39
	// STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO wraps VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO.
	STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO StructureType = 40
	// STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO wraps VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO.
	STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO StructureType = 41
	// STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO wraps VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO.
	STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO StructureType = 42
	// STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO wraps VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO.
	STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO StructureType = 43
	// STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER wraps VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER.
	STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER StructureType = 44
	// STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER wraps VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER.
	STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER StructureType = 45
	// STRUCTURE_TYPE_MEMORY_BARRIER wraps VK_STRUCTURE_TYPE_MEMORY_BARRIER.
	STRUCTURE_TYPE_MEMORY_BARRIER StructureType = 46
	// STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO wraps VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO.
	STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO StructureType = 47
	// STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO wraps VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO.
	STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO StructureType = 48
)

func (e StructureType) String() string {
	switch e {
	case STRUCTURE_TYPE_APPLICATION_INFO:
		return "VK_STRUCTURE_TYPE_APPLICATION_INFO"
	case STRUCTURE_TYPE_INSTANCE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO"
	case STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO"
	case STRUCTURE_TYPE_DEVICE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO"
	case STRUCTURE_TYPE_SUBMIT_INFO:
		return "VK_STRUCTURE_TYPE_SUBMIT_INFO"
	case STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO:
		return "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO"
	case STRUCTURE_TYPE_MAPPED_MEMORY_RANGE:
		return "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE"
	case STRUCTURE_TYPE_BIND_SPARSE_INFO:
		return "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO"
	case STRUCTURE_TYPE_FENCE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO"
	case STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO"
	case STRUCTURE_TYPE_EVENT_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO"
	case STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO"
	case STRUCTURE_TYPE_BUFFER_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO"
	case STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO"
	case STRUCTURE_TYPE_IMAGE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO"
	case STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO"
	case STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO"
	case STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO"
	case STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO"
	case STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO"
	case STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO"
	case STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO"
	case STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO"
	case STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO"
	case STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO"
	case STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO"
	case STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO"
	case STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO"
	case STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO"
	case STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO"
	case STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO"
	case STRUCTURE_TYPE_SAMPLER_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO"
	case STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO"
	case STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO"
	case STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO:
		return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO"
	case STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET:
		return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET"
	case STRUCTURE_TYPE_COPY_DESCRIPTOR_SET:
		return "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET"
	case STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO"
	case STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO"
	case STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO"
	case STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO:
		return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO"
	case STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO:
		return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO"
	case STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO:
		return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO"
	case STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO:
		return "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO"
	case STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER:
		return "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER"
	case STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER:
		return "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER"
	case STRUCTURE_TYPE_MEMORY_BARRIER:
		return "VK_STRUCTURE_TYPE_MEMORY_BARRIER"
	case STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO"
	case STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO:
		return "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO"
	default:
		return fmt.Sprintf("VkStructureType(%d)", e)
	}
}

// SubpassContents wraps the enum VkSubpassContents.
type SubpassContents int32

const (
	// SUBPASS_CONTENTS_INLINE wraps VK_SUBPASS_CONTENTS_INLINE.
	SUBPASS_CONTENTS_INLINE SubpassContents = 0
	// SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS wraps VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS.
	SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS SubpassContents = 1
)

func (e SubpassContents) String() string {
	switch e {
	case SUBPASS_CONTENTS_INLINE:
		return "VK_SUBPASS_CONTENTS_INLINE"
	case SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS:
		return "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS"
	default:
		return fmt.Sprintf("VkSubpassContents(%d)", e)
	}
}

// SystemAllocationScope wraps the enum VkSystemAllocationScope.
type SystemAllocationScope int32

const (
	// SYSTEM_ALLOCATION_SCOPE_COMMAND wraps VK_SYSTEM_ALLOCATION_SCOPE_COMMAND.
	SYSTEM_ALLOCATION_SCOPE_COMMAND SystemAllocationScope = 0
	// SYSTEM_ALLOCATION_SCOPE_OBJECT wraps VK_SYSTEM_ALLOCATION_SCOPE_OBJECT.
	SYSTEM_ALLOCATION_SCOPE_OBJECT SystemAllocationScope = 1
	// SYSTEM_ALLOCATION_SCOPE_CACHE wraps VK_SYSTEM_ALLOCATION_SCOPE_CACHE.
	SYSTEM_ALLOCATION_SCOPE_CACHE SystemAllocationScope = 2
	// SYSTEM_ALLOCATION_SCOPE_DEVICE wraps VK_SYSTEM_ALLOCATION_SCOPE_DEVICE.
	SYSTEM_ALLOCATION_SCOPE_DEVICE SystemAllocationScope = 3
	// SYSTEM_ALLOCATION_SCOPE_INSTANCE wraps VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE.
	SYSTEM_ALLOCATION_SCOPE_INSTANCE SystemAllocationScope = 4
)

func (e SystemAllocationScope) String() string {
	switch e {
	case SYSTEM_ALLOCATION_SCOPE_COMMAND:
		return "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND"
	case SYSTEM_ALLOCATION_SCOPE_OBJECT:
		return "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT"
	case SYSTEM_ALLOCATION_SCOPE_CACHE:
		return "VK_SYSTEM_ALLOCATION_SCOPE_CACHE"
	case SYSTEM_ALLOCATION_SCOPE_DEVICE:
		return "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE"
	case SYSTEM_ALLOCATION_SCOPE_INSTANCE:
		return "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE"
	default:
		return fmt.Sprintf("VkSystemAllocationScope(%d)", e)
	}
}

// TessellationDomainOrigin wraps the enum VkTessellationDomainOrigin.
type TessellationDomainOrigin int32

const (
	// TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT wraps VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT.
	TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT TessellationDomainOrigin = 0
	// TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT wraps VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT.
	TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT TessellationDomainOrigin = 1
)

func (e TessellationDomainOrigin) String() string {
	switch e {
	case TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT:
		return "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT"
	case TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT:
		return "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT"
	default:
		return fmt.Sprintf("VkTessellationDomainOrigin(%d)", e)
	}
}

// VendorId wraps the enum VkVendorId.
type VendorId int32

const (
	// VENDOR_ID_KHRONOS wraps VK_VENDOR_ID_KHRONOS.
	VENDOR_ID_KHRONOS VendorId = 0x10000
	// VENDOR_ID_VIV wraps VK_VENDOR_ID_VIV.
	VENDOR_ID_VIV VendorId = 0x10001
	// VENDOR_ID_VSI wraps VK_VENDOR_ID_VSI.
	VENDOR_ID_VSI VendorId = 0x10002
	// VENDOR_ID_KAZAN wraps VK_VENDOR_ID_KAZAN.
	VENDOR_ID_KAZAN VendorId = 0x10003
	// VENDOR_ID_CODEPLAY wraps VK_VENDOR_ID_CODEPLAY.
	VENDOR_ID_CODEPLAY VendorId = 0x10004
	// VENDOR_ID_MESA wraps VK_VENDOR_ID_MESA.
	VENDOR_ID_MESA VendorId = 0x10005
	// VENDOR_ID_POCL wraps VK_VENDOR_ID_POCL.
	VENDOR_ID_POCL VendorId = 0x10006
	// VENDOR_ID_MOBILEYE wraps VK_VENDOR_ID_MOBILEYE.
	VENDOR_ID_MOBILEYE VendorId = 0x10007
)

func (e VendorId) String() string {
	switch e {
	case VENDOR_ID_KHRONOS:
		return "VK_VENDOR_ID_KHRONOS"
	case VENDOR_ID_VIV:
		return "VK_VENDOR_ID_VIV"
	case VENDOR_ID_VSI:
		return "VK_VENDOR_ID_VSI"
	case VENDOR_ID_KAZAN:
		return "VK_VENDOR_ID_KAZAN"
	case VENDOR_ID_CODEPLAY:
		return "VK_VENDOR_ID_CODEPLAY"
	case VENDOR_ID_MESA:
		return "VK_VENDOR_ID_MESA"
	case VENDOR_ID_POCL:
		return "VK_VENDOR_ID_POCL"
	case VENDOR_ID_MOBILEYE:
		return "VK_VENDOR_ID_MOBILEYE"
	default:
		return fmt.Sprintf("VkVendorId(%d)", e)
	}
}

// VertexInputRate wraps the enum VkVertexInputRate.
type VertexInputRate int32

const (
	// VERTEX_INPUT_RATE_VERTEX wraps VK_VERTEX_INPUT_RATE_VERTEX.
	VERTEX_INPUT_RATE_VERTEX VertexInputRate = 0
	// VERTEX_INPUT_RATE_INSTANCE wraps VK_VERTEX_INPUT_RATE_INSTANCE.
	VERTEX_INPUT_RATE_INSTANCE VertexInputRate = 1
)

func (e VertexInputRate) String() string {
	switch e {
	case VERTEX_INPUT_RATE_VERTEX:
		return "VK_VERTEX_INPUT_RATE_VERTEX"
	case VERTEX_INPUT_RATE_INSTANCE:
		return "VK_VERTEX_INPUT_RATE_INSTANCE"
	default:
		return fmt.Sprintf("VkVertexInputRate(%d)", e)
	}
}
