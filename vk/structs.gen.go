package vk

import (
	ffi "github.com/csnewman/go-gfx/ffi"
	"unsafe"
)

// #include "vulkan.h"
// static const int offsetof_VkBufferImageCopy_imageSubresource = offsetof(VkBufferImageCopy, imageSubresource);
// static const int offsetof_VkBufferImageCopy_imageOffset = offsetof(VkBufferImageCopy, imageOffset);
// static const int offsetof_VkBufferImageCopy_imageExtent = offsetof(VkBufferImageCopy, imageExtent);
// static const int offsetof_VkBufferImageCopy2_imageSubresource = offsetof(VkBufferImageCopy2, imageSubresource);
// static const int offsetof_VkBufferImageCopy2_imageOffset = offsetof(VkBufferImageCopy2, imageOffset);
// static const int offsetof_VkBufferImageCopy2_imageExtent = offsetof(VkBufferImageCopy2, imageExtent);
// static const int offsetof_VkClearRect_rect = offsetof(VkClearRect, rect);
// static const int offsetof_VkComputePipelineCreateInfo_stage = offsetof(VkComputePipelineCreateInfo, stage);
// static const int offsetof_VkExternalBufferProperties_externalMemoryProperties = offsetof(VkExternalBufferProperties, externalMemoryProperties);
// static const int offsetof_VkExternalImageFormatProperties_externalMemoryProperties = offsetof(VkExternalImageFormatProperties, externalMemoryProperties);
// static const int offsetof_VkFormatProperties2_formatProperties = offsetof(VkFormatProperties2, formatProperties);
// static const int offsetof_VkHostImageLayoutTransitionInfo_subresourceRange = offsetof(VkHostImageLayoutTransitionInfo, subresourceRange);
// static const int offsetof_VkImageBlit_srcSubresource = offsetof(VkImageBlit, srcSubresource);
// static const int offsetof_VkImageBlit_dstSubresource = offsetof(VkImageBlit, dstSubresource);
// static const int offsetof_VkImageBlit2_srcSubresource = offsetof(VkImageBlit2, srcSubresource);
// static const int offsetof_VkImageBlit2_dstSubresource = offsetof(VkImageBlit2, dstSubresource);
// static const int offsetof_VkImageCopy_srcSubresource = offsetof(VkImageCopy, srcSubresource);
// static const int offsetof_VkImageCopy_srcOffset = offsetof(VkImageCopy, srcOffset);
// static const int offsetof_VkImageCopy_dstSubresource = offsetof(VkImageCopy, dstSubresource);
// static const int offsetof_VkImageCopy_dstOffset = offsetof(VkImageCopy, dstOffset);
// static const int offsetof_VkImageCopy_extent = offsetof(VkImageCopy, extent);
// static const int offsetof_VkImageCopy2_srcSubresource = offsetof(VkImageCopy2, srcSubresource);
// static const int offsetof_VkImageCopy2_srcOffset = offsetof(VkImageCopy2, srcOffset);
// static const int offsetof_VkImageCopy2_dstSubresource = offsetof(VkImageCopy2, dstSubresource);
// static const int offsetof_VkImageCopy2_dstOffset = offsetof(VkImageCopy2, dstOffset);
// static const int offsetof_VkImageCopy2_extent = offsetof(VkImageCopy2, extent);
// static const int offsetof_VkImageCreateInfo_extent = offsetof(VkImageCreateInfo, extent);
// static const int offsetof_VkImageFormatProperties_maxExtent = offsetof(VkImageFormatProperties, maxExtent);
// static const int offsetof_VkImageFormatProperties2_imageFormatProperties = offsetof(VkImageFormatProperties2, imageFormatProperties);
// static const int offsetof_VkImageMemoryBarrier_subresourceRange = offsetof(VkImageMemoryBarrier, subresourceRange);
// static const int offsetof_VkImageMemoryBarrier2_subresourceRange = offsetof(VkImageMemoryBarrier2, subresourceRange);
// static const int offsetof_VkImageResolve_srcSubresource = offsetof(VkImageResolve, srcSubresource);
// static const int offsetof_VkImageResolve_srcOffset = offsetof(VkImageResolve, srcOffset);
// static const int offsetof_VkImageResolve_dstSubresource = offsetof(VkImageResolve, dstSubresource);
// static const int offsetof_VkImageResolve_dstOffset = offsetof(VkImageResolve, dstOffset);
// static const int offsetof_VkImageResolve_extent = offsetof(VkImageResolve, extent);
// static const int offsetof_VkImageResolve2_srcSubresource = offsetof(VkImageResolve2, srcSubresource);
// static const int offsetof_VkImageResolve2_srcOffset = offsetof(VkImageResolve2, srcOffset);
// static const int offsetof_VkImageResolve2_dstSubresource = offsetof(VkImageResolve2, dstSubresource);
// static const int offsetof_VkImageResolve2_dstOffset = offsetof(VkImageResolve2, dstOffset);
// static const int offsetof_VkImageResolve2_extent = offsetof(VkImageResolve2, extent);
// static const int offsetof_VkImageSubresource2_imageSubresource = offsetof(VkImageSubresource2, imageSubresource);
// static const int offsetof_VkImageToMemoryCopy_imageSubresource = offsetof(VkImageToMemoryCopy, imageSubresource);
// static const int offsetof_VkImageToMemoryCopy_imageOffset = offsetof(VkImageToMemoryCopy, imageOffset);
// static const int offsetof_VkImageToMemoryCopy_imageExtent = offsetof(VkImageToMemoryCopy, imageExtent);
// static const int offsetof_VkImageViewCreateInfo_components = offsetof(VkImageViewCreateInfo, components);
// static const int offsetof_VkImageViewCreateInfo_subresourceRange = offsetof(VkImageViewCreateInfo, subresourceRange);
// static const int offsetof_VkMemoryRequirements2_memoryRequirements = offsetof(VkMemoryRequirements2, memoryRequirements);
// static const int offsetof_VkMemoryToImageCopy_imageSubresource = offsetof(VkMemoryToImageCopy, imageSubresource);
// static const int offsetof_VkMemoryToImageCopy_imageOffset = offsetof(VkMemoryToImageCopy, imageOffset);
// static const int offsetof_VkMemoryToImageCopy_imageExtent = offsetof(VkMemoryToImageCopy, imageExtent);
// static const int offsetof_VkPhysicalDeviceDriverProperties_conformanceVersion = offsetof(VkPhysicalDeviceDriverProperties, conformanceVersion);
// static const int offsetof_VkPhysicalDeviceFeatures2_features = offsetof(VkPhysicalDeviceFeatures2, features);
// static const int offsetof_VkPhysicalDeviceMemoryProperties2_memoryProperties = offsetof(VkPhysicalDeviceMemoryProperties2, memoryProperties);
// static const int offsetof_VkPhysicalDeviceProperties_limits = offsetof(VkPhysicalDeviceProperties, limits);
// static const int offsetof_VkPhysicalDeviceProperties_sparseProperties = offsetof(VkPhysicalDeviceProperties, sparseProperties);
// static const int offsetof_VkPhysicalDeviceProperties2_properties = offsetof(VkPhysicalDeviceProperties2, properties);
// static const int offsetof_VkPhysicalDeviceVulkan12Properties_conformanceVersion = offsetof(VkPhysicalDeviceVulkan12Properties, conformanceVersion);
// static const int offsetof_VkPipelineDepthStencilStateCreateInfo_front = offsetof(VkPipelineDepthStencilStateCreateInfo, front);
// static const int offsetof_VkPipelineDepthStencilStateCreateInfo_back = offsetof(VkPipelineDepthStencilStateCreateInfo, back);
// static const int offsetof_VkQueueFamilyProperties_minImageTransferGranularity = offsetof(VkQueueFamilyProperties, minImageTransferGranularity);
// static const int offsetof_VkQueueFamilyProperties2_queueFamilyProperties = offsetof(VkQueueFamilyProperties2, queueFamilyProperties);
// static const int offsetof_VkRect2D_offset = offsetof(VkRect2D, offset);
// static const int offsetof_VkRect2D_extent = offsetof(VkRect2D, extent);
// static const int offsetof_VkRenderPassBeginInfo_renderArea = offsetof(VkRenderPassBeginInfo, renderArea);
// static const int offsetof_VkRenderingInfo_renderArea = offsetof(VkRenderingInfo, renderArea);
// static const int offsetof_VkSamplerYcbcrConversionCreateInfo_components = offsetof(VkSamplerYcbcrConversionCreateInfo, components);
// static const int offsetof_VkSparseImageFormatProperties_imageGranularity = offsetof(VkSparseImageFormatProperties, imageGranularity);
// static const int offsetof_VkSparseImageFormatProperties2_properties = offsetof(VkSparseImageFormatProperties2, properties);
// static const int offsetof_VkSparseImageMemoryBind_subresource = offsetof(VkSparseImageMemoryBind, subresource);
// static const int offsetof_VkSparseImageMemoryBind_offset = offsetof(VkSparseImageMemoryBind, offset);
// static const int offsetof_VkSparseImageMemoryBind_extent = offsetof(VkSparseImageMemoryBind, extent);
// static const int offsetof_VkSparseImageMemoryRequirements_formatProperties = offsetof(VkSparseImageMemoryRequirements, formatProperties);
// static const int offsetof_VkSparseImageMemoryRequirements2_memoryRequirements = offsetof(VkSparseImageMemoryRequirements2, memoryRequirements);
// static const int offsetof_VkSubresourceLayout2_subresourceLayout = offsetof(VkSubresourceLayout2, subresourceLayout);
import "C"

// AllocationCallbacks wraps VkAllocationCallbacks.
type AllocationCallbacks struct {
	ptr *C.VkAllocationCallbacks
}

// AllocationCallbacksNil is a null pointer.
var AllocationCallbacksNil AllocationCallbacks

// AllocationCallbacksSizeOf is the byte size of VkAllocationCallbacks.
const AllocationCallbacksSizeOf = int(C.sizeof_VkAllocationCallbacks)

// AllocationCallbacksFromPtr converts a raw pointer to a AllocationCallbacks.
func AllocationCallbacksFromPtr(ptr unsafe.Pointer) AllocationCallbacks {
	return AllocationCallbacks{ptr: (*C.VkAllocationCallbacks)(ptr)}
}

// AllocationCallbacksAlloc allocates a continuous block of VkAllocationCallbacks.
func AllocationCallbacksAlloc(alloc ffi.Allocator, count int) AllocationCallbacks {
	ptr := alloc.Allocate(AllocationCallbacksSizeOf * count)
	return AllocationCallbacks{ptr: (*C.VkAllocationCallbacks)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p AllocationCallbacks) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p AllocationCallbacks) Offset(offset int) AllocationCallbacks {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*AllocationCallbacksSizeOf)
	return AllocationCallbacks{ptr: (*C.VkAllocationCallbacks)(ptr)}
}

// GetPUserData returns the value in pUserData.
func (p AllocationCallbacks) GetPUserData() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pUserData)
}

// SetPUserData sets the value in pUserData.
func (p AllocationCallbacks) SetPUserData(value unsafe.Pointer) {
	p.ptr.pUserData = value
}

// AllocationCallbacks.pfnAllocation is unsupported: unknown type PFN_vkAllocationFunction.

// AllocationCallbacks.pfnReallocation is unsupported: unknown type PFN_vkReallocationFunction.

// AllocationCallbacks.pfnFree is unsupported: unknown type PFN_vkFreeFunction.

// AllocationCallbacks.pfnInternalAllocation is unsupported: unknown type PFN_vkInternalAllocationNotification.

// AllocationCallbacks.pfnInternalFree is unsupported: unknown type PFN_vkInternalFreeNotification.

// ApplicationInfo wraps VkApplicationInfo.
type ApplicationInfo struct {
	ptr *C.VkApplicationInfo
}

// ApplicationInfoNil is a null pointer.
var ApplicationInfoNil ApplicationInfo

// ApplicationInfoSizeOf is the byte size of VkApplicationInfo.
const ApplicationInfoSizeOf = int(C.sizeof_VkApplicationInfo)

// ApplicationInfoFromPtr converts a raw pointer to a ApplicationInfo.
func ApplicationInfoFromPtr(ptr unsafe.Pointer) ApplicationInfo {
	return ApplicationInfo{ptr: (*C.VkApplicationInfo)(ptr)}
}

// ApplicationInfoAlloc allocates a continuous block of VkApplicationInfo.
func ApplicationInfoAlloc(alloc ffi.Allocator, count int) ApplicationInfo {
	ptr := alloc.Allocate(ApplicationInfoSizeOf * count)
	return ApplicationInfo{ptr: (*C.VkApplicationInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ApplicationInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ApplicationInfo) Offset(offset int) ApplicationInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ApplicationInfoSizeOf)
	return ApplicationInfo{ptr: (*C.VkApplicationInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ApplicationInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ApplicationInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ApplicationInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ApplicationInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPApplicationName returns the value in pApplicationName.
func (p ApplicationInfo) GetPApplicationName() ffi.CString {
	return ffi.CStringFromPtr((unsafe.Pointer)(p.ptr.pApplicationName))
}

// SetPApplicationName sets the value in pApplicationName.
func (p ApplicationInfo) SetPApplicationName(value ffi.CString) {
	p.ptr.pApplicationName = (*C.char)(value.Raw())
}

// GetApplicationVersion returns the value in applicationVersion.
func (p ApplicationInfo) GetApplicationVersion() uint32 {
	return uint32(p.ptr.applicationVersion)
}

// SetApplicationVersion sets the value in applicationVersion.
func (p ApplicationInfo) SetApplicationVersion(value uint32) {
	p.ptr.applicationVersion = (C.uint32_t)(value)
}

// GetPEngineName returns the value in pEngineName.
func (p ApplicationInfo) GetPEngineName() ffi.CString {
	return ffi.CStringFromPtr((unsafe.Pointer)(p.ptr.pEngineName))
}

// SetPEngineName sets the value in pEngineName.
func (p ApplicationInfo) SetPEngineName(value ffi.CString) {
	p.ptr.pEngineName = (*C.char)(value.Raw())
}

// GetEngineVersion returns the value in engineVersion.
func (p ApplicationInfo) GetEngineVersion() uint32 {
	return uint32(p.ptr.engineVersion)
}

// SetEngineVersion sets the value in engineVersion.
func (p ApplicationInfo) SetEngineVersion(value uint32) {
	p.ptr.engineVersion = (C.uint32_t)(value)
}

// GetApiVersion returns the value in apiVersion.
func (p ApplicationInfo) GetApiVersion() uint32 {
	return uint32(p.ptr.apiVersion)
}

// SetApiVersion sets the value in apiVersion.
func (p ApplicationInfo) SetApiVersion(value uint32) {
	p.ptr.apiVersion = (C.uint32_t)(value)
}

// AttachmentDescription wraps VkAttachmentDescription.
type AttachmentDescription struct {
	ptr *C.VkAttachmentDescription
}

// AttachmentDescriptionNil is a null pointer.
var AttachmentDescriptionNil AttachmentDescription

// AttachmentDescriptionSizeOf is the byte size of VkAttachmentDescription.
const AttachmentDescriptionSizeOf = int(C.sizeof_VkAttachmentDescription)

// AttachmentDescriptionFromPtr converts a raw pointer to a AttachmentDescription.
func AttachmentDescriptionFromPtr(ptr unsafe.Pointer) AttachmentDescription {
	return AttachmentDescription{ptr: (*C.VkAttachmentDescription)(ptr)}
}

// AttachmentDescriptionAlloc allocates a continuous block of VkAttachmentDescription.
func AttachmentDescriptionAlloc(alloc ffi.Allocator, count int) AttachmentDescription {
	ptr := alloc.Allocate(AttachmentDescriptionSizeOf * count)
	return AttachmentDescription{ptr: (*C.VkAttachmentDescription)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p AttachmentDescription) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p AttachmentDescription) Offset(offset int) AttachmentDescription {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*AttachmentDescriptionSizeOf)
	return AttachmentDescription{ptr: (*C.VkAttachmentDescription)(ptr)}
}

// GetFlags returns the value in flags.
func (p AttachmentDescription) GetFlags() AttachmentDescriptionFlags {
	return AttachmentDescriptionFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p AttachmentDescription) SetFlags(value AttachmentDescriptionFlags) {
	p.ptr.flags = (C.VkAttachmentDescriptionFlags)(value)
}

// GetFormat returns the value in format.
func (p AttachmentDescription) GetFormat() Format {
	return Format(p.ptr.format)
}

// SetFormat sets the value in format.
func (p AttachmentDescription) SetFormat(value Format) {
	p.ptr.format = (C.VkFormat)(value)
}

// GetSamples returns the value in samples.
func (p AttachmentDescription) GetSamples() SampleCountFlags {
	return SampleCountFlags(p.ptr.samples)
}

// SetSamples sets the value in samples.
func (p AttachmentDescription) SetSamples(value SampleCountFlags) {
	p.ptr.samples = (C.VkSampleCountFlagBits)(value)
}

// GetLoadOp returns the value in loadOp.
func (p AttachmentDescription) GetLoadOp() AttachmentLoadOp {
	return AttachmentLoadOp(p.ptr.loadOp)
}

// SetLoadOp sets the value in loadOp.
func (p AttachmentDescription) SetLoadOp(value AttachmentLoadOp) {
	p.ptr.loadOp = (C.VkAttachmentLoadOp)(value)
}

// GetStoreOp returns the value in storeOp.
func (p AttachmentDescription) GetStoreOp() AttachmentStoreOp {
	return AttachmentStoreOp(p.ptr.storeOp)
}

// SetStoreOp sets the value in storeOp.
func (p AttachmentDescription) SetStoreOp(value AttachmentStoreOp) {
	p.ptr.storeOp = (C.VkAttachmentStoreOp)(value)
}

// GetStencilLoadOp returns the value in stencilLoadOp.
func (p AttachmentDescription) GetStencilLoadOp() AttachmentLoadOp {
	return AttachmentLoadOp(p.ptr.stencilLoadOp)
}

// SetStencilLoadOp sets the value in stencilLoadOp.
func (p AttachmentDescription) SetStencilLoadOp(value AttachmentLoadOp) {
	p.ptr.stencilLoadOp = (C.VkAttachmentLoadOp)(value)
}

// GetStencilStoreOp returns the value in stencilStoreOp.
func (p AttachmentDescription) GetStencilStoreOp() AttachmentStoreOp {
	return AttachmentStoreOp(p.ptr.stencilStoreOp)
}

// SetStencilStoreOp sets the value in stencilStoreOp.
func (p AttachmentDescription) SetStencilStoreOp(value AttachmentStoreOp) {
	p.ptr.stencilStoreOp = (C.VkAttachmentStoreOp)(value)
}

// GetInitialLayout returns the value in initialLayout.
func (p AttachmentDescription) GetInitialLayout() ImageLayout {
	return ImageLayout(p.ptr.initialLayout)
}

// SetInitialLayout sets the value in initialLayout.
func (p AttachmentDescription) SetInitialLayout(value ImageLayout) {
	p.ptr.initialLayout = (C.VkImageLayout)(value)
}

// GetFinalLayout returns the value in finalLayout.
func (p AttachmentDescription) GetFinalLayout() ImageLayout {
	return ImageLayout(p.ptr.finalLayout)
}

// SetFinalLayout sets the value in finalLayout.
func (p AttachmentDescription) SetFinalLayout(value ImageLayout) {
	p.ptr.finalLayout = (C.VkImageLayout)(value)
}

// AttachmentDescription2 wraps VkAttachmentDescription2.
type AttachmentDescription2 struct {
	ptr *C.VkAttachmentDescription2
}

// AttachmentDescription2Nil is a null pointer.
var AttachmentDescription2Nil AttachmentDescription2

// AttachmentDescription2SizeOf is the byte size of VkAttachmentDescription2.
const AttachmentDescription2SizeOf = int(C.sizeof_VkAttachmentDescription2)

// AttachmentDescription2FromPtr converts a raw pointer to a AttachmentDescription2.
func AttachmentDescription2FromPtr(ptr unsafe.Pointer) AttachmentDescription2 {
	return AttachmentDescription2{ptr: (*C.VkAttachmentDescription2)(ptr)}
}

// AttachmentDescription2Alloc allocates a continuous block of VkAttachmentDescription2.
func AttachmentDescription2Alloc(alloc ffi.Allocator, count int) AttachmentDescription2 {
	ptr := alloc.Allocate(AttachmentDescription2SizeOf * count)
	return AttachmentDescription2{ptr: (*C.VkAttachmentDescription2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p AttachmentDescription2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p AttachmentDescription2) Offset(offset int) AttachmentDescription2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*AttachmentDescription2SizeOf)
	return AttachmentDescription2{ptr: (*C.VkAttachmentDescription2)(ptr)}
}

// GetSType returns the value in sType.
func (p AttachmentDescription2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p AttachmentDescription2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p AttachmentDescription2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p AttachmentDescription2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p AttachmentDescription2) GetFlags() AttachmentDescriptionFlags {
	return AttachmentDescriptionFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p AttachmentDescription2) SetFlags(value AttachmentDescriptionFlags) {
	p.ptr.flags = (C.VkAttachmentDescriptionFlags)(value)
}

// GetFormat returns the value in format.
func (p AttachmentDescription2) GetFormat() Format {
	return Format(p.ptr.format)
}

// SetFormat sets the value in format.
func (p AttachmentDescription2) SetFormat(value Format) {
	p.ptr.format = (C.VkFormat)(value)
}

// GetSamples returns the value in samples.
func (p AttachmentDescription2) GetSamples() SampleCountFlags {
	return SampleCountFlags(p.ptr.samples)
}

// SetSamples sets the value in samples.
func (p AttachmentDescription2) SetSamples(value SampleCountFlags) {
	p.ptr.samples = (C.VkSampleCountFlagBits)(value)
}

// GetLoadOp returns the value in loadOp.
func (p AttachmentDescription2) GetLoadOp() AttachmentLoadOp {
	return AttachmentLoadOp(p.ptr.loadOp)
}

// SetLoadOp sets the value in loadOp.
func (p AttachmentDescription2) SetLoadOp(value AttachmentLoadOp) {
	p.ptr.loadOp = (C.VkAttachmentLoadOp)(value)
}

// GetStoreOp returns the value in storeOp.
func (p AttachmentDescription2) GetStoreOp() AttachmentStoreOp {
	return AttachmentStoreOp(p.ptr.storeOp)
}

// SetStoreOp sets the value in storeOp.
func (p AttachmentDescription2) SetStoreOp(value AttachmentStoreOp) {
	p.ptr.storeOp = (C.VkAttachmentStoreOp)(value)
}

// GetStencilLoadOp returns the value in stencilLoadOp.
func (p AttachmentDescription2) GetStencilLoadOp() AttachmentLoadOp {
	return AttachmentLoadOp(p.ptr.stencilLoadOp)
}

// SetStencilLoadOp sets the value in stencilLoadOp.
func (p AttachmentDescription2) SetStencilLoadOp(value AttachmentLoadOp) {
	p.ptr.stencilLoadOp = (C.VkAttachmentLoadOp)(value)
}

// GetStencilStoreOp returns the value in stencilStoreOp.
func (p AttachmentDescription2) GetStencilStoreOp() AttachmentStoreOp {
	return AttachmentStoreOp(p.ptr.stencilStoreOp)
}

// SetStencilStoreOp sets the value in stencilStoreOp.
func (p AttachmentDescription2) SetStencilStoreOp(value AttachmentStoreOp) {
	p.ptr.stencilStoreOp = (C.VkAttachmentStoreOp)(value)
}

// GetInitialLayout returns the value in initialLayout.
func (p AttachmentDescription2) GetInitialLayout() ImageLayout {
	return ImageLayout(p.ptr.initialLayout)
}

// SetInitialLayout sets the value in initialLayout.
func (p AttachmentDescription2) SetInitialLayout(value ImageLayout) {
	p.ptr.initialLayout = (C.VkImageLayout)(value)
}

// GetFinalLayout returns the value in finalLayout.
func (p AttachmentDescription2) GetFinalLayout() ImageLayout {
	return ImageLayout(p.ptr.finalLayout)
}

// SetFinalLayout sets the value in finalLayout.
func (p AttachmentDescription2) SetFinalLayout(value ImageLayout) {
	p.ptr.finalLayout = (C.VkImageLayout)(value)
}

// AttachmentDescriptionStencilLayout wraps VkAttachmentDescriptionStencilLayout.
type AttachmentDescriptionStencilLayout struct {
	ptr *C.VkAttachmentDescriptionStencilLayout
}

// AttachmentDescriptionStencilLayoutNil is a null pointer.
var AttachmentDescriptionStencilLayoutNil AttachmentDescriptionStencilLayout

// AttachmentDescriptionStencilLayoutSizeOf is the byte size of VkAttachmentDescriptionStencilLayout.
const AttachmentDescriptionStencilLayoutSizeOf = int(C.sizeof_VkAttachmentDescriptionStencilLayout)

// AttachmentDescriptionStencilLayoutFromPtr converts a raw pointer to a AttachmentDescriptionStencilLayout.
func AttachmentDescriptionStencilLayoutFromPtr(ptr unsafe.Pointer) AttachmentDescriptionStencilLayout {
	return AttachmentDescriptionStencilLayout{ptr: (*C.VkAttachmentDescriptionStencilLayout)(ptr)}
}

// AttachmentDescriptionStencilLayoutAlloc allocates a continuous block of VkAttachmentDescriptionStencilLayout.
func AttachmentDescriptionStencilLayoutAlloc(alloc ffi.Allocator, count int) AttachmentDescriptionStencilLayout {
	ptr := alloc.Allocate(AttachmentDescriptionStencilLayoutSizeOf * count)
	return AttachmentDescriptionStencilLayout{ptr: (*C.VkAttachmentDescriptionStencilLayout)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p AttachmentDescriptionStencilLayout) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p AttachmentDescriptionStencilLayout) Offset(offset int) AttachmentDescriptionStencilLayout {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*AttachmentDescriptionStencilLayoutSizeOf)
	return AttachmentDescriptionStencilLayout{ptr: (*C.VkAttachmentDescriptionStencilLayout)(ptr)}
}

// GetSType returns the value in sType.
func (p AttachmentDescriptionStencilLayout) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p AttachmentDescriptionStencilLayout) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p AttachmentDescriptionStencilLayout) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p AttachmentDescriptionStencilLayout) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetStencilInitialLayout returns the value in stencilInitialLayout.
func (p AttachmentDescriptionStencilLayout) GetStencilInitialLayout() ImageLayout {
	return ImageLayout(p.ptr.stencilInitialLayout)
}

// SetStencilInitialLayout sets the value in stencilInitialLayout.
func (p AttachmentDescriptionStencilLayout) SetStencilInitialLayout(value ImageLayout) {
	p.ptr.stencilInitialLayout = (C.VkImageLayout)(value)
}

// GetStencilFinalLayout returns the value in stencilFinalLayout.
func (p AttachmentDescriptionStencilLayout) GetStencilFinalLayout() ImageLayout {
	return ImageLayout(p.ptr.stencilFinalLayout)
}

// SetStencilFinalLayout sets the value in stencilFinalLayout.
func (p AttachmentDescriptionStencilLayout) SetStencilFinalLayout(value ImageLayout) {
	p.ptr.stencilFinalLayout = (C.VkImageLayout)(value)
}

// AttachmentReference wraps VkAttachmentReference.
type AttachmentReference struct {
	ptr *C.VkAttachmentReference
}

// AttachmentReferenceNil is a null pointer.
var AttachmentReferenceNil AttachmentReference

// AttachmentReferenceSizeOf is the byte size of VkAttachmentReference.
const AttachmentReferenceSizeOf = int(C.sizeof_VkAttachmentReference)

// AttachmentReferenceFromPtr converts a raw pointer to a AttachmentReference.
func AttachmentReferenceFromPtr(ptr unsafe.Pointer) AttachmentReference {
	return AttachmentReference{ptr: (*C.VkAttachmentReference)(ptr)}
}

// AttachmentReferenceAlloc allocates a continuous block of VkAttachmentReference.
func AttachmentReferenceAlloc(alloc ffi.Allocator, count int) AttachmentReference {
	ptr := alloc.Allocate(AttachmentReferenceSizeOf * count)
	return AttachmentReference{ptr: (*C.VkAttachmentReference)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p AttachmentReference) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p AttachmentReference) Offset(offset int) AttachmentReference {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*AttachmentReferenceSizeOf)
	return AttachmentReference{ptr: (*C.VkAttachmentReference)(ptr)}
}

// GetAttachment returns the value in attachment.
func (p AttachmentReference) GetAttachment() uint32 {
	return uint32(p.ptr.attachment)
}

// SetAttachment sets the value in attachment.
func (p AttachmentReference) SetAttachment(value uint32) {
	p.ptr.attachment = (C.uint32_t)(value)
}

// GetLayout returns the value in layout.
func (p AttachmentReference) GetLayout() ImageLayout {
	return ImageLayout(p.ptr.layout)
}

// SetLayout sets the value in layout.
func (p AttachmentReference) SetLayout(value ImageLayout) {
	p.ptr.layout = (C.VkImageLayout)(value)
}

// AttachmentReference2 wraps VkAttachmentReference2.
type AttachmentReference2 struct {
	ptr *C.VkAttachmentReference2
}

// AttachmentReference2Nil is a null pointer.
var AttachmentReference2Nil AttachmentReference2

// AttachmentReference2SizeOf is the byte size of VkAttachmentReference2.
const AttachmentReference2SizeOf = int(C.sizeof_VkAttachmentReference2)

// AttachmentReference2FromPtr converts a raw pointer to a AttachmentReference2.
func AttachmentReference2FromPtr(ptr unsafe.Pointer) AttachmentReference2 {
	return AttachmentReference2{ptr: (*C.VkAttachmentReference2)(ptr)}
}

// AttachmentReference2Alloc allocates a continuous block of VkAttachmentReference2.
func AttachmentReference2Alloc(alloc ffi.Allocator, count int) AttachmentReference2 {
	ptr := alloc.Allocate(AttachmentReference2SizeOf * count)
	return AttachmentReference2{ptr: (*C.VkAttachmentReference2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p AttachmentReference2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p AttachmentReference2) Offset(offset int) AttachmentReference2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*AttachmentReference2SizeOf)
	return AttachmentReference2{ptr: (*C.VkAttachmentReference2)(ptr)}
}

// GetSType returns the value in sType.
func (p AttachmentReference2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p AttachmentReference2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p AttachmentReference2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p AttachmentReference2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetAttachment returns the value in attachment.
func (p AttachmentReference2) GetAttachment() uint32 {
	return uint32(p.ptr.attachment)
}

// SetAttachment sets the value in attachment.
func (p AttachmentReference2) SetAttachment(value uint32) {
	p.ptr.attachment = (C.uint32_t)(value)
}

// GetLayout returns the value in layout.
func (p AttachmentReference2) GetLayout() ImageLayout {
	return ImageLayout(p.ptr.layout)
}

// SetLayout sets the value in layout.
func (p AttachmentReference2) SetLayout(value ImageLayout) {
	p.ptr.layout = (C.VkImageLayout)(value)
}

// GetAspectMask returns the value in aspectMask.
func (p AttachmentReference2) GetAspectMask() ImageAspectFlags {
	return ImageAspectFlags(p.ptr.aspectMask)
}

// SetAspectMask sets the value in aspectMask.
func (p AttachmentReference2) SetAspectMask(value ImageAspectFlags) {
	p.ptr.aspectMask = (C.VkImageAspectFlags)(value)
}

// AttachmentReferenceStencilLayout wraps VkAttachmentReferenceStencilLayout.
type AttachmentReferenceStencilLayout struct {
	ptr *C.VkAttachmentReferenceStencilLayout
}

// AttachmentReferenceStencilLayoutNil is a null pointer.
var AttachmentReferenceStencilLayoutNil AttachmentReferenceStencilLayout

// AttachmentReferenceStencilLayoutSizeOf is the byte size of VkAttachmentReferenceStencilLayout.
const AttachmentReferenceStencilLayoutSizeOf = int(C.sizeof_VkAttachmentReferenceStencilLayout)

// AttachmentReferenceStencilLayoutFromPtr converts a raw pointer to a AttachmentReferenceStencilLayout.
func AttachmentReferenceStencilLayoutFromPtr(ptr unsafe.Pointer) AttachmentReferenceStencilLayout {
	return AttachmentReferenceStencilLayout{ptr: (*C.VkAttachmentReferenceStencilLayout)(ptr)}
}

// AttachmentReferenceStencilLayoutAlloc allocates a continuous block of VkAttachmentReferenceStencilLayout.
func AttachmentReferenceStencilLayoutAlloc(alloc ffi.Allocator, count int) AttachmentReferenceStencilLayout {
	ptr := alloc.Allocate(AttachmentReferenceStencilLayoutSizeOf * count)
	return AttachmentReferenceStencilLayout{ptr: (*C.VkAttachmentReferenceStencilLayout)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p AttachmentReferenceStencilLayout) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p AttachmentReferenceStencilLayout) Offset(offset int) AttachmentReferenceStencilLayout {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*AttachmentReferenceStencilLayoutSizeOf)
	return AttachmentReferenceStencilLayout{ptr: (*C.VkAttachmentReferenceStencilLayout)(ptr)}
}

// GetSType returns the value in sType.
func (p AttachmentReferenceStencilLayout) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p AttachmentReferenceStencilLayout) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p AttachmentReferenceStencilLayout) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p AttachmentReferenceStencilLayout) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetStencilLayout returns the value in stencilLayout.
func (p AttachmentReferenceStencilLayout) GetStencilLayout() ImageLayout {
	return ImageLayout(p.ptr.stencilLayout)
}

// SetStencilLayout sets the value in stencilLayout.
func (p AttachmentReferenceStencilLayout) SetStencilLayout(value ImageLayout) {
	p.ptr.stencilLayout = (C.VkImageLayout)(value)
}

// BaseInStructure wraps VkBaseInStructure.
type BaseInStructure struct {
	ptr *C.VkBaseInStructure
}

// BaseInStructureNil is a null pointer.
var BaseInStructureNil BaseInStructure

// BaseInStructureSizeOf is the byte size of VkBaseInStructure.
const BaseInStructureSizeOf = int(C.sizeof_VkBaseInStructure)

// BaseInStructureFromPtr converts a raw pointer to a BaseInStructure.
func BaseInStructureFromPtr(ptr unsafe.Pointer) BaseInStructure {
	return BaseInStructure{ptr: (*C.VkBaseInStructure)(ptr)}
}

// BaseInStructureAlloc allocates a continuous block of VkBaseInStructure.
func BaseInStructureAlloc(alloc ffi.Allocator, count int) BaseInStructure {
	ptr := alloc.Allocate(BaseInStructureSizeOf * count)
	return BaseInStructure{ptr: (*C.VkBaseInStructure)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BaseInStructure) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BaseInStructure) Offset(offset int) BaseInStructure {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BaseInStructureSizeOf)
	return BaseInStructure{ptr: (*C.VkBaseInStructure)(ptr)}
}

// GetSType returns the value in sType.
func (p BaseInStructure) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BaseInStructure) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BaseInStructure) GetPNext() BaseInStructure {
	return BaseInStructure{ptr: p.ptr.pNext}
}

// SetPNext sets the value in pNext.
func (p BaseInStructure) SetPNext(value BaseInStructure) {
	p.ptr.pNext = value.ptr
}

// BaseOutStructure wraps VkBaseOutStructure.
type BaseOutStructure struct {
	ptr *C.VkBaseOutStructure
}

// BaseOutStructureNil is a null pointer.
var BaseOutStructureNil BaseOutStructure

// BaseOutStructureSizeOf is the byte size of VkBaseOutStructure.
const BaseOutStructureSizeOf = int(C.sizeof_VkBaseOutStructure)

// BaseOutStructureFromPtr converts a raw pointer to a BaseOutStructure.
func BaseOutStructureFromPtr(ptr unsafe.Pointer) BaseOutStructure {
	return BaseOutStructure{ptr: (*C.VkBaseOutStructure)(ptr)}
}

// BaseOutStructureAlloc allocates a continuous block of VkBaseOutStructure.
func BaseOutStructureAlloc(alloc ffi.Allocator, count int) BaseOutStructure {
	ptr := alloc.Allocate(BaseOutStructureSizeOf * count)
	return BaseOutStructure{ptr: (*C.VkBaseOutStructure)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BaseOutStructure) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BaseOutStructure) Offset(offset int) BaseOutStructure {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BaseOutStructureSizeOf)
	return BaseOutStructure{ptr: (*C.VkBaseOutStructure)(ptr)}
}

// GetSType returns the value in sType.
func (p BaseOutStructure) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BaseOutStructure) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BaseOutStructure) GetPNext() BaseOutStructure {
	return BaseOutStructure{ptr: p.ptr.pNext}
}

// SetPNext sets the value in pNext.
func (p BaseOutStructure) SetPNext(value BaseOutStructure) {
	p.ptr.pNext = value.ptr
}

// BindBufferMemoryDeviceGroupInfo wraps VkBindBufferMemoryDeviceGroupInfo.
type BindBufferMemoryDeviceGroupInfo struct {
	ptr *C.VkBindBufferMemoryDeviceGroupInfo
}

// BindBufferMemoryDeviceGroupInfoNil is a null pointer.
var BindBufferMemoryDeviceGroupInfoNil BindBufferMemoryDeviceGroupInfo

// BindBufferMemoryDeviceGroupInfoSizeOf is the byte size of VkBindBufferMemoryDeviceGroupInfo.
const BindBufferMemoryDeviceGroupInfoSizeOf = int(C.sizeof_VkBindBufferMemoryDeviceGroupInfo)

// BindBufferMemoryDeviceGroupInfoFromPtr converts a raw pointer to a BindBufferMemoryDeviceGroupInfo.
func BindBufferMemoryDeviceGroupInfoFromPtr(ptr unsafe.Pointer) BindBufferMemoryDeviceGroupInfo {
	return BindBufferMemoryDeviceGroupInfo{ptr: (*C.VkBindBufferMemoryDeviceGroupInfo)(ptr)}
}

// BindBufferMemoryDeviceGroupInfoAlloc allocates a continuous block of VkBindBufferMemoryDeviceGroupInfo.
func BindBufferMemoryDeviceGroupInfoAlloc(alloc ffi.Allocator, count int) BindBufferMemoryDeviceGroupInfo {
	ptr := alloc.Allocate(BindBufferMemoryDeviceGroupInfoSizeOf * count)
	return BindBufferMemoryDeviceGroupInfo{ptr: (*C.VkBindBufferMemoryDeviceGroupInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BindBufferMemoryDeviceGroupInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BindBufferMemoryDeviceGroupInfo) Offset(offset int) BindBufferMemoryDeviceGroupInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BindBufferMemoryDeviceGroupInfoSizeOf)
	return BindBufferMemoryDeviceGroupInfo{ptr: (*C.VkBindBufferMemoryDeviceGroupInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p BindBufferMemoryDeviceGroupInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BindBufferMemoryDeviceGroupInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BindBufferMemoryDeviceGroupInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BindBufferMemoryDeviceGroupInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDeviceIndexCount returns the value in deviceIndexCount.
func (p BindBufferMemoryDeviceGroupInfo) GetDeviceIndexCount() uint32 {
	return uint32(p.ptr.deviceIndexCount)
}

// SetDeviceIndexCount sets the value in deviceIndexCount.
func (p BindBufferMemoryDeviceGroupInfo) SetDeviceIndexCount(value uint32) {
	p.ptr.deviceIndexCount = (C.uint32_t)(value)
}

// GetPDeviceIndices returns the value in pDeviceIndices.
func (p BindBufferMemoryDeviceGroupInfo) GetPDeviceIndices() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pDeviceIndices))
}

// SetPDeviceIndices sets the value in pDeviceIndices.
func (p BindBufferMemoryDeviceGroupInfo) SetPDeviceIndices(value ffi.Ref[uint32]) {
	p.ptr.pDeviceIndices = (*C.uint32_t)(value.Raw())
}

// BindBufferMemoryInfo wraps VkBindBufferMemoryInfo.
type BindBufferMemoryInfo struct {
	ptr *C.VkBindBufferMemoryInfo
}

// BindBufferMemoryInfoNil is a null pointer.
var BindBufferMemoryInfoNil BindBufferMemoryInfo

// BindBufferMemoryInfoSizeOf is the byte size of VkBindBufferMemoryInfo.
const BindBufferMemoryInfoSizeOf = int(C.sizeof_VkBindBufferMemoryInfo)

// BindBufferMemoryInfoFromPtr converts a raw pointer to a BindBufferMemoryInfo.
func BindBufferMemoryInfoFromPtr(ptr unsafe.Pointer) BindBufferMemoryInfo {
	return BindBufferMemoryInfo{ptr: (*C.VkBindBufferMemoryInfo)(ptr)}
}

// BindBufferMemoryInfoAlloc allocates a continuous block of VkBindBufferMemoryInfo.
func BindBufferMemoryInfoAlloc(alloc ffi.Allocator, count int) BindBufferMemoryInfo {
	ptr := alloc.Allocate(BindBufferMemoryInfoSizeOf * count)
	return BindBufferMemoryInfo{ptr: (*C.VkBindBufferMemoryInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BindBufferMemoryInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BindBufferMemoryInfo) Offset(offset int) BindBufferMemoryInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BindBufferMemoryInfoSizeOf)
	return BindBufferMemoryInfo{ptr: (*C.VkBindBufferMemoryInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p BindBufferMemoryInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BindBufferMemoryInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BindBufferMemoryInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BindBufferMemoryInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetBuffer returns the value in buffer.
func (p BindBufferMemoryInfo) GetBuffer() Buffer {
	return Buffer(p.ptr.buffer)
}

// SetBuffer sets the value in buffer.
func (p BindBufferMemoryInfo) SetBuffer(value Buffer) {
	p.ptr.buffer = (C.VkBuffer)(value)
}

// GetMemory returns the value in memory.
func (p BindBufferMemoryInfo) GetMemory() DeviceMemory {
	return DeviceMemory(p.ptr.memory)
}

// SetMemory sets the value in memory.
func (p BindBufferMemoryInfo) SetMemory(value DeviceMemory) {
	p.ptr.memory = (C.VkDeviceMemory)(value)
}

// GetMemoryOffset returns the value in memoryOffset.
func (p BindBufferMemoryInfo) GetMemoryOffset() DeviceSize {
	return DeviceSize(p.ptr.memoryOffset)
}

// SetMemoryOffset sets the value in memoryOffset.
func (p BindBufferMemoryInfo) SetMemoryOffset(value DeviceSize) {
	p.ptr.memoryOffset = (C.VkDeviceSize)(value)
}

// BindDescriptorSetsInfo wraps VkBindDescriptorSetsInfo.
type BindDescriptorSetsInfo struct {
	ptr *C.VkBindDescriptorSetsInfo
}

// BindDescriptorSetsInfoNil is a null pointer.
var BindDescriptorSetsInfoNil BindDescriptorSetsInfo

// BindDescriptorSetsInfoSizeOf is the byte size of VkBindDescriptorSetsInfo.
const BindDescriptorSetsInfoSizeOf = int(C.sizeof_VkBindDescriptorSetsInfo)

// BindDescriptorSetsInfoFromPtr converts a raw pointer to a BindDescriptorSetsInfo.
func BindDescriptorSetsInfoFromPtr(ptr unsafe.Pointer) BindDescriptorSetsInfo {
	return BindDescriptorSetsInfo{ptr: (*C.VkBindDescriptorSetsInfo)(ptr)}
}

// BindDescriptorSetsInfoAlloc allocates a continuous block of VkBindDescriptorSetsInfo.
func BindDescriptorSetsInfoAlloc(alloc ffi.Allocator, count int) BindDescriptorSetsInfo {
	ptr := alloc.Allocate(BindDescriptorSetsInfoSizeOf * count)
	return BindDescriptorSetsInfo{ptr: (*C.VkBindDescriptorSetsInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BindDescriptorSetsInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BindDescriptorSetsInfo) Offset(offset int) BindDescriptorSetsInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BindDescriptorSetsInfoSizeOf)
	return BindDescriptorSetsInfo{ptr: (*C.VkBindDescriptorSetsInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p BindDescriptorSetsInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BindDescriptorSetsInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BindDescriptorSetsInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BindDescriptorSetsInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetStageFlags returns the value in stageFlags.
func (p BindDescriptorSetsInfo) GetStageFlags() ShaderStageFlags {
	return ShaderStageFlags(p.ptr.stageFlags)
}

// SetStageFlags sets the value in stageFlags.
func (p BindDescriptorSetsInfo) SetStageFlags(value ShaderStageFlags) {
	p.ptr.stageFlags = (C.VkShaderStageFlags)(value)
}

// GetLayout returns the value in layout.
func (p BindDescriptorSetsInfo) GetLayout() PipelineLayout {
	return PipelineLayout(p.ptr.layout)
}

// SetLayout sets the value in layout.
func (p BindDescriptorSetsInfo) SetLayout(value PipelineLayout) {
	p.ptr.layout = (C.VkPipelineLayout)(value)
}

// GetFirstSet returns the value in firstSet.
func (p BindDescriptorSetsInfo) GetFirstSet() uint32 {
	return uint32(p.ptr.firstSet)
}

// SetFirstSet sets the value in firstSet.
func (p BindDescriptorSetsInfo) SetFirstSet(value uint32) {
	p.ptr.firstSet = (C.uint32_t)(value)
}

// GetDescriptorSetCount returns the value in descriptorSetCount.
func (p BindDescriptorSetsInfo) GetDescriptorSetCount() uint32 {
	return uint32(p.ptr.descriptorSetCount)
}

// SetDescriptorSetCount sets the value in descriptorSetCount.
func (p BindDescriptorSetsInfo) SetDescriptorSetCount(value uint32) {
	p.ptr.descriptorSetCount = (C.uint32_t)(value)
}

// GetPDescriptorSets returns the value in pDescriptorSets.
func (p BindDescriptorSetsInfo) GetPDescriptorSets() ffi.Ref[DescriptorSet] {
	return ffi.RefFromPtr[DescriptorSet](unsafe.Pointer(p.ptr.pDescriptorSets))
}

// SetPDescriptorSets sets the value in pDescriptorSets.
func (p BindDescriptorSetsInfo) SetPDescriptorSets(value ffi.Ref[DescriptorSet]) {
	p.ptr.pDescriptorSets = (*C.VkDescriptorSet)(value.Raw())
}

// GetDynamicOffsetCount returns the value in dynamicOffsetCount.
func (p BindDescriptorSetsInfo) GetDynamicOffsetCount() uint32 {
	return uint32(p.ptr.dynamicOffsetCount)
}

// SetDynamicOffsetCount sets the value in dynamicOffsetCount.
func (p BindDescriptorSetsInfo) SetDynamicOffsetCount(value uint32) {
	p.ptr.dynamicOffsetCount = (C.uint32_t)(value)
}

// GetPDynamicOffsets returns the value in pDynamicOffsets.
func (p BindDescriptorSetsInfo) GetPDynamicOffsets() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pDynamicOffsets))
}

// SetPDynamicOffsets sets the value in pDynamicOffsets.
func (p BindDescriptorSetsInfo) SetPDynamicOffsets(value ffi.Ref[uint32]) {
	p.ptr.pDynamicOffsets = (*C.uint32_t)(value.Raw())
}

// BindImageMemoryDeviceGroupInfo wraps VkBindImageMemoryDeviceGroupInfo.
type BindImageMemoryDeviceGroupInfo struct {
	ptr *C.VkBindImageMemoryDeviceGroupInfo
}

// BindImageMemoryDeviceGroupInfoNil is a null pointer.
var BindImageMemoryDeviceGroupInfoNil BindImageMemoryDeviceGroupInfo

// BindImageMemoryDeviceGroupInfoSizeOf is the byte size of VkBindImageMemoryDeviceGroupInfo.
const BindImageMemoryDeviceGroupInfoSizeOf = int(C.sizeof_VkBindImageMemoryDeviceGroupInfo)

// BindImageMemoryDeviceGroupInfoFromPtr converts a raw pointer to a BindImageMemoryDeviceGroupInfo.
func BindImageMemoryDeviceGroupInfoFromPtr(ptr unsafe.Pointer) BindImageMemoryDeviceGroupInfo {
	return BindImageMemoryDeviceGroupInfo{ptr: (*C.VkBindImageMemoryDeviceGroupInfo)(ptr)}
}

// BindImageMemoryDeviceGroupInfoAlloc allocates a continuous block of VkBindImageMemoryDeviceGroupInfo.
func BindImageMemoryDeviceGroupInfoAlloc(alloc ffi.Allocator, count int) BindImageMemoryDeviceGroupInfo {
	ptr := alloc.Allocate(BindImageMemoryDeviceGroupInfoSizeOf * count)
	return BindImageMemoryDeviceGroupInfo{ptr: (*C.VkBindImageMemoryDeviceGroupInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BindImageMemoryDeviceGroupInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BindImageMemoryDeviceGroupInfo) Offset(offset int) BindImageMemoryDeviceGroupInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BindImageMemoryDeviceGroupInfoSizeOf)
	return BindImageMemoryDeviceGroupInfo{ptr: (*C.VkBindImageMemoryDeviceGroupInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p BindImageMemoryDeviceGroupInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BindImageMemoryDeviceGroupInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BindImageMemoryDeviceGroupInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BindImageMemoryDeviceGroupInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDeviceIndexCount returns the value in deviceIndexCount.
func (p BindImageMemoryDeviceGroupInfo) GetDeviceIndexCount() uint32 {
	return uint32(p.ptr.deviceIndexCount)
}

// SetDeviceIndexCount sets the value in deviceIndexCount.
func (p BindImageMemoryDeviceGroupInfo) SetDeviceIndexCount(value uint32) {
	p.ptr.deviceIndexCount = (C.uint32_t)(value)
}

// GetPDeviceIndices returns the value in pDeviceIndices.
func (p BindImageMemoryDeviceGroupInfo) GetPDeviceIndices() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pDeviceIndices))
}

// SetPDeviceIndices sets the value in pDeviceIndices.
func (p BindImageMemoryDeviceGroupInfo) SetPDeviceIndices(value ffi.Ref[uint32]) {
	p.ptr.pDeviceIndices = (*C.uint32_t)(value.Raw())
}

// GetSplitInstanceBindRegionCount returns the value in splitInstanceBindRegionCount.
func (p BindImageMemoryDeviceGroupInfo) GetSplitInstanceBindRegionCount() uint32 {
	return uint32(p.ptr.splitInstanceBindRegionCount)
}

// SetSplitInstanceBindRegionCount sets the value in splitInstanceBindRegionCount.
func (p BindImageMemoryDeviceGroupInfo) SetSplitInstanceBindRegionCount(value uint32) {
	p.ptr.splitInstanceBindRegionCount = (C.uint32_t)(value)
}

// GetPSplitInstanceBindRegions returns the value in pSplitInstanceBindRegions.
func (p BindImageMemoryDeviceGroupInfo) GetPSplitInstanceBindRegions() Rect2D {
	return Rect2D{ptr: p.ptr.pSplitInstanceBindRegions}
}

// SetPSplitInstanceBindRegions sets the value in pSplitInstanceBindRegions.
func (p BindImageMemoryDeviceGroupInfo) SetPSplitInstanceBindRegions(value Rect2D) {
	p.ptr.pSplitInstanceBindRegions = value.ptr
}

// BindImageMemoryInfo wraps VkBindImageMemoryInfo.
type BindImageMemoryInfo struct {
	ptr *C.VkBindImageMemoryInfo
}

// BindImageMemoryInfoNil is a null pointer.
var BindImageMemoryInfoNil BindImageMemoryInfo

// BindImageMemoryInfoSizeOf is the byte size of VkBindImageMemoryInfo.
const BindImageMemoryInfoSizeOf = int(C.sizeof_VkBindImageMemoryInfo)

// BindImageMemoryInfoFromPtr converts a raw pointer to a BindImageMemoryInfo.
func BindImageMemoryInfoFromPtr(ptr unsafe.Pointer) BindImageMemoryInfo {
	return BindImageMemoryInfo{ptr: (*C.VkBindImageMemoryInfo)(ptr)}
}

// BindImageMemoryInfoAlloc allocates a continuous block of VkBindImageMemoryInfo.
func BindImageMemoryInfoAlloc(alloc ffi.Allocator, count int) BindImageMemoryInfo {
	ptr := alloc.Allocate(BindImageMemoryInfoSizeOf * count)
	return BindImageMemoryInfo{ptr: (*C.VkBindImageMemoryInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BindImageMemoryInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BindImageMemoryInfo) Offset(offset int) BindImageMemoryInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BindImageMemoryInfoSizeOf)
	return BindImageMemoryInfo{ptr: (*C.VkBindImageMemoryInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p BindImageMemoryInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BindImageMemoryInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BindImageMemoryInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BindImageMemoryInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetImage returns the value in image.
func (p BindImageMemoryInfo) GetImage() Image {
	return Image(p.ptr.image)
}

// SetImage sets the value in image.
func (p BindImageMemoryInfo) SetImage(value Image) {
	p.ptr.image = (C.VkImage)(value)
}

// GetMemory returns the value in memory.
func (p BindImageMemoryInfo) GetMemory() DeviceMemory {
	return DeviceMemory(p.ptr.memory)
}

// SetMemory sets the value in memory.
func (p BindImageMemoryInfo) SetMemory(value DeviceMemory) {
	p.ptr.memory = (C.VkDeviceMemory)(value)
}

// GetMemoryOffset returns the value in memoryOffset.
func (p BindImageMemoryInfo) GetMemoryOffset() DeviceSize {
	return DeviceSize(p.ptr.memoryOffset)
}

// SetMemoryOffset sets the value in memoryOffset.
func (p BindImageMemoryInfo) SetMemoryOffset(value DeviceSize) {
	p.ptr.memoryOffset = (C.VkDeviceSize)(value)
}

// BindImagePlaneMemoryInfo wraps VkBindImagePlaneMemoryInfo.
type BindImagePlaneMemoryInfo struct {
	ptr *C.VkBindImagePlaneMemoryInfo
}

// BindImagePlaneMemoryInfoNil is a null pointer.
var BindImagePlaneMemoryInfoNil BindImagePlaneMemoryInfo

// BindImagePlaneMemoryInfoSizeOf is the byte size of VkBindImagePlaneMemoryInfo.
const BindImagePlaneMemoryInfoSizeOf = int(C.sizeof_VkBindImagePlaneMemoryInfo)

// BindImagePlaneMemoryInfoFromPtr converts a raw pointer to a BindImagePlaneMemoryInfo.
func BindImagePlaneMemoryInfoFromPtr(ptr unsafe.Pointer) BindImagePlaneMemoryInfo {
	return BindImagePlaneMemoryInfo{ptr: (*C.VkBindImagePlaneMemoryInfo)(ptr)}
}

// BindImagePlaneMemoryInfoAlloc allocates a continuous block of VkBindImagePlaneMemoryInfo.
func BindImagePlaneMemoryInfoAlloc(alloc ffi.Allocator, count int) BindImagePlaneMemoryInfo {
	ptr := alloc.Allocate(BindImagePlaneMemoryInfoSizeOf * count)
	return BindImagePlaneMemoryInfo{ptr: (*C.VkBindImagePlaneMemoryInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BindImagePlaneMemoryInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BindImagePlaneMemoryInfo) Offset(offset int) BindImagePlaneMemoryInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BindImagePlaneMemoryInfoSizeOf)
	return BindImagePlaneMemoryInfo{ptr: (*C.VkBindImagePlaneMemoryInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p BindImagePlaneMemoryInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BindImagePlaneMemoryInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BindImagePlaneMemoryInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BindImagePlaneMemoryInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPlaneAspect returns the value in planeAspect.
func (p BindImagePlaneMemoryInfo) GetPlaneAspect() ImageAspectFlags {
	return ImageAspectFlags(p.ptr.planeAspect)
}

// SetPlaneAspect sets the value in planeAspect.
func (p BindImagePlaneMemoryInfo) SetPlaneAspect(value ImageAspectFlags) {
	p.ptr.planeAspect = (C.VkImageAspectFlagBits)(value)
}

// BindMemoryStatus wraps VkBindMemoryStatus.
type BindMemoryStatus struct {
	ptr *C.VkBindMemoryStatus
}

// BindMemoryStatusNil is a null pointer.
var BindMemoryStatusNil BindMemoryStatus

// BindMemoryStatusSizeOf is the byte size of VkBindMemoryStatus.
const BindMemoryStatusSizeOf = int(C.sizeof_VkBindMemoryStatus)

// BindMemoryStatusFromPtr converts a raw pointer to a BindMemoryStatus.
func BindMemoryStatusFromPtr(ptr unsafe.Pointer) BindMemoryStatus {
	return BindMemoryStatus{ptr: (*C.VkBindMemoryStatus)(ptr)}
}

// BindMemoryStatusAlloc allocates a continuous block of VkBindMemoryStatus.
func BindMemoryStatusAlloc(alloc ffi.Allocator, count int) BindMemoryStatus {
	ptr := alloc.Allocate(BindMemoryStatusSizeOf * count)
	return BindMemoryStatus{ptr: (*C.VkBindMemoryStatus)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BindMemoryStatus) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BindMemoryStatus) Offset(offset int) BindMemoryStatus {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BindMemoryStatusSizeOf)
	return BindMemoryStatus{ptr: (*C.VkBindMemoryStatus)(ptr)}
}

// GetSType returns the value in sType.
func (p BindMemoryStatus) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BindMemoryStatus) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BindMemoryStatus) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BindMemoryStatus) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPResult returns the value in pResult.
func (p BindMemoryStatus) GetPResult() ffi.Ref[Result] {
	return ffi.RefFromPtr[Result](unsafe.Pointer(p.ptr.pResult))
}

// SetPResult sets the value in pResult.
func (p BindMemoryStatus) SetPResult(value ffi.Ref[Result]) {
	p.ptr.pResult = (*C.VkResult)(value.Raw())
}

// BindSparseInfo wraps VkBindSparseInfo.
type BindSparseInfo struct {
	ptr *C.VkBindSparseInfo
}

// BindSparseInfoNil is a null pointer.
var BindSparseInfoNil BindSparseInfo

// BindSparseInfoSizeOf is the byte size of VkBindSparseInfo.
const BindSparseInfoSizeOf = int(C.sizeof_VkBindSparseInfo)

// BindSparseInfoFromPtr converts a raw pointer to a BindSparseInfo.
func BindSparseInfoFromPtr(ptr unsafe.Pointer) BindSparseInfo {
	return BindSparseInfo{ptr: (*C.VkBindSparseInfo)(ptr)}
}

// BindSparseInfoAlloc allocates a continuous block of VkBindSparseInfo.
func BindSparseInfoAlloc(alloc ffi.Allocator, count int) BindSparseInfo {
	ptr := alloc.Allocate(BindSparseInfoSizeOf * count)
	return BindSparseInfo{ptr: (*C.VkBindSparseInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BindSparseInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BindSparseInfo) Offset(offset int) BindSparseInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BindSparseInfoSizeOf)
	return BindSparseInfo{ptr: (*C.VkBindSparseInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p BindSparseInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BindSparseInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BindSparseInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BindSparseInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetWaitSemaphoreCount returns the value in waitSemaphoreCount.
func (p BindSparseInfo) GetWaitSemaphoreCount() uint32 {
	return uint32(p.ptr.waitSemaphoreCount)
}

// SetWaitSemaphoreCount sets the value in waitSemaphoreCount.
func (p BindSparseInfo) SetWaitSemaphoreCount(value uint32) {
	p.ptr.waitSemaphoreCount = (C.uint32_t)(value)
}

// GetPWaitSemaphores returns the value in pWaitSemaphores.
func (p BindSparseInfo) GetPWaitSemaphores() ffi.Ref[Semaphore] {
	return ffi.RefFromPtr[Semaphore](unsafe.Pointer(p.ptr.pWaitSemaphores))
}

// SetPWaitSemaphores sets the value in pWaitSemaphores.
func (p BindSparseInfo) SetPWaitSemaphores(value ffi.Ref[Semaphore]) {
	p.ptr.pWaitSemaphores = (*C.VkSemaphore)(value.Raw())
}

// GetBufferBindCount returns the value in bufferBindCount.
func (p BindSparseInfo) GetBufferBindCount() uint32 {
	return uint32(p.ptr.bufferBindCount)
}

// SetBufferBindCount sets the value in bufferBindCount.
func (p BindSparseInfo) SetBufferBindCount(value uint32) {
	p.ptr.bufferBindCount = (C.uint32_t)(value)
}

// GetPBufferBinds returns the value in pBufferBinds.
func (p BindSparseInfo) GetPBufferBinds() SparseBufferMemoryBindInfo {
	return SparseBufferMemoryBindInfo{ptr: p.ptr.pBufferBinds}
}

// SetPBufferBinds sets the value in pBufferBinds.
func (p BindSparseInfo) SetPBufferBinds(value SparseBufferMemoryBindInfo) {
	p.ptr.pBufferBinds = value.ptr
}

// GetImageOpaqueBindCount returns the value in imageOpaqueBindCount.
func (p BindSparseInfo) GetImageOpaqueBindCount() uint32 {
	return uint32(p.ptr.imageOpaqueBindCount)
}

// SetImageOpaqueBindCount sets the value in imageOpaqueBindCount.
func (p BindSparseInfo) SetImageOpaqueBindCount(value uint32) {
	p.ptr.imageOpaqueBindCount = (C.uint32_t)(value)
}

// GetPImageOpaqueBinds returns the value in pImageOpaqueBinds.
func (p BindSparseInfo) GetPImageOpaqueBinds() SparseImageOpaqueMemoryBindInfo {
	return SparseImageOpaqueMemoryBindInfo{ptr: p.ptr.pImageOpaqueBinds}
}

// SetPImageOpaqueBinds sets the value in pImageOpaqueBinds.
func (p BindSparseInfo) SetPImageOpaqueBinds(value SparseImageOpaqueMemoryBindInfo) {
	p.ptr.pImageOpaqueBinds = value.ptr
}

// GetImageBindCount returns the value in imageBindCount.
func (p BindSparseInfo) GetImageBindCount() uint32 {
	return uint32(p.ptr.imageBindCount)
}

// SetImageBindCount sets the value in imageBindCount.
func (p BindSparseInfo) SetImageBindCount(value uint32) {
	p.ptr.imageBindCount = (C.uint32_t)(value)
}

// GetPImageBinds returns the value in pImageBinds.
func (p BindSparseInfo) GetPImageBinds() SparseImageMemoryBindInfo {
	return SparseImageMemoryBindInfo{ptr: p.ptr.pImageBinds}
}

// SetPImageBinds sets the value in pImageBinds.
func (p BindSparseInfo) SetPImageBinds(value SparseImageMemoryBindInfo) {
	p.ptr.pImageBinds = value.ptr
}

// GetSignalSemaphoreCount returns the value in signalSemaphoreCount.
func (p BindSparseInfo) GetSignalSemaphoreCount() uint32 {
	return uint32(p.ptr.signalSemaphoreCount)
}

// SetSignalSemaphoreCount sets the value in signalSemaphoreCount.
func (p BindSparseInfo) SetSignalSemaphoreCount(value uint32) {
	p.ptr.signalSemaphoreCount = (C.uint32_t)(value)
}

// GetPSignalSemaphores returns the value in pSignalSemaphores.
func (p BindSparseInfo) GetPSignalSemaphores() ffi.Ref[Semaphore] {
	return ffi.RefFromPtr[Semaphore](unsafe.Pointer(p.ptr.pSignalSemaphores))
}

// SetPSignalSemaphores sets the value in pSignalSemaphores.
func (p BindSparseInfo) SetPSignalSemaphores(value ffi.Ref[Semaphore]) {
	p.ptr.pSignalSemaphores = (*C.VkSemaphore)(value.Raw())
}

// BlitImageInfo2 wraps VkBlitImageInfo2.
type BlitImageInfo2 struct {
	ptr *C.VkBlitImageInfo2
}

// BlitImageInfo2Nil is a null pointer.
var BlitImageInfo2Nil BlitImageInfo2

// BlitImageInfo2SizeOf is the byte size of VkBlitImageInfo2.
const BlitImageInfo2SizeOf = int(C.sizeof_VkBlitImageInfo2)

// BlitImageInfo2FromPtr converts a raw pointer to a BlitImageInfo2.
func BlitImageInfo2FromPtr(ptr unsafe.Pointer) BlitImageInfo2 {
	return BlitImageInfo2{ptr: (*C.VkBlitImageInfo2)(ptr)}
}

// BlitImageInfo2Alloc allocates a continuous block of VkBlitImageInfo2.
func BlitImageInfo2Alloc(alloc ffi.Allocator, count int) BlitImageInfo2 {
	ptr := alloc.Allocate(BlitImageInfo2SizeOf * count)
	return BlitImageInfo2{ptr: (*C.VkBlitImageInfo2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BlitImageInfo2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BlitImageInfo2) Offset(offset int) BlitImageInfo2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BlitImageInfo2SizeOf)
	return BlitImageInfo2{ptr: (*C.VkBlitImageInfo2)(ptr)}
}

// GetSType returns the value in sType.
func (p BlitImageInfo2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BlitImageInfo2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BlitImageInfo2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BlitImageInfo2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcImage returns the value in srcImage.
func (p BlitImageInfo2) GetSrcImage() Image {
	return Image(p.ptr.srcImage)
}

// SetSrcImage sets the value in srcImage.
func (p BlitImageInfo2) SetSrcImage(value Image) {
	p.ptr.srcImage = (C.VkImage)(value)
}

// GetSrcImageLayout returns the value in srcImageLayout.
func (p BlitImageInfo2) GetSrcImageLayout() ImageLayout {
	return ImageLayout(p.ptr.srcImageLayout)
}

// SetSrcImageLayout sets the value in srcImageLayout.
func (p BlitImageInfo2) SetSrcImageLayout(value ImageLayout) {
	p.ptr.srcImageLayout = (C.VkImageLayout)(value)
}

// GetDstImage returns the value in dstImage.
func (p BlitImageInfo2) GetDstImage() Image {
	return Image(p.ptr.dstImage)
}

// SetDstImage sets the value in dstImage.
func (p BlitImageInfo2) SetDstImage(value Image) {
	p.ptr.dstImage = (C.VkImage)(value)
}

// GetDstImageLayout returns the value in dstImageLayout.
func (p BlitImageInfo2) GetDstImageLayout() ImageLayout {
	return ImageLayout(p.ptr.dstImageLayout)
}

// SetDstImageLayout sets the value in dstImageLayout.
func (p BlitImageInfo2) SetDstImageLayout(value ImageLayout) {
	p.ptr.dstImageLayout = (C.VkImageLayout)(value)
}

// GetRegionCount returns the value in regionCount.
func (p BlitImageInfo2) GetRegionCount() uint32 {
	return uint32(p.ptr.regionCount)
}

// SetRegionCount sets the value in regionCount.
func (p BlitImageInfo2) SetRegionCount(value uint32) {
	p.ptr.regionCount = (C.uint32_t)(value)
}

// GetPRegions returns the value in pRegions.
func (p BlitImageInfo2) GetPRegions() ImageBlit2 {
	return ImageBlit2{ptr: p.ptr.pRegions}
}

// SetPRegions sets the value in pRegions.
func (p BlitImageInfo2) SetPRegions(value ImageBlit2) {
	p.ptr.pRegions = value.ptr
}

// GetFilter returns the value in filter.
func (p BlitImageInfo2) GetFilter() Filter {
	return Filter(p.ptr.filter)
}

// SetFilter sets the value in filter.
func (p BlitImageInfo2) SetFilter(value Filter) {
	p.ptr.filter = (C.VkFilter)(value)
}

// BufferCopy wraps VkBufferCopy.
type BufferCopy struct {
	ptr *C.VkBufferCopy
}

// BufferCopyNil is a null pointer.
var BufferCopyNil BufferCopy

// BufferCopySizeOf is the byte size of VkBufferCopy.
const BufferCopySizeOf = int(C.sizeof_VkBufferCopy)

// BufferCopyFromPtr converts a raw pointer to a BufferCopy.
func BufferCopyFromPtr(ptr unsafe.Pointer) BufferCopy {
	return BufferCopy{ptr: (*C.VkBufferCopy)(ptr)}
}

// BufferCopyAlloc allocates a continuous block of VkBufferCopy.
func BufferCopyAlloc(alloc ffi.Allocator, count int) BufferCopy {
	ptr := alloc.Allocate(BufferCopySizeOf * count)
	return BufferCopy{ptr: (*C.VkBufferCopy)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BufferCopy) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BufferCopy) Offset(offset int) BufferCopy {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BufferCopySizeOf)
	return BufferCopy{ptr: (*C.VkBufferCopy)(ptr)}
}

// GetSrcOffset returns the value in srcOffset.
func (p BufferCopy) GetSrcOffset() DeviceSize {
	return DeviceSize(p.ptr.srcOffset)
}

// SetSrcOffset sets the value in srcOffset.
func (p BufferCopy) SetSrcOffset(value DeviceSize) {
	p.ptr.srcOffset = (C.VkDeviceSize)(value)
}

// GetDstOffset returns the value in dstOffset.
func (p BufferCopy) GetDstOffset() DeviceSize {
	return DeviceSize(p.ptr.dstOffset)
}

// SetDstOffset sets the value in dstOffset.
func (p BufferCopy) SetDstOffset(value DeviceSize) {
	p.ptr.dstOffset = (C.VkDeviceSize)(value)
}

// GetSize returns the value in size.
func (p BufferCopy) GetSize() DeviceSize {
	return DeviceSize(p.ptr.size)
}

// SetSize sets the value in size.
func (p BufferCopy) SetSize(value DeviceSize) {
	p.ptr.size = (C.VkDeviceSize)(value)
}

// BufferCopy2 wraps VkBufferCopy2.
type BufferCopy2 struct {
	ptr *C.VkBufferCopy2
}

// BufferCopy2Nil is a null pointer.
var BufferCopy2Nil BufferCopy2

// BufferCopy2SizeOf is the byte size of VkBufferCopy2.
const BufferCopy2SizeOf = int(C.sizeof_VkBufferCopy2)

// BufferCopy2FromPtr converts a raw pointer to a BufferCopy2.
func BufferCopy2FromPtr(ptr unsafe.Pointer) BufferCopy2 {
	return BufferCopy2{ptr: (*C.VkBufferCopy2)(ptr)}
}

// BufferCopy2Alloc allocates a continuous block of VkBufferCopy2.
func BufferCopy2Alloc(alloc ffi.Allocator, count int) BufferCopy2 {
	ptr := alloc.Allocate(BufferCopy2SizeOf * count)
	return BufferCopy2{ptr: (*C.VkBufferCopy2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BufferCopy2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BufferCopy2) Offset(offset int) BufferCopy2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BufferCopy2SizeOf)
	return BufferCopy2{ptr: (*C.VkBufferCopy2)(ptr)}
}

// GetSType returns the value in sType.
func (p BufferCopy2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BufferCopy2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BufferCopy2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BufferCopy2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcOffset returns the value in srcOffset.
func (p BufferCopy2) GetSrcOffset() DeviceSize {
	return DeviceSize(p.ptr.srcOffset)
}

// SetSrcOffset sets the value in srcOffset.
func (p BufferCopy2) SetSrcOffset(value DeviceSize) {
	p.ptr.srcOffset = (C.VkDeviceSize)(value)
}

// GetDstOffset returns the value in dstOffset.
func (p BufferCopy2) GetDstOffset() DeviceSize {
	return DeviceSize(p.ptr.dstOffset)
}

// SetDstOffset sets the value in dstOffset.
func (p BufferCopy2) SetDstOffset(value DeviceSize) {
	p.ptr.dstOffset = (C.VkDeviceSize)(value)
}

// GetSize returns the value in size.
func (p BufferCopy2) GetSize() DeviceSize {
	return DeviceSize(p.ptr.size)
}

// SetSize sets the value in size.
func (p BufferCopy2) SetSize(value DeviceSize) {
	p.ptr.size = (C.VkDeviceSize)(value)
}

// BufferCreateInfo wraps VkBufferCreateInfo.
type BufferCreateInfo struct {
	ptr *C.VkBufferCreateInfo
}

// BufferCreateInfoNil is a null pointer.
var BufferCreateInfoNil BufferCreateInfo

// BufferCreateInfoSizeOf is the byte size of VkBufferCreateInfo.
const BufferCreateInfoSizeOf = int(C.sizeof_VkBufferCreateInfo)

// BufferCreateInfoFromPtr converts a raw pointer to a BufferCreateInfo.
func BufferCreateInfoFromPtr(ptr unsafe.Pointer) BufferCreateInfo {
	return BufferCreateInfo{ptr: (*C.VkBufferCreateInfo)(ptr)}
}

// BufferCreateInfoAlloc allocates a continuous block of VkBufferCreateInfo.
func BufferCreateInfoAlloc(alloc ffi.Allocator, count int) BufferCreateInfo {
	ptr := alloc.Allocate(BufferCreateInfoSizeOf * count)
	return BufferCreateInfo{ptr: (*C.VkBufferCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BufferCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BufferCreateInfo) Offset(offset int) BufferCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BufferCreateInfoSizeOf)
	return BufferCreateInfo{ptr: (*C.VkBufferCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p BufferCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BufferCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BufferCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BufferCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p BufferCreateInfo) GetFlags() BufferCreateFlags {
	return BufferCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p BufferCreateInfo) SetFlags(value BufferCreateFlags) {
	p.ptr.flags = (C.VkBufferCreateFlags)(value)
}

// GetSize returns the value in size.
func (p BufferCreateInfo) GetSize() DeviceSize {
	return DeviceSize(p.ptr.size)
}

// SetSize sets the value in size.
func (p BufferCreateInfo) SetSize(value DeviceSize) {
	p.ptr.size = (C.VkDeviceSize)(value)
}

// GetUsage returns the value in usage.
func (p BufferCreateInfo) GetUsage() BufferUsageFlags {
	return BufferUsageFlags(p.ptr.usage)
}

// SetUsage sets the value in usage.
func (p BufferCreateInfo) SetUsage(value BufferUsageFlags) {
	p.ptr.usage = (C.VkBufferUsageFlags)(value)
}

// GetSharingMode returns the value in sharingMode.
func (p BufferCreateInfo) GetSharingMode() SharingMode {
	return SharingMode(p.ptr.sharingMode)
}

// SetSharingMode sets the value in sharingMode.
func (p BufferCreateInfo) SetSharingMode(value SharingMode) {
	p.ptr.sharingMode = (C.VkSharingMode)(value)
}

// GetQueueFamilyIndexCount returns the value in queueFamilyIndexCount.
func (p BufferCreateInfo) GetQueueFamilyIndexCount() uint32 {
	return uint32(p.ptr.queueFamilyIndexCount)
}

// SetQueueFamilyIndexCount sets the value in queueFamilyIndexCount.
func (p BufferCreateInfo) SetQueueFamilyIndexCount(value uint32) {
	p.ptr.queueFamilyIndexCount = (C.uint32_t)(value)
}

// GetPQueueFamilyIndices returns the value in pQueueFamilyIndices.
func (p BufferCreateInfo) GetPQueueFamilyIndices() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pQueueFamilyIndices))
}

// SetPQueueFamilyIndices sets the value in pQueueFamilyIndices.
func (p BufferCreateInfo) SetPQueueFamilyIndices(value ffi.Ref[uint32]) {
	p.ptr.pQueueFamilyIndices = (*C.uint32_t)(value.Raw())
}

// BufferDeviceAddressInfo wraps VkBufferDeviceAddressInfo.
type BufferDeviceAddressInfo struct {
	ptr *C.VkBufferDeviceAddressInfo
}

// BufferDeviceAddressInfoNil is a null pointer.
var BufferDeviceAddressInfoNil BufferDeviceAddressInfo

// BufferDeviceAddressInfoSizeOf is the byte size of VkBufferDeviceAddressInfo.
const BufferDeviceAddressInfoSizeOf = int(C.sizeof_VkBufferDeviceAddressInfo)

// BufferDeviceAddressInfoFromPtr converts a raw pointer to a BufferDeviceAddressInfo.
func BufferDeviceAddressInfoFromPtr(ptr unsafe.Pointer) BufferDeviceAddressInfo {
	return BufferDeviceAddressInfo{ptr: (*C.VkBufferDeviceAddressInfo)(ptr)}
}

// BufferDeviceAddressInfoAlloc allocates a continuous block of VkBufferDeviceAddressInfo.
func BufferDeviceAddressInfoAlloc(alloc ffi.Allocator, count int) BufferDeviceAddressInfo {
	ptr := alloc.Allocate(BufferDeviceAddressInfoSizeOf * count)
	return BufferDeviceAddressInfo{ptr: (*C.VkBufferDeviceAddressInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BufferDeviceAddressInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BufferDeviceAddressInfo) Offset(offset int) BufferDeviceAddressInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BufferDeviceAddressInfoSizeOf)
	return BufferDeviceAddressInfo{ptr: (*C.VkBufferDeviceAddressInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p BufferDeviceAddressInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BufferDeviceAddressInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BufferDeviceAddressInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BufferDeviceAddressInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetBuffer returns the value in buffer.
func (p BufferDeviceAddressInfo) GetBuffer() Buffer {
	return Buffer(p.ptr.buffer)
}

// SetBuffer sets the value in buffer.
func (p BufferDeviceAddressInfo) SetBuffer(value Buffer) {
	p.ptr.buffer = (C.VkBuffer)(value)
}

// BufferImageCopy wraps VkBufferImageCopy.
type BufferImageCopy struct {
	ptr *C.VkBufferImageCopy
}

// BufferImageCopyNil is a null pointer.
var BufferImageCopyNil BufferImageCopy

// BufferImageCopySizeOf is the byte size of VkBufferImageCopy.
const BufferImageCopySizeOf = int(C.sizeof_VkBufferImageCopy)

// BufferImageCopyFromPtr converts a raw pointer to a BufferImageCopy.
func BufferImageCopyFromPtr(ptr unsafe.Pointer) BufferImageCopy {
	return BufferImageCopy{ptr: (*C.VkBufferImageCopy)(ptr)}
}

// BufferImageCopyAlloc allocates a continuous block of VkBufferImageCopy.
func BufferImageCopyAlloc(alloc ffi.Allocator, count int) BufferImageCopy {
	ptr := alloc.Allocate(BufferImageCopySizeOf * count)
	return BufferImageCopy{ptr: (*C.VkBufferImageCopy)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BufferImageCopy) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BufferImageCopy) Offset(offset int) BufferImageCopy {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BufferImageCopySizeOf)
	return BufferImageCopy{ptr: (*C.VkBufferImageCopy)(ptr)}
}

// GetBufferOffset returns the value in bufferOffset.
func (p BufferImageCopy) GetBufferOffset() DeviceSize {
	return DeviceSize(p.ptr.bufferOffset)
}

// SetBufferOffset sets the value in bufferOffset.
func (p BufferImageCopy) SetBufferOffset(value DeviceSize) {
	p.ptr.bufferOffset = (C.VkDeviceSize)(value)
}

// GetBufferRowLength returns the value in bufferRowLength.
func (p BufferImageCopy) GetBufferRowLength() uint32 {
	return uint32(p.ptr.bufferRowLength)
}

// SetBufferRowLength sets the value in bufferRowLength.
func (p BufferImageCopy) SetBufferRowLength(value uint32) {
	p.ptr.bufferRowLength = (C.uint32_t)(value)
}

// GetBufferImageHeight returns the value in bufferImageHeight.
func (p BufferImageCopy) GetBufferImageHeight() uint32 {
	return uint32(p.ptr.bufferImageHeight)
}

// SetBufferImageHeight sets the value in bufferImageHeight.
func (p BufferImageCopy) SetBufferImageHeight(value uint32) {
	p.ptr.bufferImageHeight = (C.uint32_t)(value)
}

// RefImageSubresource returns pointer to the imageSubresource field.
func (p BufferImageCopy) RefImageSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkBufferImageCopy_imageSubresource)))}
}

// RefImageOffset returns pointer to the imageOffset field.
func (p BufferImageCopy) RefImageOffset() Offset3D {
	return Offset3D{ptr: (*C.VkOffset3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkBufferImageCopy_imageOffset)))}
}

// RefImageExtent returns pointer to the imageExtent field.
func (p BufferImageCopy) RefImageExtent() Extent3D {
	return Extent3D{ptr: (*C.VkExtent3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkBufferImageCopy_imageExtent)))}
}

// BufferImageCopy2 wraps VkBufferImageCopy2.
type BufferImageCopy2 struct {
	ptr *C.VkBufferImageCopy2
}

// BufferImageCopy2Nil is a null pointer.
var BufferImageCopy2Nil BufferImageCopy2

// BufferImageCopy2SizeOf is the byte size of VkBufferImageCopy2.
const BufferImageCopy2SizeOf = int(C.sizeof_VkBufferImageCopy2)

// BufferImageCopy2FromPtr converts a raw pointer to a BufferImageCopy2.
func BufferImageCopy2FromPtr(ptr unsafe.Pointer) BufferImageCopy2 {
	return BufferImageCopy2{ptr: (*C.VkBufferImageCopy2)(ptr)}
}

// BufferImageCopy2Alloc allocates a continuous block of VkBufferImageCopy2.
func BufferImageCopy2Alloc(alloc ffi.Allocator, count int) BufferImageCopy2 {
	ptr := alloc.Allocate(BufferImageCopy2SizeOf * count)
	return BufferImageCopy2{ptr: (*C.VkBufferImageCopy2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BufferImageCopy2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BufferImageCopy2) Offset(offset int) BufferImageCopy2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BufferImageCopy2SizeOf)
	return BufferImageCopy2{ptr: (*C.VkBufferImageCopy2)(ptr)}
}

// GetSType returns the value in sType.
func (p BufferImageCopy2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BufferImageCopy2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BufferImageCopy2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BufferImageCopy2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetBufferOffset returns the value in bufferOffset.
func (p BufferImageCopy2) GetBufferOffset() DeviceSize {
	return DeviceSize(p.ptr.bufferOffset)
}

// SetBufferOffset sets the value in bufferOffset.
func (p BufferImageCopy2) SetBufferOffset(value DeviceSize) {
	p.ptr.bufferOffset = (C.VkDeviceSize)(value)
}

// GetBufferRowLength returns the value in bufferRowLength.
func (p BufferImageCopy2) GetBufferRowLength() uint32 {
	return uint32(p.ptr.bufferRowLength)
}

// SetBufferRowLength sets the value in bufferRowLength.
func (p BufferImageCopy2) SetBufferRowLength(value uint32) {
	p.ptr.bufferRowLength = (C.uint32_t)(value)
}

// GetBufferImageHeight returns the value in bufferImageHeight.
func (p BufferImageCopy2) GetBufferImageHeight() uint32 {
	return uint32(p.ptr.bufferImageHeight)
}

// SetBufferImageHeight sets the value in bufferImageHeight.
func (p BufferImageCopy2) SetBufferImageHeight(value uint32) {
	p.ptr.bufferImageHeight = (C.uint32_t)(value)
}

// RefImageSubresource returns pointer to the imageSubresource field.
func (p BufferImageCopy2) RefImageSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkBufferImageCopy2_imageSubresource)))}
}

// RefImageOffset returns pointer to the imageOffset field.
func (p BufferImageCopy2) RefImageOffset() Offset3D {
	return Offset3D{ptr: (*C.VkOffset3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkBufferImageCopy2_imageOffset)))}
}

// RefImageExtent returns pointer to the imageExtent field.
func (p BufferImageCopy2) RefImageExtent() Extent3D {
	return Extent3D{ptr: (*C.VkExtent3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkBufferImageCopy2_imageExtent)))}
}

// BufferMemoryBarrier wraps VkBufferMemoryBarrier.
type BufferMemoryBarrier struct {
	ptr *C.VkBufferMemoryBarrier
}

// BufferMemoryBarrierNil is a null pointer.
var BufferMemoryBarrierNil BufferMemoryBarrier

// BufferMemoryBarrierSizeOf is the byte size of VkBufferMemoryBarrier.
const BufferMemoryBarrierSizeOf = int(C.sizeof_VkBufferMemoryBarrier)

// BufferMemoryBarrierFromPtr converts a raw pointer to a BufferMemoryBarrier.
func BufferMemoryBarrierFromPtr(ptr unsafe.Pointer) BufferMemoryBarrier {
	return BufferMemoryBarrier{ptr: (*C.VkBufferMemoryBarrier)(ptr)}
}

// BufferMemoryBarrierAlloc allocates a continuous block of VkBufferMemoryBarrier.
func BufferMemoryBarrierAlloc(alloc ffi.Allocator, count int) BufferMemoryBarrier {
	ptr := alloc.Allocate(BufferMemoryBarrierSizeOf * count)
	return BufferMemoryBarrier{ptr: (*C.VkBufferMemoryBarrier)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BufferMemoryBarrier) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BufferMemoryBarrier) Offset(offset int) BufferMemoryBarrier {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BufferMemoryBarrierSizeOf)
	return BufferMemoryBarrier{ptr: (*C.VkBufferMemoryBarrier)(ptr)}
}

// GetSType returns the value in sType.
func (p BufferMemoryBarrier) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BufferMemoryBarrier) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BufferMemoryBarrier) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BufferMemoryBarrier) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcAccessMask returns the value in srcAccessMask.
func (p BufferMemoryBarrier) GetSrcAccessMask() AccessFlags {
	return AccessFlags(p.ptr.srcAccessMask)
}

// SetSrcAccessMask sets the value in srcAccessMask.
func (p BufferMemoryBarrier) SetSrcAccessMask(value AccessFlags) {
	p.ptr.srcAccessMask = (C.VkAccessFlags)(value)
}

// GetDstAccessMask returns the value in dstAccessMask.
func (p BufferMemoryBarrier) GetDstAccessMask() AccessFlags {
	return AccessFlags(p.ptr.dstAccessMask)
}

// SetDstAccessMask sets the value in dstAccessMask.
func (p BufferMemoryBarrier) SetDstAccessMask(value AccessFlags) {
	p.ptr.dstAccessMask = (C.VkAccessFlags)(value)
}

// GetSrcQueueFamilyIndex returns the value in srcQueueFamilyIndex.
func (p BufferMemoryBarrier) GetSrcQueueFamilyIndex() uint32 {
	return uint32(p.ptr.srcQueueFamilyIndex)
}

// SetSrcQueueFamilyIndex sets the value in srcQueueFamilyIndex.
func (p BufferMemoryBarrier) SetSrcQueueFamilyIndex(value uint32) {
	p.ptr.srcQueueFamilyIndex = (C.uint32_t)(value)
}

// GetDstQueueFamilyIndex returns the value in dstQueueFamilyIndex.
func (p BufferMemoryBarrier) GetDstQueueFamilyIndex() uint32 {
	return uint32(p.ptr.dstQueueFamilyIndex)
}

// SetDstQueueFamilyIndex sets the value in dstQueueFamilyIndex.
func (p BufferMemoryBarrier) SetDstQueueFamilyIndex(value uint32) {
	p.ptr.dstQueueFamilyIndex = (C.uint32_t)(value)
}

// GetBuffer returns the value in buffer.
func (p BufferMemoryBarrier) GetBuffer() Buffer {
	return Buffer(p.ptr.buffer)
}

// SetBuffer sets the value in buffer.
func (p BufferMemoryBarrier) SetBuffer(value Buffer) {
	p.ptr.buffer = (C.VkBuffer)(value)
}

// GetOffset returns the value in offset.
func (p BufferMemoryBarrier) GetOffset() DeviceSize {
	return DeviceSize(p.ptr.offset)
}

// SetOffset sets the value in offset.
func (p BufferMemoryBarrier) SetOffset(value DeviceSize) {
	p.ptr.offset = (C.VkDeviceSize)(value)
}

// GetSize returns the value in size.
func (p BufferMemoryBarrier) GetSize() DeviceSize {
	return DeviceSize(p.ptr.size)
}

// SetSize sets the value in size.
func (p BufferMemoryBarrier) SetSize(value DeviceSize) {
	p.ptr.size = (C.VkDeviceSize)(value)
}

// BufferMemoryBarrier2 wraps VkBufferMemoryBarrier2.
type BufferMemoryBarrier2 struct {
	ptr *C.VkBufferMemoryBarrier2
}

// BufferMemoryBarrier2Nil is a null pointer.
var BufferMemoryBarrier2Nil BufferMemoryBarrier2

// BufferMemoryBarrier2SizeOf is the byte size of VkBufferMemoryBarrier2.
const BufferMemoryBarrier2SizeOf = int(C.sizeof_VkBufferMemoryBarrier2)

// BufferMemoryBarrier2FromPtr converts a raw pointer to a BufferMemoryBarrier2.
func BufferMemoryBarrier2FromPtr(ptr unsafe.Pointer) BufferMemoryBarrier2 {
	return BufferMemoryBarrier2{ptr: (*C.VkBufferMemoryBarrier2)(ptr)}
}

// BufferMemoryBarrier2Alloc allocates a continuous block of VkBufferMemoryBarrier2.
func BufferMemoryBarrier2Alloc(alloc ffi.Allocator, count int) BufferMemoryBarrier2 {
	ptr := alloc.Allocate(BufferMemoryBarrier2SizeOf * count)
	return BufferMemoryBarrier2{ptr: (*C.VkBufferMemoryBarrier2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BufferMemoryBarrier2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BufferMemoryBarrier2) Offset(offset int) BufferMemoryBarrier2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BufferMemoryBarrier2SizeOf)
	return BufferMemoryBarrier2{ptr: (*C.VkBufferMemoryBarrier2)(ptr)}
}

// GetSType returns the value in sType.
func (p BufferMemoryBarrier2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BufferMemoryBarrier2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BufferMemoryBarrier2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BufferMemoryBarrier2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcStageMask returns the value in srcStageMask.
func (p BufferMemoryBarrier2) GetSrcStageMask() PipelineStageFlags2 {
	return PipelineStageFlags2(p.ptr.srcStageMask)
}

// SetSrcStageMask sets the value in srcStageMask.
func (p BufferMemoryBarrier2) SetSrcStageMask(value PipelineStageFlags2) {
	p.ptr.srcStageMask = (C.VkPipelineStageFlags2)(value)
}

// GetSrcAccessMask returns the value in srcAccessMask.
func (p BufferMemoryBarrier2) GetSrcAccessMask() AccessFlags2 {
	return AccessFlags2(p.ptr.srcAccessMask)
}

// SetSrcAccessMask sets the value in srcAccessMask.
func (p BufferMemoryBarrier2) SetSrcAccessMask(value AccessFlags2) {
	p.ptr.srcAccessMask = (C.VkAccessFlags2)(value)
}

// GetDstStageMask returns the value in dstStageMask.
func (p BufferMemoryBarrier2) GetDstStageMask() PipelineStageFlags2 {
	return PipelineStageFlags2(p.ptr.dstStageMask)
}

// SetDstStageMask sets the value in dstStageMask.
func (p BufferMemoryBarrier2) SetDstStageMask(value PipelineStageFlags2) {
	p.ptr.dstStageMask = (C.VkPipelineStageFlags2)(value)
}

// GetDstAccessMask returns the value in dstAccessMask.
func (p BufferMemoryBarrier2) GetDstAccessMask() AccessFlags2 {
	return AccessFlags2(p.ptr.dstAccessMask)
}

// SetDstAccessMask sets the value in dstAccessMask.
func (p BufferMemoryBarrier2) SetDstAccessMask(value AccessFlags2) {
	p.ptr.dstAccessMask = (C.VkAccessFlags2)(value)
}

// GetSrcQueueFamilyIndex returns the value in srcQueueFamilyIndex.
func (p BufferMemoryBarrier2) GetSrcQueueFamilyIndex() uint32 {
	return uint32(p.ptr.srcQueueFamilyIndex)
}

// SetSrcQueueFamilyIndex sets the value in srcQueueFamilyIndex.
func (p BufferMemoryBarrier2) SetSrcQueueFamilyIndex(value uint32) {
	p.ptr.srcQueueFamilyIndex = (C.uint32_t)(value)
}

// GetDstQueueFamilyIndex returns the value in dstQueueFamilyIndex.
func (p BufferMemoryBarrier2) GetDstQueueFamilyIndex() uint32 {
	return uint32(p.ptr.dstQueueFamilyIndex)
}

// SetDstQueueFamilyIndex sets the value in dstQueueFamilyIndex.
func (p BufferMemoryBarrier2) SetDstQueueFamilyIndex(value uint32) {
	p.ptr.dstQueueFamilyIndex = (C.uint32_t)(value)
}

// GetBuffer returns the value in buffer.
func (p BufferMemoryBarrier2) GetBuffer() Buffer {
	return Buffer(p.ptr.buffer)
}

// SetBuffer sets the value in buffer.
func (p BufferMemoryBarrier2) SetBuffer(value Buffer) {
	p.ptr.buffer = (C.VkBuffer)(value)
}

// GetOffset returns the value in offset.
func (p BufferMemoryBarrier2) GetOffset() DeviceSize {
	return DeviceSize(p.ptr.offset)
}

// SetOffset sets the value in offset.
func (p BufferMemoryBarrier2) SetOffset(value DeviceSize) {
	p.ptr.offset = (C.VkDeviceSize)(value)
}

// GetSize returns the value in size.
func (p BufferMemoryBarrier2) GetSize() DeviceSize {
	return DeviceSize(p.ptr.size)
}

// SetSize sets the value in size.
func (p BufferMemoryBarrier2) SetSize(value DeviceSize) {
	p.ptr.size = (C.VkDeviceSize)(value)
}

// BufferMemoryRequirementsInfo2 wraps VkBufferMemoryRequirementsInfo2.
type BufferMemoryRequirementsInfo2 struct {
	ptr *C.VkBufferMemoryRequirementsInfo2
}

// BufferMemoryRequirementsInfo2Nil is a null pointer.
var BufferMemoryRequirementsInfo2Nil BufferMemoryRequirementsInfo2

// BufferMemoryRequirementsInfo2SizeOf is the byte size of VkBufferMemoryRequirementsInfo2.
const BufferMemoryRequirementsInfo2SizeOf = int(C.sizeof_VkBufferMemoryRequirementsInfo2)

// BufferMemoryRequirementsInfo2FromPtr converts a raw pointer to a BufferMemoryRequirementsInfo2.
func BufferMemoryRequirementsInfo2FromPtr(ptr unsafe.Pointer) BufferMemoryRequirementsInfo2 {
	return BufferMemoryRequirementsInfo2{ptr: (*C.VkBufferMemoryRequirementsInfo2)(ptr)}
}

// BufferMemoryRequirementsInfo2Alloc allocates a continuous block of VkBufferMemoryRequirementsInfo2.
func BufferMemoryRequirementsInfo2Alloc(alloc ffi.Allocator, count int) BufferMemoryRequirementsInfo2 {
	ptr := alloc.Allocate(BufferMemoryRequirementsInfo2SizeOf * count)
	return BufferMemoryRequirementsInfo2{ptr: (*C.VkBufferMemoryRequirementsInfo2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BufferMemoryRequirementsInfo2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BufferMemoryRequirementsInfo2) Offset(offset int) BufferMemoryRequirementsInfo2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BufferMemoryRequirementsInfo2SizeOf)
	return BufferMemoryRequirementsInfo2{ptr: (*C.VkBufferMemoryRequirementsInfo2)(ptr)}
}

// GetSType returns the value in sType.
func (p BufferMemoryRequirementsInfo2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BufferMemoryRequirementsInfo2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BufferMemoryRequirementsInfo2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BufferMemoryRequirementsInfo2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetBuffer returns the value in buffer.
func (p BufferMemoryRequirementsInfo2) GetBuffer() Buffer {
	return Buffer(p.ptr.buffer)
}

// SetBuffer sets the value in buffer.
func (p BufferMemoryRequirementsInfo2) SetBuffer(value Buffer) {
	p.ptr.buffer = (C.VkBuffer)(value)
}

// BufferOpaqueCaptureAddressCreateInfo wraps VkBufferOpaqueCaptureAddressCreateInfo.
type BufferOpaqueCaptureAddressCreateInfo struct {
	ptr *C.VkBufferOpaqueCaptureAddressCreateInfo
}

// BufferOpaqueCaptureAddressCreateInfoNil is a null pointer.
var BufferOpaqueCaptureAddressCreateInfoNil BufferOpaqueCaptureAddressCreateInfo

// BufferOpaqueCaptureAddressCreateInfoSizeOf is the byte size of VkBufferOpaqueCaptureAddressCreateInfo.
const BufferOpaqueCaptureAddressCreateInfoSizeOf = int(C.sizeof_VkBufferOpaqueCaptureAddressCreateInfo)

// BufferOpaqueCaptureAddressCreateInfoFromPtr converts a raw pointer to a BufferOpaqueCaptureAddressCreateInfo.
func BufferOpaqueCaptureAddressCreateInfoFromPtr(ptr unsafe.Pointer) BufferOpaqueCaptureAddressCreateInfo {
	return BufferOpaqueCaptureAddressCreateInfo{ptr: (*C.VkBufferOpaqueCaptureAddressCreateInfo)(ptr)}
}

// BufferOpaqueCaptureAddressCreateInfoAlloc allocates a continuous block of VkBufferOpaqueCaptureAddressCreateInfo.
func BufferOpaqueCaptureAddressCreateInfoAlloc(alloc ffi.Allocator, count int) BufferOpaqueCaptureAddressCreateInfo {
	ptr := alloc.Allocate(BufferOpaqueCaptureAddressCreateInfoSizeOf * count)
	return BufferOpaqueCaptureAddressCreateInfo{ptr: (*C.VkBufferOpaqueCaptureAddressCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BufferOpaqueCaptureAddressCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BufferOpaqueCaptureAddressCreateInfo) Offset(offset int) BufferOpaqueCaptureAddressCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BufferOpaqueCaptureAddressCreateInfoSizeOf)
	return BufferOpaqueCaptureAddressCreateInfo{ptr: (*C.VkBufferOpaqueCaptureAddressCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p BufferOpaqueCaptureAddressCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BufferOpaqueCaptureAddressCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BufferOpaqueCaptureAddressCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BufferOpaqueCaptureAddressCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetOpaqueCaptureAddress returns the value in opaqueCaptureAddress.
func (p BufferOpaqueCaptureAddressCreateInfo) GetOpaqueCaptureAddress() uint64 {
	return uint64(p.ptr.opaqueCaptureAddress)
}

// SetOpaqueCaptureAddress sets the value in opaqueCaptureAddress.
func (p BufferOpaqueCaptureAddressCreateInfo) SetOpaqueCaptureAddress(value uint64) {
	p.ptr.opaqueCaptureAddress = (C.uint64_t)(value)
}

// BufferUsageFlags2CreateInfo wraps VkBufferUsageFlags2CreateInfo.
type BufferUsageFlags2CreateInfo struct {
	ptr *C.VkBufferUsageFlags2CreateInfo
}

// BufferUsageFlags2CreateInfoNil is a null pointer.
var BufferUsageFlags2CreateInfoNil BufferUsageFlags2CreateInfo

// BufferUsageFlags2CreateInfoSizeOf is the byte size of VkBufferUsageFlags2CreateInfo.
const BufferUsageFlags2CreateInfoSizeOf = int(C.sizeof_VkBufferUsageFlags2CreateInfo)

// BufferUsageFlags2CreateInfoFromPtr converts a raw pointer to a BufferUsageFlags2CreateInfo.
func BufferUsageFlags2CreateInfoFromPtr(ptr unsafe.Pointer) BufferUsageFlags2CreateInfo {
	return BufferUsageFlags2CreateInfo{ptr: (*C.VkBufferUsageFlags2CreateInfo)(ptr)}
}

// BufferUsageFlags2CreateInfoAlloc allocates a continuous block of VkBufferUsageFlags2CreateInfo.
func BufferUsageFlags2CreateInfoAlloc(alloc ffi.Allocator, count int) BufferUsageFlags2CreateInfo {
	ptr := alloc.Allocate(BufferUsageFlags2CreateInfoSizeOf * count)
	return BufferUsageFlags2CreateInfo{ptr: (*C.VkBufferUsageFlags2CreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BufferUsageFlags2CreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BufferUsageFlags2CreateInfo) Offset(offset int) BufferUsageFlags2CreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BufferUsageFlags2CreateInfoSizeOf)
	return BufferUsageFlags2CreateInfo{ptr: (*C.VkBufferUsageFlags2CreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p BufferUsageFlags2CreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BufferUsageFlags2CreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BufferUsageFlags2CreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BufferUsageFlags2CreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetUsage returns the value in usage.
func (p BufferUsageFlags2CreateInfo) GetUsage() BufferUsageFlags2 {
	return BufferUsageFlags2(p.ptr.usage)
}

// SetUsage sets the value in usage.
func (p BufferUsageFlags2CreateInfo) SetUsage(value BufferUsageFlags2) {
	p.ptr.usage = (C.VkBufferUsageFlags2)(value)
}

// BufferViewCreateInfo wraps VkBufferViewCreateInfo.
type BufferViewCreateInfo struct {
	ptr *C.VkBufferViewCreateInfo
}

// BufferViewCreateInfoNil is a null pointer.
var BufferViewCreateInfoNil BufferViewCreateInfo

// BufferViewCreateInfoSizeOf is the byte size of VkBufferViewCreateInfo.
const BufferViewCreateInfoSizeOf = int(C.sizeof_VkBufferViewCreateInfo)

// BufferViewCreateInfoFromPtr converts a raw pointer to a BufferViewCreateInfo.
func BufferViewCreateInfoFromPtr(ptr unsafe.Pointer) BufferViewCreateInfo {
	return BufferViewCreateInfo{ptr: (*C.VkBufferViewCreateInfo)(ptr)}
}

// BufferViewCreateInfoAlloc allocates a continuous block of VkBufferViewCreateInfo.
func BufferViewCreateInfoAlloc(alloc ffi.Allocator, count int) BufferViewCreateInfo {
	ptr := alloc.Allocate(BufferViewCreateInfoSizeOf * count)
	return BufferViewCreateInfo{ptr: (*C.VkBufferViewCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p BufferViewCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p BufferViewCreateInfo) Offset(offset int) BufferViewCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*BufferViewCreateInfoSizeOf)
	return BufferViewCreateInfo{ptr: (*C.VkBufferViewCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p BufferViewCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p BufferViewCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p BufferViewCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p BufferViewCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p BufferViewCreateInfo) GetFlags() BufferViewCreateFlags {
	return BufferViewCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p BufferViewCreateInfo) SetFlags(value BufferViewCreateFlags) {
	p.ptr.flags = (C.VkBufferViewCreateFlags)(value)
}

// GetBuffer returns the value in buffer.
func (p BufferViewCreateInfo) GetBuffer() Buffer {
	return Buffer(p.ptr.buffer)
}

// SetBuffer sets the value in buffer.
func (p BufferViewCreateInfo) SetBuffer(value Buffer) {
	p.ptr.buffer = (C.VkBuffer)(value)
}

// GetFormat returns the value in format.
func (p BufferViewCreateInfo) GetFormat() Format {
	return Format(p.ptr.format)
}

// SetFormat sets the value in format.
func (p BufferViewCreateInfo) SetFormat(value Format) {
	p.ptr.format = (C.VkFormat)(value)
}

// GetOffset returns the value in offset.
func (p BufferViewCreateInfo) GetOffset() DeviceSize {
	return DeviceSize(p.ptr.offset)
}

// SetOffset sets the value in offset.
func (p BufferViewCreateInfo) SetOffset(value DeviceSize) {
	p.ptr.offset = (C.VkDeviceSize)(value)
}

// GetRange returns the value in range.
func (p BufferViewCreateInfo) GetRange() DeviceSize {
	return DeviceSize(p.ptr._range)
}

// SetRange sets the value in range.
func (p BufferViewCreateInfo) SetRange(value DeviceSize) {
	p.ptr._range = (C.VkDeviceSize)(value)
}

// ClearAttachment wraps VkClearAttachment.
type ClearAttachment struct {
	ptr *C.VkClearAttachment
}

// ClearAttachmentNil is a null pointer.
var ClearAttachmentNil ClearAttachment

// ClearAttachmentSizeOf is the byte size of VkClearAttachment.
const ClearAttachmentSizeOf = int(C.sizeof_VkClearAttachment)

// ClearAttachmentFromPtr converts a raw pointer to a ClearAttachment.
func ClearAttachmentFromPtr(ptr unsafe.Pointer) ClearAttachment {
	return ClearAttachment{ptr: (*C.VkClearAttachment)(ptr)}
}

// ClearAttachmentAlloc allocates a continuous block of VkClearAttachment.
func ClearAttachmentAlloc(alloc ffi.Allocator, count int) ClearAttachment {
	ptr := alloc.Allocate(ClearAttachmentSizeOf * count)
	return ClearAttachment{ptr: (*C.VkClearAttachment)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ClearAttachment) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ClearAttachment) Offset(offset int) ClearAttachment {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ClearAttachmentSizeOf)
	return ClearAttachment{ptr: (*C.VkClearAttachment)(ptr)}
}

// GetAspectMask returns the value in aspectMask.
func (p ClearAttachment) GetAspectMask() ImageAspectFlags {
	return ImageAspectFlags(p.ptr.aspectMask)
}

// SetAspectMask sets the value in aspectMask.
func (p ClearAttachment) SetAspectMask(value ImageAspectFlags) {
	p.ptr.aspectMask = (C.VkImageAspectFlags)(value)
}

// GetColorAttachment returns the value in colorAttachment.
func (p ClearAttachment) GetColorAttachment() uint32 {
	return uint32(p.ptr.colorAttachment)
}

// SetColorAttachment sets the value in colorAttachment.
func (p ClearAttachment) SetColorAttachment(value uint32) {
	p.ptr.colorAttachment = (C.uint32_t)(value)
}

// ClearAttachment.clearValue is unsupported: unknown type VkClearValue.

// ClearDepthStencilValue wraps VkClearDepthStencilValue.
type ClearDepthStencilValue struct {
	ptr *C.VkClearDepthStencilValue
}

// ClearDepthStencilValueNil is a null pointer.
var ClearDepthStencilValueNil ClearDepthStencilValue

// ClearDepthStencilValueSizeOf is the byte size of VkClearDepthStencilValue.
const ClearDepthStencilValueSizeOf = int(C.sizeof_VkClearDepthStencilValue)

// ClearDepthStencilValueFromPtr converts a raw pointer to a ClearDepthStencilValue.
func ClearDepthStencilValueFromPtr(ptr unsafe.Pointer) ClearDepthStencilValue {
	return ClearDepthStencilValue{ptr: (*C.VkClearDepthStencilValue)(ptr)}
}

// ClearDepthStencilValueAlloc allocates a continuous block of VkClearDepthStencilValue.
func ClearDepthStencilValueAlloc(alloc ffi.Allocator, count int) ClearDepthStencilValue {
	ptr := alloc.Allocate(ClearDepthStencilValueSizeOf * count)
	return ClearDepthStencilValue{ptr: (*C.VkClearDepthStencilValue)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ClearDepthStencilValue) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ClearDepthStencilValue) Offset(offset int) ClearDepthStencilValue {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ClearDepthStencilValueSizeOf)
	return ClearDepthStencilValue{ptr: (*C.VkClearDepthStencilValue)(ptr)}
}

// GetDepth returns the value in depth.
func (p ClearDepthStencilValue) GetDepth() float32 {
	return float32(p.ptr.depth)
}

// SetDepth sets the value in depth.
func (p ClearDepthStencilValue) SetDepth(value float32) {
	p.ptr.depth = (C.float)(value)
}

// GetStencil returns the value in stencil.
func (p ClearDepthStencilValue) GetStencil() uint32 {
	return uint32(p.ptr.stencil)
}

// SetStencil sets the value in stencil.
func (p ClearDepthStencilValue) SetStencil(value uint32) {
	p.ptr.stencil = (C.uint32_t)(value)
}

// ClearRect wraps VkClearRect.
type ClearRect struct {
	ptr *C.VkClearRect
}

// ClearRectNil is a null pointer.
var ClearRectNil ClearRect

// ClearRectSizeOf is the byte size of VkClearRect.
const ClearRectSizeOf = int(C.sizeof_VkClearRect)

// ClearRectFromPtr converts a raw pointer to a ClearRect.
func ClearRectFromPtr(ptr unsafe.Pointer) ClearRect {
	return ClearRect{ptr: (*C.VkClearRect)(ptr)}
}

// ClearRectAlloc allocates a continuous block of VkClearRect.
func ClearRectAlloc(alloc ffi.Allocator, count int) ClearRect {
	ptr := alloc.Allocate(ClearRectSizeOf * count)
	return ClearRect{ptr: (*C.VkClearRect)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ClearRect) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ClearRect) Offset(offset int) ClearRect {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ClearRectSizeOf)
	return ClearRect{ptr: (*C.VkClearRect)(ptr)}
}

// RefRect returns pointer to the rect field.
func (p ClearRect) RefRect() Rect2D {
	return Rect2D{ptr: (*C.VkRect2D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkClearRect_rect)))}
}

// GetBaseArrayLayer returns the value in baseArrayLayer.
func (p ClearRect) GetBaseArrayLayer() uint32 {
	return uint32(p.ptr.baseArrayLayer)
}

// SetBaseArrayLayer sets the value in baseArrayLayer.
func (p ClearRect) SetBaseArrayLayer(value uint32) {
	p.ptr.baseArrayLayer = (C.uint32_t)(value)
}

// GetLayerCount returns the value in layerCount.
func (p ClearRect) GetLayerCount() uint32 {
	return uint32(p.ptr.layerCount)
}

// SetLayerCount sets the value in layerCount.
func (p ClearRect) SetLayerCount(value uint32) {
	p.ptr.layerCount = (C.uint32_t)(value)
}

// CommandBufferAllocateInfo wraps VkCommandBufferAllocateInfo.
type CommandBufferAllocateInfo struct {
	ptr *C.VkCommandBufferAllocateInfo
}

// CommandBufferAllocateInfoNil is a null pointer.
var CommandBufferAllocateInfoNil CommandBufferAllocateInfo

// CommandBufferAllocateInfoSizeOf is the byte size of VkCommandBufferAllocateInfo.
const CommandBufferAllocateInfoSizeOf = int(C.sizeof_VkCommandBufferAllocateInfo)

// CommandBufferAllocateInfoFromPtr converts a raw pointer to a CommandBufferAllocateInfo.
func CommandBufferAllocateInfoFromPtr(ptr unsafe.Pointer) CommandBufferAllocateInfo {
	return CommandBufferAllocateInfo{ptr: (*C.VkCommandBufferAllocateInfo)(ptr)}
}

// CommandBufferAllocateInfoAlloc allocates a continuous block of VkCommandBufferAllocateInfo.
func CommandBufferAllocateInfoAlloc(alloc ffi.Allocator, count int) CommandBufferAllocateInfo {
	ptr := alloc.Allocate(CommandBufferAllocateInfoSizeOf * count)
	return CommandBufferAllocateInfo{ptr: (*C.VkCommandBufferAllocateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p CommandBufferAllocateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p CommandBufferAllocateInfo) Offset(offset int) CommandBufferAllocateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*CommandBufferAllocateInfoSizeOf)
	return CommandBufferAllocateInfo{ptr: (*C.VkCommandBufferAllocateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p CommandBufferAllocateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p CommandBufferAllocateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p CommandBufferAllocateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p CommandBufferAllocateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetCommandPool returns the value in commandPool.
func (p CommandBufferAllocateInfo) GetCommandPool() CommandPool {
	return CommandPool(p.ptr.commandPool)
}

// SetCommandPool sets the value in commandPool.
func (p CommandBufferAllocateInfo) SetCommandPool(value CommandPool) {
	p.ptr.commandPool = (C.VkCommandPool)(value)
}

// GetLevel returns the value in level.
func (p CommandBufferAllocateInfo) GetLevel() CommandBufferLevel {
	return CommandBufferLevel(p.ptr.level)
}

// SetLevel sets the value in level.
func (p CommandBufferAllocateInfo) SetLevel(value CommandBufferLevel) {
	p.ptr.level = (C.VkCommandBufferLevel)(value)
}

// GetCommandBufferCount returns the value in commandBufferCount.
func (p CommandBufferAllocateInfo) GetCommandBufferCount() uint32 {
	return uint32(p.ptr.commandBufferCount)
}

// SetCommandBufferCount sets the value in commandBufferCount.
func (p CommandBufferAllocateInfo) SetCommandBufferCount(value uint32) {
	p.ptr.commandBufferCount = (C.uint32_t)(value)
}

// CommandBufferBeginInfo wraps VkCommandBufferBeginInfo.
type CommandBufferBeginInfo struct {
	ptr *C.VkCommandBufferBeginInfo
}

// CommandBufferBeginInfoNil is a null pointer.
var CommandBufferBeginInfoNil CommandBufferBeginInfo

// CommandBufferBeginInfoSizeOf is the byte size of VkCommandBufferBeginInfo.
const CommandBufferBeginInfoSizeOf = int(C.sizeof_VkCommandBufferBeginInfo)

// CommandBufferBeginInfoFromPtr converts a raw pointer to a CommandBufferBeginInfo.
func CommandBufferBeginInfoFromPtr(ptr unsafe.Pointer) CommandBufferBeginInfo {
	return CommandBufferBeginInfo{ptr: (*C.VkCommandBufferBeginInfo)(ptr)}
}

// CommandBufferBeginInfoAlloc allocates a continuous block of VkCommandBufferBeginInfo.
func CommandBufferBeginInfoAlloc(alloc ffi.Allocator, count int) CommandBufferBeginInfo {
	ptr := alloc.Allocate(CommandBufferBeginInfoSizeOf * count)
	return CommandBufferBeginInfo{ptr: (*C.VkCommandBufferBeginInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p CommandBufferBeginInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p CommandBufferBeginInfo) Offset(offset int) CommandBufferBeginInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*CommandBufferBeginInfoSizeOf)
	return CommandBufferBeginInfo{ptr: (*C.VkCommandBufferBeginInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p CommandBufferBeginInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p CommandBufferBeginInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p CommandBufferBeginInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p CommandBufferBeginInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p CommandBufferBeginInfo) GetFlags() CommandBufferUsageFlags {
	return CommandBufferUsageFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p CommandBufferBeginInfo) SetFlags(value CommandBufferUsageFlags) {
	p.ptr.flags = (C.VkCommandBufferUsageFlags)(value)
}

// GetPInheritanceInfo returns the value in pInheritanceInfo.
func (p CommandBufferBeginInfo) GetPInheritanceInfo() CommandBufferInheritanceInfo {
	return CommandBufferInheritanceInfo{ptr: p.ptr.pInheritanceInfo}
}

// SetPInheritanceInfo sets the value in pInheritanceInfo.
func (p CommandBufferBeginInfo) SetPInheritanceInfo(value CommandBufferInheritanceInfo) {
	p.ptr.pInheritanceInfo = value.ptr
}

// CommandBufferInheritanceInfo wraps VkCommandBufferInheritanceInfo.
type CommandBufferInheritanceInfo struct {
	ptr *C.VkCommandBufferInheritanceInfo
}

// CommandBufferInheritanceInfoNil is a null pointer.
var CommandBufferInheritanceInfoNil CommandBufferInheritanceInfo

// CommandBufferInheritanceInfoSizeOf is the byte size of VkCommandBufferInheritanceInfo.
const CommandBufferInheritanceInfoSizeOf = int(C.sizeof_VkCommandBufferInheritanceInfo)

// CommandBufferInheritanceInfoFromPtr converts a raw pointer to a CommandBufferInheritanceInfo.
func CommandBufferInheritanceInfoFromPtr(ptr unsafe.Pointer) CommandBufferInheritanceInfo {
	return CommandBufferInheritanceInfo{ptr: (*C.VkCommandBufferInheritanceInfo)(ptr)}
}

// CommandBufferInheritanceInfoAlloc allocates a continuous block of VkCommandBufferInheritanceInfo.
func CommandBufferInheritanceInfoAlloc(alloc ffi.Allocator, count int) CommandBufferInheritanceInfo {
	ptr := alloc.Allocate(CommandBufferInheritanceInfoSizeOf * count)
	return CommandBufferInheritanceInfo{ptr: (*C.VkCommandBufferInheritanceInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p CommandBufferInheritanceInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p CommandBufferInheritanceInfo) Offset(offset int) CommandBufferInheritanceInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*CommandBufferInheritanceInfoSizeOf)
	return CommandBufferInheritanceInfo{ptr: (*C.VkCommandBufferInheritanceInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p CommandBufferInheritanceInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p CommandBufferInheritanceInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p CommandBufferInheritanceInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p CommandBufferInheritanceInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetRenderPass returns the value in renderPass.
func (p CommandBufferInheritanceInfo) GetRenderPass() RenderPass {
	return RenderPass(p.ptr.renderPass)
}

// SetRenderPass sets the value in renderPass.
func (p CommandBufferInheritanceInfo) SetRenderPass(value RenderPass) {
	p.ptr.renderPass = (C.VkRenderPass)(value)
}

// GetSubpass returns the value in subpass.
func (p CommandBufferInheritanceInfo) GetSubpass() uint32 {
	return uint32(p.ptr.subpass)
}

// SetSubpass sets the value in subpass.
func (p CommandBufferInheritanceInfo) SetSubpass(value uint32) {
	p.ptr.subpass = (C.uint32_t)(value)
}

// GetFramebuffer returns the value in framebuffer.
func (p CommandBufferInheritanceInfo) GetFramebuffer() Framebuffer {
	return Framebuffer(p.ptr.framebuffer)
}

// SetFramebuffer sets the value in framebuffer.
func (p CommandBufferInheritanceInfo) SetFramebuffer(value Framebuffer) {
	p.ptr.framebuffer = (C.VkFramebuffer)(value)
}

// GetOcclusionQueryEnable returns the value in occlusionQueryEnable.
func (p CommandBufferInheritanceInfo) GetOcclusionQueryEnable() bool {
	return p.ptr.occlusionQueryEnable != 0
}

// SetOcclusionQueryEnable sets the value in occlusionQueryEnable.
func (p CommandBufferInheritanceInfo) SetOcclusionQueryEnable(value bool) {
	if value {
		p.ptr.occlusionQueryEnable = C.VkBool32(1)
	} else {
		p.ptr.occlusionQueryEnable = C.VkBool32(0)
	}
}

// GetQueryFlags returns the value in queryFlags.
func (p CommandBufferInheritanceInfo) GetQueryFlags() QueryControlFlags {
	return QueryControlFlags(p.ptr.queryFlags)
}

// SetQueryFlags sets the value in queryFlags.
func (p CommandBufferInheritanceInfo) SetQueryFlags(value QueryControlFlags) {
	p.ptr.queryFlags = (C.VkQueryControlFlags)(value)
}

// GetPipelineStatistics returns the value in pipelineStatistics.
func (p CommandBufferInheritanceInfo) GetPipelineStatistics() QueryPipelineStatisticFlags {
	return QueryPipelineStatisticFlags(p.ptr.pipelineStatistics)
}

// SetPipelineStatistics sets the value in pipelineStatistics.
func (p CommandBufferInheritanceInfo) SetPipelineStatistics(value QueryPipelineStatisticFlags) {
	p.ptr.pipelineStatistics = (C.VkQueryPipelineStatisticFlags)(value)
}

// CommandBufferInheritanceRenderingInfo wraps VkCommandBufferInheritanceRenderingInfo.
type CommandBufferInheritanceRenderingInfo struct {
	ptr *C.VkCommandBufferInheritanceRenderingInfo
}

// CommandBufferInheritanceRenderingInfoNil is a null pointer.
var CommandBufferInheritanceRenderingInfoNil CommandBufferInheritanceRenderingInfo

// CommandBufferInheritanceRenderingInfoSizeOf is the byte size of VkCommandBufferInheritanceRenderingInfo.
const CommandBufferInheritanceRenderingInfoSizeOf = int(C.sizeof_VkCommandBufferInheritanceRenderingInfo)

// CommandBufferInheritanceRenderingInfoFromPtr converts a raw pointer to a CommandBufferInheritanceRenderingInfo.
func CommandBufferInheritanceRenderingInfoFromPtr(ptr unsafe.Pointer) CommandBufferInheritanceRenderingInfo {
	return CommandBufferInheritanceRenderingInfo{ptr: (*C.VkCommandBufferInheritanceRenderingInfo)(ptr)}
}

// CommandBufferInheritanceRenderingInfoAlloc allocates a continuous block of VkCommandBufferInheritanceRenderingInfo.
func CommandBufferInheritanceRenderingInfoAlloc(alloc ffi.Allocator, count int) CommandBufferInheritanceRenderingInfo {
	ptr := alloc.Allocate(CommandBufferInheritanceRenderingInfoSizeOf * count)
	return CommandBufferInheritanceRenderingInfo{ptr: (*C.VkCommandBufferInheritanceRenderingInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p CommandBufferInheritanceRenderingInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p CommandBufferInheritanceRenderingInfo) Offset(offset int) CommandBufferInheritanceRenderingInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*CommandBufferInheritanceRenderingInfoSizeOf)
	return CommandBufferInheritanceRenderingInfo{ptr: (*C.VkCommandBufferInheritanceRenderingInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p CommandBufferInheritanceRenderingInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p CommandBufferInheritanceRenderingInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p CommandBufferInheritanceRenderingInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p CommandBufferInheritanceRenderingInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p CommandBufferInheritanceRenderingInfo) GetFlags() RenderingFlags {
	return RenderingFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p CommandBufferInheritanceRenderingInfo) SetFlags(value RenderingFlags) {
	p.ptr.flags = (C.VkRenderingFlags)(value)
}

// GetViewMask returns the value in viewMask.
func (p CommandBufferInheritanceRenderingInfo) GetViewMask() uint32 {
	return uint32(p.ptr.viewMask)
}

// SetViewMask sets the value in viewMask.
func (p CommandBufferInheritanceRenderingInfo) SetViewMask(value uint32) {
	p.ptr.viewMask = (C.uint32_t)(value)
}

// GetColorAttachmentCount returns the value in colorAttachmentCount.
func (p CommandBufferInheritanceRenderingInfo) GetColorAttachmentCount() uint32 {
	return uint32(p.ptr.colorAttachmentCount)
}

// SetColorAttachmentCount sets the value in colorAttachmentCount.
func (p CommandBufferInheritanceRenderingInfo) SetColorAttachmentCount(value uint32) {
	p.ptr.colorAttachmentCount = (C.uint32_t)(value)
}

// GetPColorAttachmentFormats returns the value in pColorAttachmentFormats.
func (p CommandBufferInheritanceRenderingInfo) GetPColorAttachmentFormats() ffi.Ref[Format] {
	return ffi.RefFromPtr[Format](unsafe.Pointer(p.ptr.pColorAttachmentFormats))
}

// SetPColorAttachmentFormats sets the value in pColorAttachmentFormats.
func (p CommandBufferInheritanceRenderingInfo) SetPColorAttachmentFormats(value ffi.Ref[Format]) {
	p.ptr.pColorAttachmentFormats = (*C.VkFormat)(value.Raw())
}

// GetDepthAttachmentFormat returns the value in depthAttachmentFormat.
func (p CommandBufferInheritanceRenderingInfo) GetDepthAttachmentFormat() Format {
	return Format(p.ptr.depthAttachmentFormat)
}

// SetDepthAttachmentFormat sets the value in depthAttachmentFormat.
func (p CommandBufferInheritanceRenderingInfo) SetDepthAttachmentFormat(value Format) {
	p.ptr.depthAttachmentFormat = (C.VkFormat)(value)
}

// GetStencilAttachmentFormat returns the value in stencilAttachmentFormat.
func (p CommandBufferInheritanceRenderingInfo) GetStencilAttachmentFormat() Format {
	return Format(p.ptr.stencilAttachmentFormat)
}

// SetStencilAttachmentFormat sets the value in stencilAttachmentFormat.
func (p CommandBufferInheritanceRenderingInfo) SetStencilAttachmentFormat(value Format) {
	p.ptr.stencilAttachmentFormat = (C.VkFormat)(value)
}

// GetRasterizationSamples returns the value in rasterizationSamples.
func (p CommandBufferInheritanceRenderingInfo) GetRasterizationSamples() SampleCountFlags {
	return SampleCountFlags(p.ptr.rasterizationSamples)
}

// SetRasterizationSamples sets the value in rasterizationSamples.
func (p CommandBufferInheritanceRenderingInfo) SetRasterizationSamples(value SampleCountFlags) {
	p.ptr.rasterizationSamples = (C.VkSampleCountFlagBits)(value)
}

// CommandBufferSubmitInfo wraps VkCommandBufferSubmitInfo.
type CommandBufferSubmitInfo struct {
	ptr *C.VkCommandBufferSubmitInfo
}

// CommandBufferSubmitInfoNil is a null pointer.
var CommandBufferSubmitInfoNil CommandBufferSubmitInfo

// CommandBufferSubmitInfoSizeOf is the byte size of VkCommandBufferSubmitInfo.
const CommandBufferSubmitInfoSizeOf = int(C.sizeof_VkCommandBufferSubmitInfo)

// CommandBufferSubmitInfoFromPtr converts a raw pointer to a CommandBufferSubmitInfo.
func CommandBufferSubmitInfoFromPtr(ptr unsafe.Pointer) CommandBufferSubmitInfo {
	return CommandBufferSubmitInfo{ptr: (*C.VkCommandBufferSubmitInfo)(ptr)}
}

// CommandBufferSubmitInfoAlloc allocates a continuous block of VkCommandBufferSubmitInfo.
func CommandBufferSubmitInfoAlloc(alloc ffi.Allocator, count int) CommandBufferSubmitInfo {
	ptr := alloc.Allocate(CommandBufferSubmitInfoSizeOf * count)
	return CommandBufferSubmitInfo{ptr: (*C.VkCommandBufferSubmitInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p CommandBufferSubmitInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p CommandBufferSubmitInfo) Offset(offset int) CommandBufferSubmitInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*CommandBufferSubmitInfoSizeOf)
	return CommandBufferSubmitInfo{ptr: (*C.VkCommandBufferSubmitInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p CommandBufferSubmitInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p CommandBufferSubmitInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p CommandBufferSubmitInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p CommandBufferSubmitInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetCommandBuffer returns the value in commandBuffer.
func (p CommandBufferSubmitInfo) GetCommandBuffer() CommandBuffer {
	return CommandBuffer(unsafe.Pointer(p.ptr.commandBuffer))
}

// SetCommandBuffer sets the value in commandBuffer.
func (p CommandBufferSubmitInfo) SetCommandBuffer(value CommandBuffer) {
	p.ptr.commandBuffer = (C.VkCommandBuffer)(unsafe.Pointer(value))
}

// GetDeviceMask returns the value in deviceMask.
func (p CommandBufferSubmitInfo) GetDeviceMask() uint32 {
	return uint32(p.ptr.deviceMask)
}

// SetDeviceMask sets the value in deviceMask.
func (p CommandBufferSubmitInfo) SetDeviceMask(value uint32) {
	p.ptr.deviceMask = (C.uint32_t)(value)
}

// CommandPoolCreateInfo wraps VkCommandPoolCreateInfo.
type CommandPoolCreateInfo struct {
	ptr *C.VkCommandPoolCreateInfo
}

// CommandPoolCreateInfoNil is a null pointer.
var CommandPoolCreateInfoNil CommandPoolCreateInfo

// CommandPoolCreateInfoSizeOf is the byte size of VkCommandPoolCreateInfo.
const CommandPoolCreateInfoSizeOf = int(C.sizeof_VkCommandPoolCreateInfo)

// CommandPoolCreateInfoFromPtr converts a raw pointer to a CommandPoolCreateInfo.
func CommandPoolCreateInfoFromPtr(ptr unsafe.Pointer) CommandPoolCreateInfo {
	return CommandPoolCreateInfo{ptr: (*C.VkCommandPoolCreateInfo)(ptr)}
}

// CommandPoolCreateInfoAlloc allocates a continuous block of VkCommandPoolCreateInfo.
func CommandPoolCreateInfoAlloc(alloc ffi.Allocator, count int) CommandPoolCreateInfo {
	ptr := alloc.Allocate(CommandPoolCreateInfoSizeOf * count)
	return CommandPoolCreateInfo{ptr: (*C.VkCommandPoolCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p CommandPoolCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p CommandPoolCreateInfo) Offset(offset int) CommandPoolCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*CommandPoolCreateInfoSizeOf)
	return CommandPoolCreateInfo{ptr: (*C.VkCommandPoolCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p CommandPoolCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p CommandPoolCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p CommandPoolCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p CommandPoolCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p CommandPoolCreateInfo) GetFlags() CommandPoolCreateFlags {
	return CommandPoolCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p CommandPoolCreateInfo) SetFlags(value CommandPoolCreateFlags) {
	p.ptr.flags = (C.VkCommandPoolCreateFlags)(value)
}

// GetQueueFamilyIndex returns the value in queueFamilyIndex.
func (p CommandPoolCreateInfo) GetQueueFamilyIndex() uint32 {
	return uint32(p.ptr.queueFamilyIndex)
}

// SetQueueFamilyIndex sets the value in queueFamilyIndex.
func (p CommandPoolCreateInfo) SetQueueFamilyIndex(value uint32) {
	p.ptr.queueFamilyIndex = (C.uint32_t)(value)
}

// ComponentMapping wraps VkComponentMapping.
type ComponentMapping struct {
	ptr *C.VkComponentMapping
}

// ComponentMappingNil is a null pointer.
var ComponentMappingNil ComponentMapping

// ComponentMappingSizeOf is the byte size of VkComponentMapping.
const ComponentMappingSizeOf = int(C.sizeof_VkComponentMapping)

// ComponentMappingFromPtr converts a raw pointer to a ComponentMapping.
func ComponentMappingFromPtr(ptr unsafe.Pointer) ComponentMapping {
	return ComponentMapping{ptr: (*C.VkComponentMapping)(ptr)}
}

// ComponentMappingAlloc allocates a continuous block of VkComponentMapping.
func ComponentMappingAlloc(alloc ffi.Allocator, count int) ComponentMapping {
	ptr := alloc.Allocate(ComponentMappingSizeOf * count)
	return ComponentMapping{ptr: (*C.VkComponentMapping)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ComponentMapping) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ComponentMapping) Offset(offset int) ComponentMapping {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ComponentMappingSizeOf)
	return ComponentMapping{ptr: (*C.VkComponentMapping)(ptr)}
}

// GetR returns the value in r.
func (p ComponentMapping) GetR() ComponentSwizzle {
	return ComponentSwizzle(p.ptr.r)
}

// SetR sets the value in r.
func (p ComponentMapping) SetR(value ComponentSwizzle) {
	p.ptr.r = (C.VkComponentSwizzle)(value)
}

// GetG returns the value in g.
func (p ComponentMapping) GetG() ComponentSwizzle {
	return ComponentSwizzle(p.ptr.g)
}

// SetG sets the value in g.
func (p ComponentMapping) SetG(value ComponentSwizzle) {
	p.ptr.g = (C.VkComponentSwizzle)(value)
}

// GetB returns the value in b.
func (p ComponentMapping) GetB() ComponentSwizzle {
	return ComponentSwizzle(p.ptr.b)
}

// SetB sets the value in b.
func (p ComponentMapping) SetB(value ComponentSwizzle) {
	p.ptr.b = (C.VkComponentSwizzle)(value)
}

// GetA returns the value in a.
func (p ComponentMapping) GetA() ComponentSwizzle {
	return ComponentSwizzle(p.ptr.a)
}

// SetA sets the value in a.
func (p ComponentMapping) SetA(value ComponentSwizzle) {
	p.ptr.a = (C.VkComponentSwizzle)(value)
}

// ComputePipelineCreateInfo wraps VkComputePipelineCreateInfo.
type ComputePipelineCreateInfo struct {
	ptr *C.VkComputePipelineCreateInfo
}

// ComputePipelineCreateInfoNil is a null pointer.
var ComputePipelineCreateInfoNil ComputePipelineCreateInfo

// ComputePipelineCreateInfoSizeOf is the byte size of VkComputePipelineCreateInfo.
const ComputePipelineCreateInfoSizeOf = int(C.sizeof_VkComputePipelineCreateInfo)

// ComputePipelineCreateInfoFromPtr converts a raw pointer to a ComputePipelineCreateInfo.
func ComputePipelineCreateInfoFromPtr(ptr unsafe.Pointer) ComputePipelineCreateInfo {
	return ComputePipelineCreateInfo{ptr: (*C.VkComputePipelineCreateInfo)(ptr)}
}

// ComputePipelineCreateInfoAlloc allocates a continuous block of VkComputePipelineCreateInfo.
func ComputePipelineCreateInfoAlloc(alloc ffi.Allocator, count int) ComputePipelineCreateInfo {
	ptr := alloc.Allocate(ComputePipelineCreateInfoSizeOf * count)
	return ComputePipelineCreateInfo{ptr: (*C.VkComputePipelineCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ComputePipelineCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ComputePipelineCreateInfo) Offset(offset int) ComputePipelineCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ComputePipelineCreateInfoSizeOf)
	return ComputePipelineCreateInfo{ptr: (*C.VkComputePipelineCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ComputePipelineCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ComputePipelineCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ComputePipelineCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ComputePipelineCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p ComputePipelineCreateInfo) GetFlags() PipelineCreateFlags {
	return PipelineCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p ComputePipelineCreateInfo) SetFlags(value PipelineCreateFlags) {
	p.ptr.flags = (C.VkPipelineCreateFlags)(value)
}

// RefStage returns pointer to the stage field.
func (p ComputePipelineCreateInfo) RefStage() PipelineShaderStageCreateInfo {
	return PipelineShaderStageCreateInfo{ptr: (*C.VkPipelineShaderStageCreateInfo)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkComputePipelineCreateInfo_stage)))}
}

// GetLayout returns the value in layout.
func (p ComputePipelineCreateInfo) GetLayout() PipelineLayout {
	return PipelineLayout(p.ptr.layout)
}

// SetLayout sets the value in layout.
func (p ComputePipelineCreateInfo) SetLayout(value PipelineLayout) {
	p.ptr.layout = (C.VkPipelineLayout)(value)
}

// GetBasePipelineHandle returns the value in basePipelineHandle.
func (p ComputePipelineCreateInfo) GetBasePipelineHandle() Pipeline {
	return Pipeline(p.ptr.basePipelineHandle)
}

// SetBasePipelineHandle sets the value in basePipelineHandle.
func (p ComputePipelineCreateInfo) SetBasePipelineHandle(value Pipeline) {
	p.ptr.basePipelineHandle = (C.VkPipeline)(value)
}

// GetBasePipelineIndex returns the value in basePipelineIndex.
func (p ComputePipelineCreateInfo) GetBasePipelineIndex() int32 {
	return int32(p.ptr.basePipelineIndex)
}

// SetBasePipelineIndex sets the value in basePipelineIndex.
func (p ComputePipelineCreateInfo) SetBasePipelineIndex(value int32) {
	p.ptr.basePipelineIndex = (C.int32_t)(value)
}

// ConformanceVersion wraps VkConformanceVersion.
type ConformanceVersion struct {
	ptr *C.VkConformanceVersion
}

// ConformanceVersionNil is a null pointer.
var ConformanceVersionNil ConformanceVersion

// ConformanceVersionSizeOf is the byte size of VkConformanceVersion.
const ConformanceVersionSizeOf = int(C.sizeof_VkConformanceVersion)

// ConformanceVersionFromPtr converts a raw pointer to a ConformanceVersion.
func ConformanceVersionFromPtr(ptr unsafe.Pointer) ConformanceVersion {
	return ConformanceVersion{ptr: (*C.VkConformanceVersion)(ptr)}
}

// ConformanceVersionAlloc allocates a continuous block of VkConformanceVersion.
func ConformanceVersionAlloc(alloc ffi.Allocator, count int) ConformanceVersion {
	ptr := alloc.Allocate(ConformanceVersionSizeOf * count)
	return ConformanceVersion{ptr: (*C.VkConformanceVersion)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ConformanceVersion) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ConformanceVersion) Offset(offset int) ConformanceVersion {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ConformanceVersionSizeOf)
	return ConformanceVersion{ptr: (*C.VkConformanceVersion)(ptr)}
}

// GetMajor returns the value in major.
func (p ConformanceVersion) GetMajor() uint8 {
	return uint8(p.ptr.major)
}

// SetMajor sets the value in major.
func (p ConformanceVersion) SetMajor(value uint8) {
	p.ptr.major = (C.uint8_t)(value)
}

// GetMinor returns the value in minor.
func (p ConformanceVersion) GetMinor() uint8 {
	return uint8(p.ptr.minor)
}

// SetMinor sets the value in minor.
func (p ConformanceVersion) SetMinor(value uint8) {
	p.ptr.minor = (C.uint8_t)(value)
}

// GetSubminor returns the value in subminor.
func (p ConformanceVersion) GetSubminor() uint8 {
	return uint8(p.ptr.subminor)
}

// SetSubminor sets the value in subminor.
func (p ConformanceVersion) SetSubminor(value uint8) {
	p.ptr.subminor = (C.uint8_t)(value)
}

// GetPatch returns the value in patch.
func (p ConformanceVersion) GetPatch() uint8 {
	return uint8(p.ptr.patch)
}

// SetPatch sets the value in patch.
func (p ConformanceVersion) SetPatch(value uint8) {
	p.ptr.patch = (C.uint8_t)(value)
}

// CopyBufferInfo2 wraps VkCopyBufferInfo2.
type CopyBufferInfo2 struct {
	ptr *C.VkCopyBufferInfo2
}

// CopyBufferInfo2Nil is a null pointer.
var CopyBufferInfo2Nil CopyBufferInfo2

// CopyBufferInfo2SizeOf is the byte size of VkCopyBufferInfo2.
const CopyBufferInfo2SizeOf = int(C.sizeof_VkCopyBufferInfo2)

// CopyBufferInfo2FromPtr converts a raw pointer to a CopyBufferInfo2.
func CopyBufferInfo2FromPtr(ptr unsafe.Pointer) CopyBufferInfo2 {
	return CopyBufferInfo2{ptr: (*C.VkCopyBufferInfo2)(ptr)}
}

// CopyBufferInfo2Alloc allocates a continuous block of VkCopyBufferInfo2.
func CopyBufferInfo2Alloc(alloc ffi.Allocator, count int) CopyBufferInfo2 {
	ptr := alloc.Allocate(CopyBufferInfo2SizeOf * count)
	return CopyBufferInfo2{ptr: (*C.VkCopyBufferInfo2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p CopyBufferInfo2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p CopyBufferInfo2) Offset(offset int) CopyBufferInfo2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*CopyBufferInfo2SizeOf)
	return CopyBufferInfo2{ptr: (*C.VkCopyBufferInfo2)(ptr)}
}

// GetSType returns the value in sType.
func (p CopyBufferInfo2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p CopyBufferInfo2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p CopyBufferInfo2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p CopyBufferInfo2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcBuffer returns the value in srcBuffer.
func (p CopyBufferInfo2) GetSrcBuffer() Buffer {
	return Buffer(p.ptr.srcBuffer)
}

// SetSrcBuffer sets the value in srcBuffer.
func (p CopyBufferInfo2) SetSrcBuffer(value Buffer) {
	p.ptr.srcBuffer = (C.VkBuffer)(value)
}

// GetDstBuffer returns the value in dstBuffer.
func (p CopyBufferInfo2) GetDstBuffer() Buffer {
	return Buffer(p.ptr.dstBuffer)
}

// SetDstBuffer sets the value in dstBuffer.
func (p CopyBufferInfo2) SetDstBuffer(value Buffer) {
	p.ptr.dstBuffer = (C.VkBuffer)(value)
}

// GetRegionCount returns the value in regionCount.
func (p CopyBufferInfo2) GetRegionCount() uint32 {
	return uint32(p.ptr.regionCount)
}

// SetRegionCount sets the value in regionCount.
func (p CopyBufferInfo2) SetRegionCount(value uint32) {
	p.ptr.regionCount = (C.uint32_t)(value)
}

// GetPRegions returns the value in pRegions.
func (p CopyBufferInfo2) GetPRegions() BufferCopy2 {
	return BufferCopy2{ptr: p.ptr.pRegions}
}

// SetPRegions sets the value in pRegions.
func (p CopyBufferInfo2) SetPRegions(value BufferCopy2) {
	p.ptr.pRegions = value.ptr
}

// CopyBufferToImageInfo2 wraps VkCopyBufferToImageInfo2.
type CopyBufferToImageInfo2 struct {
	ptr *C.VkCopyBufferToImageInfo2
}

// CopyBufferToImageInfo2Nil is a null pointer.
var CopyBufferToImageInfo2Nil CopyBufferToImageInfo2

// CopyBufferToImageInfo2SizeOf is the byte size of VkCopyBufferToImageInfo2.
const CopyBufferToImageInfo2SizeOf = int(C.sizeof_VkCopyBufferToImageInfo2)

// CopyBufferToImageInfo2FromPtr converts a raw pointer to a CopyBufferToImageInfo2.
func CopyBufferToImageInfo2FromPtr(ptr unsafe.Pointer) CopyBufferToImageInfo2 {
	return CopyBufferToImageInfo2{ptr: (*C.VkCopyBufferToImageInfo2)(ptr)}
}

// CopyBufferToImageInfo2Alloc allocates a continuous block of VkCopyBufferToImageInfo2.
func CopyBufferToImageInfo2Alloc(alloc ffi.Allocator, count int) CopyBufferToImageInfo2 {
	ptr := alloc.Allocate(CopyBufferToImageInfo2SizeOf * count)
	return CopyBufferToImageInfo2{ptr: (*C.VkCopyBufferToImageInfo2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p CopyBufferToImageInfo2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p CopyBufferToImageInfo2) Offset(offset int) CopyBufferToImageInfo2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*CopyBufferToImageInfo2SizeOf)
	return CopyBufferToImageInfo2{ptr: (*C.VkCopyBufferToImageInfo2)(ptr)}
}

// GetSType returns the value in sType.
func (p CopyBufferToImageInfo2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p CopyBufferToImageInfo2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p CopyBufferToImageInfo2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p CopyBufferToImageInfo2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcBuffer returns the value in srcBuffer.
func (p CopyBufferToImageInfo2) GetSrcBuffer() Buffer {
	return Buffer(p.ptr.srcBuffer)
}

// SetSrcBuffer sets the value in srcBuffer.
func (p CopyBufferToImageInfo2) SetSrcBuffer(value Buffer) {
	p.ptr.srcBuffer = (C.VkBuffer)(value)
}

// GetDstImage returns the value in dstImage.
func (p CopyBufferToImageInfo2) GetDstImage() Image {
	return Image(p.ptr.dstImage)
}

// SetDstImage sets the value in dstImage.
func (p CopyBufferToImageInfo2) SetDstImage(value Image) {
	p.ptr.dstImage = (C.VkImage)(value)
}

// GetDstImageLayout returns the value in dstImageLayout.
func (p CopyBufferToImageInfo2) GetDstImageLayout() ImageLayout {
	return ImageLayout(p.ptr.dstImageLayout)
}

// SetDstImageLayout sets the value in dstImageLayout.
func (p CopyBufferToImageInfo2) SetDstImageLayout(value ImageLayout) {
	p.ptr.dstImageLayout = (C.VkImageLayout)(value)
}

// GetRegionCount returns the value in regionCount.
func (p CopyBufferToImageInfo2) GetRegionCount() uint32 {
	return uint32(p.ptr.regionCount)
}

// SetRegionCount sets the value in regionCount.
func (p CopyBufferToImageInfo2) SetRegionCount(value uint32) {
	p.ptr.regionCount = (C.uint32_t)(value)
}

// GetPRegions returns the value in pRegions.
func (p CopyBufferToImageInfo2) GetPRegions() BufferImageCopy2 {
	return BufferImageCopy2{ptr: p.ptr.pRegions}
}

// SetPRegions sets the value in pRegions.
func (p CopyBufferToImageInfo2) SetPRegions(value BufferImageCopy2) {
	p.ptr.pRegions = value.ptr
}

// CopyDescriptorSet wraps VkCopyDescriptorSet.
type CopyDescriptorSet struct {
	ptr *C.VkCopyDescriptorSet
}

// CopyDescriptorSetNil is a null pointer.
var CopyDescriptorSetNil CopyDescriptorSet

// CopyDescriptorSetSizeOf is the byte size of VkCopyDescriptorSet.
const CopyDescriptorSetSizeOf = int(C.sizeof_VkCopyDescriptorSet)

// CopyDescriptorSetFromPtr converts a raw pointer to a CopyDescriptorSet.
func CopyDescriptorSetFromPtr(ptr unsafe.Pointer) CopyDescriptorSet {
	return CopyDescriptorSet{ptr: (*C.VkCopyDescriptorSet)(ptr)}
}

// CopyDescriptorSetAlloc allocates a continuous block of VkCopyDescriptorSet.
func CopyDescriptorSetAlloc(alloc ffi.Allocator, count int) CopyDescriptorSet {
	ptr := alloc.Allocate(CopyDescriptorSetSizeOf * count)
	return CopyDescriptorSet{ptr: (*C.VkCopyDescriptorSet)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p CopyDescriptorSet) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p CopyDescriptorSet) Offset(offset int) CopyDescriptorSet {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*CopyDescriptorSetSizeOf)
	return CopyDescriptorSet{ptr: (*C.VkCopyDescriptorSet)(ptr)}
}

// GetSType returns the value in sType.
func (p CopyDescriptorSet) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p CopyDescriptorSet) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p CopyDescriptorSet) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p CopyDescriptorSet) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcSet returns the value in srcSet.
func (p CopyDescriptorSet) GetSrcSet() DescriptorSet {
	return DescriptorSet(p.ptr.srcSet)
}

// SetSrcSet sets the value in srcSet.
func (p CopyDescriptorSet) SetSrcSet(value DescriptorSet) {
	p.ptr.srcSet = (C.VkDescriptorSet)(value)
}

// GetSrcBinding returns the value in srcBinding.
func (p CopyDescriptorSet) GetSrcBinding() uint32 {
	return uint32(p.ptr.srcBinding)
}

// SetSrcBinding sets the value in srcBinding.
func (p CopyDescriptorSet) SetSrcBinding(value uint32) {
	p.ptr.srcBinding = (C.uint32_t)(value)
}

// GetSrcArrayElement returns the value in srcArrayElement.
func (p CopyDescriptorSet) GetSrcArrayElement() uint32 {
	return uint32(p.ptr.srcArrayElement)
}

// SetSrcArrayElement sets the value in srcArrayElement.
func (p CopyDescriptorSet) SetSrcArrayElement(value uint32) {
	p.ptr.srcArrayElement = (C.uint32_t)(value)
}

// GetDstSet returns the value in dstSet.
func (p CopyDescriptorSet) GetDstSet() DescriptorSet {
	return DescriptorSet(p.ptr.dstSet)
}

// SetDstSet sets the value in dstSet.
func (p CopyDescriptorSet) SetDstSet(value DescriptorSet) {
	p.ptr.dstSet = (C.VkDescriptorSet)(value)
}

// GetDstBinding returns the value in dstBinding.
func (p CopyDescriptorSet) GetDstBinding() uint32 {
	return uint32(p.ptr.dstBinding)
}

// SetDstBinding sets the value in dstBinding.
func (p CopyDescriptorSet) SetDstBinding(value uint32) {
	p.ptr.dstBinding = (C.uint32_t)(value)
}

// GetDstArrayElement returns the value in dstArrayElement.
func (p CopyDescriptorSet) GetDstArrayElement() uint32 {
	return uint32(p.ptr.dstArrayElement)
}

// SetDstArrayElement sets the value in dstArrayElement.
func (p CopyDescriptorSet) SetDstArrayElement(value uint32) {
	p.ptr.dstArrayElement = (C.uint32_t)(value)
}

// GetDescriptorCount returns the value in descriptorCount.
func (p CopyDescriptorSet) GetDescriptorCount() uint32 {
	return uint32(p.ptr.descriptorCount)
}

// SetDescriptorCount sets the value in descriptorCount.
func (p CopyDescriptorSet) SetDescriptorCount(value uint32) {
	p.ptr.descriptorCount = (C.uint32_t)(value)
}

// CopyImageInfo2 wraps VkCopyImageInfo2.
type CopyImageInfo2 struct {
	ptr *C.VkCopyImageInfo2
}

// CopyImageInfo2Nil is a null pointer.
var CopyImageInfo2Nil CopyImageInfo2

// CopyImageInfo2SizeOf is the byte size of VkCopyImageInfo2.
const CopyImageInfo2SizeOf = int(C.sizeof_VkCopyImageInfo2)

// CopyImageInfo2FromPtr converts a raw pointer to a CopyImageInfo2.
func CopyImageInfo2FromPtr(ptr unsafe.Pointer) CopyImageInfo2 {
	return CopyImageInfo2{ptr: (*C.VkCopyImageInfo2)(ptr)}
}

// CopyImageInfo2Alloc allocates a continuous block of VkCopyImageInfo2.
func CopyImageInfo2Alloc(alloc ffi.Allocator, count int) CopyImageInfo2 {
	ptr := alloc.Allocate(CopyImageInfo2SizeOf * count)
	return CopyImageInfo2{ptr: (*C.VkCopyImageInfo2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p CopyImageInfo2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p CopyImageInfo2) Offset(offset int) CopyImageInfo2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*CopyImageInfo2SizeOf)
	return CopyImageInfo2{ptr: (*C.VkCopyImageInfo2)(ptr)}
}

// GetSType returns the value in sType.
func (p CopyImageInfo2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p CopyImageInfo2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p CopyImageInfo2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p CopyImageInfo2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcImage returns the value in srcImage.
func (p CopyImageInfo2) GetSrcImage() Image {
	return Image(p.ptr.srcImage)
}

// SetSrcImage sets the value in srcImage.
func (p CopyImageInfo2) SetSrcImage(value Image) {
	p.ptr.srcImage = (C.VkImage)(value)
}

// GetSrcImageLayout returns the value in srcImageLayout.
func (p CopyImageInfo2) GetSrcImageLayout() ImageLayout {
	return ImageLayout(p.ptr.srcImageLayout)
}

// SetSrcImageLayout sets the value in srcImageLayout.
func (p CopyImageInfo2) SetSrcImageLayout(value ImageLayout) {
	p.ptr.srcImageLayout = (C.VkImageLayout)(value)
}

// GetDstImage returns the value in dstImage.
func (p CopyImageInfo2) GetDstImage() Image {
	return Image(p.ptr.dstImage)
}

// SetDstImage sets the value in dstImage.
func (p CopyImageInfo2) SetDstImage(value Image) {
	p.ptr.dstImage = (C.VkImage)(value)
}

// GetDstImageLayout returns the value in dstImageLayout.
func (p CopyImageInfo2) GetDstImageLayout() ImageLayout {
	return ImageLayout(p.ptr.dstImageLayout)
}

// SetDstImageLayout sets the value in dstImageLayout.
func (p CopyImageInfo2) SetDstImageLayout(value ImageLayout) {
	p.ptr.dstImageLayout = (C.VkImageLayout)(value)
}

// GetRegionCount returns the value in regionCount.
func (p CopyImageInfo2) GetRegionCount() uint32 {
	return uint32(p.ptr.regionCount)
}

// SetRegionCount sets the value in regionCount.
func (p CopyImageInfo2) SetRegionCount(value uint32) {
	p.ptr.regionCount = (C.uint32_t)(value)
}

// GetPRegions returns the value in pRegions.
func (p CopyImageInfo2) GetPRegions() ImageCopy2 {
	return ImageCopy2{ptr: p.ptr.pRegions}
}

// SetPRegions sets the value in pRegions.
func (p CopyImageInfo2) SetPRegions(value ImageCopy2) {
	p.ptr.pRegions = value.ptr
}

// CopyImageToBufferInfo2 wraps VkCopyImageToBufferInfo2.
type CopyImageToBufferInfo2 struct {
	ptr *C.VkCopyImageToBufferInfo2
}

// CopyImageToBufferInfo2Nil is a null pointer.
var CopyImageToBufferInfo2Nil CopyImageToBufferInfo2

// CopyImageToBufferInfo2SizeOf is the byte size of VkCopyImageToBufferInfo2.
const CopyImageToBufferInfo2SizeOf = int(C.sizeof_VkCopyImageToBufferInfo2)

// CopyImageToBufferInfo2FromPtr converts a raw pointer to a CopyImageToBufferInfo2.
func CopyImageToBufferInfo2FromPtr(ptr unsafe.Pointer) CopyImageToBufferInfo2 {
	return CopyImageToBufferInfo2{ptr: (*C.VkCopyImageToBufferInfo2)(ptr)}
}

// CopyImageToBufferInfo2Alloc allocates a continuous block of VkCopyImageToBufferInfo2.
func CopyImageToBufferInfo2Alloc(alloc ffi.Allocator, count int) CopyImageToBufferInfo2 {
	ptr := alloc.Allocate(CopyImageToBufferInfo2SizeOf * count)
	return CopyImageToBufferInfo2{ptr: (*C.VkCopyImageToBufferInfo2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p CopyImageToBufferInfo2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p CopyImageToBufferInfo2) Offset(offset int) CopyImageToBufferInfo2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*CopyImageToBufferInfo2SizeOf)
	return CopyImageToBufferInfo2{ptr: (*C.VkCopyImageToBufferInfo2)(ptr)}
}

// GetSType returns the value in sType.
func (p CopyImageToBufferInfo2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p CopyImageToBufferInfo2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p CopyImageToBufferInfo2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p CopyImageToBufferInfo2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcImage returns the value in srcImage.
func (p CopyImageToBufferInfo2) GetSrcImage() Image {
	return Image(p.ptr.srcImage)
}

// SetSrcImage sets the value in srcImage.
func (p CopyImageToBufferInfo2) SetSrcImage(value Image) {
	p.ptr.srcImage = (C.VkImage)(value)
}

// GetSrcImageLayout returns the value in srcImageLayout.
func (p CopyImageToBufferInfo2) GetSrcImageLayout() ImageLayout {
	return ImageLayout(p.ptr.srcImageLayout)
}

// SetSrcImageLayout sets the value in srcImageLayout.
func (p CopyImageToBufferInfo2) SetSrcImageLayout(value ImageLayout) {
	p.ptr.srcImageLayout = (C.VkImageLayout)(value)
}

// GetDstBuffer returns the value in dstBuffer.
func (p CopyImageToBufferInfo2) GetDstBuffer() Buffer {
	return Buffer(p.ptr.dstBuffer)
}

// SetDstBuffer sets the value in dstBuffer.
func (p CopyImageToBufferInfo2) SetDstBuffer(value Buffer) {
	p.ptr.dstBuffer = (C.VkBuffer)(value)
}

// GetRegionCount returns the value in regionCount.
func (p CopyImageToBufferInfo2) GetRegionCount() uint32 {
	return uint32(p.ptr.regionCount)
}

// SetRegionCount sets the value in regionCount.
func (p CopyImageToBufferInfo2) SetRegionCount(value uint32) {
	p.ptr.regionCount = (C.uint32_t)(value)
}

// GetPRegions returns the value in pRegions.
func (p CopyImageToBufferInfo2) GetPRegions() BufferImageCopy2 {
	return BufferImageCopy2{ptr: p.ptr.pRegions}
}

// SetPRegions sets the value in pRegions.
func (p CopyImageToBufferInfo2) SetPRegions(value BufferImageCopy2) {
	p.ptr.pRegions = value.ptr
}

// CopyImageToImageInfo wraps VkCopyImageToImageInfo.
type CopyImageToImageInfo struct {
	ptr *C.VkCopyImageToImageInfo
}

// CopyImageToImageInfoNil is a null pointer.
var CopyImageToImageInfoNil CopyImageToImageInfo

// CopyImageToImageInfoSizeOf is the byte size of VkCopyImageToImageInfo.
const CopyImageToImageInfoSizeOf = int(C.sizeof_VkCopyImageToImageInfo)

// CopyImageToImageInfoFromPtr converts a raw pointer to a CopyImageToImageInfo.
func CopyImageToImageInfoFromPtr(ptr unsafe.Pointer) CopyImageToImageInfo {
	return CopyImageToImageInfo{ptr: (*C.VkCopyImageToImageInfo)(ptr)}
}

// CopyImageToImageInfoAlloc allocates a continuous block of VkCopyImageToImageInfo.
func CopyImageToImageInfoAlloc(alloc ffi.Allocator, count int) CopyImageToImageInfo {
	ptr := alloc.Allocate(CopyImageToImageInfoSizeOf * count)
	return CopyImageToImageInfo{ptr: (*C.VkCopyImageToImageInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p CopyImageToImageInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p CopyImageToImageInfo) Offset(offset int) CopyImageToImageInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*CopyImageToImageInfoSizeOf)
	return CopyImageToImageInfo{ptr: (*C.VkCopyImageToImageInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p CopyImageToImageInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p CopyImageToImageInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p CopyImageToImageInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p CopyImageToImageInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p CopyImageToImageInfo) GetFlags() HostImageCopyFlags {
	return HostImageCopyFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p CopyImageToImageInfo) SetFlags(value HostImageCopyFlags) {
	p.ptr.flags = (C.VkHostImageCopyFlags)(value)
}

// GetSrcImage returns the value in srcImage.
func (p CopyImageToImageInfo) GetSrcImage() Image {
	return Image(p.ptr.srcImage)
}

// SetSrcImage sets the value in srcImage.
func (p CopyImageToImageInfo) SetSrcImage(value Image) {
	p.ptr.srcImage = (C.VkImage)(value)
}

// GetSrcImageLayout returns the value in srcImageLayout.
func (p CopyImageToImageInfo) GetSrcImageLayout() ImageLayout {
	return ImageLayout(p.ptr.srcImageLayout)
}

// SetSrcImageLayout sets the value in srcImageLayout.
func (p CopyImageToImageInfo) SetSrcImageLayout(value ImageLayout) {
	p.ptr.srcImageLayout = (C.VkImageLayout)(value)
}

// GetDstImage returns the value in dstImage.
func (p CopyImageToImageInfo) GetDstImage() Image {
	return Image(p.ptr.dstImage)
}

// SetDstImage sets the value in dstImage.
func (p CopyImageToImageInfo) SetDstImage(value Image) {
	p.ptr.dstImage = (C.VkImage)(value)
}

// GetDstImageLayout returns the value in dstImageLayout.
func (p CopyImageToImageInfo) GetDstImageLayout() ImageLayout {
	return ImageLayout(p.ptr.dstImageLayout)
}

// SetDstImageLayout sets the value in dstImageLayout.
func (p CopyImageToImageInfo) SetDstImageLayout(value ImageLayout) {
	p.ptr.dstImageLayout = (C.VkImageLayout)(value)
}

// GetRegionCount returns the value in regionCount.
func (p CopyImageToImageInfo) GetRegionCount() uint32 {
	return uint32(p.ptr.regionCount)
}

// SetRegionCount sets the value in regionCount.
func (p CopyImageToImageInfo) SetRegionCount(value uint32) {
	p.ptr.regionCount = (C.uint32_t)(value)
}

// GetPRegions returns the value in pRegions.
func (p CopyImageToImageInfo) GetPRegions() ImageCopy2 {
	return ImageCopy2{ptr: p.ptr.pRegions}
}

// SetPRegions sets the value in pRegions.
func (p CopyImageToImageInfo) SetPRegions(value ImageCopy2) {
	p.ptr.pRegions = value.ptr
}

// CopyImageToMemoryInfo wraps VkCopyImageToMemoryInfo.
type CopyImageToMemoryInfo struct {
	ptr *C.VkCopyImageToMemoryInfo
}

// CopyImageToMemoryInfoNil is a null pointer.
var CopyImageToMemoryInfoNil CopyImageToMemoryInfo

// CopyImageToMemoryInfoSizeOf is the byte size of VkCopyImageToMemoryInfo.
const CopyImageToMemoryInfoSizeOf = int(C.sizeof_VkCopyImageToMemoryInfo)

// CopyImageToMemoryInfoFromPtr converts a raw pointer to a CopyImageToMemoryInfo.
func CopyImageToMemoryInfoFromPtr(ptr unsafe.Pointer) CopyImageToMemoryInfo {
	return CopyImageToMemoryInfo{ptr: (*C.VkCopyImageToMemoryInfo)(ptr)}
}

// CopyImageToMemoryInfoAlloc allocates a continuous block of VkCopyImageToMemoryInfo.
func CopyImageToMemoryInfoAlloc(alloc ffi.Allocator, count int) CopyImageToMemoryInfo {
	ptr := alloc.Allocate(CopyImageToMemoryInfoSizeOf * count)
	return CopyImageToMemoryInfo{ptr: (*C.VkCopyImageToMemoryInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p CopyImageToMemoryInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p CopyImageToMemoryInfo) Offset(offset int) CopyImageToMemoryInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*CopyImageToMemoryInfoSizeOf)
	return CopyImageToMemoryInfo{ptr: (*C.VkCopyImageToMemoryInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p CopyImageToMemoryInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p CopyImageToMemoryInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p CopyImageToMemoryInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p CopyImageToMemoryInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p CopyImageToMemoryInfo) GetFlags() HostImageCopyFlags {
	return HostImageCopyFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p CopyImageToMemoryInfo) SetFlags(value HostImageCopyFlags) {
	p.ptr.flags = (C.VkHostImageCopyFlags)(value)
}

// GetSrcImage returns the value in srcImage.
func (p CopyImageToMemoryInfo) GetSrcImage() Image {
	return Image(p.ptr.srcImage)
}

// SetSrcImage sets the value in srcImage.
func (p CopyImageToMemoryInfo) SetSrcImage(value Image) {
	p.ptr.srcImage = (C.VkImage)(value)
}

// GetSrcImageLayout returns the value in srcImageLayout.
func (p CopyImageToMemoryInfo) GetSrcImageLayout() ImageLayout {
	return ImageLayout(p.ptr.srcImageLayout)
}

// SetSrcImageLayout sets the value in srcImageLayout.
func (p CopyImageToMemoryInfo) SetSrcImageLayout(value ImageLayout) {
	p.ptr.srcImageLayout = (C.VkImageLayout)(value)
}

// GetRegionCount returns the value in regionCount.
func (p CopyImageToMemoryInfo) GetRegionCount() uint32 {
	return uint32(p.ptr.regionCount)
}

// SetRegionCount sets the value in regionCount.
func (p CopyImageToMemoryInfo) SetRegionCount(value uint32) {
	p.ptr.regionCount = (C.uint32_t)(value)
}

// GetPRegions returns the value in pRegions.
func (p CopyImageToMemoryInfo) GetPRegions() ImageToMemoryCopy {
	return ImageToMemoryCopy{ptr: p.ptr.pRegions}
}

// SetPRegions sets the value in pRegions.
func (p CopyImageToMemoryInfo) SetPRegions(value ImageToMemoryCopy) {
	p.ptr.pRegions = value.ptr
}

// CopyMemoryToImageInfo wraps VkCopyMemoryToImageInfo.
type CopyMemoryToImageInfo struct {
	ptr *C.VkCopyMemoryToImageInfo
}

// CopyMemoryToImageInfoNil is a null pointer.
var CopyMemoryToImageInfoNil CopyMemoryToImageInfo

// CopyMemoryToImageInfoSizeOf is the byte size of VkCopyMemoryToImageInfo.
const CopyMemoryToImageInfoSizeOf = int(C.sizeof_VkCopyMemoryToImageInfo)

// CopyMemoryToImageInfoFromPtr converts a raw pointer to a CopyMemoryToImageInfo.
func CopyMemoryToImageInfoFromPtr(ptr unsafe.Pointer) CopyMemoryToImageInfo {
	return CopyMemoryToImageInfo{ptr: (*C.VkCopyMemoryToImageInfo)(ptr)}
}

// CopyMemoryToImageInfoAlloc allocates a continuous block of VkCopyMemoryToImageInfo.
func CopyMemoryToImageInfoAlloc(alloc ffi.Allocator, count int) CopyMemoryToImageInfo {
	ptr := alloc.Allocate(CopyMemoryToImageInfoSizeOf * count)
	return CopyMemoryToImageInfo{ptr: (*C.VkCopyMemoryToImageInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p CopyMemoryToImageInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p CopyMemoryToImageInfo) Offset(offset int) CopyMemoryToImageInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*CopyMemoryToImageInfoSizeOf)
	return CopyMemoryToImageInfo{ptr: (*C.VkCopyMemoryToImageInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p CopyMemoryToImageInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p CopyMemoryToImageInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p CopyMemoryToImageInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p CopyMemoryToImageInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p CopyMemoryToImageInfo) GetFlags() HostImageCopyFlags {
	return HostImageCopyFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p CopyMemoryToImageInfo) SetFlags(value HostImageCopyFlags) {
	p.ptr.flags = (C.VkHostImageCopyFlags)(value)
}

// GetDstImage returns the value in dstImage.
func (p CopyMemoryToImageInfo) GetDstImage() Image {
	return Image(p.ptr.dstImage)
}

// SetDstImage sets the value in dstImage.
func (p CopyMemoryToImageInfo) SetDstImage(value Image) {
	p.ptr.dstImage = (C.VkImage)(value)
}

// GetDstImageLayout returns the value in dstImageLayout.
func (p CopyMemoryToImageInfo) GetDstImageLayout() ImageLayout {
	return ImageLayout(p.ptr.dstImageLayout)
}

// SetDstImageLayout sets the value in dstImageLayout.
func (p CopyMemoryToImageInfo) SetDstImageLayout(value ImageLayout) {
	p.ptr.dstImageLayout = (C.VkImageLayout)(value)
}

// GetRegionCount returns the value in regionCount.
func (p CopyMemoryToImageInfo) GetRegionCount() uint32 {
	return uint32(p.ptr.regionCount)
}

// SetRegionCount sets the value in regionCount.
func (p CopyMemoryToImageInfo) SetRegionCount(value uint32) {
	p.ptr.regionCount = (C.uint32_t)(value)
}

// GetPRegions returns the value in pRegions.
func (p CopyMemoryToImageInfo) GetPRegions() MemoryToImageCopy {
	return MemoryToImageCopy{ptr: p.ptr.pRegions}
}

// SetPRegions sets the value in pRegions.
func (p CopyMemoryToImageInfo) SetPRegions(value MemoryToImageCopy) {
	p.ptr.pRegions = value.ptr
}

// DependencyInfo wraps VkDependencyInfo.
type DependencyInfo struct {
	ptr *C.VkDependencyInfo
}

// DependencyInfoNil is a null pointer.
var DependencyInfoNil DependencyInfo

// DependencyInfoSizeOf is the byte size of VkDependencyInfo.
const DependencyInfoSizeOf = int(C.sizeof_VkDependencyInfo)

// DependencyInfoFromPtr converts a raw pointer to a DependencyInfo.
func DependencyInfoFromPtr(ptr unsafe.Pointer) DependencyInfo {
	return DependencyInfo{ptr: (*C.VkDependencyInfo)(ptr)}
}

// DependencyInfoAlloc allocates a continuous block of VkDependencyInfo.
func DependencyInfoAlloc(alloc ffi.Allocator, count int) DependencyInfo {
	ptr := alloc.Allocate(DependencyInfoSizeOf * count)
	return DependencyInfo{ptr: (*C.VkDependencyInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DependencyInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DependencyInfo) Offset(offset int) DependencyInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DependencyInfoSizeOf)
	return DependencyInfo{ptr: (*C.VkDependencyInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DependencyInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DependencyInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DependencyInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DependencyInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDependencyFlags returns the value in dependencyFlags.
func (p DependencyInfo) GetDependencyFlags() DependencyFlags {
	return DependencyFlags(p.ptr.dependencyFlags)
}

// SetDependencyFlags sets the value in dependencyFlags.
func (p DependencyInfo) SetDependencyFlags(value DependencyFlags) {
	p.ptr.dependencyFlags = (C.VkDependencyFlags)(value)
}

// GetMemoryBarrierCount returns the value in memoryBarrierCount.
func (p DependencyInfo) GetMemoryBarrierCount() uint32 {
	return uint32(p.ptr.memoryBarrierCount)
}

// SetMemoryBarrierCount sets the value in memoryBarrierCount.
func (p DependencyInfo) SetMemoryBarrierCount(value uint32) {
	p.ptr.memoryBarrierCount = (C.uint32_t)(value)
}

// GetPMemoryBarriers returns the value in pMemoryBarriers.
func (p DependencyInfo) GetPMemoryBarriers() MemoryBarrier2 {
	return MemoryBarrier2{ptr: p.ptr.pMemoryBarriers}
}

// SetPMemoryBarriers sets the value in pMemoryBarriers.
func (p DependencyInfo) SetPMemoryBarriers(value MemoryBarrier2) {
	p.ptr.pMemoryBarriers = value.ptr
}

// GetBufferMemoryBarrierCount returns the value in bufferMemoryBarrierCount.
func (p DependencyInfo) GetBufferMemoryBarrierCount() uint32 {
	return uint32(p.ptr.bufferMemoryBarrierCount)
}

// SetBufferMemoryBarrierCount sets the value in bufferMemoryBarrierCount.
func (p DependencyInfo) SetBufferMemoryBarrierCount(value uint32) {
	p.ptr.bufferMemoryBarrierCount = (C.uint32_t)(value)
}

// GetPBufferMemoryBarriers returns the value in pBufferMemoryBarriers.
func (p DependencyInfo) GetPBufferMemoryBarriers() BufferMemoryBarrier2 {
	return BufferMemoryBarrier2{ptr: p.ptr.pBufferMemoryBarriers}
}

// SetPBufferMemoryBarriers sets the value in pBufferMemoryBarriers.
func (p DependencyInfo) SetPBufferMemoryBarriers(value BufferMemoryBarrier2) {
	p.ptr.pBufferMemoryBarriers = value.ptr
}

// GetImageMemoryBarrierCount returns the value in imageMemoryBarrierCount.
func (p DependencyInfo) GetImageMemoryBarrierCount() uint32 {
	return uint32(p.ptr.imageMemoryBarrierCount)
}

// SetImageMemoryBarrierCount sets the value in imageMemoryBarrierCount.
func (p DependencyInfo) SetImageMemoryBarrierCount(value uint32) {
	p.ptr.imageMemoryBarrierCount = (C.uint32_t)(value)
}

// GetPImageMemoryBarriers returns the value in pImageMemoryBarriers.
func (p DependencyInfo) GetPImageMemoryBarriers() ImageMemoryBarrier2 {
	return ImageMemoryBarrier2{ptr: p.ptr.pImageMemoryBarriers}
}

// SetPImageMemoryBarriers sets the value in pImageMemoryBarriers.
func (p DependencyInfo) SetPImageMemoryBarriers(value ImageMemoryBarrier2) {
	p.ptr.pImageMemoryBarriers = value.ptr
}

// DescriptorBufferInfo wraps VkDescriptorBufferInfo.
type DescriptorBufferInfo struct {
	ptr *C.VkDescriptorBufferInfo
}

// DescriptorBufferInfoNil is a null pointer.
var DescriptorBufferInfoNil DescriptorBufferInfo

// DescriptorBufferInfoSizeOf is the byte size of VkDescriptorBufferInfo.
const DescriptorBufferInfoSizeOf = int(C.sizeof_VkDescriptorBufferInfo)

// DescriptorBufferInfoFromPtr converts a raw pointer to a DescriptorBufferInfo.
func DescriptorBufferInfoFromPtr(ptr unsafe.Pointer) DescriptorBufferInfo {
	return DescriptorBufferInfo{ptr: (*C.VkDescriptorBufferInfo)(ptr)}
}

// DescriptorBufferInfoAlloc allocates a continuous block of VkDescriptorBufferInfo.
func DescriptorBufferInfoAlloc(alloc ffi.Allocator, count int) DescriptorBufferInfo {
	ptr := alloc.Allocate(DescriptorBufferInfoSizeOf * count)
	return DescriptorBufferInfo{ptr: (*C.VkDescriptorBufferInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DescriptorBufferInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DescriptorBufferInfo) Offset(offset int) DescriptorBufferInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DescriptorBufferInfoSizeOf)
	return DescriptorBufferInfo{ptr: (*C.VkDescriptorBufferInfo)(ptr)}
}

// GetBuffer returns the value in buffer.
func (p DescriptorBufferInfo) GetBuffer() Buffer {
	return Buffer(p.ptr.buffer)
}

// SetBuffer sets the value in buffer.
func (p DescriptorBufferInfo) SetBuffer(value Buffer) {
	p.ptr.buffer = (C.VkBuffer)(value)
}

// GetOffset returns the value in offset.
func (p DescriptorBufferInfo) GetOffset() DeviceSize {
	return DeviceSize(p.ptr.offset)
}

// SetOffset sets the value in offset.
func (p DescriptorBufferInfo) SetOffset(value DeviceSize) {
	p.ptr.offset = (C.VkDeviceSize)(value)
}

// GetRange returns the value in range.
func (p DescriptorBufferInfo) GetRange() DeviceSize {
	return DeviceSize(p.ptr._range)
}

// SetRange sets the value in range.
func (p DescriptorBufferInfo) SetRange(value DeviceSize) {
	p.ptr._range = (C.VkDeviceSize)(value)
}

// DescriptorImageInfo wraps VkDescriptorImageInfo.
type DescriptorImageInfo struct {
	ptr *C.VkDescriptorImageInfo
}

// DescriptorImageInfoNil is a null pointer.
var DescriptorImageInfoNil DescriptorImageInfo

// DescriptorImageInfoSizeOf is the byte size of VkDescriptorImageInfo.
const DescriptorImageInfoSizeOf = int(C.sizeof_VkDescriptorImageInfo)

// DescriptorImageInfoFromPtr converts a raw pointer to a DescriptorImageInfo.
func DescriptorImageInfoFromPtr(ptr unsafe.Pointer) DescriptorImageInfo {
	return DescriptorImageInfo{ptr: (*C.VkDescriptorImageInfo)(ptr)}
}

// DescriptorImageInfoAlloc allocates a continuous block of VkDescriptorImageInfo.
func DescriptorImageInfoAlloc(alloc ffi.Allocator, count int) DescriptorImageInfo {
	ptr := alloc.Allocate(DescriptorImageInfoSizeOf * count)
	return DescriptorImageInfo{ptr: (*C.VkDescriptorImageInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DescriptorImageInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DescriptorImageInfo) Offset(offset int) DescriptorImageInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DescriptorImageInfoSizeOf)
	return DescriptorImageInfo{ptr: (*C.VkDescriptorImageInfo)(ptr)}
}

// GetSampler returns the value in sampler.
func (p DescriptorImageInfo) GetSampler() Sampler {
	return Sampler(p.ptr.sampler)
}

// SetSampler sets the value in sampler.
func (p DescriptorImageInfo) SetSampler(value Sampler) {
	p.ptr.sampler = (C.VkSampler)(value)
}

// GetImageView returns the value in imageView.
func (p DescriptorImageInfo) GetImageView() ImageView {
	return ImageView(p.ptr.imageView)
}

// SetImageView sets the value in imageView.
func (p DescriptorImageInfo) SetImageView(value ImageView) {
	p.ptr.imageView = (C.VkImageView)(value)
}

// GetImageLayout returns the value in imageLayout.
func (p DescriptorImageInfo) GetImageLayout() ImageLayout {
	return ImageLayout(p.ptr.imageLayout)
}

// SetImageLayout sets the value in imageLayout.
func (p DescriptorImageInfo) SetImageLayout(value ImageLayout) {
	p.ptr.imageLayout = (C.VkImageLayout)(value)
}

// DescriptorPoolCreateInfo wraps VkDescriptorPoolCreateInfo.
type DescriptorPoolCreateInfo struct {
	ptr *C.VkDescriptorPoolCreateInfo
}

// DescriptorPoolCreateInfoNil is a null pointer.
var DescriptorPoolCreateInfoNil DescriptorPoolCreateInfo

// DescriptorPoolCreateInfoSizeOf is the byte size of VkDescriptorPoolCreateInfo.
const DescriptorPoolCreateInfoSizeOf = int(C.sizeof_VkDescriptorPoolCreateInfo)

// DescriptorPoolCreateInfoFromPtr converts a raw pointer to a DescriptorPoolCreateInfo.
func DescriptorPoolCreateInfoFromPtr(ptr unsafe.Pointer) DescriptorPoolCreateInfo {
	return DescriptorPoolCreateInfo{ptr: (*C.VkDescriptorPoolCreateInfo)(ptr)}
}

// DescriptorPoolCreateInfoAlloc allocates a continuous block of VkDescriptorPoolCreateInfo.
func DescriptorPoolCreateInfoAlloc(alloc ffi.Allocator, count int) DescriptorPoolCreateInfo {
	ptr := alloc.Allocate(DescriptorPoolCreateInfoSizeOf * count)
	return DescriptorPoolCreateInfo{ptr: (*C.VkDescriptorPoolCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DescriptorPoolCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DescriptorPoolCreateInfo) Offset(offset int) DescriptorPoolCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DescriptorPoolCreateInfoSizeOf)
	return DescriptorPoolCreateInfo{ptr: (*C.VkDescriptorPoolCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DescriptorPoolCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DescriptorPoolCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DescriptorPoolCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DescriptorPoolCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p DescriptorPoolCreateInfo) GetFlags() DescriptorPoolCreateFlags {
	return DescriptorPoolCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p DescriptorPoolCreateInfo) SetFlags(value DescriptorPoolCreateFlags) {
	p.ptr.flags = (C.VkDescriptorPoolCreateFlags)(value)
}

// GetMaxSets returns the value in maxSets.
func (p DescriptorPoolCreateInfo) GetMaxSets() uint32 {
	return uint32(p.ptr.maxSets)
}

// SetMaxSets sets the value in maxSets.
func (p DescriptorPoolCreateInfo) SetMaxSets(value uint32) {
	p.ptr.maxSets = (C.uint32_t)(value)
}

// GetPoolSizeCount returns the value in poolSizeCount.
func (p DescriptorPoolCreateInfo) GetPoolSizeCount() uint32 {
	return uint32(p.ptr.poolSizeCount)
}

// SetPoolSizeCount sets the value in poolSizeCount.
func (p DescriptorPoolCreateInfo) SetPoolSizeCount(value uint32) {
	p.ptr.poolSizeCount = (C.uint32_t)(value)
}

// GetPPoolSizes returns the value in pPoolSizes.
func (p DescriptorPoolCreateInfo) GetPPoolSizes() DescriptorPoolSize {
	return DescriptorPoolSize{ptr: p.ptr.pPoolSizes}
}

// SetPPoolSizes sets the value in pPoolSizes.
func (p DescriptorPoolCreateInfo) SetPPoolSizes(value DescriptorPoolSize) {
	p.ptr.pPoolSizes = value.ptr
}

// DescriptorPoolInlineUniformBlockCreateInfo wraps VkDescriptorPoolInlineUniformBlockCreateInfo.
type DescriptorPoolInlineUniformBlockCreateInfo struct {
	ptr *C.VkDescriptorPoolInlineUniformBlockCreateInfo
}

// DescriptorPoolInlineUniformBlockCreateInfoNil is a null pointer.
var DescriptorPoolInlineUniformBlockCreateInfoNil DescriptorPoolInlineUniformBlockCreateInfo

// DescriptorPoolInlineUniformBlockCreateInfoSizeOf is the byte size of VkDescriptorPoolInlineUniformBlockCreateInfo.
const DescriptorPoolInlineUniformBlockCreateInfoSizeOf = int(C.sizeof_VkDescriptorPoolInlineUniformBlockCreateInfo)

// DescriptorPoolInlineUniformBlockCreateInfoFromPtr converts a raw pointer to a DescriptorPoolInlineUniformBlockCreateInfo.
func DescriptorPoolInlineUniformBlockCreateInfoFromPtr(ptr unsafe.Pointer) DescriptorPoolInlineUniformBlockCreateInfo {
	return DescriptorPoolInlineUniformBlockCreateInfo{ptr: (*C.VkDescriptorPoolInlineUniformBlockCreateInfo)(ptr)}
}

// DescriptorPoolInlineUniformBlockCreateInfoAlloc allocates a continuous block of VkDescriptorPoolInlineUniformBlockCreateInfo.
func DescriptorPoolInlineUniformBlockCreateInfoAlloc(alloc ffi.Allocator, count int) DescriptorPoolInlineUniformBlockCreateInfo {
	ptr := alloc.Allocate(DescriptorPoolInlineUniformBlockCreateInfoSizeOf * count)
	return DescriptorPoolInlineUniformBlockCreateInfo{ptr: (*C.VkDescriptorPoolInlineUniformBlockCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DescriptorPoolInlineUniformBlockCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DescriptorPoolInlineUniformBlockCreateInfo) Offset(offset int) DescriptorPoolInlineUniformBlockCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DescriptorPoolInlineUniformBlockCreateInfoSizeOf)
	return DescriptorPoolInlineUniformBlockCreateInfo{ptr: (*C.VkDescriptorPoolInlineUniformBlockCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DescriptorPoolInlineUniformBlockCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DescriptorPoolInlineUniformBlockCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DescriptorPoolInlineUniformBlockCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DescriptorPoolInlineUniformBlockCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMaxInlineUniformBlockBindings returns the value in maxInlineUniformBlockBindings.
func (p DescriptorPoolInlineUniformBlockCreateInfo) GetMaxInlineUniformBlockBindings() uint32 {
	return uint32(p.ptr.maxInlineUniformBlockBindings)
}

// SetMaxInlineUniformBlockBindings sets the value in maxInlineUniformBlockBindings.
func (p DescriptorPoolInlineUniformBlockCreateInfo) SetMaxInlineUniformBlockBindings(value uint32) {
	p.ptr.maxInlineUniformBlockBindings = (C.uint32_t)(value)
}

// DescriptorPoolSize wraps VkDescriptorPoolSize.
type DescriptorPoolSize struct {
	ptr *C.VkDescriptorPoolSize
}

// DescriptorPoolSizeNil is a null pointer.
var DescriptorPoolSizeNil DescriptorPoolSize

// DescriptorPoolSizeSizeOf is the byte size of VkDescriptorPoolSize.
const DescriptorPoolSizeSizeOf = int(C.sizeof_VkDescriptorPoolSize)

// DescriptorPoolSizeFromPtr converts a raw pointer to a DescriptorPoolSize.
func DescriptorPoolSizeFromPtr(ptr unsafe.Pointer) DescriptorPoolSize {
	return DescriptorPoolSize{ptr: (*C.VkDescriptorPoolSize)(ptr)}
}

// DescriptorPoolSizeAlloc allocates a continuous block of VkDescriptorPoolSize.
func DescriptorPoolSizeAlloc(alloc ffi.Allocator, count int) DescriptorPoolSize {
	ptr := alloc.Allocate(DescriptorPoolSizeSizeOf * count)
	return DescriptorPoolSize{ptr: (*C.VkDescriptorPoolSize)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DescriptorPoolSize) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DescriptorPoolSize) Offset(offset int) DescriptorPoolSize {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DescriptorPoolSizeSizeOf)
	return DescriptorPoolSize{ptr: (*C.VkDescriptorPoolSize)(ptr)}
}

// GetType returns the value in type.
func (p DescriptorPoolSize) GetType() DescriptorType {
	return DescriptorType(p.ptr._type)
}

// SetType sets the value in type.
func (p DescriptorPoolSize) SetType(value DescriptorType) {
	p.ptr._type = (C.VkDescriptorType)(value)
}

// GetDescriptorCount returns the value in descriptorCount.
func (p DescriptorPoolSize) GetDescriptorCount() uint32 {
	return uint32(p.ptr.descriptorCount)
}

// SetDescriptorCount sets the value in descriptorCount.
func (p DescriptorPoolSize) SetDescriptorCount(value uint32) {
	p.ptr.descriptorCount = (C.uint32_t)(value)
}

// DescriptorSetAllocateInfo wraps VkDescriptorSetAllocateInfo.
type DescriptorSetAllocateInfo struct {
	ptr *C.VkDescriptorSetAllocateInfo
}

// DescriptorSetAllocateInfoNil is a null pointer.
var DescriptorSetAllocateInfoNil DescriptorSetAllocateInfo

// DescriptorSetAllocateInfoSizeOf is the byte size of VkDescriptorSetAllocateInfo.
const DescriptorSetAllocateInfoSizeOf = int(C.sizeof_VkDescriptorSetAllocateInfo)

// DescriptorSetAllocateInfoFromPtr converts a raw pointer to a DescriptorSetAllocateInfo.
func DescriptorSetAllocateInfoFromPtr(ptr unsafe.Pointer) DescriptorSetAllocateInfo {
	return DescriptorSetAllocateInfo{ptr: (*C.VkDescriptorSetAllocateInfo)(ptr)}
}

// DescriptorSetAllocateInfoAlloc allocates a continuous block of VkDescriptorSetAllocateInfo.
func DescriptorSetAllocateInfoAlloc(alloc ffi.Allocator, count int) DescriptorSetAllocateInfo {
	ptr := alloc.Allocate(DescriptorSetAllocateInfoSizeOf * count)
	return DescriptorSetAllocateInfo{ptr: (*C.VkDescriptorSetAllocateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DescriptorSetAllocateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DescriptorSetAllocateInfo) Offset(offset int) DescriptorSetAllocateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DescriptorSetAllocateInfoSizeOf)
	return DescriptorSetAllocateInfo{ptr: (*C.VkDescriptorSetAllocateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DescriptorSetAllocateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DescriptorSetAllocateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DescriptorSetAllocateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DescriptorSetAllocateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDescriptorPool returns the value in descriptorPool.
func (p DescriptorSetAllocateInfo) GetDescriptorPool() DescriptorPool {
	return DescriptorPool(p.ptr.descriptorPool)
}

// SetDescriptorPool sets the value in descriptorPool.
func (p DescriptorSetAllocateInfo) SetDescriptorPool(value DescriptorPool) {
	p.ptr.descriptorPool = (C.VkDescriptorPool)(value)
}

// GetDescriptorSetCount returns the value in descriptorSetCount.
func (p DescriptorSetAllocateInfo) GetDescriptorSetCount() uint32 {
	return uint32(p.ptr.descriptorSetCount)
}

// SetDescriptorSetCount sets the value in descriptorSetCount.
func (p DescriptorSetAllocateInfo) SetDescriptorSetCount(value uint32) {
	p.ptr.descriptorSetCount = (C.uint32_t)(value)
}

// GetPSetLayouts returns the value in pSetLayouts.
func (p DescriptorSetAllocateInfo) GetPSetLayouts() ffi.Ref[DescriptorSetLayout] {
	return ffi.RefFromPtr[DescriptorSetLayout](unsafe.Pointer(p.ptr.pSetLayouts))
}

// SetPSetLayouts sets the value in pSetLayouts.
func (p DescriptorSetAllocateInfo) SetPSetLayouts(value ffi.Ref[DescriptorSetLayout]) {
	p.ptr.pSetLayouts = (*C.VkDescriptorSetLayout)(value.Raw())
}

// DescriptorSetLayoutBinding wraps VkDescriptorSetLayoutBinding.
type DescriptorSetLayoutBinding struct {
	ptr *C.VkDescriptorSetLayoutBinding
}

// DescriptorSetLayoutBindingNil is a null pointer.
var DescriptorSetLayoutBindingNil DescriptorSetLayoutBinding

// DescriptorSetLayoutBindingSizeOf is the byte size of VkDescriptorSetLayoutBinding.
const DescriptorSetLayoutBindingSizeOf = int(C.sizeof_VkDescriptorSetLayoutBinding)

// DescriptorSetLayoutBindingFromPtr converts a raw pointer to a DescriptorSetLayoutBinding.
func DescriptorSetLayoutBindingFromPtr(ptr unsafe.Pointer) DescriptorSetLayoutBinding {
	return DescriptorSetLayoutBinding{ptr: (*C.VkDescriptorSetLayoutBinding)(ptr)}
}

// DescriptorSetLayoutBindingAlloc allocates a continuous block of VkDescriptorSetLayoutBinding.
func DescriptorSetLayoutBindingAlloc(alloc ffi.Allocator, count int) DescriptorSetLayoutBinding {
	ptr := alloc.Allocate(DescriptorSetLayoutBindingSizeOf * count)
	return DescriptorSetLayoutBinding{ptr: (*C.VkDescriptorSetLayoutBinding)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DescriptorSetLayoutBinding) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DescriptorSetLayoutBinding) Offset(offset int) DescriptorSetLayoutBinding {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DescriptorSetLayoutBindingSizeOf)
	return DescriptorSetLayoutBinding{ptr: (*C.VkDescriptorSetLayoutBinding)(ptr)}
}

// GetBinding returns the value in binding.
func (p DescriptorSetLayoutBinding) GetBinding() uint32 {
	return uint32(p.ptr.binding)
}

// SetBinding sets the value in binding.
func (p DescriptorSetLayoutBinding) SetBinding(value uint32) {
	p.ptr.binding = (C.uint32_t)(value)
}

// GetDescriptorType returns the value in descriptorType.
func (p DescriptorSetLayoutBinding) GetDescriptorType() DescriptorType {
	return DescriptorType(p.ptr.descriptorType)
}

// SetDescriptorType sets the value in descriptorType.
func (p DescriptorSetLayoutBinding) SetDescriptorType(value DescriptorType) {
	p.ptr.descriptorType = (C.VkDescriptorType)(value)
}

// GetDescriptorCount returns the value in descriptorCount.
func (p DescriptorSetLayoutBinding) GetDescriptorCount() uint32 {
	return uint32(p.ptr.descriptorCount)
}

// SetDescriptorCount sets the value in descriptorCount.
func (p DescriptorSetLayoutBinding) SetDescriptorCount(value uint32) {
	p.ptr.descriptorCount = (C.uint32_t)(value)
}

// GetStageFlags returns the value in stageFlags.
func (p DescriptorSetLayoutBinding) GetStageFlags() ShaderStageFlags {
	return ShaderStageFlags(p.ptr.stageFlags)
}

// SetStageFlags sets the value in stageFlags.
func (p DescriptorSetLayoutBinding) SetStageFlags(value ShaderStageFlags) {
	p.ptr.stageFlags = (C.VkShaderStageFlags)(value)
}

// GetPImmutableSamplers returns the value in pImmutableSamplers.
func (p DescriptorSetLayoutBinding) GetPImmutableSamplers() ffi.Ref[Sampler] {
	return ffi.RefFromPtr[Sampler](unsafe.Pointer(p.ptr.pImmutableSamplers))
}

// SetPImmutableSamplers sets the value in pImmutableSamplers.
func (p DescriptorSetLayoutBinding) SetPImmutableSamplers(value ffi.Ref[Sampler]) {
	p.ptr.pImmutableSamplers = (*C.VkSampler)(value.Raw())
}

// DescriptorSetLayoutBindingFlagsCreateInfo wraps VkDescriptorSetLayoutBindingFlagsCreateInfo.
type DescriptorSetLayoutBindingFlagsCreateInfo struct {
	ptr *C.VkDescriptorSetLayoutBindingFlagsCreateInfo
}

// DescriptorSetLayoutBindingFlagsCreateInfoNil is a null pointer.
var DescriptorSetLayoutBindingFlagsCreateInfoNil DescriptorSetLayoutBindingFlagsCreateInfo

// DescriptorSetLayoutBindingFlagsCreateInfoSizeOf is the byte size of VkDescriptorSetLayoutBindingFlagsCreateInfo.
const DescriptorSetLayoutBindingFlagsCreateInfoSizeOf = int(C.sizeof_VkDescriptorSetLayoutBindingFlagsCreateInfo)

// DescriptorSetLayoutBindingFlagsCreateInfoFromPtr converts a raw pointer to a DescriptorSetLayoutBindingFlagsCreateInfo.
func DescriptorSetLayoutBindingFlagsCreateInfoFromPtr(ptr unsafe.Pointer) DescriptorSetLayoutBindingFlagsCreateInfo {
	return DescriptorSetLayoutBindingFlagsCreateInfo{ptr: (*C.VkDescriptorSetLayoutBindingFlagsCreateInfo)(ptr)}
}

// DescriptorSetLayoutBindingFlagsCreateInfoAlloc allocates a continuous block of VkDescriptorSetLayoutBindingFlagsCreateInfo.
func DescriptorSetLayoutBindingFlagsCreateInfoAlloc(alloc ffi.Allocator, count int) DescriptorSetLayoutBindingFlagsCreateInfo {
	ptr := alloc.Allocate(DescriptorSetLayoutBindingFlagsCreateInfoSizeOf * count)
	return DescriptorSetLayoutBindingFlagsCreateInfo{ptr: (*C.VkDescriptorSetLayoutBindingFlagsCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DescriptorSetLayoutBindingFlagsCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DescriptorSetLayoutBindingFlagsCreateInfo) Offset(offset int) DescriptorSetLayoutBindingFlagsCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DescriptorSetLayoutBindingFlagsCreateInfoSizeOf)
	return DescriptorSetLayoutBindingFlagsCreateInfo{ptr: (*C.VkDescriptorSetLayoutBindingFlagsCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DescriptorSetLayoutBindingFlagsCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DescriptorSetLayoutBindingFlagsCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DescriptorSetLayoutBindingFlagsCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DescriptorSetLayoutBindingFlagsCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetBindingCount returns the value in bindingCount.
func (p DescriptorSetLayoutBindingFlagsCreateInfo) GetBindingCount() uint32 {
	return uint32(p.ptr.bindingCount)
}

// SetBindingCount sets the value in bindingCount.
func (p DescriptorSetLayoutBindingFlagsCreateInfo) SetBindingCount(value uint32) {
	p.ptr.bindingCount = (C.uint32_t)(value)
}

// GetPBindingFlags returns the value in pBindingFlags.
func (p DescriptorSetLayoutBindingFlagsCreateInfo) GetPBindingFlags() ffi.Ref[DescriptorBindingFlags] {
	return ffi.RefFromPtr[DescriptorBindingFlags](unsafe.Pointer(p.ptr.pBindingFlags))
}

// SetPBindingFlags sets the value in pBindingFlags.
func (p DescriptorSetLayoutBindingFlagsCreateInfo) SetPBindingFlags(value ffi.Ref[DescriptorBindingFlags]) {
	p.ptr.pBindingFlags = (*C.VkDescriptorBindingFlags)(value.Raw())
}

// DescriptorSetLayoutCreateInfo wraps VkDescriptorSetLayoutCreateInfo.
type DescriptorSetLayoutCreateInfo struct {
	ptr *C.VkDescriptorSetLayoutCreateInfo
}

// DescriptorSetLayoutCreateInfoNil is a null pointer.
var DescriptorSetLayoutCreateInfoNil DescriptorSetLayoutCreateInfo

// DescriptorSetLayoutCreateInfoSizeOf is the byte size of VkDescriptorSetLayoutCreateInfo.
const DescriptorSetLayoutCreateInfoSizeOf = int(C.sizeof_VkDescriptorSetLayoutCreateInfo)

// DescriptorSetLayoutCreateInfoFromPtr converts a raw pointer to a DescriptorSetLayoutCreateInfo.
func DescriptorSetLayoutCreateInfoFromPtr(ptr unsafe.Pointer) DescriptorSetLayoutCreateInfo {
	return DescriptorSetLayoutCreateInfo{ptr: (*C.VkDescriptorSetLayoutCreateInfo)(ptr)}
}

// DescriptorSetLayoutCreateInfoAlloc allocates a continuous block of VkDescriptorSetLayoutCreateInfo.
func DescriptorSetLayoutCreateInfoAlloc(alloc ffi.Allocator, count int) DescriptorSetLayoutCreateInfo {
	ptr := alloc.Allocate(DescriptorSetLayoutCreateInfoSizeOf * count)
	return DescriptorSetLayoutCreateInfo{ptr: (*C.VkDescriptorSetLayoutCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DescriptorSetLayoutCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DescriptorSetLayoutCreateInfo) Offset(offset int) DescriptorSetLayoutCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DescriptorSetLayoutCreateInfoSizeOf)
	return DescriptorSetLayoutCreateInfo{ptr: (*C.VkDescriptorSetLayoutCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DescriptorSetLayoutCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DescriptorSetLayoutCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DescriptorSetLayoutCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DescriptorSetLayoutCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p DescriptorSetLayoutCreateInfo) GetFlags() DescriptorSetLayoutCreateFlags {
	return DescriptorSetLayoutCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p DescriptorSetLayoutCreateInfo) SetFlags(value DescriptorSetLayoutCreateFlags) {
	p.ptr.flags = (C.VkDescriptorSetLayoutCreateFlags)(value)
}

// GetBindingCount returns the value in bindingCount.
func (p DescriptorSetLayoutCreateInfo) GetBindingCount() uint32 {
	return uint32(p.ptr.bindingCount)
}

// SetBindingCount sets the value in bindingCount.
func (p DescriptorSetLayoutCreateInfo) SetBindingCount(value uint32) {
	p.ptr.bindingCount = (C.uint32_t)(value)
}

// GetPBindings returns the value in pBindings.
func (p DescriptorSetLayoutCreateInfo) GetPBindings() DescriptorSetLayoutBinding {
	return DescriptorSetLayoutBinding{ptr: p.ptr.pBindings}
}

// SetPBindings sets the value in pBindings.
func (p DescriptorSetLayoutCreateInfo) SetPBindings(value DescriptorSetLayoutBinding) {
	p.ptr.pBindings = value.ptr
}

// DescriptorSetLayoutSupport wraps VkDescriptorSetLayoutSupport.
type DescriptorSetLayoutSupport struct {
	ptr *C.VkDescriptorSetLayoutSupport
}

// DescriptorSetLayoutSupportNil is a null pointer.
var DescriptorSetLayoutSupportNil DescriptorSetLayoutSupport

// DescriptorSetLayoutSupportSizeOf is the byte size of VkDescriptorSetLayoutSupport.
const DescriptorSetLayoutSupportSizeOf = int(C.sizeof_VkDescriptorSetLayoutSupport)

// DescriptorSetLayoutSupportFromPtr converts a raw pointer to a DescriptorSetLayoutSupport.
func DescriptorSetLayoutSupportFromPtr(ptr unsafe.Pointer) DescriptorSetLayoutSupport {
	return DescriptorSetLayoutSupport{ptr: (*C.VkDescriptorSetLayoutSupport)(ptr)}
}

// DescriptorSetLayoutSupportAlloc allocates a continuous block of VkDescriptorSetLayoutSupport.
func DescriptorSetLayoutSupportAlloc(alloc ffi.Allocator, count int) DescriptorSetLayoutSupport {
	ptr := alloc.Allocate(DescriptorSetLayoutSupportSizeOf * count)
	return DescriptorSetLayoutSupport{ptr: (*C.VkDescriptorSetLayoutSupport)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DescriptorSetLayoutSupport) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DescriptorSetLayoutSupport) Offset(offset int) DescriptorSetLayoutSupport {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DescriptorSetLayoutSupportSizeOf)
	return DescriptorSetLayoutSupport{ptr: (*C.VkDescriptorSetLayoutSupport)(ptr)}
}

// GetSType returns the value in sType.
func (p DescriptorSetLayoutSupport) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DescriptorSetLayoutSupport) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DescriptorSetLayoutSupport) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DescriptorSetLayoutSupport) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSupported returns the value in supported.
func (p DescriptorSetLayoutSupport) GetSupported() bool {
	return p.ptr.supported != 0
}

// SetSupported sets the value in supported.
func (p DescriptorSetLayoutSupport) SetSupported(value bool) {
	if value {
		p.ptr.supported = C.VkBool32(1)
	} else {
		p.ptr.supported = C.VkBool32(0)
	}
}

// DescriptorSetVariableDescriptorCountAllocateInfo wraps VkDescriptorSetVariableDescriptorCountAllocateInfo.
type DescriptorSetVariableDescriptorCountAllocateInfo struct {
	ptr *C.VkDescriptorSetVariableDescriptorCountAllocateInfo
}

// DescriptorSetVariableDescriptorCountAllocateInfoNil is a null pointer.
var DescriptorSetVariableDescriptorCountAllocateInfoNil DescriptorSetVariableDescriptorCountAllocateInfo

// DescriptorSetVariableDescriptorCountAllocateInfoSizeOf is the byte size of VkDescriptorSetVariableDescriptorCountAllocateInfo.
const DescriptorSetVariableDescriptorCountAllocateInfoSizeOf = int(C.sizeof_VkDescriptorSetVariableDescriptorCountAllocateInfo)

// DescriptorSetVariableDescriptorCountAllocateInfoFromPtr converts a raw pointer to a DescriptorSetVariableDescriptorCountAllocateInfo.
func DescriptorSetVariableDescriptorCountAllocateInfoFromPtr(ptr unsafe.Pointer) DescriptorSetVariableDescriptorCountAllocateInfo {
	return DescriptorSetVariableDescriptorCountAllocateInfo{ptr: (*C.VkDescriptorSetVariableDescriptorCountAllocateInfo)(ptr)}
}

// DescriptorSetVariableDescriptorCountAllocateInfoAlloc allocates a continuous block of VkDescriptorSetVariableDescriptorCountAllocateInfo.
func DescriptorSetVariableDescriptorCountAllocateInfoAlloc(alloc ffi.Allocator, count int) DescriptorSetVariableDescriptorCountAllocateInfo {
	ptr := alloc.Allocate(DescriptorSetVariableDescriptorCountAllocateInfoSizeOf * count)
	return DescriptorSetVariableDescriptorCountAllocateInfo{ptr: (*C.VkDescriptorSetVariableDescriptorCountAllocateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DescriptorSetVariableDescriptorCountAllocateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DescriptorSetVariableDescriptorCountAllocateInfo) Offset(offset int) DescriptorSetVariableDescriptorCountAllocateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DescriptorSetVariableDescriptorCountAllocateInfoSizeOf)
	return DescriptorSetVariableDescriptorCountAllocateInfo{ptr: (*C.VkDescriptorSetVariableDescriptorCountAllocateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DescriptorSetVariableDescriptorCountAllocateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DescriptorSetVariableDescriptorCountAllocateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DescriptorSetVariableDescriptorCountAllocateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DescriptorSetVariableDescriptorCountAllocateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDescriptorSetCount returns the value in descriptorSetCount.
func (p DescriptorSetVariableDescriptorCountAllocateInfo) GetDescriptorSetCount() uint32 {
	return uint32(p.ptr.descriptorSetCount)
}

// SetDescriptorSetCount sets the value in descriptorSetCount.
func (p DescriptorSetVariableDescriptorCountAllocateInfo) SetDescriptorSetCount(value uint32) {
	p.ptr.descriptorSetCount = (C.uint32_t)(value)
}

// GetPDescriptorCounts returns the value in pDescriptorCounts.
func (p DescriptorSetVariableDescriptorCountAllocateInfo) GetPDescriptorCounts() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pDescriptorCounts))
}

// SetPDescriptorCounts sets the value in pDescriptorCounts.
func (p DescriptorSetVariableDescriptorCountAllocateInfo) SetPDescriptorCounts(value ffi.Ref[uint32]) {
	p.ptr.pDescriptorCounts = (*C.uint32_t)(value.Raw())
}

// DescriptorSetVariableDescriptorCountLayoutSupport wraps VkDescriptorSetVariableDescriptorCountLayoutSupport.
type DescriptorSetVariableDescriptorCountLayoutSupport struct {
	ptr *C.VkDescriptorSetVariableDescriptorCountLayoutSupport
}

// DescriptorSetVariableDescriptorCountLayoutSupportNil is a null pointer.
var DescriptorSetVariableDescriptorCountLayoutSupportNil DescriptorSetVariableDescriptorCountLayoutSupport

// DescriptorSetVariableDescriptorCountLayoutSupportSizeOf is the byte size of VkDescriptorSetVariableDescriptorCountLayoutSupport.
const DescriptorSetVariableDescriptorCountLayoutSupportSizeOf = int(C.sizeof_VkDescriptorSetVariableDescriptorCountLayoutSupport)

// DescriptorSetVariableDescriptorCountLayoutSupportFromPtr converts a raw pointer to a DescriptorSetVariableDescriptorCountLayoutSupport.
func DescriptorSetVariableDescriptorCountLayoutSupportFromPtr(ptr unsafe.Pointer) DescriptorSetVariableDescriptorCountLayoutSupport {
	return DescriptorSetVariableDescriptorCountLayoutSupport{ptr: (*C.VkDescriptorSetVariableDescriptorCountLayoutSupport)(ptr)}
}

// DescriptorSetVariableDescriptorCountLayoutSupportAlloc allocates a continuous block of VkDescriptorSetVariableDescriptorCountLayoutSupport.
func DescriptorSetVariableDescriptorCountLayoutSupportAlloc(alloc ffi.Allocator, count int) DescriptorSetVariableDescriptorCountLayoutSupport {
	ptr := alloc.Allocate(DescriptorSetVariableDescriptorCountLayoutSupportSizeOf * count)
	return DescriptorSetVariableDescriptorCountLayoutSupport{ptr: (*C.VkDescriptorSetVariableDescriptorCountLayoutSupport)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DescriptorSetVariableDescriptorCountLayoutSupport) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DescriptorSetVariableDescriptorCountLayoutSupport) Offset(offset int) DescriptorSetVariableDescriptorCountLayoutSupport {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DescriptorSetVariableDescriptorCountLayoutSupportSizeOf)
	return DescriptorSetVariableDescriptorCountLayoutSupport{ptr: (*C.VkDescriptorSetVariableDescriptorCountLayoutSupport)(ptr)}
}

// GetSType returns the value in sType.
func (p DescriptorSetVariableDescriptorCountLayoutSupport) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DescriptorSetVariableDescriptorCountLayoutSupport) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DescriptorSetVariableDescriptorCountLayoutSupport) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DescriptorSetVariableDescriptorCountLayoutSupport) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMaxVariableDescriptorCount returns the value in maxVariableDescriptorCount.
func (p DescriptorSetVariableDescriptorCountLayoutSupport) GetMaxVariableDescriptorCount() uint32 {
	return uint32(p.ptr.maxVariableDescriptorCount)
}

// SetMaxVariableDescriptorCount sets the value in maxVariableDescriptorCount.
func (p DescriptorSetVariableDescriptorCountLayoutSupport) SetMaxVariableDescriptorCount(value uint32) {
	p.ptr.maxVariableDescriptorCount = (C.uint32_t)(value)
}

// DescriptorUpdateTemplateCreateInfo wraps VkDescriptorUpdateTemplateCreateInfo.
type DescriptorUpdateTemplateCreateInfo struct {
	ptr *C.VkDescriptorUpdateTemplateCreateInfo
}

// DescriptorUpdateTemplateCreateInfoNil is a null pointer.
var DescriptorUpdateTemplateCreateInfoNil DescriptorUpdateTemplateCreateInfo

// DescriptorUpdateTemplateCreateInfoSizeOf is the byte size of VkDescriptorUpdateTemplateCreateInfo.
const DescriptorUpdateTemplateCreateInfoSizeOf = int(C.sizeof_VkDescriptorUpdateTemplateCreateInfo)

// DescriptorUpdateTemplateCreateInfoFromPtr converts a raw pointer to a DescriptorUpdateTemplateCreateInfo.
func DescriptorUpdateTemplateCreateInfoFromPtr(ptr unsafe.Pointer) DescriptorUpdateTemplateCreateInfo {
	return DescriptorUpdateTemplateCreateInfo{ptr: (*C.VkDescriptorUpdateTemplateCreateInfo)(ptr)}
}

// DescriptorUpdateTemplateCreateInfoAlloc allocates a continuous block of VkDescriptorUpdateTemplateCreateInfo.
func DescriptorUpdateTemplateCreateInfoAlloc(alloc ffi.Allocator, count int) DescriptorUpdateTemplateCreateInfo {
	ptr := alloc.Allocate(DescriptorUpdateTemplateCreateInfoSizeOf * count)
	return DescriptorUpdateTemplateCreateInfo{ptr: (*C.VkDescriptorUpdateTemplateCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DescriptorUpdateTemplateCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DescriptorUpdateTemplateCreateInfo) Offset(offset int) DescriptorUpdateTemplateCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DescriptorUpdateTemplateCreateInfoSizeOf)
	return DescriptorUpdateTemplateCreateInfo{ptr: (*C.VkDescriptorUpdateTemplateCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DescriptorUpdateTemplateCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DescriptorUpdateTemplateCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DescriptorUpdateTemplateCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DescriptorUpdateTemplateCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p DescriptorUpdateTemplateCreateInfo) GetFlags() DescriptorUpdateTemplateCreateFlags {
	return DescriptorUpdateTemplateCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p DescriptorUpdateTemplateCreateInfo) SetFlags(value DescriptorUpdateTemplateCreateFlags) {
	p.ptr.flags = (C.VkDescriptorUpdateTemplateCreateFlags)(value)
}

// GetDescriptorUpdateEntryCount returns the value in descriptorUpdateEntryCount.
func (p DescriptorUpdateTemplateCreateInfo) GetDescriptorUpdateEntryCount() uint32 {
	return uint32(p.ptr.descriptorUpdateEntryCount)
}

// SetDescriptorUpdateEntryCount sets the value in descriptorUpdateEntryCount.
func (p DescriptorUpdateTemplateCreateInfo) SetDescriptorUpdateEntryCount(value uint32) {
	p.ptr.descriptorUpdateEntryCount = (C.uint32_t)(value)
}

// GetPDescriptorUpdateEntries returns the value in pDescriptorUpdateEntries.
func (p DescriptorUpdateTemplateCreateInfo) GetPDescriptorUpdateEntries() DescriptorUpdateTemplateEntry {
	return DescriptorUpdateTemplateEntry{ptr: p.ptr.pDescriptorUpdateEntries}
}

// SetPDescriptorUpdateEntries sets the value in pDescriptorUpdateEntries.
func (p DescriptorUpdateTemplateCreateInfo) SetPDescriptorUpdateEntries(value DescriptorUpdateTemplateEntry) {
	p.ptr.pDescriptorUpdateEntries = value.ptr
}

// GetTemplateType returns the value in templateType.
func (p DescriptorUpdateTemplateCreateInfo) GetTemplateType() DescriptorUpdateTemplateType {
	return DescriptorUpdateTemplateType(p.ptr.templateType)
}

// SetTemplateType sets the value in templateType.
func (p DescriptorUpdateTemplateCreateInfo) SetTemplateType(value DescriptorUpdateTemplateType) {
	p.ptr.templateType = (C.VkDescriptorUpdateTemplateType)(value)
}

// GetDescriptorSetLayout returns the value in descriptorSetLayout.
func (p DescriptorUpdateTemplateCreateInfo) GetDescriptorSetLayout() DescriptorSetLayout {
	return DescriptorSetLayout(p.ptr.descriptorSetLayout)
}

// SetDescriptorSetLayout sets the value in descriptorSetLayout.
func (p DescriptorUpdateTemplateCreateInfo) SetDescriptorSetLayout(value DescriptorSetLayout) {
	p.ptr.descriptorSetLayout = (C.VkDescriptorSetLayout)(value)
}

// GetPipelineBindPoint returns the value in pipelineBindPoint.
func (p DescriptorUpdateTemplateCreateInfo) GetPipelineBindPoint() PipelineBindPoint {
	return PipelineBindPoint(p.ptr.pipelineBindPoint)
}

// SetPipelineBindPoint sets the value in pipelineBindPoint.
func (p DescriptorUpdateTemplateCreateInfo) SetPipelineBindPoint(value PipelineBindPoint) {
	p.ptr.pipelineBindPoint = (C.VkPipelineBindPoint)(value)
}

// GetPipelineLayout returns the value in pipelineLayout.
func (p DescriptorUpdateTemplateCreateInfo) GetPipelineLayout() PipelineLayout {
	return PipelineLayout(p.ptr.pipelineLayout)
}

// SetPipelineLayout sets the value in pipelineLayout.
func (p DescriptorUpdateTemplateCreateInfo) SetPipelineLayout(value PipelineLayout) {
	p.ptr.pipelineLayout = (C.VkPipelineLayout)(value)
}

// GetSet returns the value in set.
func (p DescriptorUpdateTemplateCreateInfo) GetSet() uint32 {
	return uint32(p.ptr.set)
}

// SetSet sets the value in set.
func (p DescriptorUpdateTemplateCreateInfo) SetSet(value uint32) {
	p.ptr.set = (C.uint32_t)(value)
}

// DescriptorUpdateTemplateEntry wraps VkDescriptorUpdateTemplateEntry.
type DescriptorUpdateTemplateEntry struct {
	ptr *C.VkDescriptorUpdateTemplateEntry
}

// DescriptorUpdateTemplateEntryNil is a null pointer.
var DescriptorUpdateTemplateEntryNil DescriptorUpdateTemplateEntry

// DescriptorUpdateTemplateEntrySizeOf is the byte size of VkDescriptorUpdateTemplateEntry.
const DescriptorUpdateTemplateEntrySizeOf = int(C.sizeof_VkDescriptorUpdateTemplateEntry)

// DescriptorUpdateTemplateEntryFromPtr converts a raw pointer to a DescriptorUpdateTemplateEntry.
func DescriptorUpdateTemplateEntryFromPtr(ptr unsafe.Pointer) DescriptorUpdateTemplateEntry {
	return DescriptorUpdateTemplateEntry{ptr: (*C.VkDescriptorUpdateTemplateEntry)(ptr)}
}

// DescriptorUpdateTemplateEntryAlloc allocates a continuous block of VkDescriptorUpdateTemplateEntry.
func DescriptorUpdateTemplateEntryAlloc(alloc ffi.Allocator, count int) DescriptorUpdateTemplateEntry {
	ptr := alloc.Allocate(DescriptorUpdateTemplateEntrySizeOf * count)
	return DescriptorUpdateTemplateEntry{ptr: (*C.VkDescriptorUpdateTemplateEntry)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DescriptorUpdateTemplateEntry) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DescriptorUpdateTemplateEntry) Offset(offset int) DescriptorUpdateTemplateEntry {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DescriptorUpdateTemplateEntrySizeOf)
	return DescriptorUpdateTemplateEntry{ptr: (*C.VkDescriptorUpdateTemplateEntry)(ptr)}
}

// GetDstBinding returns the value in dstBinding.
func (p DescriptorUpdateTemplateEntry) GetDstBinding() uint32 {
	return uint32(p.ptr.dstBinding)
}

// SetDstBinding sets the value in dstBinding.
func (p DescriptorUpdateTemplateEntry) SetDstBinding(value uint32) {
	p.ptr.dstBinding = (C.uint32_t)(value)
}

// GetDstArrayElement returns the value in dstArrayElement.
func (p DescriptorUpdateTemplateEntry) GetDstArrayElement() uint32 {
	return uint32(p.ptr.dstArrayElement)
}

// SetDstArrayElement sets the value in dstArrayElement.
func (p DescriptorUpdateTemplateEntry) SetDstArrayElement(value uint32) {
	p.ptr.dstArrayElement = (C.uint32_t)(value)
}

// GetDescriptorCount returns the value in descriptorCount.
func (p DescriptorUpdateTemplateEntry) GetDescriptorCount() uint32 {
	return uint32(p.ptr.descriptorCount)
}

// SetDescriptorCount sets the value in descriptorCount.
func (p DescriptorUpdateTemplateEntry) SetDescriptorCount(value uint32) {
	p.ptr.descriptorCount = (C.uint32_t)(value)
}

// GetDescriptorType returns the value in descriptorType.
func (p DescriptorUpdateTemplateEntry) GetDescriptorType() DescriptorType {
	return DescriptorType(p.ptr.descriptorType)
}

// SetDescriptorType sets the value in descriptorType.
func (p DescriptorUpdateTemplateEntry) SetDescriptorType(value DescriptorType) {
	p.ptr.descriptorType = (C.VkDescriptorType)(value)
}

// GetOffset returns the value in offset.
func (p DescriptorUpdateTemplateEntry) GetOffset() uintptr {
	return uintptr(p.ptr.offset)
}

// SetOffset sets the value in offset.
func (p DescriptorUpdateTemplateEntry) SetOffset(value uintptr) {
	p.ptr.offset = (C.size_t)(value)
}

// GetStride returns the value in stride.
func (p DescriptorUpdateTemplateEntry) GetStride() uintptr {
	return uintptr(p.ptr.stride)
}

// SetStride sets the value in stride.
func (p DescriptorUpdateTemplateEntry) SetStride(value uintptr) {
	p.ptr.stride = (C.size_t)(value)
}

// DeviceBufferMemoryRequirements wraps VkDeviceBufferMemoryRequirements.
type DeviceBufferMemoryRequirements struct {
	ptr *C.VkDeviceBufferMemoryRequirements
}

// DeviceBufferMemoryRequirementsNil is a null pointer.
var DeviceBufferMemoryRequirementsNil DeviceBufferMemoryRequirements

// DeviceBufferMemoryRequirementsSizeOf is the byte size of VkDeviceBufferMemoryRequirements.
const DeviceBufferMemoryRequirementsSizeOf = int(C.sizeof_VkDeviceBufferMemoryRequirements)

// DeviceBufferMemoryRequirementsFromPtr converts a raw pointer to a DeviceBufferMemoryRequirements.
func DeviceBufferMemoryRequirementsFromPtr(ptr unsafe.Pointer) DeviceBufferMemoryRequirements {
	return DeviceBufferMemoryRequirements{ptr: (*C.VkDeviceBufferMemoryRequirements)(ptr)}
}

// DeviceBufferMemoryRequirementsAlloc allocates a continuous block of VkDeviceBufferMemoryRequirements.
func DeviceBufferMemoryRequirementsAlloc(alloc ffi.Allocator, count int) DeviceBufferMemoryRequirements {
	ptr := alloc.Allocate(DeviceBufferMemoryRequirementsSizeOf * count)
	return DeviceBufferMemoryRequirements{ptr: (*C.VkDeviceBufferMemoryRequirements)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DeviceBufferMemoryRequirements) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DeviceBufferMemoryRequirements) Offset(offset int) DeviceBufferMemoryRequirements {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DeviceBufferMemoryRequirementsSizeOf)
	return DeviceBufferMemoryRequirements{ptr: (*C.VkDeviceBufferMemoryRequirements)(ptr)}
}

// GetSType returns the value in sType.
func (p DeviceBufferMemoryRequirements) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DeviceBufferMemoryRequirements) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DeviceBufferMemoryRequirements) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DeviceBufferMemoryRequirements) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPCreateInfo returns the value in pCreateInfo.
func (p DeviceBufferMemoryRequirements) GetPCreateInfo() BufferCreateInfo {
	return BufferCreateInfo{ptr: p.ptr.pCreateInfo}
}

// SetPCreateInfo sets the value in pCreateInfo.
func (p DeviceBufferMemoryRequirements) SetPCreateInfo(value BufferCreateInfo) {
	p.ptr.pCreateInfo = value.ptr
}

// DeviceCreateInfo wraps VkDeviceCreateInfo.
type DeviceCreateInfo struct {
	ptr *C.VkDeviceCreateInfo
}

// DeviceCreateInfoNil is a null pointer.
var DeviceCreateInfoNil DeviceCreateInfo

// DeviceCreateInfoSizeOf is the byte size of VkDeviceCreateInfo.
const DeviceCreateInfoSizeOf = int(C.sizeof_VkDeviceCreateInfo)

// DeviceCreateInfoFromPtr converts a raw pointer to a DeviceCreateInfo.
func DeviceCreateInfoFromPtr(ptr unsafe.Pointer) DeviceCreateInfo {
	return DeviceCreateInfo{ptr: (*C.VkDeviceCreateInfo)(ptr)}
}

// DeviceCreateInfoAlloc allocates a continuous block of VkDeviceCreateInfo.
func DeviceCreateInfoAlloc(alloc ffi.Allocator, count int) DeviceCreateInfo {
	ptr := alloc.Allocate(DeviceCreateInfoSizeOf * count)
	return DeviceCreateInfo{ptr: (*C.VkDeviceCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DeviceCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DeviceCreateInfo) Offset(offset int) DeviceCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DeviceCreateInfoSizeOf)
	return DeviceCreateInfo{ptr: (*C.VkDeviceCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DeviceCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DeviceCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DeviceCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DeviceCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p DeviceCreateInfo) GetFlags() DeviceCreateFlags {
	return DeviceCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p DeviceCreateInfo) SetFlags(value DeviceCreateFlags) {
	p.ptr.flags = (C.VkDeviceCreateFlags)(value)
}

// GetQueueCreateInfoCount returns the value in queueCreateInfoCount.
func (p DeviceCreateInfo) GetQueueCreateInfoCount() uint32 {
	return uint32(p.ptr.queueCreateInfoCount)
}

// SetQueueCreateInfoCount sets the value in queueCreateInfoCount.
func (p DeviceCreateInfo) SetQueueCreateInfoCount(value uint32) {
	p.ptr.queueCreateInfoCount = (C.uint32_t)(value)
}

// GetPQueueCreateInfos returns the value in pQueueCreateInfos.
func (p DeviceCreateInfo) GetPQueueCreateInfos() DeviceQueueCreateInfo {
	return DeviceQueueCreateInfo{ptr: p.ptr.pQueueCreateInfos}
}

// SetPQueueCreateInfos sets the value in pQueueCreateInfos.
func (p DeviceCreateInfo) SetPQueueCreateInfos(value DeviceQueueCreateInfo) {
	p.ptr.pQueueCreateInfos = value.ptr
}

// GetEnabledLayerCount returns the value in enabledLayerCount.
func (p DeviceCreateInfo) GetEnabledLayerCount() uint32 {
	return uint32(p.ptr.enabledLayerCount)
}

// SetEnabledLayerCount sets the value in enabledLayerCount.
func (p DeviceCreateInfo) SetEnabledLayerCount(value uint32) {
	p.ptr.enabledLayerCount = (C.uint32_t)(value)
}

// GetPpEnabledLayerNames returns the value in ppEnabledLayerNames.
func (p DeviceCreateInfo) GetPpEnabledLayerNames() ffi.Ref[ffi.CString] {
	return ffi.RefFromPtr[ffi.CString](unsafe.Pointer(p.ptr.ppEnabledLayerNames))
}

// SetPpEnabledLayerNames sets the value in ppEnabledLayerNames.
func (p DeviceCreateInfo) SetPpEnabledLayerNames(value ffi.Ref[ffi.CString]) {
	p.ptr.ppEnabledLayerNames = (**C.char)(value.Raw())
}

// GetEnabledExtensionCount returns the value in enabledExtensionCount.
func (p DeviceCreateInfo) GetEnabledExtensionCount() uint32 {
	return uint32(p.ptr.enabledExtensionCount)
}

// SetEnabledExtensionCount sets the value in enabledExtensionCount.
func (p DeviceCreateInfo) SetEnabledExtensionCount(value uint32) {
	p.ptr.enabledExtensionCount = (C.uint32_t)(value)
}

// GetPpEnabledExtensionNames returns the value in ppEnabledExtensionNames.
func (p DeviceCreateInfo) GetPpEnabledExtensionNames() ffi.Ref[ffi.CString] {
	return ffi.RefFromPtr[ffi.CString](unsafe.Pointer(p.ptr.ppEnabledExtensionNames))
}

// SetPpEnabledExtensionNames sets the value in ppEnabledExtensionNames.
func (p DeviceCreateInfo) SetPpEnabledExtensionNames(value ffi.Ref[ffi.CString]) {
	p.ptr.ppEnabledExtensionNames = (**C.char)(value.Raw())
}

// GetPEnabledFeatures returns the value in pEnabledFeatures.
func (p DeviceCreateInfo) GetPEnabledFeatures() PhysicalDeviceFeatures {
	return PhysicalDeviceFeatures{ptr: p.ptr.pEnabledFeatures}
}

// SetPEnabledFeatures sets the value in pEnabledFeatures.
func (p DeviceCreateInfo) SetPEnabledFeatures(value PhysicalDeviceFeatures) {
	p.ptr.pEnabledFeatures = value.ptr
}

// DeviceGroupBindSparseInfo wraps VkDeviceGroupBindSparseInfo.
type DeviceGroupBindSparseInfo struct {
	ptr *C.VkDeviceGroupBindSparseInfo
}

// DeviceGroupBindSparseInfoNil is a null pointer.
var DeviceGroupBindSparseInfoNil DeviceGroupBindSparseInfo

// DeviceGroupBindSparseInfoSizeOf is the byte size of VkDeviceGroupBindSparseInfo.
const DeviceGroupBindSparseInfoSizeOf = int(C.sizeof_VkDeviceGroupBindSparseInfo)

// DeviceGroupBindSparseInfoFromPtr converts a raw pointer to a DeviceGroupBindSparseInfo.
func DeviceGroupBindSparseInfoFromPtr(ptr unsafe.Pointer) DeviceGroupBindSparseInfo {
	return DeviceGroupBindSparseInfo{ptr: (*C.VkDeviceGroupBindSparseInfo)(ptr)}
}

// DeviceGroupBindSparseInfoAlloc allocates a continuous block of VkDeviceGroupBindSparseInfo.
func DeviceGroupBindSparseInfoAlloc(alloc ffi.Allocator, count int) DeviceGroupBindSparseInfo {
	ptr := alloc.Allocate(DeviceGroupBindSparseInfoSizeOf * count)
	return DeviceGroupBindSparseInfo{ptr: (*C.VkDeviceGroupBindSparseInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DeviceGroupBindSparseInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DeviceGroupBindSparseInfo) Offset(offset int) DeviceGroupBindSparseInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DeviceGroupBindSparseInfoSizeOf)
	return DeviceGroupBindSparseInfo{ptr: (*C.VkDeviceGroupBindSparseInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DeviceGroupBindSparseInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DeviceGroupBindSparseInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DeviceGroupBindSparseInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DeviceGroupBindSparseInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetResourceDeviceIndex returns the value in resourceDeviceIndex.
func (p DeviceGroupBindSparseInfo) GetResourceDeviceIndex() uint32 {
	return uint32(p.ptr.resourceDeviceIndex)
}

// SetResourceDeviceIndex sets the value in resourceDeviceIndex.
func (p DeviceGroupBindSparseInfo) SetResourceDeviceIndex(value uint32) {
	p.ptr.resourceDeviceIndex = (C.uint32_t)(value)
}

// GetMemoryDeviceIndex returns the value in memoryDeviceIndex.
func (p DeviceGroupBindSparseInfo) GetMemoryDeviceIndex() uint32 {
	return uint32(p.ptr.memoryDeviceIndex)
}

// SetMemoryDeviceIndex sets the value in memoryDeviceIndex.
func (p DeviceGroupBindSparseInfo) SetMemoryDeviceIndex(value uint32) {
	p.ptr.memoryDeviceIndex = (C.uint32_t)(value)
}

// DeviceGroupCommandBufferBeginInfo wraps VkDeviceGroupCommandBufferBeginInfo.
type DeviceGroupCommandBufferBeginInfo struct {
	ptr *C.VkDeviceGroupCommandBufferBeginInfo
}

// DeviceGroupCommandBufferBeginInfoNil is a null pointer.
var DeviceGroupCommandBufferBeginInfoNil DeviceGroupCommandBufferBeginInfo

// DeviceGroupCommandBufferBeginInfoSizeOf is the byte size of VkDeviceGroupCommandBufferBeginInfo.
const DeviceGroupCommandBufferBeginInfoSizeOf = int(C.sizeof_VkDeviceGroupCommandBufferBeginInfo)

// DeviceGroupCommandBufferBeginInfoFromPtr converts a raw pointer to a DeviceGroupCommandBufferBeginInfo.
func DeviceGroupCommandBufferBeginInfoFromPtr(ptr unsafe.Pointer) DeviceGroupCommandBufferBeginInfo {
	return DeviceGroupCommandBufferBeginInfo{ptr: (*C.VkDeviceGroupCommandBufferBeginInfo)(ptr)}
}

// DeviceGroupCommandBufferBeginInfoAlloc allocates a continuous block of VkDeviceGroupCommandBufferBeginInfo.
func DeviceGroupCommandBufferBeginInfoAlloc(alloc ffi.Allocator, count int) DeviceGroupCommandBufferBeginInfo {
	ptr := alloc.Allocate(DeviceGroupCommandBufferBeginInfoSizeOf * count)
	return DeviceGroupCommandBufferBeginInfo{ptr: (*C.VkDeviceGroupCommandBufferBeginInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DeviceGroupCommandBufferBeginInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DeviceGroupCommandBufferBeginInfo) Offset(offset int) DeviceGroupCommandBufferBeginInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DeviceGroupCommandBufferBeginInfoSizeOf)
	return DeviceGroupCommandBufferBeginInfo{ptr: (*C.VkDeviceGroupCommandBufferBeginInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DeviceGroupCommandBufferBeginInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DeviceGroupCommandBufferBeginInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DeviceGroupCommandBufferBeginInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DeviceGroupCommandBufferBeginInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDeviceMask returns the value in deviceMask.
func (p DeviceGroupCommandBufferBeginInfo) GetDeviceMask() uint32 {
	return uint32(p.ptr.deviceMask)
}

// SetDeviceMask sets the value in deviceMask.
func (p DeviceGroupCommandBufferBeginInfo) SetDeviceMask(value uint32) {
	p.ptr.deviceMask = (C.uint32_t)(value)
}

// DeviceGroupDeviceCreateInfo wraps VkDeviceGroupDeviceCreateInfo.
type DeviceGroupDeviceCreateInfo struct {
	ptr *C.VkDeviceGroupDeviceCreateInfo
}

// DeviceGroupDeviceCreateInfoNil is a null pointer.
var DeviceGroupDeviceCreateInfoNil DeviceGroupDeviceCreateInfo

// DeviceGroupDeviceCreateInfoSizeOf is the byte size of VkDeviceGroupDeviceCreateInfo.
const DeviceGroupDeviceCreateInfoSizeOf = int(C.sizeof_VkDeviceGroupDeviceCreateInfo)

// DeviceGroupDeviceCreateInfoFromPtr converts a raw pointer to a DeviceGroupDeviceCreateInfo.
func DeviceGroupDeviceCreateInfoFromPtr(ptr unsafe.Pointer) DeviceGroupDeviceCreateInfo {
	return DeviceGroupDeviceCreateInfo{ptr: (*C.VkDeviceGroupDeviceCreateInfo)(ptr)}
}

// DeviceGroupDeviceCreateInfoAlloc allocates a continuous block of VkDeviceGroupDeviceCreateInfo.
func DeviceGroupDeviceCreateInfoAlloc(alloc ffi.Allocator, count int) DeviceGroupDeviceCreateInfo {
	ptr := alloc.Allocate(DeviceGroupDeviceCreateInfoSizeOf * count)
	return DeviceGroupDeviceCreateInfo{ptr: (*C.VkDeviceGroupDeviceCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DeviceGroupDeviceCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DeviceGroupDeviceCreateInfo) Offset(offset int) DeviceGroupDeviceCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DeviceGroupDeviceCreateInfoSizeOf)
	return DeviceGroupDeviceCreateInfo{ptr: (*C.VkDeviceGroupDeviceCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DeviceGroupDeviceCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DeviceGroupDeviceCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DeviceGroupDeviceCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DeviceGroupDeviceCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPhysicalDeviceCount returns the value in physicalDeviceCount.
func (p DeviceGroupDeviceCreateInfo) GetPhysicalDeviceCount() uint32 {
	return uint32(p.ptr.physicalDeviceCount)
}

// SetPhysicalDeviceCount sets the value in physicalDeviceCount.
func (p DeviceGroupDeviceCreateInfo) SetPhysicalDeviceCount(value uint32) {
	p.ptr.physicalDeviceCount = (C.uint32_t)(value)
}

// GetPPhysicalDevices returns the value in pPhysicalDevices.
func (p DeviceGroupDeviceCreateInfo) GetPPhysicalDevices() ffi.Ref[PhysicalDevice] {
	return ffi.RefFromPtr[PhysicalDevice](unsafe.Pointer(p.ptr.pPhysicalDevices))
}

// SetPPhysicalDevices sets the value in pPhysicalDevices.
func (p DeviceGroupDeviceCreateInfo) SetPPhysicalDevices(value ffi.Ref[PhysicalDevice]) {
	p.ptr.pPhysicalDevices = (*C.VkPhysicalDevice)(value.Raw())
}

// DeviceGroupRenderPassBeginInfo wraps VkDeviceGroupRenderPassBeginInfo.
type DeviceGroupRenderPassBeginInfo struct {
	ptr *C.VkDeviceGroupRenderPassBeginInfo
}

// DeviceGroupRenderPassBeginInfoNil is a null pointer.
var DeviceGroupRenderPassBeginInfoNil DeviceGroupRenderPassBeginInfo

// DeviceGroupRenderPassBeginInfoSizeOf is the byte size of VkDeviceGroupRenderPassBeginInfo.
const DeviceGroupRenderPassBeginInfoSizeOf = int(C.sizeof_VkDeviceGroupRenderPassBeginInfo)

// DeviceGroupRenderPassBeginInfoFromPtr converts a raw pointer to a DeviceGroupRenderPassBeginInfo.
func DeviceGroupRenderPassBeginInfoFromPtr(ptr unsafe.Pointer) DeviceGroupRenderPassBeginInfo {
	return DeviceGroupRenderPassBeginInfo{ptr: (*C.VkDeviceGroupRenderPassBeginInfo)(ptr)}
}

// DeviceGroupRenderPassBeginInfoAlloc allocates a continuous block of VkDeviceGroupRenderPassBeginInfo.
func DeviceGroupRenderPassBeginInfoAlloc(alloc ffi.Allocator, count int) DeviceGroupRenderPassBeginInfo {
	ptr := alloc.Allocate(DeviceGroupRenderPassBeginInfoSizeOf * count)
	return DeviceGroupRenderPassBeginInfo{ptr: (*C.VkDeviceGroupRenderPassBeginInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DeviceGroupRenderPassBeginInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DeviceGroupRenderPassBeginInfo) Offset(offset int) DeviceGroupRenderPassBeginInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DeviceGroupRenderPassBeginInfoSizeOf)
	return DeviceGroupRenderPassBeginInfo{ptr: (*C.VkDeviceGroupRenderPassBeginInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DeviceGroupRenderPassBeginInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DeviceGroupRenderPassBeginInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DeviceGroupRenderPassBeginInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DeviceGroupRenderPassBeginInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDeviceMask returns the value in deviceMask.
func (p DeviceGroupRenderPassBeginInfo) GetDeviceMask() uint32 {
	return uint32(p.ptr.deviceMask)
}

// SetDeviceMask sets the value in deviceMask.
func (p DeviceGroupRenderPassBeginInfo) SetDeviceMask(value uint32) {
	p.ptr.deviceMask = (C.uint32_t)(value)
}

// GetDeviceRenderAreaCount returns the value in deviceRenderAreaCount.
func (p DeviceGroupRenderPassBeginInfo) GetDeviceRenderAreaCount() uint32 {
	return uint32(p.ptr.deviceRenderAreaCount)
}

// SetDeviceRenderAreaCount sets the value in deviceRenderAreaCount.
func (p DeviceGroupRenderPassBeginInfo) SetDeviceRenderAreaCount(value uint32) {
	p.ptr.deviceRenderAreaCount = (C.uint32_t)(value)
}

// GetPDeviceRenderAreas returns the value in pDeviceRenderAreas.
func (p DeviceGroupRenderPassBeginInfo) GetPDeviceRenderAreas() Rect2D {
	return Rect2D{ptr: p.ptr.pDeviceRenderAreas}
}

// SetPDeviceRenderAreas sets the value in pDeviceRenderAreas.
func (p DeviceGroupRenderPassBeginInfo) SetPDeviceRenderAreas(value Rect2D) {
	p.ptr.pDeviceRenderAreas = value.ptr
}

// DeviceGroupSubmitInfo wraps VkDeviceGroupSubmitInfo.
type DeviceGroupSubmitInfo struct {
	ptr *C.VkDeviceGroupSubmitInfo
}

// DeviceGroupSubmitInfoNil is a null pointer.
var DeviceGroupSubmitInfoNil DeviceGroupSubmitInfo

// DeviceGroupSubmitInfoSizeOf is the byte size of VkDeviceGroupSubmitInfo.
const DeviceGroupSubmitInfoSizeOf = int(C.sizeof_VkDeviceGroupSubmitInfo)

// DeviceGroupSubmitInfoFromPtr converts a raw pointer to a DeviceGroupSubmitInfo.
func DeviceGroupSubmitInfoFromPtr(ptr unsafe.Pointer) DeviceGroupSubmitInfo {
	return DeviceGroupSubmitInfo{ptr: (*C.VkDeviceGroupSubmitInfo)(ptr)}
}

// DeviceGroupSubmitInfoAlloc allocates a continuous block of VkDeviceGroupSubmitInfo.
func DeviceGroupSubmitInfoAlloc(alloc ffi.Allocator, count int) DeviceGroupSubmitInfo {
	ptr := alloc.Allocate(DeviceGroupSubmitInfoSizeOf * count)
	return DeviceGroupSubmitInfo{ptr: (*C.VkDeviceGroupSubmitInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DeviceGroupSubmitInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DeviceGroupSubmitInfo) Offset(offset int) DeviceGroupSubmitInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DeviceGroupSubmitInfoSizeOf)
	return DeviceGroupSubmitInfo{ptr: (*C.VkDeviceGroupSubmitInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DeviceGroupSubmitInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DeviceGroupSubmitInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DeviceGroupSubmitInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DeviceGroupSubmitInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetWaitSemaphoreCount returns the value in waitSemaphoreCount.
func (p DeviceGroupSubmitInfo) GetWaitSemaphoreCount() uint32 {
	return uint32(p.ptr.waitSemaphoreCount)
}

// SetWaitSemaphoreCount sets the value in waitSemaphoreCount.
func (p DeviceGroupSubmitInfo) SetWaitSemaphoreCount(value uint32) {
	p.ptr.waitSemaphoreCount = (C.uint32_t)(value)
}

// GetPWaitSemaphoreDeviceIndices returns the value in pWaitSemaphoreDeviceIndices.
func (p DeviceGroupSubmitInfo) GetPWaitSemaphoreDeviceIndices() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pWaitSemaphoreDeviceIndices))
}

// SetPWaitSemaphoreDeviceIndices sets the value in pWaitSemaphoreDeviceIndices.
func (p DeviceGroupSubmitInfo) SetPWaitSemaphoreDeviceIndices(value ffi.Ref[uint32]) {
	p.ptr.pWaitSemaphoreDeviceIndices = (*C.uint32_t)(value.Raw())
}

// GetCommandBufferCount returns the value in commandBufferCount.
func (p DeviceGroupSubmitInfo) GetCommandBufferCount() uint32 {
	return uint32(p.ptr.commandBufferCount)
}

// SetCommandBufferCount sets the value in commandBufferCount.
func (p DeviceGroupSubmitInfo) SetCommandBufferCount(value uint32) {
	p.ptr.commandBufferCount = (C.uint32_t)(value)
}

// GetPCommandBufferDeviceMasks returns the value in pCommandBufferDeviceMasks.
func (p DeviceGroupSubmitInfo) GetPCommandBufferDeviceMasks() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pCommandBufferDeviceMasks))
}

// SetPCommandBufferDeviceMasks sets the value in pCommandBufferDeviceMasks.
func (p DeviceGroupSubmitInfo) SetPCommandBufferDeviceMasks(value ffi.Ref[uint32]) {
	p.ptr.pCommandBufferDeviceMasks = (*C.uint32_t)(value.Raw())
}

// GetSignalSemaphoreCount returns the value in signalSemaphoreCount.
func (p DeviceGroupSubmitInfo) GetSignalSemaphoreCount() uint32 {
	return uint32(p.ptr.signalSemaphoreCount)
}

// SetSignalSemaphoreCount sets the value in signalSemaphoreCount.
func (p DeviceGroupSubmitInfo) SetSignalSemaphoreCount(value uint32) {
	p.ptr.signalSemaphoreCount = (C.uint32_t)(value)
}

// GetPSignalSemaphoreDeviceIndices returns the value in pSignalSemaphoreDeviceIndices.
func (p DeviceGroupSubmitInfo) GetPSignalSemaphoreDeviceIndices() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pSignalSemaphoreDeviceIndices))
}

// SetPSignalSemaphoreDeviceIndices sets the value in pSignalSemaphoreDeviceIndices.
func (p DeviceGroupSubmitInfo) SetPSignalSemaphoreDeviceIndices(value ffi.Ref[uint32]) {
	p.ptr.pSignalSemaphoreDeviceIndices = (*C.uint32_t)(value.Raw())
}

// DeviceImageMemoryRequirements wraps VkDeviceImageMemoryRequirements.
type DeviceImageMemoryRequirements struct {
	ptr *C.VkDeviceImageMemoryRequirements
}

// DeviceImageMemoryRequirementsNil is a null pointer.
var DeviceImageMemoryRequirementsNil DeviceImageMemoryRequirements

// DeviceImageMemoryRequirementsSizeOf is the byte size of VkDeviceImageMemoryRequirements.
const DeviceImageMemoryRequirementsSizeOf = int(C.sizeof_VkDeviceImageMemoryRequirements)

// DeviceImageMemoryRequirementsFromPtr converts a raw pointer to a DeviceImageMemoryRequirements.
func DeviceImageMemoryRequirementsFromPtr(ptr unsafe.Pointer) DeviceImageMemoryRequirements {
	return DeviceImageMemoryRequirements{ptr: (*C.VkDeviceImageMemoryRequirements)(ptr)}
}

// DeviceImageMemoryRequirementsAlloc allocates a continuous block of VkDeviceImageMemoryRequirements.
func DeviceImageMemoryRequirementsAlloc(alloc ffi.Allocator, count int) DeviceImageMemoryRequirements {
	ptr := alloc.Allocate(DeviceImageMemoryRequirementsSizeOf * count)
	return DeviceImageMemoryRequirements{ptr: (*C.VkDeviceImageMemoryRequirements)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DeviceImageMemoryRequirements) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DeviceImageMemoryRequirements) Offset(offset int) DeviceImageMemoryRequirements {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DeviceImageMemoryRequirementsSizeOf)
	return DeviceImageMemoryRequirements{ptr: (*C.VkDeviceImageMemoryRequirements)(ptr)}
}

// GetSType returns the value in sType.
func (p DeviceImageMemoryRequirements) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DeviceImageMemoryRequirements) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DeviceImageMemoryRequirements) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DeviceImageMemoryRequirements) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPCreateInfo returns the value in pCreateInfo.
func (p DeviceImageMemoryRequirements) GetPCreateInfo() ImageCreateInfo {
	return ImageCreateInfo{ptr: p.ptr.pCreateInfo}
}

// SetPCreateInfo sets the value in pCreateInfo.
func (p DeviceImageMemoryRequirements) SetPCreateInfo(value ImageCreateInfo) {
	p.ptr.pCreateInfo = value.ptr
}

// GetPlaneAspect returns the value in planeAspect.
func (p DeviceImageMemoryRequirements) GetPlaneAspect() ImageAspectFlags {
	return ImageAspectFlags(p.ptr.planeAspect)
}

// SetPlaneAspect sets the value in planeAspect.
func (p DeviceImageMemoryRequirements) SetPlaneAspect(value ImageAspectFlags) {
	p.ptr.planeAspect = (C.VkImageAspectFlagBits)(value)
}

// DeviceImageSubresourceInfo wraps VkDeviceImageSubresourceInfo.
type DeviceImageSubresourceInfo struct {
	ptr *C.VkDeviceImageSubresourceInfo
}

// DeviceImageSubresourceInfoNil is a null pointer.
var DeviceImageSubresourceInfoNil DeviceImageSubresourceInfo

// DeviceImageSubresourceInfoSizeOf is the byte size of VkDeviceImageSubresourceInfo.
const DeviceImageSubresourceInfoSizeOf = int(C.sizeof_VkDeviceImageSubresourceInfo)

// DeviceImageSubresourceInfoFromPtr converts a raw pointer to a DeviceImageSubresourceInfo.
func DeviceImageSubresourceInfoFromPtr(ptr unsafe.Pointer) DeviceImageSubresourceInfo {
	return DeviceImageSubresourceInfo{ptr: (*C.VkDeviceImageSubresourceInfo)(ptr)}
}

// DeviceImageSubresourceInfoAlloc allocates a continuous block of VkDeviceImageSubresourceInfo.
func DeviceImageSubresourceInfoAlloc(alloc ffi.Allocator, count int) DeviceImageSubresourceInfo {
	ptr := alloc.Allocate(DeviceImageSubresourceInfoSizeOf * count)
	return DeviceImageSubresourceInfo{ptr: (*C.VkDeviceImageSubresourceInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DeviceImageSubresourceInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DeviceImageSubresourceInfo) Offset(offset int) DeviceImageSubresourceInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DeviceImageSubresourceInfoSizeOf)
	return DeviceImageSubresourceInfo{ptr: (*C.VkDeviceImageSubresourceInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DeviceImageSubresourceInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DeviceImageSubresourceInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DeviceImageSubresourceInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DeviceImageSubresourceInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPCreateInfo returns the value in pCreateInfo.
func (p DeviceImageSubresourceInfo) GetPCreateInfo() ImageCreateInfo {
	return ImageCreateInfo{ptr: p.ptr.pCreateInfo}
}

// SetPCreateInfo sets the value in pCreateInfo.
func (p DeviceImageSubresourceInfo) SetPCreateInfo(value ImageCreateInfo) {
	p.ptr.pCreateInfo = value.ptr
}

// GetPSubresource returns the value in pSubresource.
func (p DeviceImageSubresourceInfo) GetPSubresource() ImageSubresource2 {
	return ImageSubresource2{ptr: p.ptr.pSubresource}
}

// SetPSubresource sets the value in pSubresource.
func (p DeviceImageSubresourceInfo) SetPSubresource(value ImageSubresource2) {
	p.ptr.pSubresource = value.ptr
}

// DeviceMemoryOpaqueCaptureAddressInfo wraps VkDeviceMemoryOpaqueCaptureAddressInfo.
type DeviceMemoryOpaqueCaptureAddressInfo struct {
	ptr *C.VkDeviceMemoryOpaqueCaptureAddressInfo
}

// DeviceMemoryOpaqueCaptureAddressInfoNil is a null pointer.
var DeviceMemoryOpaqueCaptureAddressInfoNil DeviceMemoryOpaqueCaptureAddressInfo

// DeviceMemoryOpaqueCaptureAddressInfoSizeOf is the byte size of VkDeviceMemoryOpaqueCaptureAddressInfo.
const DeviceMemoryOpaqueCaptureAddressInfoSizeOf = int(C.sizeof_VkDeviceMemoryOpaqueCaptureAddressInfo)

// DeviceMemoryOpaqueCaptureAddressInfoFromPtr converts a raw pointer to a DeviceMemoryOpaqueCaptureAddressInfo.
func DeviceMemoryOpaqueCaptureAddressInfoFromPtr(ptr unsafe.Pointer) DeviceMemoryOpaqueCaptureAddressInfo {
	return DeviceMemoryOpaqueCaptureAddressInfo{ptr: (*C.VkDeviceMemoryOpaqueCaptureAddressInfo)(ptr)}
}

// DeviceMemoryOpaqueCaptureAddressInfoAlloc allocates a continuous block of VkDeviceMemoryOpaqueCaptureAddressInfo.
func DeviceMemoryOpaqueCaptureAddressInfoAlloc(alloc ffi.Allocator, count int) DeviceMemoryOpaqueCaptureAddressInfo {
	ptr := alloc.Allocate(DeviceMemoryOpaqueCaptureAddressInfoSizeOf * count)
	return DeviceMemoryOpaqueCaptureAddressInfo{ptr: (*C.VkDeviceMemoryOpaqueCaptureAddressInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DeviceMemoryOpaqueCaptureAddressInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DeviceMemoryOpaqueCaptureAddressInfo) Offset(offset int) DeviceMemoryOpaqueCaptureAddressInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DeviceMemoryOpaqueCaptureAddressInfoSizeOf)
	return DeviceMemoryOpaqueCaptureAddressInfo{ptr: (*C.VkDeviceMemoryOpaqueCaptureAddressInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DeviceMemoryOpaqueCaptureAddressInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DeviceMemoryOpaqueCaptureAddressInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DeviceMemoryOpaqueCaptureAddressInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DeviceMemoryOpaqueCaptureAddressInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMemory returns the value in memory.
func (p DeviceMemoryOpaqueCaptureAddressInfo) GetMemory() DeviceMemory {
	return DeviceMemory(p.ptr.memory)
}

// SetMemory sets the value in memory.
func (p DeviceMemoryOpaqueCaptureAddressInfo) SetMemory(value DeviceMemory) {
	p.ptr.memory = (C.VkDeviceMemory)(value)
}

// DevicePrivateDataCreateInfo wraps VkDevicePrivateDataCreateInfo.
type DevicePrivateDataCreateInfo struct {
	ptr *C.VkDevicePrivateDataCreateInfo
}

// DevicePrivateDataCreateInfoNil is a null pointer.
var DevicePrivateDataCreateInfoNil DevicePrivateDataCreateInfo

// DevicePrivateDataCreateInfoSizeOf is the byte size of VkDevicePrivateDataCreateInfo.
const DevicePrivateDataCreateInfoSizeOf = int(C.sizeof_VkDevicePrivateDataCreateInfo)

// DevicePrivateDataCreateInfoFromPtr converts a raw pointer to a DevicePrivateDataCreateInfo.
func DevicePrivateDataCreateInfoFromPtr(ptr unsafe.Pointer) DevicePrivateDataCreateInfo {
	return DevicePrivateDataCreateInfo{ptr: (*C.VkDevicePrivateDataCreateInfo)(ptr)}
}

// DevicePrivateDataCreateInfoAlloc allocates a continuous block of VkDevicePrivateDataCreateInfo.
func DevicePrivateDataCreateInfoAlloc(alloc ffi.Allocator, count int) DevicePrivateDataCreateInfo {
	ptr := alloc.Allocate(DevicePrivateDataCreateInfoSizeOf * count)
	return DevicePrivateDataCreateInfo{ptr: (*C.VkDevicePrivateDataCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DevicePrivateDataCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DevicePrivateDataCreateInfo) Offset(offset int) DevicePrivateDataCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DevicePrivateDataCreateInfoSizeOf)
	return DevicePrivateDataCreateInfo{ptr: (*C.VkDevicePrivateDataCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DevicePrivateDataCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DevicePrivateDataCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DevicePrivateDataCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DevicePrivateDataCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPrivateDataSlotRequestCount returns the value in privateDataSlotRequestCount.
func (p DevicePrivateDataCreateInfo) GetPrivateDataSlotRequestCount() uint32 {
	return uint32(p.ptr.privateDataSlotRequestCount)
}

// SetPrivateDataSlotRequestCount sets the value in privateDataSlotRequestCount.
func (p DevicePrivateDataCreateInfo) SetPrivateDataSlotRequestCount(value uint32) {
	p.ptr.privateDataSlotRequestCount = (C.uint32_t)(value)
}

// DeviceQueueCreateInfo wraps VkDeviceQueueCreateInfo.
type DeviceQueueCreateInfo struct {
	ptr *C.VkDeviceQueueCreateInfo
}

// DeviceQueueCreateInfoNil is a null pointer.
var DeviceQueueCreateInfoNil DeviceQueueCreateInfo

// DeviceQueueCreateInfoSizeOf is the byte size of VkDeviceQueueCreateInfo.
const DeviceQueueCreateInfoSizeOf = int(C.sizeof_VkDeviceQueueCreateInfo)

// DeviceQueueCreateInfoFromPtr converts a raw pointer to a DeviceQueueCreateInfo.
func DeviceQueueCreateInfoFromPtr(ptr unsafe.Pointer) DeviceQueueCreateInfo {
	return DeviceQueueCreateInfo{ptr: (*C.VkDeviceQueueCreateInfo)(ptr)}
}

// DeviceQueueCreateInfoAlloc allocates a continuous block of VkDeviceQueueCreateInfo.
func DeviceQueueCreateInfoAlloc(alloc ffi.Allocator, count int) DeviceQueueCreateInfo {
	ptr := alloc.Allocate(DeviceQueueCreateInfoSizeOf * count)
	return DeviceQueueCreateInfo{ptr: (*C.VkDeviceQueueCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DeviceQueueCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DeviceQueueCreateInfo) Offset(offset int) DeviceQueueCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DeviceQueueCreateInfoSizeOf)
	return DeviceQueueCreateInfo{ptr: (*C.VkDeviceQueueCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DeviceQueueCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DeviceQueueCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DeviceQueueCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DeviceQueueCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p DeviceQueueCreateInfo) GetFlags() DeviceQueueCreateFlags {
	return DeviceQueueCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p DeviceQueueCreateInfo) SetFlags(value DeviceQueueCreateFlags) {
	p.ptr.flags = (C.VkDeviceQueueCreateFlags)(value)
}

// GetQueueFamilyIndex returns the value in queueFamilyIndex.
func (p DeviceQueueCreateInfo) GetQueueFamilyIndex() uint32 {
	return uint32(p.ptr.queueFamilyIndex)
}

// SetQueueFamilyIndex sets the value in queueFamilyIndex.
func (p DeviceQueueCreateInfo) SetQueueFamilyIndex(value uint32) {
	p.ptr.queueFamilyIndex = (C.uint32_t)(value)
}

// GetQueueCount returns the value in queueCount.
func (p DeviceQueueCreateInfo) GetQueueCount() uint32 {
	return uint32(p.ptr.queueCount)
}

// SetQueueCount sets the value in queueCount.
func (p DeviceQueueCreateInfo) SetQueueCount(value uint32) {
	p.ptr.queueCount = (C.uint32_t)(value)
}

// GetPQueuePriorities returns the value in pQueuePriorities.
func (p DeviceQueueCreateInfo) GetPQueuePriorities() ffi.Ref[float32] {
	return ffi.RefFromPtr[float32](unsafe.Pointer(p.ptr.pQueuePriorities))
}

// SetPQueuePriorities sets the value in pQueuePriorities.
func (p DeviceQueueCreateInfo) SetPQueuePriorities(value ffi.Ref[float32]) {
	p.ptr.pQueuePriorities = (*C.float)(value.Raw())
}

// DeviceQueueGlobalPriorityCreateInfo wraps VkDeviceQueueGlobalPriorityCreateInfo.
type DeviceQueueGlobalPriorityCreateInfo struct {
	ptr *C.VkDeviceQueueGlobalPriorityCreateInfo
}

// DeviceQueueGlobalPriorityCreateInfoNil is a null pointer.
var DeviceQueueGlobalPriorityCreateInfoNil DeviceQueueGlobalPriorityCreateInfo

// DeviceQueueGlobalPriorityCreateInfoSizeOf is the byte size of VkDeviceQueueGlobalPriorityCreateInfo.
const DeviceQueueGlobalPriorityCreateInfoSizeOf = int(C.sizeof_VkDeviceQueueGlobalPriorityCreateInfo)

// DeviceQueueGlobalPriorityCreateInfoFromPtr converts a raw pointer to a DeviceQueueGlobalPriorityCreateInfo.
func DeviceQueueGlobalPriorityCreateInfoFromPtr(ptr unsafe.Pointer) DeviceQueueGlobalPriorityCreateInfo {
	return DeviceQueueGlobalPriorityCreateInfo{ptr: (*C.VkDeviceQueueGlobalPriorityCreateInfo)(ptr)}
}

// DeviceQueueGlobalPriorityCreateInfoAlloc allocates a continuous block of VkDeviceQueueGlobalPriorityCreateInfo.
func DeviceQueueGlobalPriorityCreateInfoAlloc(alloc ffi.Allocator, count int) DeviceQueueGlobalPriorityCreateInfo {
	ptr := alloc.Allocate(DeviceQueueGlobalPriorityCreateInfoSizeOf * count)
	return DeviceQueueGlobalPriorityCreateInfo{ptr: (*C.VkDeviceQueueGlobalPriorityCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DeviceQueueGlobalPriorityCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DeviceQueueGlobalPriorityCreateInfo) Offset(offset int) DeviceQueueGlobalPriorityCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DeviceQueueGlobalPriorityCreateInfoSizeOf)
	return DeviceQueueGlobalPriorityCreateInfo{ptr: (*C.VkDeviceQueueGlobalPriorityCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p DeviceQueueGlobalPriorityCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DeviceQueueGlobalPriorityCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DeviceQueueGlobalPriorityCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DeviceQueueGlobalPriorityCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetGlobalPriority returns the value in globalPriority.
func (p DeviceQueueGlobalPriorityCreateInfo) GetGlobalPriority() QueueGlobalPriority {
	return QueueGlobalPriority(p.ptr.globalPriority)
}

// SetGlobalPriority sets the value in globalPriority.
func (p DeviceQueueGlobalPriorityCreateInfo) SetGlobalPriority(value QueueGlobalPriority) {
	p.ptr.globalPriority = (C.VkQueueGlobalPriority)(value)
}

// DeviceQueueInfo2 wraps VkDeviceQueueInfo2.
type DeviceQueueInfo2 struct {
	ptr *C.VkDeviceQueueInfo2
}

// DeviceQueueInfo2Nil is a null pointer.
var DeviceQueueInfo2Nil DeviceQueueInfo2

// DeviceQueueInfo2SizeOf is the byte size of VkDeviceQueueInfo2.
const DeviceQueueInfo2SizeOf = int(C.sizeof_VkDeviceQueueInfo2)

// DeviceQueueInfo2FromPtr converts a raw pointer to a DeviceQueueInfo2.
func DeviceQueueInfo2FromPtr(ptr unsafe.Pointer) DeviceQueueInfo2 {
	return DeviceQueueInfo2{ptr: (*C.VkDeviceQueueInfo2)(ptr)}
}

// DeviceQueueInfo2Alloc allocates a continuous block of VkDeviceQueueInfo2.
func DeviceQueueInfo2Alloc(alloc ffi.Allocator, count int) DeviceQueueInfo2 {
	ptr := alloc.Allocate(DeviceQueueInfo2SizeOf * count)
	return DeviceQueueInfo2{ptr: (*C.VkDeviceQueueInfo2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DeviceQueueInfo2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DeviceQueueInfo2) Offset(offset int) DeviceQueueInfo2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DeviceQueueInfo2SizeOf)
	return DeviceQueueInfo2{ptr: (*C.VkDeviceQueueInfo2)(ptr)}
}

// GetSType returns the value in sType.
func (p DeviceQueueInfo2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p DeviceQueueInfo2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p DeviceQueueInfo2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p DeviceQueueInfo2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p DeviceQueueInfo2) GetFlags() DeviceQueueCreateFlags {
	return DeviceQueueCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p DeviceQueueInfo2) SetFlags(value DeviceQueueCreateFlags) {
	p.ptr.flags = (C.VkDeviceQueueCreateFlags)(value)
}

// GetQueueFamilyIndex returns the value in queueFamilyIndex.
func (p DeviceQueueInfo2) GetQueueFamilyIndex() uint32 {
	return uint32(p.ptr.queueFamilyIndex)
}

// SetQueueFamilyIndex sets the value in queueFamilyIndex.
func (p DeviceQueueInfo2) SetQueueFamilyIndex(value uint32) {
	p.ptr.queueFamilyIndex = (C.uint32_t)(value)
}

// GetQueueIndex returns the value in queueIndex.
func (p DeviceQueueInfo2) GetQueueIndex() uint32 {
	return uint32(p.ptr.queueIndex)
}

// SetQueueIndex sets the value in queueIndex.
func (p DeviceQueueInfo2) SetQueueIndex(value uint32) {
	p.ptr.queueIndex = (C.uint32_t)(value)
}

// DispatchIndirectCommand wraps VkDispatchIndirectCommand.
type DispatchIndirectCommand struct {
	ptr *C.VkDispatchIndirectCommand
}

// DispatchIndirectCommandNil is a null pointer.
var DispatchIndirectCommandNil DispatchIndirectCommand

// DispatchIndirectCommandSizeOf is the byte size of VkDispatchIndirectCommand.
const DispatchIndirectCommandSizeOf = int(C.sizeof_VkDispatchIndirectCommand)

// DispatchIndirectCommandFromPtr converts a raw pointer to a DispatchIndirectCommand.
func DispatchIndirectCommandFromPtr(ptr unsafe.Pointer) DispatchIndirectCommand {
	return DispatchIndirectCommand{ptr: (*C.VkDispatchIndirectCommand)(ptr)}
}

// DispatchIndirectCommandAlloc allocates a continuous block of VkDispatchIndirectCommand.
func DispatchIndirectCommandAlloc(alloc ffi.Allocator, count int) DispatchIndirectCommand {
	ptr := alloc.Allocate(DispatchIndirectCommandSizeOf * count)
	return DispatchIndirectCommand{ptr: (*C.VkDispatchIndirectCommand)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DispatchIndirectCommand) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DispatchIndirectCommand) Offset(offset int) DispatchIndirectCommand {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DispatchIndirectCommandSizeOf)
	return DispatchIndirectCommand{ptr: (*C.VkDispatchIndirectCommand)(ptr)}
}

// GetX returns the value in x.
func (p DispatchIndirectCommand) GetX() uint32 {
	return uint32(p.ptr.x)
}

// SetX sets the value in x.
func (p DispatchIndirectCommand) SetX(value uint32) {
	p.ptr.x = (C.uint32_t)(value)
}

// GetY returns the value in y.
func (p DispatchIndirectCommand) GetY() uint32 {
	return uint32(p.ptr.y)
}

// SetY sets the value in y.
func (p DispatchIndirectCommand) SetY(value uint32) {
	p.ptr.y = (C.uint32_t)(value)
}

// GetZ returns the value in z.
func (p DispatchIndirectCommand) GetZ() uint32 {
	return uint32(p.ptr.z)
}

// SetZ sets the value in z.
func (p DispatchIndirectCommand) SetZ(value uint32) {
	p.ptr.z = (C.uint32_t)(value)
}

// DrawIndexedIndirectCommand wraps VkDrawIndexedIndirectCommand.
type DrawIndexedIndirectCommand struct {
	ptr *C.VkDrawIndexedIndirectCommand
}

// DrawIndexedIndirectCommandNil is a null pointer.
var DrawIndexedIndirectCommandNil DrawIndexedIndirectCommand

// DrawIndexedIndirectCommandSizeOf is the byte size of VkDrawIndexedIndirectCommand.
const DrawIndexedIndirectCommandSizeOf = int(C.sizeof_VkDrawIndexedIndirectCommand)

// DrawIndexedIndirectCommandFromPtr converts a raw pointer to a DrawIndexedIndirectCommand.
func DrawIndexedIndirectCommandFromPtr(ptr unsafe.Pointer) DrawIndexedIndirectCommand {
	return DrawIndexedIndirectCommand{ptr: (*C.VkDrawIndexedIndirectCommand)(ptr)}
}

// DrawIndexedIndirectCommandAlloc allocates a continuous block of VkDrawIndexedIndirectCommand.
func DrawIndexedIndirectCommandAlloc(alloc ffi.Allocator, count int) DrawIndexedIndirectCommand {
	ptr := alloc.Allocate(DrawIndexedIndirectCommandSizeOf * count)
	return DrawIndexedIndirectCommand{ptr: (*C.VkDrawIndexedIndirectCommand)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DrawIndexedIndirectCommand) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DrawIndexedIndirectCommand) Offset(offset int) DrawIndexedIndirectCommand {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DrawIndexedIndirectCommandSizeOf)
	return DrawIndexedIndirectCommand{ptr: (*C.VkDrawIndexedIndirectCommand)(ptr)}
}

// GetIndexCount returns the value in indexCount.
func (p DrawIndexedIndirectCommand) GetIndexCount() uint32 {
	return uint32(p.ptr.indexCount)
}

// SetIndexCount sets the value in indexCount.
func (p DrawIndexedIndirectCommand) SetIndexCount(value uint32) {
	p.ptr.indexCount = (C.uint32_t)(value)
}

// GetInstanceCount returns the value in instanceCount.
func (p DrawIndexedIndirectCommand) GetInstanceCount() uint32 {
	return uint32(p.ptr.instanceCount)
}

// SetInstanceCount sets the value in instanceCount.
func (p DrawIndexedIndirectCommand) SetInstanceCount(value uint32) {
	p.ptr.instanceCount = (C.uint32_t)(value)
}

// GetFirstIndex returns the value in firstIndex.
func (p DrawIndexedIndirectCommand) GetFirstIndex() uint32 {
	return uint32(p.ptr.firstIndex)
}

// SetFirstIndex sets the value in firstIndex.
func (p DrawIndexedIndirectCommand) SetFirstIndex(value uint32) {
	p.ptr.firstIndex = (C.uint32_t)(value)
}

// GetVertexOffset returns the value in vertexOffset.
func (p DrawIndexedIndirectCommand) GetVertexOffset() int32 {
	return int32(p.ptr.vertexOffset)
}

// SetVertexOffset sets the value in vertexOffset.
func (p DrawIndexedIndirectCommand) SetVertexOffset(value int32) {
	p.ptr.vertexOffset = (C.int32_t)(value)
}

// GetFirstInstance returns the value in firstInstance.
func (p DrawIndexedIndirectCommand) GetFirstInstance() uint32 {
	return uint32(p.ptr.firstInstance)
}

// SetFirstInstance sets the value in firstInstance.
func (p DrawIndexedIndirectCommand) SetFirstInstance(value uint32) {
	p.ptr.firstInstance = (C.uint32_t)(value)
}

// DrawIndirectCommand wraps VkDrawIndirectCommand.
type DrawIndirectCommand struct {
	ptr *C.VkDrawIndirectCommand
}

// DrawIndirectCommandNil is a null pointer.
var DrawIndirectCommandNil DrawIndirectCommand

// DrawIndirectCommandSizeOf is the byte size of VkDrawIndirectCommand.
const DrawIndirectCommandSizeOf = int(C.sizeof_VkDrawIndirectCommand)

// DrawIndirectCommandFromPtr converts a raw pointer to a DrawIndirectCommand.
func DrawIndirectCommandFromPtr(ptr unsafe.Pointer) DrawIndirectCommand {
	return DrawIndirectCommand{ptr: (*C.VkDrawIndirectCommand)(ptr)}
}

// DrawIndirectCommandAlloc allocates a continuous block of VkDrawIndirectCommand.
func DrawIndirectCommandAlloc(alloc ffi.Allocator, count int) DrawIndirectCommand {
	ptr := alloc.Allocate(DrawIndirectCommandSizeOf * count)
	return DrawIndirectCommand{ptr: (*C.VkDrawIndirectCommand)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p DrawIndirectCommand) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p DrawIndirectCommand) Offset(offset int) DrawIndirectCommand {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*DrawIndirectCommandSizeOf)
	return DrawIndirectCommand{ptr: (*C.VkDrawIndirectCommand)(ptr)}
}

// GetVertexCount returns the value in vertexCount.
func (p DrawIndirectCommand) GetVertexCount() uint32 {
	return uint32(p.ptr.vertexCount)
}

// SetVertexCount sets the value in vertexCount.
func (p DrawIndirectCommand) SetVertexCount(value uint32) {
	p.ptr.vertexCount = (C.uint32_t)(value)
}

// GetInstanceCount returns the value in instanceCount.
func (p DrawIndirectCommand) GetInstanceCount() uint32 {
	return uint32(p.ptr.instanceCount)
}

// SetInstanceCount sets the value in instanceCount.
func (p DrawIndirectCommand) SetInstanceCount(value uint32) {
	p.ptr.instanceCount = (C.uint32_t)(value)
}

// GetFirstVertex returns the value in firstVertex.
func (p DrawIndirectCommand) GetFirstVertex() uint32 {
	return uint32(p.ptr.firstVertex)
}

// SetFirstVertex sets the value in firstVertex.
func (p DrawIndirectCommand) SetFirstVertex(value uint32) {
	p.ptr.firstVertex = (C.uint32_t)(value)
}

// GetFirstInstance returns the value in firstInstance.
func (p DrawIndirectCommand) GetFirstInstance() uint32 {
	return uint32(p.ptr.firstInstance)
}

// SetFirstInstance sets the value in firstInstance.
func (p DrawIndirectCommand) SetFirstInstance(value uint32) {
	p.ptr.firstInstance = (C.uint32_t)(value)
}

// EventCreateInfo wraps VkEventCreateInfo.
type EventCreateInfo struct {
	ptr *C.VkEventCreateInfo
}

// EventCreateInfoNil is a null pointer.
var EventCreateInfoNil EventCreateInfo

// EventCreateInfoSizeOf is the byte size of VkEventCreateInfo.
const EventCreateInfoSizeOf = int(C.sizeof_VkEventCreateInfo)

// EventCreateInfoFromPtr converts a raw pointer to a EventCreateInfo.
func EventCreateInfoFromPtr(ptr unsafe.Pointer) EventCreateInfo {
	return EventCreateInfo{ptr: (*C.VkEventCreateInfo)(ptr)}
}

// EventCreateInfoAlloc allocates a continuous block of VkEventCreateInfo.
func EventCreateInfoAlloc(alloc ffi.Allocator, count int) EventCreateInfo {
	ptr := alloc.Allocate(EventCreateInfoSizeOf * count)
	return EventCreateInfo{ptr: (*C.VkEventCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p EventCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p EventCreateInfo) Offset(offset int) EventCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*EventCreateInfoSizeOf)
	return EventCreateInfo{ptr: (*C.VkEventCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p EventCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p EventCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p EventCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p EventCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p EventCreateInfo) GetFlags() EventCreateFlags {
	return EventCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p EventCreateInfo) SetFlags(value EventCreateFlags) {
	p.ptr.flags = (C.VkEventCreateFlags)(value)
}

// ExportFenceCreateInfo wraps VkExportFenceCreateInfo.
type ExportFenceCreateInfo struct {
	ptr *C.VkExportFenceCreateInfo
}

// ExportFenceCreateInfoNil is a null pointer.
var ExportFenceCreateInfoNil ExportFenceCreateInfo

// ExportFenceCreateInfoSizeOf is the byte size of VkExportFenceCreateInfo.
const ExportFenceCreateInfoSizeOf = int(C.sizeof_VkExportFenceCreateInfo)

// ExportFenceCreateInfoFromPtr converts a raw pointer to a ExportFenceCreateInfo.
func ExportFenceCreateInfoFromPtr(ptr unsafe.Pointer) ExportFenceCreateInfo {
	return ExportFenceCreateInfo{ptr: (*C.VkExportFenceCreateInfo)(ptr)}
}

// ExportFenceCreateInfoAlloc allocates a continuous block of VkExportFenceCreateInfo.
func ExportFenceCreateInfoAlloc(alloc ffi.Allocator, count int) ExportFenceCreateInfo {
	ptr := alloc.Allocate(ExportFenceCreateInfoSizeOf * count)
	return ExportFenceCreateInfo{ptr: (*C.VkExportFenceCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ExportFenceCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ExportFenceCreateInfo) Offset(offset int) ExportFenceCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ExportFenceCreateInfoSizeOf)
	return ExportFenceCreateInfo{ptr: (*C.VkExportFenceCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ExportFenceCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ExportFenceCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ExportFenceCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ExportFenceCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetHandleTypes returns the value in handleTypes.
func (p ExportFenceCreateInfo) GetHandleTypes() ExternalFenceHandleTypeFlags {
	return ExternalFenceHandleTypeFlags(p.ptr.handleTypes)
}

// SetHandleTypes sets the value in handleTypes.
func (p ExportFenceCreateInfo) SetHandleTypes(value ExternalFenceHandleTypeFlags) {
	p.ptr.handleTypes = (C.VkExternalFenceHandleTypeFlags)(value)
}

// ExportMemoryAllocateInfo wraps VkExportMemoryAllocateInfo.
type ExportMemoryAllocateInfo struct {
	ptr *C.VkExportMemoryAllocateInfo
}

// ExportMemoryAllocateInfoNil is a null pointer.
var ExportMemoryAllocateInfoNil ExportMemoryAllocateInfo

// ExportMemoryAllocateInfoSizeOf is the byte size of VkExportMemoryAllocateInfo.
const ExportMemoryAllocateInfoSizeOf = int(C.sizeof_VkExportMemoryAllocateInfo)

// ExportMemoryAllocateInfoFromPtr converts a raw pointer to a ExportMemoryAllocateInfo.
func ExportMemoryAllocateInfoFromPtr(ptr unsafe.Pointer) ExportMemoryAllocateInfo {
	return ExportMemoryAllocateInfo{ptr: (*C.VkExportMemoryAllocateInfo)(ptr)}
}

// ExportMemoryAllocateInfoAlloc allocates a continuous block of VkExportMemoryAllocateInfo.
func ExportMemoryAllocateInfoAlloc(alloc ffi.Allocator, count int) ExportMemoryAllocateInfo {
	ptr := alloc.Allocate(ExportMemoryAllocateInfoSizeOf * count)
	return ExportMemoryAllocateInfo{ptr: (*C.VkExportMemoryAllocateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ExportMemoryAllocateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ExportMemoryAllocateInfo) Offset(offset int) ExportMemoryAllocateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ExportMemoryAllocateInfoSizeOf)
	return ExportMemoryAllocateInfo{ptr: (*C.VkExportMemoryAllocateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ExportMemoryAllocateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ExportMemoryAllocateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ExportMemoryAllocateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ExportMemoryAllocateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetHandleTypes returns the value in handleTypes.
func (p ExportMemoryAllocateInfo) GetHandleTypes() ExternalMemoryHandleTypeFlags {
	return ExternalMemoryHandleTypeFlags(p.ptr.handleTypes)
}

// SetHandleTypes sets the value in handleTypes.
func (p ExportMemoryAllocateInfo) SetHandleTypes(value ExternalMemoryHandleTypeFlags) {
	p.ptr.handleTypes = (C.VkExternalMemoryHandleTypeFlags)(value)
}

// ExportSemaphoreCreateInfo wraps VkExportSemaphoreCreateInfo.
type ExportSemaphoreCreateInfo struct {
	ptr *C.VkExportSemaphoreCreateInfo
}

// ExportSemaphoreCreateInfoNil is a null pointer.
var ExportSemaphoreCreateInfoNil ExportSemaphoreCreateInfo

// ExportSemaphoreCreateInfoSizeOf is the byte size of VkExportSemaphoreCreateInfo.
const ExportSemaphoreCreateInfoSizeOf = int(C.sizeof_VkExportSemaphoreCreateInfo)

// ExportSemaphoreCreateInfoFromPtr converts a raw pointer to a ExportSemaphoreCreateInfo.
func ExportSemaphoreCreateInfoFromPtr(ptr unsafe.Pointer) ExportSemaphoreCreateInfo {
	return ExportSemaphoreCreateInfo{ptr: (*C.VkExportSemaphoreCreateInfo)(ptr)}
}

// ExportSemaphoreCreateInfoAlloc allocates a continuous block of VkExportSemaphoreCreateInfo.
func ExportSemaphoreCreateInfoAlloc(alloc ffi.Allocator, count int) ExportSemaphoreCreateInfo {
	ptr := alloc.Allocate(ExportSemaphoreCreateInfoSizeOf * count)
	return ExportSemaphoreCreateInfo{ptr: (*C.VkExportSemaphoreCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ExportSemaphoreCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ExportSemaphoreCreateInfo) Offset(offset int) ExportSemaphoreCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ExportSemaphoreCreateInfoSizeOf)
	return ExportSemaphoreCreateInfo{ptr: (*C.VkExportSemaphoreCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ExportSemaphoreCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ExportSemaphoreCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ExportSemaphoreCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ExportSemaphoreCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetHandleTypes returns the value in handleTypes.
func (p ExportSemaphoreCreateInfo) GetHandleTypes() ExternalSemaphoreHandleTypeFlags {
	return ExternalSemaphoreHandleTypeFlags(p.ptr.handleTypes)
}

// SetHandleTypes sets the value in handleTypes.
func (p ExportSemaphoreCreateInfo) SetHandleTypes(value ExternalSemaphoreHandleTypeFlags) {
	p.ptr.handleTypes = (C.VkExternalSemaphoreHandleTypeFlags)(value)
}

// ExtensionProperties wraps VkExtensionProperties.
type ExtensionProperties struct {
	ptr *C.VkExtensionProperties
}

// ExtensionPropertiesNil is a null pointer.
var ExtensionPropertiesNil ExtensionProperties

// ExtensionPropertiesSizeOf is the byte size of VkExtensionProperties.
const ExtensionPropertiesSizeOf = int(C.sizeof_VkExtensionProperties)

// ExtensionPropertiesFromPtr converts a raw pointer to a ExtensionProperties.
func ExtensionPropertiesFromPtr(ptr unsafe.Pointer) ExtensionProperties {
	return ExtensionProperties{ptr: (*C.VkExtensionProperties)(ptr)}
}

// ExtensionPropertiesAlloc allocates a continuous block of VkExtensionProperties.
func ExtensionPropertiesAlloc(alloc ffi.Allocator, count int) ExtensionProperties {
	ptr := alloc.Allocate(ExtensionPropertiesSizeOf * count)
	return ExtensionProperties{ptr: (*C.VkExtensionProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ExtensionProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ExtensionProperties) Offset(offset int) ExtensionProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ExtensionPropertiesSizeOf)
	return ExtensionProperties{ptr: (*C.VkExtensionProperties)(ptr)}
}

// ExtensionProperties.extensionName is unsupported: category unsupported.

// GetSpecVersion returns the value in specVersion.
func (p ExtensionProperties) GetSpecVersion() uint32 {
	return uint32(p.ptr.specVersion)
}

// SetSpecVersion sets the value in specVersion.
func (p ExtensionProperties) SetSpecVersion(value uint32) {
	p.ptr.specVersion = (C.uint32_t)(value)
}

// Extent2D wraps VkExtent2D.
type Extent2D struct {
	ptr *C.VkExtent2D
}

// Extent2DNil is a null pointer.
var Extent2DNil Extent2D

// Extent2DSizeOf is the byte size of VkExtent2D.
const Extent2DSizeOf = int(C.sizeof_VkExtent2D)

// Extent2DFromPtr converts a raw pointer to a Extent2D.
func Extent2DFromPtr(ptr unsafe.Pointer) Extent2D {
	return Extent2D{ptr: (*C.VkExtent2D)(ptr)}
}

// Extent2DAlloc allocates a continuous block of VkExtent2D.
func Extent2DAlloc(alloc ffi.Allocator, count int) Extent2D {
	ptr := alloc.Allocate(Extent2DSizeOf * count)
	return Extent2D{ptr: (*C.VkExtent2D)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p Extent2D) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p Extent2D) Offset(offset int) Extent2D {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*Extent2DSizeOf)
	return Extent2D{ptr: (*C.VkExtent2D)(ptr)}
}

// GetWidth returns the value in width.
func (p Extent2D) GetWidth() uint32 {
	return uint32(p.ptr.width)
}

// SetWidth sets the value in width.
func (p Extent2D) SetWidth(value uint32) {
	p.ptr.width = (C.uint32_t)(value)
}

// GetHeight returns the value in height.
func (p Extent2D) GetHeight() uint32 {
	return uint32(p.ptr.height)
}

// SetHeight sets the value in height.
func (p Extent2D) SetHeight(value uint32) {
	p.ptr.height = (C.uint32_t)(value)
}

// Extent3D wraps VkExtent3D.
type Extent3D struct {
	ptr *C.VkExtent3D
}

// Extent3DNil is a null pointer.
var Extent3DNil Extent3D

// Extent3DSizeOf is the byte size of VkExtent3D.
const Extent3DSizeOf = int(C.sizeof_VkExtent3D)

// Extent3DFromPtr converts a raw pointer to a Extent3D.
func Extent3DFromPtr(ptr unsafe.Pointer) Extent3D {
	return Extent3D{ptr: (*C.VkExtent3D)(ptr)}
}

// Extent3DAlloc allocates a continuous block of VkExtent3D.
func Extent3DAlloc(alloc ffi.Allocator, count int) Extent3D {
	ptr := alloc.Allocate(Extent3DSizeOf * count)
	return Extent3D{ptr: (*C.VkExtent3D)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p Extent3D) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p Extent3D) Offset(offset int) Extent3D {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*Extent3DSizeOf)
	return Extent3D{ptr: (*C.VkExtent3D)(ptr)}
}

// GetWidth returns the value in width.
func (p Extent3D) GetWidth() uint32 {
	return uint32(p.ptr.width)
}

// SetWidth sets the value in width.
func (p Extent3D) SetWidth(value uint32) {
	p.ptr.width = (C.uint32_t)(value)
}

// GetHeight returns the value in height.
func (p Extent3D) GetHeight() uint32 {
	return uint32(p.ptr.height)
}

// SetHeight sets the value in height.
func (p Extent3D) SetHeight(value uint32) {
	p.ptr.height = (C.uint32_t)(value)
}

// GetDepth returns the value in depth.
func (p Extent3D) GetDepth() uint32 {
	return uint32(p.ptr.depth)
}

// SetDepth sets the value in depth.
func (p Extent3D) SetDepth(value uint32) {
	p.ptr.depth = (C.uint32_t)(value)
}

// ExternalBufferProperties wraps VkExternalBufferProperties.
type ExternalBufferProperties struct {
	ptr *C.VkExternalBufferProperties
}

// ExternalBufferPropertiesNil is a null pointer.
var ExternalBufferPropertiesNil ExternalBufferProperties

// ExternalBufferPropertiesSizeOf is the byte size of VkExternalBufferProperties.
const ExternalBufferPropertiesSizeOf = int(C.sizeof_VkExternalBufferProperties)

// ExternalBufferPropertiesFromPtr converts a raw pointer to a ExternalBufferProperties.
func ExternalBufferPropertiesFromPtr(ptr unsafe.Pointer) ExternalBufferProperties {
	return ExternalBufferProperties{ptr: (*C.VkExternalBufferProperties)(ptr)}
}

// ExternalBufferPropertiesAlloc allocates a continuous block of VkExternalBufferProperties.
func ExternalBufferPropertiesAlloc(alloc ffi.Allocator, count int) ExternalBufferProperties {
	ptr := alloc.Allocate(ExternalBufferPropertiesSizeOf * count)
	return ExternalBufferProperties{ptr: (*C.VkExternalBufferProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ExternalBufferProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ExternalBufferProperties) Offset(offset int) ExternalBufferProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ExternalBufferPropertiesSizeOf)
	return ExternalBufferProperties{ptr: (*C.VkExternalBufferProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p ExternalBufferProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ExternalBufferProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ExternalBufferProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ExternalBufferProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefExternalMemoryProperties returns pointer to the externalMemoryProperties field.
func (p ExternalBufferProperties) RefExternalMemoryProperties() ExternalMemoryProperties {
	return ExternalMemoryProperties{ptr: (*C.VkExternalMemoryProperties)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkExternalBufferProperties_externalMemoryProperties)))}
}

// ExternalFenceProperties wraps VkExternalFenceProperties.
type ExternalFenceProperties struct {
	ptr *C.VkExternalFenceProperties
}

// ExternalFencePropertiesNil is a null pointer.
var ExternalFencePropertiesNil ExternalFenceProperties

// ExternalFencePropertiesSizeOf is the byte size of VkExternalFenceProperties.
const ExternalFencePropertiesSizeOf = int(C.sizeof_VkExternalFenceProperties)

// ExternalFencePropertiesFromPtr converts a raw pointer to a ExternalFenceProperties.
func ExternalFencePropertiesFromPtr(ptr unsafe.Pointer) ExternalFenceProperties {
	return ExternalFenceProperties{ptr: (*C.VkExternalFenceProperties)(ptr)}
}

// ExternalFencePropertiesAlloc allocates a continuous block of VkExternalFenceProperties.
func ExternalFencePropertiesAlloc(alloc ffi.Allocator, count int) ExternalFenceProperties {
	ptr := alloc.Allocate(ExternalFencePropertiesSizeOf * count)
	return ExternalFenceProperties{ptr: (*C.VkExternalFenceProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ExternalFenceProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ExternalFenceProperties) Offset(offset int) ExternalFenceProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ExternalFencePropertiesSizeOf)
	return ExternalFenceProperties{ptr: (*C.VkExternalFenceProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p ExternalFenceProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ExternalFenceProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ExternalFenceProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ExternalFenceProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetExportFromImportedHandleTypes returns the value in exportFromImportedHandleTypes.
func (p ExternalFenceProperties) GetExportFromImportedHandleTypes() ExternalFenceHandleTypeFlags {
	return ExternalFenceHandleTypeFlags(p.ptr.exportFromImportedHandleTypes)
}

// SetExportFromImportedHandleTypes sets the value in exportFromImportedHandleTypes.
func (p ExternalFenceProperties) SetExportFromImportedHandleTypes(value ExternalFenceHandleTypeFlags) {
	p.ptr.exportFromImportedHandleTypes = (C.VkExternalFenceHandleTypeFlags)(value)
}

// GetCompatibleHandleTypes returns the value in compatibleHandleTypes.
func (p ExternalFenceProperties) GetCompatibleHandleTypes() ExternalFenceHandleTypeFlags {
	return ExternalFenceHandleTypeFlags(p.ptr.compatibleHandleTypes)
}

// SetCompatibleHandleTypes sets the value in compatibleHandleTypes.
func (p ExternalFenceProperties) SetCompatibleHandleTypes(value ExternalFenceHandleTypeFlags) {
	p.ptr.compatibleHandleTypes = (C.VkExternalFenceHandleTypeFlags)(value)
}

// GetExternalFenceFeatures returns the value in externalFenceFeatures.
func (p ExternalFenceProperties) GetExternalFenceFeatures() ExternalFenceFeatureFlags {
	return ExternalFenceFeatureFlags(p.ptr.externalFenceFeatures)
}

// SetExternalFenceFeatures sets the value in externalFenceFeatures.
func (p ExternalFenceProperties) SetExternalFenceFeatures(value ExternalFenceFeatureFlags) {
	p.ptr.externalFenceFeatures = (C.VkExternalFenceFeatureFlags)(value)
}

// ExternalImageFormatProperties wraps VkExternalImageFormatProperties.
type ExternalImageFormatProperties struct {
	ptr *C.VkExternalImageFormatProperties
}

// ExternalImageFormatPropertiesNil is a null pointer.
var ExternalImageFormatPropertiesNil ExternalImageFormatProperties

// ExternalImageFormatPropertiesSizeOf is the byte size of VkExternalImageFormatProperties.
const ExternalImageFormatPropertiesSizeOf = int(C.sizeof_VkExternalImageFormatProperties)

// ExternalImageFormatPropertiesFromPtr converts a raw pointer to a ExternalImageFormatProperties.
func ExternalImageFormatPropertiesFromPtr(ptr unsafe.Pointer) ExternalImageFormatProperties {
	return ExternalImageFormatProperties{ptr: (*C.VkExternalImageFormatProperties)(ptr)}
}

// ExternalImageFormatPropertiesAlloc allocates a continuous block of VkExternalImageFormatProperties.
func ExternalImageFormatPropertiesAlloc(alloc ffi.Allocator, count int) ExternalImageFormatProperties {
	ptr := alloc.Allocate(ExternalImageFormatPropertiesSizeOf * count)
	return ExternalImageFormatProperties{ptr: (*C.VkExternalImageFormatProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ExternalImageFormatProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ExternalImageFormatProperties) Offset(offset int) ExternalImageFormatProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ExternalImageFormatPropertiesSizeOf)
	return ExternalImageFormatProperties{ptr: (*C.VkExternalImageFormatProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p ExternalImageFormatProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ExternalImageFormatProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ExternalImageFormatProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ExternalImageFormatProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefExternalMemoryProperties returns pointer to the externalMemoryProperties field.
func (p ExternalImageFormatProperties) RefExternalMemoryProperties() ExternalMemoryProperties {
	return ExternalMemoryProperties{ptr: (*C.VkExternalMemoryProperties)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkExternalImageFormatProperties_externalMemoryProperties)))}
}

// ExternalMemoryBufferCreateInfo wraps VkExternalMemoryBufferCreateInfo.
type ExternalMemoryBufferCreateInfo struct {
	ptr *C.VkExternalMemoryBufferCreateInfo
}

// ExternalMemoryBufferCreateInfoNil is a null pointer.
var ExternalMemoryBufferCreateInfoNil ExternalMemoryBufferCreateInfo

// ExternalMemoryBufferCreateInfoSizeOf is the byte size of VkExternalMemoryBufferCreateInfo.
const ExternalMemoryBufferCreateInfoSizeOf = int(C.sizeof_VkExternalMemoryBufferCreateInfo)

// ExternalMemoryBufferCreateInfoFromPtr converts a raw pointer to a ExternalMemoryBufferCreateInfo.
func ExternalMemoryBufferCreateInfoFromPtr(ptr unsafe.Pointer) ExternalMemoryBufferCreateInfo {
	return ExternalMemoryBufferCreateInfo{ptr: (*C.VkExternalMemoryBufferCreateInfo)(ptr)}
}

// ExternalMemoryBufferCreateInfoAlloc allocates a continuous block of VkExternalMemoryBufferCreateInfo.
func ExternalMemoryBufferCreateInfoAlloc(alloc ffi.Allocator, count int) ExternalMemoryBufferCreateInfo {
	ptr := alloc.Allocate(ExternalMemoryBufferCreateInfoSizeOf * count)
	return ExternalMemoryBufferCreateInfo{ptr: (*C.VkExternalMemoryBufferCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ExternalMemoryBufferCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ExternalMemoryBufferCreateInfo) Offset(offset int) ExternalMemoryBufferCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ExternalMemoryBufferCreateInfoSizeOf)
	return ExternalMemoryBufferCreateInfo{ptr: (*C.VkExternalMemoryBufferCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ExternalMemoryBufferCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ExternalMemoryBufferCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ExternalMemoryBufferCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ExternalMemoryBufferCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetHandleTypes returns the value in handleTypes.
func (p ExternalMemoryBufferCreateInfo) GetHandleTypes() ExternalMemoryHandleTypeFlags {
	return ExternalMemoryHandleTypeFlags(p.ptr.handleTypes)
}

// SetHandleTypes sets the value in handleTypes.
func (p ExternalMemoryBufferCreateInfo) SetHandleTypes(value ExternalMemoryHandleTypeFlags) {
	p.ptr.handleTypes = (C.VkExternalMemoryHandleTypeFlags)(value)
}

// ExternalMemoryImageCreateInfo wraps VkExternalMemoryImageCreateInfo.
type ExternalMemoryImageCreateInfo struct {
	ptr *C.VkExternalMemoryImageCreateInfo
}

// ExternalMemoryImageCreateInfoNil is a null pointer.
var ExternalMemoryImageCreateInfoNil ExternalMemoryImageCreateInfo

// ExternalMemoryImageCreateInfoSizeOf is the byte size of VkExternalMemoryImageCreateInfo.
const ExternalMemoryImageCreateInfoSizeOf = int(C.sizeof_VkExternalMemoryImageCreateInfo)

// ExternalMemoryImageCreateInfoFromPtr converts a raw pointer to a ExternalMemoryImageCreateInfo.
func ExternalMemoryImageCreateInfoFromPtr(ptr unsafe.Pointer) ExternalMemoryImageCreateInfo {
	return ExternalMemoryImageCreateInfo{ptr: (*C.VkExternalMemoryImageCreateInfo)(ptr)}
}

// ExternalMemoryImageCreateInfoAlloc allocates a continuous block of VkExternalMemoryImageCreateInfo.
func ExternalMemoryImageCreateInfoAlloc(alloc ffi.Allocator, count int) ExternalMemoryImageCreateInfo {
	ptr := alloc.Allocate(ExternalMemoryImageCreateInfoSizeOf * count)
	return ExternalMemoryImageCreateInfo{ptr: (*C.VkExternalMemoryImageCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ExternalMemoryImageCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ExternalMemoryImageCreateInfo) Offset(offset int) ExternalMemoryImageCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ExternalMemoryImageCreateInfoSizeOf)
	return ExternalMemoryImageCreateInfo{ptr: (*C.VkExternalMemoryImageCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ExternalMemoryImageCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ExternalMemoryImageCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ExternalMemoryImageCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ExternalMemoryImageCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetHandleTypes returns the value in handleTypes.
func (p ExternalMemoryImageCreateInfo) GetHandleTypes() ExternalMemoryHandleTypeFlags {
	return ExternalMemoryHandleTypeFlags(p.ptr.handleTypes)
}

// SetHandleTypes sets the value in handleTypes.
func (p ExternalMemoryImageCreateInfo) SetHandleTypes(value ExternalMemoryHandleTypeFlags) {
	p.ptr.handleTypes = (C.VkExternalMemoryHandleTypeFlags)(value)
}

// ExternalMemoryProperties wraps VkExternalMemoryProperties.
type ExternalMemoryProperties struct {
	ptr *C.VkExternalMemoryProperties
}

// ExternalMemoryPropertiesNil is a null pointer.
var ExternalMemoryPropertiesNil ExternalMemoryProperties

// ExternalMemoryPropertiesSizeOf is the byte size of VkExternalMemoryProperties.
const ExternalMemoryPropertiesSizeOf = int(C.sizeof_VkExternalMemoryProperties)

// ExternalMemoryPropertiesFromPtr converts a raw pointer to a ExternalMemoryProperties.
func ExternalMemoryPropertiesFromPtr(ptr unsafe.Pointer) ExternalMemoryProperties {
	return ExternalMemoryProperties{ptr: (*C.VkExternalMemoryProperties)(ptr)}
}

// ExternalMemoryPropertiesAlloc allocates a continuous block of VkExternalMemoryProperties.
func ExternalMemoryPropertiesAlloc(alloc ffi.Allocator, count int) ExternalMemoryProperties {
	ptr := alloc.Allocate(ExternalMemoryPropertiesSizeOf * count)
	return ExternalMemoryProperties{ptr: (*C.VkExternalMemoryProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ExternalMemoryProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ExternalMemoryProperties) Offset(offset int) ExternalMemoryProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ExternalMemoryPropertiesSizeOf)
	return ExternalMemoryProperties{ptr: (*C.VkExternalMemoryProperties)(ptr)}
}

// GetExternalMemoryFeatures returns the value in externalMemoryFeatures.
func (p ExternalMemoryProperties) GetExternalMemoryFeatures() ExternalMemoryFeatureFlags {
	return ExternalMemoryFeatureFlags(p.ptr.externalMemoryFeatures)
}

// SetExternalMemoryFeatures sets the value in externalMemoryFeatures.
func (p ExternalMemoryProperties) SetExternalMemoryFeatures(value ExternalMemoryFeatureFlags) {
	p.ptr.externalMemoryFeatures = (C.VkExternalMemoryFeatureFlags)(value)
}

// GetExportFromImportedHandleTypes returns the value in exportFromImportedHandleTypes.
func (p ExternalMemoryProperties) GetExportFromImportedHandleTypes() ExternalMemoryHandleTypeFlags {
	return ExternalMemoryHandleTypeFlags(p.ptr.exportFromImportedHandleTypes)
}

// SetExportFromImportedHandleTypes sets the value in exportFromImportedHandleTypes.
func (p ExternalMemoryProperties) SetExportFromImportedHandleTypes(value ExternalMemoryHandleTypeFlags) {
	p.ptr.exportFromImportedHandleTypes = (C.VkExternalMemoryHandleTypeFlags)(value)
}

// GetCompatibleHandleTypes returns the value in compatibleHandleTypes.
func (p ExternalMemoryProperties) GetCompatibleHandleTypes() ExternalMemoryHandleTypeFlags {
	return ExternalMemoryHandleTypeFlags(p.ptr.compatibleHandleTypes)
}

// SetCompatibleHandleTypes sets the value in compatibleHandleTypes.
func (p ExternalMemoryProperties) SetCompatibleHandleTypes(value ExternalMemoryHandleTypeFlags) {
	p.ptr.compatibleHandleTypes = (C.VkExternalMemoryHandleTypeFlags)(value)
}

// ExternalSemaphoreProperties wraps VkExternalSemaphoreProperties.
type ExternalSemaphoreProperties struct {
	ptr *C.VkExternalSemaphoreProperties
}

// ExternalSemaphorePropertiesNil is a null pointer.
var ExternalSemaphorePropertiesNil ExternalSemaphoreProperties

// ExternalSemaphorePropertiesSizeOf is the byte size of VkExternalSemaphoreProperties.
const ExternalSemaphorePropertiesSizeOf = int(C.sizeof_VkExternalSemaphoreProperties)

// ExternalSemaphorePropertiesFromPtr converts a raw pointer to a ExternalSemaphoreProperties.
func ExternalSemaphorePropertiesFromPtr(ptr unsafe.Pointer) ExternalSemaphoreProperties {
	return ExternalSemaphoreProperties{ptr: (*C.VkExternalSemaphoreProperties)(ptr)}
}

// ExternalSemaphorePropertiesAlloc allocates a continuous block of VkExternalSemaphoreProperties.
func ExternalSemaphorePropertiesAlloc(alloc ffi.Allocator, count int) ExternalSemaphoreProperties {
	ptr := alloc.Allocate(ExternalSemaphorePropertiesSizeOf * count)
	return ExternalSemaphoreProperties{ptr: (*C.VkExternalSemaphoreProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ExternalSemaphoreProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ExternalSemaphoreProperties) Offset(offset int) ExternalSemaphoreProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ExternalSemaphorePropertiesSizeOf)
	return ExternalSemaphoreProperties{ptr: (*C.VkExternalSemaphoreProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p ExternalSemaphoreProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ExternalSemaphoreProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ExternalSemaphoreProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ExternalSemaphoreProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetExportFromImportedHandleTypes returns the value in exportFromImportedHandleTypes.
func (p ExternalSemaphoreProperties) GetExportFromImportedHandleTypes() ExternalSemaphoreHandleTypeFlags {
	return ExternalSemaphoreHandleTypeFlags(p.ptr.exportFromImportedHandleTypes)
}

// SetExportFromImportedHandleTypes sets the value in exportFromImportedHandleTypes.
func (p ExternalSemaphoreProperties) SetExportFromImportedHandleTypes(value ExternalSemaphoreHandleTypeFlags) {
	p.ptr.exportFromImportedHandleTypes = (C.VkExternalSemaphoreHandleTypeFlags)(value)
}

// GetCompatibleHandleTypes returns the value in compatibleHandleTypes.
func (p ExternalSemaphoreProperties) GetCompatibleHandleTypes() ExternalSemaphoreHandleTypeFlags {
	return ExternalSemaphoreHandleTypeFlags(p.ptr.compatibleHandleTypes)
}

// SetCompatibleHandleTypes sets the value in compatibleHandleTypes.
func (p ExternalSemaphoreProperties) SetCompatibleHandleTypes(value ExternalSemaphoreHandleTypeFlags) {
	p.ptr.compatibleHandleTypes = (C.VkExternalSemaphoreHandleTypeFlags)(value)
}

// GetExternalSemaphoreFeatures returns the value in externalSemaphoreFeatures.
func (p ExternalSemaphoreProperties) GetExternalSemaphoreFeatures() ExternalSemaphoreFeatureFlags {
	return ExternalSemaphoreFeatureFlags(p.ptr.externalSemaphoreFeatures)
}

// SetExternalSemaphoreFeatures sets the value in externalSemaphoreFeatures.
func (p ExternalSemaphoreProperties) SetExternalSemaphoreFeatures(value ExternalSemaphoreFeatureFlags) {
	p.ptr.externalSemaphoreFeatures = (C.VkExternalSemaphoreFeatureFlags)(value)
}

// FenceCreateInfo wraps VkFenceCreateInfo.
type FenceCreateInfo struct {
	ptr *C.VkFenceCreateInfo
}

// FenceCreateInfoNil is a null pointer.
var FenceCreateInfoNil FenceCreateInfo

// FenceCreateInfoSizeOf is the byte size of VkFenceCreateInfo.
const FenceCreateInfoSizeOf = int(C.sizeof_VkFenceCreateInfo)

// FenceCreateInfoFromPtr converts a raw pointer to a FenceCreateInfo.
func FenceCreateInfoFromPtr(ptr unsafe.Pointer) FenceCreateInfo {
	return FenceCreateInfo{ptr: (*C.VkFenceCreateInfo)(ptr)}
}

// FenceCreateInfoAlloc allocates a continuous block of VkFenceCreateInfo.
func FenceCreateInfoAlloc(alloc ffi.Allocator, count int) FenceCreateInfo {
	ptr := alloc.Allocate(FenceCreateInfoSizeOf * count)
	return FenceCreateInfo{ptr: (*C.VkFenceCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p FenceCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p FenceCreateInfo) Offset(offset int) FenceCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*FenceCreateInfoSizeOf)
	return FenceCreateInfo{ptr: (*C.VkFenceCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p FenceCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p FenceCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p FenceCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p FenceCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p FenceCreateInfo) GetFlags() FenceCreateFlags {
	return FenceCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p FenceCreateInfo) SetFlags(value FenceCreateFlags) {
	p.ptr.flags = (C.VkFenceCreateFlags)(value)
}

// FormatProperties wraps VkFormatProperties.
type FormatProperties struct {
	ptr *C.VkFormatProperties
}

// FormatPropertiesNil is a null pointer.
var FormatPropertiesNil FormatProperties

// FormatPropertiesSizeOf is the byte size of VkFormatProperties.
const FormatPropertiesSizeOf = int(C.sizeof_VkFormatProperties)

// FormatPropertiesFromPtr converts a raw pointer to a FormatProperties.
func FormatPropertiesFromPtr(ptr unsafe.Pointer) FormatProperties {
	return FormatProperties{ptr: (*C.VkFormatProperties)(ptr)}
}

// FormatPropertiesAlloc allocates a continuous block of VkFormatProperties.
func FormatPropertiesAlloc(alloc ffi.Allocator, count int) FormatProperties {
	ptr := alloc.Allocate(FormatPropertiesSizeOf * count)
	return FormatProperties{ptr: (*C.VkFormatProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p FormatProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p FormatProperties) Offset(offset int) FormatProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*FormatPropertiesSizeOf)
	return FormatProperties{ptr: (*C.VkFormatProperties)(ptr)}
}

// GetLinearTilingFeatures returns the value in linearTilingFeatures.
func (p FormatProperties) GetLinearTilingFeatures() FormatFeatureFlags {
	return FormatFeatureFlags(p.ptr.linearTilingFeatures)
}

// SetLinearTilingFeatures sets the value in linearTilingFeatures.
func (p FormatProperties) SetLinearTilingFeatures(value FormatFeatureFlags) {
	p.ptr.linearTilingFeatures = (C.VkFormatFeatureFlags)(value)
}

// GetOptimalTilingFeatures returns the value in optimalTilingFeatures.
func (p FormatProperties) GetOptimalTilingFeatures() FormatFeatureFlags {
	return FormatFeatureFlags(p.ptr.optimalTilingFeatures)
}

// SetOptimalTilingFeatures sets the value in optimalTilingFeatures.
func (p FormatProperties) SetOptimalTilingFeatures(value FormatFeatureFlags) {
	p.ptr.optimalTilingFeatures = (C.VkFormatFeatureFlags)(value)
}

// GetBufferFeatures returns the value in bufferFeatures.
func (p FormatProperties) GetBufferFeatures() FormatFeatureFlags {
	return FormatFeatureFlags(p.ptr.bufferFeatures)
}

// SetBufferFeatures sets the value in bufferFeatures.
func (p FormatProperties) SetBufferFeatures(value FormatFeatureFlags) {
	p.ptr.bufferFeatures = (C.VkFormatFeatureFlags)(value)
}

// FormatProperties2 wraps VkFormatProperties2.
type FormatProperties2 struct {
	ptr *C.VkFormatProperties2
}

// FormatProperties2Nil is a null pointer.
var FormatProperties2Nil FormatProperties2

// FormatProperties2SizeOf is the byte size of VkFormatProperties2.
const FormatProperties2SizeOf = int(C.sizeof_VkFormatProperties2)

// FormatProperties2FromPtr converts a raw pointer to a FormatProperties2.
func FormatProperties2FromPtr(ptr unsafe.Pointer) FormatProperties2 {
	return FormatProperties2{ptr: (*C.VkFormatProperties2)(ptr)}
}

// FormatProperties2Alloc allocates a continuous block of VkFormatProperties2.
func FormatProperties2Alloc(alloc ffi.Allocator, count int) FormatProperties2 {
	ptr := alloc.Allocate(FormatProperties2SizeOf * count)
	return FormatProperties2{ptr: (*C.VkFormatProperties2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p FormatProperties2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p FormatProperties2) Offset(offset int) FormatProperties2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*FormatProperties2SizeOf)
	return FormatProperties2{ptr: (*C.VkFormatProperties2)(ptr)}
}

// GetSType returns the value in sType.
func (p FormatProperties2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p FormatProperties2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p FormatProperties2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p FormatProperties2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefFormatProperties returns pointer to the formatProperties field.
func (p FormatProperties2) RefFormatProperties() FormatProperties {
	return FormatProperties{ptr: (*C.VkFormatProperties)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkFormatProperties2_formatProperties)))}
}

// FormatProperties3 wraps VkFormatProperties3.
type FormatProperties3 struct {
	ptr *C.VkFormatProperties3
}

// FormatProperties3Nil is a null pointer.
var FormatProperties3Nil FormatProperties3

// FormatProperties3SizeOf is the byte size of VkFormatProperties3.
const FormatProperties3SizeOf = int(C.sizeof_VkFormatProperties3)

// FormatProperties3FromPtr converts a raw pointer to a FormatProperties3.
func FormatProperties3FromPtr(ptr unsafe.Pointer) FormatProperties3 {
	return FormatProperties3{ptr: (*C.VkFormatProperties3)(ptr)}
}

// FormatProperties3Alloc allocates a continuous block of VkFormatProperties3.
func FormatProperties3Alloc(alloc ffi.Allocator, count int) FormatProperties3 {
	ptr := alloc.Allocate(FormatProperties3SizeOf * count)
	return FormatProperties3{ptr: (*C.VkFormatProperties3)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p FormatProperties3) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p FormatProperties3) Offset(offset int) FormatProperties3 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*FormatProperties3SizeOf)
	return FormatProperties3{ptr: (*C.VkFormatProperties3)(ptr)}
}

// GetSType returns the value in sType.
func (p FormatProperties3) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p FormatProperties3) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p FormatProperties3) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p FormatProperties3) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetLinearTilingFeatures returns the value in linearTilingFeatures.
func (p FormatProperties3) GetLinearTilingFeatures() FormatFeatureFlags2 {
	return FormatFeatureFlags2(p.ptr.linearTilingFeatures)
}

// SetLinearTilingFeatures sets the value in linearTilingFeatures.
func (p FormatProperties3) SetLinearTilingFeatures(value FormatFeatureFlags2) {
	p.ptr.linearTilingFeatures = (C.VkFormatFeatureFlags2)(value)
}

// GetOptimalTilingFeatures returns the value in optimalTilingFeatures.
func (p FormatProperties3) GetOptimalTilingFeatures() FormatFeatureFlags2 {
	return FormatFeatureFlags2(p.ptr.optimalTilingFeatures)
}

// SetOptimalTilingFeatures sets the value in optimalTilingFeatures.
func (p FormatProperties3) SetOptimalTilingFeatures(value FormatFeatureFlags2) {
	p.ptr.optimalTilingFeatures = (C.VkFormatFeatureFlags2)(value)
}

// GetBufferFeatures returns the value in bufferFeatures.
func (p FormatProperties3) GetBufferFeatures() FormatFeatureFlags2 {
	return FormatFeatureFlags2(p.ptr.bufferFeatures)
}

// SetBufferFeatures sets the value in bufferFeatures.
func (p FormatProperties3) SetBufferFeatures(value FormatFeatureFlags2) {
	p.ptr.bufferFeatures = (C.VkFormatFeatureFlags2)(value)
}

// FramebufferAttachmentImageInfo wraps VkFramebufferAttachmentImageInfo.
type FramebufferAttachmentImageInfo struct {
	ptr *C.VkFramebufferAttachmentImageInfo
}

// FramebufferAttachmentImageInfoNil is a null pointer.
var FramebufferAttachmentImageInfoNil FramebufferAttachmentImageInfo

// FramebufferAttachmentImageInfoSizeOf is the byte size of VkFramebufferAttachmentImageInfo.
const FramebufferAttachmentImageInfoSizeOf = int(C.sizeof_VkFramebufferAttachmentImageInfo)

// FramebufferAttachmentImageInfoFromPtr converts a raw pointer to a FramebufferAttachmentImageInfo.
func FramebufferAttachmentImageInfoFromPtr(ptr unsafe.Pointer) FramebufferAttachmentImageInfo {
	return FramebufferAttachmentImageInfo{ptr: (*C.VkFramebufferAttachmentImageInfo)(ptr)}
}

// FramebufferAttachmentImageInfoAlloc allocates a continuous block of VkFramebufferAttachmentImageInfo.
func FramebufferAttachmentImageInfoAlloc(alloc ffi.Allocator, count int) FramebufferAttachmentImageInfo {
	ptr := alloc.Allocate(FramebufferAttachmentImageInfoSizeOf * count)
	return FramebufferAttachmentImageInfo{ptr: (*C.VkFramebufferAttachmentImageInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p FramebufferAttachmentImageInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p FramebufferAttachmentImageInfo) Offset(offset int) FramebufferAttachmentImageInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*FramebufferAttachmentImageInfoSizeOf)
	return FramebufferAttachmentImageInfo{ptr: (*C.VkFramebufferAttachmentImageInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p FramebufferAttachmentImageInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p FramebufferAttachmentImageInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p FramebufferAttachmentImageInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p FramebufferAttachmentImageInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p FramebufferAttachmentImageInfo) GetFlags() ImageCreateFlags {
	return ImageCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p FramebufferAttachmentImageInfo) SetFlags(value ImageCreateFlags) {
	p.ptr.flags = (C.VkImageCreateFlags)(value)
}

// GetUsage returns the value in usage.
func (p FramebufferAttachmentImageInfo) GetUsage() ImageUsageFlags {
	return ImageUsageFlags(p.ptr.usage)
}

// SetUsage sets the value in usage.
func (p FramebufferAttachmentImageInfo) SetUsage(value ImageUsageFlags) {
	p.ptr.usage = (C.VkImageUsageFlags)(value)
}

// GetWidth returns the value in width.
func (p FramebufferAttachmentImageInfo) GetWidth() uint32 {
	return uint32(p.ptr.width)
}

// SetWidth sets the value in width.
func (p FramebufferAttachmentImageInfo) SetWidth(value uint32) {
	p.ptr.width = (C.uint32_t)(value)
}

// GetHeight returns the value in height.
func (p FramebufferAttachmentImageInfo) GetHeight() uint32 {
	return uint32(p.ptr.height)
}

// SetHeight sets the value in height.
func (p FramebufferAttachmentImageInfo) SetHeight(value uint32) {
	p.ptr.height = (C.uint32_t)(value)
}

// GetLayerCount returns the value in layerCount.
func (p FramebufferAttachmentImageInfo) GetLayerCount() uint32 {
	return uint32(p.ptr.layerCount)
}

// SetLayerCount sets the value in layerCount.
func (p FramebufferAttachmentImageInfo) SetLayerCount(value uint32) {
	p.ptr.layerCount = (C.uint32_t)(value)
}

// GetViewFormatCount returns the value in viewFormatCount.
func (p FramebufferAttachmentImageInfo) GetViewFormatCount() uint32 {
	return uint32(p.ptr.viewFormatCount)
}

// SetViewFormatCount sets the value in viewFormatCount.
func (p FramebufferAttachmentImageInfo) SetViewFormatCount(value uint32) {
	p.ptr.viewFormatCount = (C.uint32_t)(value)
}

// GetPViewFormats returns the value in pViewFormats.
func (p FramebufferAttachmentImageInfo) GetPViewFormats() ffi.Ref[Format] {
	return ffi.RefFromPtr[Format](unsafe.Pointer(p.ptr.pViewFormats))
}

// SetPViewFormats sets the value in pViewFormats.
func (p FramebufferAttachmentImageInfo) SetPViewFormats(value ffi.Ref[Format]) {
	p.ptr.pViewFormats = (*C.VkFormat)(value.Raw())
}

// FramebufferAttachmentsCreateInfo wraps VkFramebufferAttachmentsCreateInfo.
type FramebufferAttachmentsCreateInfo struct {
	ptr *C.VkFramebufferAttachmentsCreateInfo
}

// FramebufferAttachmentsCreateInfoNil is a null pointer.
var FramebufferAttachmentsCreateInfoNil FramebufferAttachmentsCreateInfo

// FramebufferAttachmentsCreateInfoSizeOf is the byte size of VkFramebufferAttachmentsCreateInfo.
const FramebufferAttachmentsCreateInfoSizeOf = int(C.sizeof_VkFramebufferAttachmentsCreateInfo)

// FramebufferAttachmentsCreateInfoFromPtr converts a raw pointer to a FramebufferAttachmentsCreateInfo.
func FramebufferAttachmentsCreateInfoFromPtr(ptr unsafe.Pointer) FramebufferAttachmentsCreateInfo {
	return FramebufferAttachmentsCreateInfo{ptr: (*C.VkFramebufferAttachmentsCreateInfo)(ptr)}
}

// FramebufferAttachmentsCreateInfoAlloc allocates a continuous block of VkFramebufferAttachmentsCreateInfo.
func FramebufferAttachmentsCreateInfoAlloc(alloc ffi.Allocator, count int) FramebufferAttachmentsCreateInfo {
	ptr := alloc.Allocate(FramebufferAttachmentsCreateInfoSizeOf * count)
	return FramebufferAttachmentsCreateInfo{ptr: (*C.VkFramebufferAttachmentsCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p FramebufferAttachmentsCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p FramebufferAttachmentsCreateInfo) Offset(offset int) FramebufferAttachmentsCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*FramebufferAttachmentsCreateInfoSizeOf)
	return FramebufferAttachmentsCreateInfo{ptr: (*C.VkFramebufferAttachmentsCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p FramebufferAttachmentsCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p FramebufferAttachmentsCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p FramebufferAttachmentsCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p FramebufferAttachmentsCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetAttachmentImageInfoCount returns the value in attachmentImageInfoCount.
func (p FramebufferAttachmentsCreateInfo) GetAttachmentImageInfoCount() uint32 {
	return uint32(p.ptr.attachmentImageInfoCount)
}

// SetAttachmentImageInfoCount sets the value in attachmentImageInfoCount.
func (p FramebufferAttachmentsCreateInfo) SetAttachmentImageInfoCount(value uint32) {
	p.ptr.attachmentImageInfoCount = (C.uint32_t)(value)
}

// GetPAttachmentImageInfos returns the value in pAttachmentImageInfos.
func (p FramebufferAttachmentsCreateInfo) GetPAttachmentImageInfos() FramebufferAttachmentImageInfo {
	return FramebufferAttachmentImageInfo{ptr: p.ptr.pAttachmentImageInfos}
}

// SetPAttachmentImageInfos sets the value in pAttachmentImageInfos.
func (p FramebufferAttachmentsCreateInfo) SetPAttachmentImageInfos(value FramebufferAttachmentImageInfo) {
	p.ptr.pAttachmentImageInfos = value.ptr
}

// FramebufferCreateInfo wraps VkFramebufferCreateInfo.
type FramebufferCreateInfo struct {
	ptr *C.VkFramebufferCreateInfo
}

// FramebufferCreateInfoNil is a null pointer.
var FramebufferCreateInfoNil FramebufferCreateInfo

// FramebufferCreateInfoSizeOf is the byte size of VkFramebufferCreateInfo.
const FramebufferCreateInfoSizeOf = int(C.sizeof_VkFramebufferCreateInfo)

// FramebufferCreateInfoFromPtr converts a raw pointer to a FramebufferCreateInfo.
func FramebufferCreateInfoFromPtr(ptr unsafe.Pointer) FramebufferCreateInfo {
	return FramebufferCreateInfo{ptr: (*C.VkFramebufferCreateInfo)(ptr)}
}

// FramebufferCreateInfoAlloc allocates a continuous block of VkFramebufferCreateInfo.
func FramebufferCreateInfoAlloc(alloc ffi.Allocator, count int) FramebufferCreateInfo {
	ptr := alloc.Allocate(FramebufferCreateInfoSizeOf * count)
	return FramebufferCreateInfo{ptr: (*C.VkFramebufferCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p FramebufferCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p FramebufferCreateInfo) Offset(offset int) FramebufferCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*FramebufferCreateInfoSizeOf)
	return FramebufferCreateInfo{ptr: (*C.VkFramebufferCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p FramebufferCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p FramebufferCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p FramebufferCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p FramebufferCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p FramebufferCreateInfo) GetFlags() FramebufferCreateFlags {
	return FramebufferCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p FramebufferCreateInfo) SetFlags(value FramebufferCreateFlags) {
	p.ptr.flags = (C.VkFramebufferCreateFlags)(value)
}

// GetRenderPass returns the value in renderPass.
func (p FramebufferCreateInfo) GetRenderPass() RenderPass {
	return RenderPass(p.ptr.renderPass)
}

// SetRenderPass sets the value in renderPass.
func (p FramebufferCreateInfo) SetRenderPass(value RenderPass) {
	p.ptr.renderPass = (C.VkRenderPass)(value)
}

// GetAttachmentCount returns the value in attachmentCount.
func (p FramebufferCreateInfo) GetAttachmentCount() uint32 {
	return uint32(p.ptr.attachmentCount)
}

// SetAttachmentCount sets the value in attachmentCount.
func (p FramebufferCreateInfo) SetAttachmentCount(value uint32) {
	p.ptr.attachmentCount = (C.uint32_t)(value)
}

// GetPAttachments returns the value in pAttachments.
func (p FramebufferCreateInfo) GetPAttachments() ffi.Ref[ImageView] {
	return ffi.RefFromPtr[ImageView](unsafe.Pointer(p.ptr.pAttachments))
}

// SetPAttachments sets the value in pAttachments.
func (p FramebufferCreateInfo) SetPAttachments(value ffi.Ref[ImageView]) {
	p.ptr.pAttachments = (*C.VkImageView)(value.Raw())
}

// GetWidth returns the value in width.
func (p FramebufferCreateInfo) GetWidth() uint32 {
	return uint32(p.ptr.width)
}

// SetWidth sets the value in width.
func (p FramebufferCreateInfo) SetWidth(value uint32) {
	p.ptr.width = (C.uint32_t)(value)
}

// GetHeight returns the value in height.
func (p FramebufferCreateInfo) GetHeight() uint32 {
	return uint32(p.ptr.height)
}

// SetHeight sets the value in height.
func (p FramebufferCreateInfo) SetHeight(value uint32) {
	p.ptr.height = (C.uint32_t)(value)
}

// GetLayers returns the value in layers.
func (p FramebufferCreateInfo) GetLayers() uint32 {
	return uint32(p.ptr.layers)
}

// SetLayers sets the value in layers.
func (p FramebufferCreateInfo) SetLayers(value uint32) {
	p.ptr.layers = (C.uint32_t)(value)
}

// GraphicsPipelineCreateInfo wraps VkGraphicsPipelineCreateInfo.
type GraphicsPipelineCreateInfo struct {
	ptr *C.VkGraphicsPipelineCreateInfo
}

// GraphicsPipelineCreateInfoNil is a null pointer.
var GraphicsPipelineCreateInfoNil GraphicsPipelineCreateInfo

// GraphicsPipelineCreateInfoSizeOf is the byte size of VkGraphicsPipelineCreateInfo.
const GraphicsPipelineCreateInfoSizeOf = int(C.sizeof_VkGraphicsPipelineCreateInfo)

// GraphicsPipelineCreateInfoFromPtr converts a raw pointer to a GraphicsPipelineCreateInfo.
func GraphicsPipelineCreateInfoFromPtr(ptr unsafe.Pointer) GraphicsPipelineCreateInfo {
	return GraphicsPipelineCreateInfo{ptr: (*C.VkGraphicsPipelineCreateInfo)(ptr)}
}

// GraphicsPipelineCreateInfoAlloc allocates a continuous block of VkGraphicsPipelineCreateInfo.
func GraphicsPipelineCreateInfoAlloc(alloc ffi.Allocator, count int) GraphicsPipelineCreateInfo {
	ptr := alloc.Allocate(GraphicsPipelineCreateInfoSizeOf * count)
	return GraphicsPipelineCreateInfo{ptr: (*C.VkGraphicsPipelineCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p GraphicsPipelineCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p GraphicsPipelineCreateInfo) Offset(offset int) GraphicsPipelineCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*GraphicsPipelineCreateInfoSizeOf)
	return GraphicsPipelineCreateInfo{ptr: (*C.VkGraphicsPipelineCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p GraphicsPipelineCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p GraphicsPipelineCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p GraphicsPipelineCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p GraphicsPipelineCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p GraphicsPipelineCreateInfo) GetFlags() PipelineCreateFlags {
	return PipelineCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p GraphicsPipelineCreateInfo) SetFlags(value PipelineCreateFlags) {
	p.ptr.flags = (C.VkPipelineCreateFlags)(value)
}

// GetStageCount returns the value in stageCount.
func (p GraphicsPipelineCreateInfo) GetStageCount() uint32 {
	return uint32(p.ptr.stageCount)
}

// SetStageCount sets the value in stageCount.
func (p GraphicsPipelineCreateInfo) SetStageCount(value uint32) {
	p.ptr.stageCount = (C.uint32_t)(value)
}

// GetPStages returns the value in pStages.
func (p GraphicsPipelineCreateInfo) GetPStages() PipelineShaderStageCreateInfo {
	return PipelineShaderStageCreateInfo{ptr: p.ptr.pStages}
}

// SetPStages sets the value in pStages.
func (p GraphicsPipelineCreateInfo) SetPStages(value PipelineShaderStageCreateInfo) {
	p.ptr.pStages = value.ptr
}

// GetPVertexInputState returns the value in pVertexInputState.
func (p GraphicsPipelineCreateInfo) GetPVertexInputState() PipelineVertexInputStateCreateInfo {
	return PipelineVertexInputStateCreateInfo{ptr: p.ptr.pVertexInputState}
}

// SetPVertexInputState sets the value in pVertexInputState.
func (p GraphicsPipelineCreateInfo) SetPVertexInputState(value PipelineVertexInputStateCreateInfo) {
	p.ptr.pVertexInputState = value.ptr
}

// GetPInputAssemblyState returns the value in pInputAssemblyState.
func (p GraphicsPipelineCreateInfo) GetPInputAssemblyState() PipelineInputAssemblyStateCreateInfo {
	return PipelineInputAssemblyStateCreateInfo{ptr: p.ptr.pInputAssemblyState}
}

// SetPInputAssemblyState sets the value in pInputAssemblyState.
func (p GraphicsPipelineCreateInfo) SetPInputAssemblyState(value PipelineInputAssemblyStateCreateInfo) {
	p.ptr.pInputAssemblyState = value.ptr
}

// GetPTessellationState returns the value in pTessellationState.
func (p GraphicsPipelineCreateInfo) GetPTessellationState() PipelineTessellationStateCreateInfo {
	return PipelineTessellationStateCreateInfo{ptr: p.ptr.pTessellationState}
}

// SetPTessellationState sets the value in pTessellationState.
func (p GraphicsPipelineCreateInfo) SetPTessellationState(value PipelineTessellationStateCreateInfo) {
	p.ptr.pTessellationState = value.ptr
}

// GetPViewportState returns the value in pViewportState.
func (p GraphicsPipelineCreateInfo) GetPViewportState() PipelineViewportStateCreateInfo {
	return PipelineViewportStateCreateInfo{ptr: p.ptr.pViewportState}
}

// SetPViewportState sets the value in pViewportState.
func (p GraphicsPipelineCreateInfo) SetPViewportState(value PipelineViewportStateCreateInfo) {
	p.ptr.pViewportState = value.ptr
}

// GetPRasterizationState returns the value in pRasterizationState.
func (p GraphicsPipelineCreateInfo) GetPRasterizationState() PipelineRasterizationStateCreateInfo {
	return PipelineRasterizationStateCreateInfo{ptr: p.ptr.pRasterizationState}
}

// SetPRasterizationState sets the value in pRasterizationState.
func (p GraphicsPipelineCreateInfo) SetPRasterizationState(value PipelineRasterizationStateCreateInfo) {
	p.ptr.pRasterizationState = value.ptr
}

// GetPMultisampleState returns the value in pMultisampleState.
func (p GraphicsPipelineCreateInfo) GetPMultisampleState() PipelineMultisampleStateCreateInfo {
	return PipelineMultisampleStateCreateInfo{ptr: p.ptr.pMultisampleState}
}

// SetPMultisampleState sets the value in pMultisampleState.
func (p GraphicsPipelineCreateInfo) SetPMultisampleState(value PipelineMultisampleStateCreateInfo) {
	p.ptr.pMultisampleState = value.ptr
}

// GetPDepthStencilState returns the value in pDepthStencilState.
func (p GraphicsPipelineCreateInfo) GetPDepthStencilState() PipelineDepthStencilStateCreateInfo {
	return PipelineDepthStencilStateCreateInfo{ptr: p.ptr.pDepthStencilState}
}

// SetPDepthStencilState sets the value in pDepthStencilState.
func (p GraphicsPipelineCreateInfo) SetPDepthStencilState(value PipelineDepthStencilStateCreateInfo) {
	p.ptr.pDepthStencilState = value.ptr
}

// GetPColorBlendState returns the value in pColorBlendState.
func (p GraphicsPipelineCreateInfo) GetPColorBlendState() PipelineColorBlendStateCreateInfo {
	return PipelineColorBlendStateCreateInfo{ptr: p.ptr.pColorBlendState}
}

// SetPColorBlendState sets the value in pColorBlendState.
func (p GraphicsPipelineCreateInfo) SetPColorBlendState(value PipelineColorBlendStateCreateInfo) {
	p.ptr.pColorBlendState = value.ptr
}

// GetPDynamicState returns the value in pDynamicState.
func (p GraphicsPipelineCreateInfo) GetPDynamicState() PipelineDynamicStateCreateInfo {
	return PipelineDynamicStateCreateInfo{ptr: p.ptr.pDynamicState}
}

// SetPDynamicState sets the value in pDynamicState.
func (p GraphicsPipelineCreateInfo) SetPDynamicState(value PipelineDynamicStateCreateInfo) {
	p.ptr.pDynamicState = value.ptr
}

// GetLayout returns the value in layout.
func (p GraphicsPipelineCreateInfo) GetLayout() PipelineLayout {
	return PipelineLayout(p.ptr.layout)
}

// SetLayout sets the value in layout.
func (p GraphicsPipelineCreateInfo) SetLayout(value PipelineLayout) {
	p.ptr.layout = (C.VkPipelineLayout)(value)
}

// GetRenderPass returns the value in renderPass.
func (p GraphicsPipelineCreateInfo) GetRenderPass() RenderPass {
	return RenderPass(p.ptr.renderPass)
}

// SetRenderPass sets the value in renderPass.
func (p GraphicsPipelineCreateInfo) SetRenderPass(value RenderPass) {
	p.ptr.renderPass = (C.VkRenderPass)(value)
}

// GetSubpass returns the value in subpass.
func (p GraphicsPipelineCreateInfo) GetSubpass() uint32 {
	return uint32(p.ptr.subpass)
}

// SetSubpass sets the value in subpass.
func (p GraphicsPipelineCreateInfo) SetSubpass(value uint32) {
	p.ptr.subpass = (C.uint32_t)(value)
}

// GetBasePipelineHandle returns the value in basePipelineHandle.
func (p GraphicsPipelineCreateInfo) GetBasePipelineHandle() Pipeline {
	return Pipeline(p.ptr.basePipelineHandle)
}

// SetBasePipelineHandle sets the value in basePipelineHandle.
func (p GraphicsPipelineCreateInfo) SetBasePipelineHandle(value Pipeline) {
	p.ptr.basePipelineHandle = (C.VkPipeline)(value)
}

// GetBasePipelineIndex returns the value in basePipelineIndex.
func (p GraphicsPipelineCreateInfo) GetBasePipelineIndex() int32 {
	return int32(p.ptr.basePipelineIndex)
}

// SetBasePipelineIndex sets the value in basePipelineIndex.
func (p GraphicsPipelineCreateInfo) SetBasePipelineIndex(value int32) {
	p.ptr.basePipelineIndex = (C.int32_t)(value)
}

// HostImageCopyDevicePerformanceQuery wraps VkHostImageCopyDevicePerformanceQuery.
type HostImageCopyDevicePerformanceQuery struct {
	ptr *C.VkHostImageCopyDevicePerformanceQuery
}

// HostImageCopyDevicePerformanceQueryNil is a null pointer.
var HostImageCopyDevicePerformanceQueryNil HostImageCopyDevicePerformanceQuery

// HostImageCopyDevicePerformanceQuerySizeOf is the byte size of VkHostImageCopyDevicePerformanceQuery.
const HostImageCopyDevicePerformanceQuerySizeOf = int(C.sizeof_VkHostImageCopyDevicePerformanceQuery)

// HostImageCopyDevicePerformanceQueryFromPtr converts a raw pointer to a HostImageCopyDevicePerformanceQuery.
func HostImageCopyDevicePerformanceQueryFromPtr(ptr unsafe.Pointer) HostImageCopyDevicePerformanceQuery {
	return HostImageCopyDevicePerformanceQuery{ptr: (*C.VkHostImageCopyDevicePerformanceQuery)(ptr)}
}

// HostImageCopyDevicePerformanceQueryAlloc allocates a continuous block of VkHostImageCopyDevicePerformanceQuery.
func HostImageCopyDevicePerformanceQueryAlloc(alloc ffi.Allocator, count int) HostImageCopyDevicePerformanceQuery {
	ptr := alloc.Allocate(HostImageCopyDevicePerformanceQuerySizeOf * count)
	return HostImageCopyDevicePerformanceQuery{ptr: (*C.VkHostImageCopyDevicePerformanceQuery)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p HostImageCopyDevicePerformanceQuery) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p HostImageCopyDevicePerformanceQuery) Offset(offset int) HostImageCopyDevicePerformanceQuery {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*HostImageCopyDevicePerformanceQuerySizeOf)
	return HostImageCopyDevicePerformanceQuery{ptr: (*C.VkHostImageCopyDevicePerformanceQuery)(ptr)}
}

// GetSType returns the value in sType.
func (p HostImageCopyDevicePerformanceQuery) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p HostImageCopyDevicePerformanceQuery) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p HostImageCopyDevicePerformanceQuery) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p HostImageCopyDevicePerformanceQuery) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetOptimalDeviceAccess returns the value in optimalDeviceAccess.
func (p HostImageCopyDevicePerformanceQuery) GetOptimalDeviceAccess() bool {
	return p.ptr.optimalDeviceAccess != 0
}

// SetOptimalDeviceAccess sets the value in optimalDeviceAccess.
func (p HostImageCopyDevicePerformanceQuery) SetOptimalDeviceAccess(value bool) {
	if value {
		p.ptr.optimalDeviceAccess = C.VkBool32(1)
	} else {
		p.ptr.optimalDeviceAccess = C.VkBool32(0)
	}
}

// GetIdenticalMemoryLayout returns the value in identicalMemoryLayout.
func (p HostImageCopyDevicePerformanceQuery) GetIdenticalMemoryLayout() bool {
	return p.ptr.identicalMemoryLayout != 0
}

// SetIdenticalMemoryLayout sets the value in identicalMemoryLayout.
func (p HostImageCopyDevicePerformanceQuery) SetIdenticalMemoryLayout(value bool) {
	if value {
		p.ptr.identicalMemoryLayout = C.VkBool32(1)
	} else {
		p.ptr.identicalMemoryLayout = C.VkBool32(0)
	}
}

// HostImageLayoutTransitionInfo wraps VkHostImageLayoutTransitionInfo.
type HostImageLayoutTransitionInfo struct {
	ptr *C.VkHostImageLayoutTransitionInfo
}

// HostImageLayoutTransitionInfoNil is a null pointer.
var HostImageLayoutTransitionInfoNil HostImageLayoutTransitionInfo

// HostImageLayoutTransitionInfoSizeOf is the byte size of VkHostImageLayoutTransitionInfo.
const HostImageLayoutTransitionInfoSizeOf = int(C.sizeof_VkHostImageLayoutTransitionInfo)

// HostImageLayoutTransitionInfoFromPtr converts a raw pointer to a HostImageLayoutTransitionInfo.
func HostImageLayoutTransitionInfoFromPtr(ptr unsafe.Pointer) HostImageLayoutTransitionInfo {
	return HostImageLayoutTransitionInfo{ptr: (*C.VkHostImageLayoutTransitionInfo)(ptr)}
}

// HostImageLayoutTransitionInfoAlloc allocates a continuous block of VkHostImageLayoutTransitionInfo.
func HostImageLayoutTransitionInfoAlloc(alloc ffi.Allocator, count int) HostImageLayoutTransitionInfo {
	ptr := alloc.Allocate(HostImageLayoutTransitionInfoSizeOf * count)
	return HostImageLayoutTransitionInfo{ptr: (*C.VkHostImageLayoutTransitionInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p HostImageLayoutTransitionInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p HostImageLayoutTransitionInfo) Offset(offset int) HostImageLayoutTransitionInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*HostImageLayoutTransitionInfoSizeOf)
	return HostImageLayoutTransitionInfo{ptr: (*C.VkHostImageLayoutTransitionInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p HostImageLayoutTransitionInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p HostImageLayoutTransitionInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p HostImageLayoutTransitionInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p HostImageLayoutTransitionInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetImage returns the value in image.
func (p HostImageLayoutTransitionInfo) GetImage() Image {
	return Image(p.ptr.image)
}

// SetImage sets the value in image.
func (p HostImageLayoutTransitionInfo) SetImage(value Image) {
	p.ptr.image = (C.VkImage)(value)
}

// GetOldLayout returns the value in oldLayout.
func (p HostImageLayoutTransitionInfo) GetOldLayout() ImageLayout {
	return ImageLayout(p.ptr.oldLayout)
}

// SetOldLayout sets the value in oldLayout.
func (p HostImageLayoutTransitionInfo) SetOldLayout(value ImageLayout) {
	p.ptr.oldLayout = (C.VkImageLayout)(value)
}

// GetNewLayout returns the value in newLayout.
func (p HostImageLayoutTransitionInfo) GetNewLayout() ImageLayout {
	return ImageLayout(p.ptr.newLayout)
}

// SetNewLayout sets the value in newLayout.
func (p HostImageLayoutTransitionInfo) SetNewLayout(value ImageLayout) {
	p.ptr.newLayout = (C.VkImageLayout)(value)
}

// RefSubresourceRange returns pointer to the subresourceRange field.
func (p HostImageLayoutTransitionInfo) RefSubresourceRange() ImageSubresourceRange {
	return ImageSubresourceRange{ptr: (*C.VkImageSubresourceRange)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkHostImageLayoutTransitionInfo_subresourceRange)))}
}

// ImageBlit wraps VkImageBlit.
type ImageBlit struct {
	ptr *C.VkImageBlit
}

// ImageBlitNil is a null pointer.
var ImageBlitNil ImageBlit

// ImageBlitSizeOf is the byte size of VkImageBlit.
const ImageBlitSizeOf = int(C.sizeof_VkImageBlit)

// ImageBlitFromPtr converts a raw pointer to a ImageBlit.
func ImageBlitFromPtr(ptr unsafe.Pointer) ImageBlit {
	return ImageBlit{ptr: (*C.VkImageBlit)(ptr)}
}

// ImageBlitAlloc allocates a continuous block of VkImageBlit.
func ImageBlitAlloc(alloc ffi.Allocator, count int) ImageBlit {
	ptr := alloc.Allocate(ImageBlitSizeOf * count)
	return ImageBlit{ptr: (*C.VkImageBlit)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageBlit) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageBlit) Offset(offset int) ImageBlit {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageBlitSizeOf)
	return ImageBlit{ptr: (*C.VkImageBlit)(ptr)}
}

// RefSrcSubresource returns pointer to the srcSubresource field.
func (p ImageBlit) RefSrcSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageBlit_srcSubresource)))}
}

// ImageBlit.srcOffsets is unsupported: category unsupported.

// RefDstSubresource returns pointer to the dstSubresource field.
func (p ImageBlit) RefDstSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageBlit_dstSubresource)))}
}

// ImageBlit.dstOffsets is unsupported: category unsupported.

// ImageBlit2 wraps VkImageBlit2.
type ImageBlit2 struct {
	ptr *C.VkImageBlit2
}

// ImageBlit2Nil is a null pointer.
var ImageBlit2Nil ImageBlit2

// ImageBlit2SizeOf is the byte size of VkImageBlit2.
const ImageBlit2SizeOf = int(C.sizeof_VkImageBlit2)

// ImageBlit2FromPtr converts a raw pointer to a ImageBlit2.
func ImageBlit2FromPtr(ptr unsafe.Pointer) ImageBlit2 {
	return ImageBlit2{ptr: (*C.VkImageBlit2)(ptr)}
}

// ImageBlit2Alloc allocates a continuous block of VkImageBlit2.
func ImageBlit2Alloc(alloc ffi.Allocator, count int) ImageBlit2 {
	ptr := alloc.Allocate(ImageBlit2SizeOf * count)
	return ImageBlit2{ptr: (*C.VkImageBlit2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageBlit2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageBlit2) Offset(offset int) ImageBlit2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageBlit2SizeOf)
	return ImageBlit2{ptr: (*C.VkImageBlit2)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageBlit2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageBlit2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageBlit2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageBlit2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefSrcSubresource returns pointer to the srcSubresource field.
func (p ImageBlit2) RefSrcSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageBlit2_srcSubresource)))}
}

// ImageBlit2.srcOffsets is unsupported: category unsupported.

// RefDstSubresource returns pointer to the dstSubresource field.
func (p ImageBlit2) RefDstSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageBlit2_dstSubresource)))}
}

// ImageBlit2.dstOffsets is unsupported: category unsupported.

// ImageCopy wraps VkImageCopy.
type ImageCopy struct {
	ptr *C.VkImageCopy
}

// ImageCopyNil is a null pointer.
var ImageCopyNil ImageCopy

// ImageCopySizeOf is the byte size of VkImageCopy.
const ImageCopySizeOf = int(C.sizeof_VkImageCopy)

// ImageCopyFromPtr converts a raw pointer to a ImageCopy.
func ImageCopyFromPtr(ptr unsafe.Pointer) ImageCopy {
	return ImageCopy{ptr: (*C.VkImageCopy)(ptr)}
}

// ImageCopyAlloc allocates a continuous block of VkImageCopy.
func ImageCopyAlloc(alloc ffi.Allocator, count int) ImageCopy {
	ptr := alloc.Allocate(ImageCopySizeOf * count)
	return ImageCopy{ptr: (*C.VkImageCopy)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageCopy) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageCopy) Offset(offset int) ImageCopy {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageCopySizeOf)
	return ImageCopy{ptr: (*C.VkImageCopy)(ptr)}
}

// RefSrcSubresource returns pointer to the srcSubresource field.
func (p ImageCopy) RefSrcSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageCopy_srcSubresource)))}
}

// RefSrcOffset returns pointer to the srcOffset field.
func (p ImageCopy) RefSrcOffset() Offset3D {
	return Offset3D{ptr: (*C.VkOffset3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageCopy_srcOffset)))}
}

// RefDstSubresource returns pointer to the dstSubresource field.
func (p ImageCopy) RefDstSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageCopy_dstSubresource)))}
}

// RefDstOffset returns pointer to the dstOffset field.
func (p ImageCopy) RefDstOffset() Offset3D {
	return Offset3D{ptr: (*C.VkOffset3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageCopy_dstOffset)))}
}

// RefExtent returns pointer to the extent field.
func (p ImageCopy) RefExtent() Extent3D {
	return Extent3D{ptr: (*C.VkExtent3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageCopy_extent)))}
}

// ImageCopy2 wraps VkImageCopy2.
type ImageCopy2 struct {
	ptr *C.VkImageCopy2
}

// ImageCopy2Nil is a null pointer.
var ImageCopy2Nil ImageCopy2

// ImageCopy2SizeOf is the byte size of VkImageCopy2.
const ImageCopy2SizeOf = int(C.sizeof_VkImageCopy2)

// ImageCopy2FromPtr converts a raw pointer to a ImageCopy2.
func ImageCopy2FromPtr(ptr unsafe.Pointer) ImageCopy2 {
	return ImageCopy2{ptr: (*C.VkImageCopy2)(ptr)}
}

// ImageCopy2Alloc allocates a continuous block of VkImageCopy2.
func ImageCopy2Alloc(alloc ffi.Allocator, count int) ImageCopy2 {
	ptr := alloc.Allocate(ImageCopy2SizeOf * count)
	return ImageCopy2{ptr: (*C.VkImageCopy2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageCopy2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageCopy2) Offset(offset int) ImageCopy2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageCopy2SizeOf)
	return ImageCopy2{ptr: (*C.VkImageCopy2)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageCopy2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageCopy2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageCopy2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageCopy2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefSrcSubresource returns pointer to the srcSubresource field.
func (p ImageCopy2) RefSrcSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageCopy2_srcSubresource)))}
}

// RefSrcOffset returns pointer to the srcOffset field.
func (p ImageCopy2) RefSrcOffset() Offset3D {
	return Offset3D{ptr: (*C.VkOffset3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageCopy2_srcOffset)))}
}

// RefDstSubresource returns pointer to the dstSubresource field.
func (p ImageCopy2) RefDstSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageCopy2_dstSubresource)))}
}

// RefDstOffset returns pointer to the dstOffset field.
func (p ImageCopy2) RefDstOffset() Offset3D {
	return Offset3D{ptr: (*C.VkOffset3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageCopy2_dstOffset)))}
}

// RefExtent returns pointer to the extent field.
func (p ImageCopy2) RefExtent() Extent3D {
	return Extent3D{ptr: (*C.VkExtent3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageCopy2_extent)))}
}

// ImageCreateInfo wraps VkImageCreateInfo.
type ImageCreateInfo struct {
	ptr *C.VkImageCreateInfo
}

// ImageCreateInfoNil is a null pointer.
var ImageCreateInfoNil ImageCreateInfo

// ImageCreateInfoSizeOf is the byte size of VkImageCreateInfo.
const ImageCreateInfoSizeOf = int(C.sizeof_VkImageCreateInfo)

// ImageCreateInfoFromPtr converts a raw pointer to a ImageCreateInfo.
func ImageCreateInfoFromPtr(ptr unsafe.Pointer) ImageCreateInfo {
	return ImageCreateInfo{ptr: (*C.VkImageCreateInfo)(ptr)}
}

// ImageCreateInfoAlloc allocates a continuous block of VkImageCreateInfo.
func ImageCreateInfoAlloc(alloc ffi.Allocator, count int) ImageCreateInfo {
	ptr := alloc.Allocate(ImageCreateInfoSizeOf * count)
	return ImageCreateInfo{ptr: (*C.VkImageCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageCreateInfo) Offset(offset int) ImageCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageCreateInfoSizeOf)
	return ImageCreateInfo{ptr: (*C.VkImageCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p ImageCreateInfo) GetFlags() ImageCreateFlags {
	return ImageCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p ImageCreateInfo) SetFlags(value ImageCreateFlags) {
	p.ptr.flags = (C.VkImageCreateFlags)(value)
}

// GetImageType returns the value in imageType.
func (p ImageCreateInfo) GetImageType() ImageType {
	return ImageType(p.ptr.imageType)
}

// SetImageType sets the value in imageType.
func (p ImageCreateInfo) SetImageType(value ImageType) {
	p.ptr.imageType = (C.VkImageType)(value)
}

// GetFormat returns the value in format.
func (p ImageCreateInfo) GetFormat() Format {
	return Format(p.ptr.format)
}

// SetFormat sets the value in format.
func (p ImageCreateInfo) SetFormat(value Format) {
	p.ptr.format = (C.VkFormat)(value)
}

// RefExtent returns pointer to the extent field.
func (p ImageCreateInfo) RefExtent() Extent3D {
	return Extent3D{ptr: (*C.VkExtent3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageCreateInfo_extent)))}
}

// GetMipLevels returns the value in mipLevels.
func (p ImageCreateInfo) GetMipLevels() uint32 {
	return uint32(p.ptr.mipLevels)
}

// SetMipLevels sets the value in mipLevels.
func (p ImageCreateInfo) SetMipLevels(value uint32) {
	p.ptr.mipLevels = (C.uint32_t)(value)
}

// GetArrayLayers returns the value in arrayLayers.
func (p ImageCreateInfo) GetArrayLayers() uint32 {
	return uint32(p.ptr.arrayLayers)
}

// SetArrayLayers sets the value in arrayLayers.
func (p ImageCreateInfo) SetArrayLayers(value uint32) {
	p.ptr.arrayLayers = (C.uint32_t)(value)
}

// GetSamples returns the value in samples.
func (p ImageCreateInfo) GetSamples() SampleCountFlags {
	return SampleCountFlags(p.ptr.samples)
}

// SetSamples sets the value in samples.
func (p ImageCreateInfo) SetSamples(value SampleCountFlags) {
	p.ptr.samples = (C.VkSampleCountFlagBits)(value)
}

// GetTiling returns the value in tiling.
func (p ImageCreateInfo) GetTiling() ImageTiling {
	return ImageTiling(p.ptr.tiling)
}

// SetTiling sets the value in tiling.
func (p ImageCreateInfo) SetTiling(value ImageTiling) {
	p.ptr.tiling = (C.VkImageTiling)(value)
}

// GetUsage returns the value in usage.
func (p ImageCreateInfo) GetUsage() ImageUsageFlags {
	return ImageUsageFlags(p.ptr.usage)
}

// SetUsage sets the value in usage.
func (p ImageCreateInfo) SetUsage(value ImageUsageFlags) {
	p.ptr.usage = (C.VkImageUsageFlags)(value)
}

// GetSharingMode returns the value in sharingMode.
func (p ImageCreateInfo) GetSharingMode() SharingMode {
	return SharingMode(p.ptr.sharingMode)
}

// SetSharingMode sets the value in sharingMode.
func (p ImageCreateInfo) SetSharingMode(value SharingMode) {
	p.ptr.sharingMode = (C.VkSharingMode)(value)
}

// GetQueueFamilyIndexCount returns the value in queueFamilyIndexCount.
func (p ImageCreateInfo) GetQueueFamilyIndexCount() uint32 {
	return uint32(p.ptr.queueFamilyIndexCount)
}

// SetQueueFamilyIndexCount sets the value in queueFamilyIndexCount.
func (p ImageCreateInfo) SetQueueFamilyIndexCount(value uint32) {
	p.ptr.queueFamilyIndexCount = (C.uint32_t)(value)
}

// GetPQueueFamilyIndices returns the value in pQueueFamilyIndices.
func (p ImageCreateInfo) GetPQueueFamilyIndices() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pQueueFamilyIndices))
}

// SetPQueueFamilyIndices sets the value in pQueueFamilyIndices.
func (p ImageCreateInfo) SetPQueueFamilyIndices(value ffi.Ref[uint32]) {
	p.ptr.pQueueFamilyIndices = (*C.uint32_t)(value.Raw())
}

// GetInitialLayout returns the value in initialLayout.
func (p ImageCreateInfo) GetInitialLayout() ImageLayout {
	return ImageLayout(p.ptr.initialLayout)
}

// SetInitialLayout sets the value in initialLayout.
func (p ImageCreateInfo) SetInitialLayout(value ImageLayout) {
	p.ptr.initialLayout = (C.VkImageLayout)(value)
}

// ImageFormatListCreateInfo wraps VkImageFormatListCreateInfo.
type ImageFormatListCreateInfo struct {
	ptr *C.VkImageFormatListCreateInfo
}

// ImageFormatListCreateInfoNil is a null pointer.
var ImageFormatListCreateInfoNil ImageFormatListCreateInfo

// ImageFormatListCreateInfoSizeOf is the byte size of VkImageFormatListCreateInfo.
const ImageFormatListCreateInfoSizeOf = int(C.sizeof_VkImageFormatListCreateInfo)

// ImageFormatListCreateInfoFromPtr converts a raw pointer to a ImageFormatListCreateInfo.
func ImageFormatListCreateInfoFromPtr(ptr unsafe.Pointer) ImageFormatListCreateInfo {
	return ImageFormatListCreateInfo{ptr: (*C.VkImageFormatListCreateInfo)(ptr)}
}

// ImageFormatListCreateInfoAlloc allocates a continuous block of VkImageFormatListCreateInfo.
func ImageFormatListCreateInfoAlloc(alloc ffi.Allocator, count int) ImageFormatListCreateInfo {
	ptr := alloc.Allocate(ImageFormatListCreateInfoSizeOf * count)
	return ImageFormatListCreateInfo{ptr: (*C.VkImageFormatListCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageFormatListCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageFormatListCreateInfo) Offset(offset int) ImageFormatListCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageFormatListCreateInfoSizeOf)
	return ImageFormatListCreateInfo{ptr: (*C.VkImageFormatListCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageFormatListCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageFormatListCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageFormatListCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageFormatListCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetViewFormatCount returns the value in viewFormatCount.
func (p ImageFormatListCreateInfo) GetViewFormatCount() uint32 {
	return uint32(p.ptr.viewFormatCount)
}

// SetViewFormatCount sets the value in viewFormatCount.
func (p ImageFormatListCreateInfo) SetViewFormatCount(value uint32) {
	p.ptr.viewFormatCount = (C.uint32_t)(value)
}

// GetPViewFormats returns the value in pViewFormats.
func (p ImageFormatListCreateInfo) GetPViewFormats() ffi.Ref[Format] {
	return ffi.RefFromPtr[Format](unsafe.Pointer(p.ptr.pViewFormats))
}

// SetPViewFormats sets the value in pViewFormats.
func (p ImageFormatListCreateInfo) SetPViewFormats(value ffi.Ref[Format]) {
	p.ptr.pViewFormats = (*C.VkFormat)(value.Raw())
}

// ImageFormatProperties wraps VkImageFormatProperties.
type ImageFormatProperties struct {
	ptr *C.VkImageFormatProperties
}

// ImageFormatPropertiesNil is a null pointer.
var ImageFormatPropertiesNil ImageFormatProperties

// ImageFormatPropertiesSizeOf is the byte size of VkImageFormatProperties.
const ImageFormatPropertiesSizeOf = int(C.sizeof_VkImageFormatProperties)

// ImageFormatPropertiesFromPtr converts a raw pointer to a ImageFormatProperties.
func ImageFormatPropertiesFromPtr(ptr unsafe.Pointer) ImageFormatProperties {
	return ImageFormatProperties{ptr: (*C.VkImageFormatProperties)(ptr)}
}

// ImageFormatPropertiesAlloc allocates a continuous block of VkImageFormatProperties.
func ImageFormatPropertiesAlloc(alloc ffi.Allocator, count int) ImageFormatProperties {
	ptr := alloc.Allocate(ImageFormatPropertiesSizeOf * count)
	return ImageFormatProperties{ptr: (*C.VkImageFormatProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageFormatProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageFormatProperties) Offset(offset int) ImageFormatProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageFormatPropertiesSizeOf)
	return ImageFormatProperties{ptr: (*C.VkImageFormatProperties)(ptr)}
}

// RefMaxExtent returns pointer to the maxExtent field.
func (p ImageFormatProperties) RefMaxExtent() Extent3D {
	return Extent3D{ptr: (*C.VkExtent3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageFormatProperties_maxExtent)))}
}

// GetMaxMipLevels returns the value in maxMipLevels.
func (p ImageFormatProperties) GetMaxMipLevels() uint32 {
	return uint32(p.ptr.maxMipLevels)
}

// SetMaxMipLevels sets the value in maxMipLevels.
func (p ImageFormatProperties) SetMaxMipLevels(value uint32) {
	p.ptr.maxMipLevels = (C.uint32_t)(value)
}

// GetMaxArrayLayers returns the value in maxArrayLayers.
func (p ImageFormatProperties) GetMaxArrayLayers() uint32 {
	return uint32(p.ptr.maxArrayLayers)
}

// SetMaxArrayLayers sets the value in maxArrayLayers.
func (p ImageFormatProperties) SetMaxArrayLayers(value uint32) {
	p.ptr.maxArrayLayers = (C.uint32_t)(value)
}

// GetSampleCounts returns the value in sampleCounts.
func (p ImageFormatProperties) GetSampleCounts() SampleCountFlags {
	return SampleCountFlags(p.ptr.sampleCounts)
}

// SetSampleCounts sets the value in sampleCounts.
func (p ImageFormatProperties) SetSampleCounts(value SampleCountFlags) {
	p.ptr.sampleCounts = (C.VkSampleCountFlags)(value)
}

// GetMaxResourceSize returns the value in maxResourceSize.
func (p ImageFormatProperties) GetMaxResourceSize() DeviceSize {
	return DeviceSize(p.ptr.maxResourceSize)
}

// SetMaxResourceSize sets the value in maxResourceSize.
func (p ImageFormatProperties) SetMaxResourceSize(value DeviceSize) {
	p.ptr.maxResourceSize = (C.VkDeviceSize)(value)
}

// ImageFormatProperties2 wraps VkImageFormatProperties2.
type ImageFormatProperties2 struct {
	ptr *C.VkImageFormatProperties2
}

// ImageFormatProperties2Nil is a null pointer.
var ImageFormatProperties2Nil ImageFormatProperties2

// ImageFormatProperties2SizeOf is the byte size of VkImageFormatProperties2.
const ImageFormatProperties2SizeOf = int(C.sizeof_VkImageFormatProperties2)

// ImageFormatProperties2FromPtr converts a raw pointer to a ImageFormatProperties2.
func ImageFormatProperties2FromPtr(ptr unsafe.Pointer) ImageFormatProperties2 {
	return ImageFormatProperties2{ptr: (*C.VkImageFormatProperties2)(ptr)}
}

// ImageFormatProperties2Alloc allocates a continuous block of VkImageFormatProperties2.
func ImageFormatProperties2Alloc(alloc ffi.Allocator, count int) ImageFormatProperties2 {
	ptr := alloc.Allocate(ImageFormatProperties2SizeOf * count)
	return ImageFormatProperties2{ptr: (*C.VkImageFormatProperties2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageFormatProperties2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageFormatProperties2) Offset(offset int) ImageFormatProperties2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageFormatProperties2SizeOf)
	return ImageFormatProperties2{ptr: (*C.VkImageFormatProperties2)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageFormatProperties2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageFormatProperties2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageFormatProperties2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageFormatProperties2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefImageFormatProperties returns pointer to the imageFormatProperties field.
func (p ImageFormatProperties2) RefImageFormatProperties() ImageFormatProperties {
	return ImageFormatProperties{ptr: (*C.VkImageFormatProperties)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageFormatProperties2_imageFormatProperties)))}
}

// ImageMemoryBarrier wraps VkImageMemoryBarrier.
type ImageMemoryBarrier struct {
	ptr *C.VkImageMemoryBarrier
}

// ImageMemoryBarrierNil is a null pointer.
var ImageMemoryBarrierNil ImageMemoryBarrier

// ImageMemoryBarrierSizeOf is the byte size of VkImageMemoryBarrier.
const ImageMemoryBarrierSizeOf = int(C.sizeof_VkImageMemoryBarrier)

// ImageMemoryBarrierFromPtr converts a raw pointer to a ImageMemoryBarrier.
func ImageMemoryBarrierFromPtr(ptr unsafe.Pointer) ImageMemoryBarrier {
	return ImageMemoryBarrier{ptr: (*C.VkImageMemoryBarrier)(ptr)}
}

// ImageMemoryBarrierAlloc allocates a continuous block of VkImageMemoryBarrier.
func ImageMemoryBarrierAlloc(alloc ffi.Allocator, count int) ImageMemoryBarrier {
	ptr := alloc.Allocate(ImageMemoryBarrierSizeOf * count)
	return ImageMemoryBarrier{ptr: (*C.VkImageMemoryBarrier)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageMemoryBarrier) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageMemoryBarrier) Offset(offset int) ImageMemoryBarrier {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageMemoryBarrierSizeOf)
	return ImageMemoryBarrier{ptr: (*C.VkImageMemoryBarrier)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageMemoryBarrier) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageMemoryBarrier) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageMemoryBarrier) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageMemoryBarrier) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcAccessMask returns the value in srcAccessMask.
func (p ImageMemoryBarrier) GetSrcAccessMask() AccessFlags {
	return AccessFlags(p.ptr.srcAccessMask)
}

// SetSrcAccessMask sets the value in srcAccessMask.
func (p ImageMemoryBarrier) SetSrcAccessMask(value AccessFlags) {
	p.ptr.srcAccessMask = (C.VkAccessFlags)(value)
}

// GetDstAccessMask returns the value in dstAccessMask.
func (p ImageMemoryBarrier) GetDstAccessMask() AccessFlags {
	return AccessFlags(p.ptr.dstAccessMask)
}

// SetDstAccessMask sets the value in dstAccessMask.
func (p ImageMemoryBarrier) SetDstAccessMask(value AccessFlags) {
	p.ptr.dstAccessMask = (C.VkAccessFlags)(value)
}

// GetOldLayout returns the value in oldLayout.
func (p ImageMemoryBarrier) GetOldLayout() ImageLayout {
	return ImageLayout(p.ptr.oldLayout)
}

// SetOldLayout sets the value in oldLayout.
func (p ImageMemoryBarrier) SetOldLayout(value ImageLayout) {
	p.ptr.oldLayout = (C.VkImageLayout)(value)
}

// GetNewLayout returns the value in newLayout.
func (p ImageMemoryBarrier) GetNewLayout() ImageLayout {
	return ImageLayout(p.ptr.newLayout)
}

// SetNewLayout sets the value in newLayout.
func (p ImageMemoryBarrier) SetNewLayout(value ImageLayout) {
	p.ptr.newLayout = (C.VkImageLayout)(value)
}

// GetSrcQueueFamilyIndex returns the value in srcQueueFamilyIndex.
func (p ImageMemoryBarrier) GetSrcQueueFamilyIndex() uint32 {
	return uint32(p.ptr.srcQueueFamilyIndex)
}

// SetSrcQueueFamilyIndex sets the value in srcQueueFamilyIndex.
func (p ImageMemoryBarrier) SetSrcQueueFamilyIndex(value uint32) {
	p.ptr.srcQueueFamilyIndex = (C.uint32_t)(value)
}

// GetDstQueueFamilyIndex returns the value in dstQueueFamilyIndex.
func (p ImageMemoryBarrier) GetDstQueueFamilyIndex() uint32 {
	return uint32(p.ptr.dstQueueFamilyIndex)
}

// SetDstQueueFamilyIndex sets the value in dstQueueFamilyIndex.
func (p ImageMemoryBarrier) SetDstQueueFamilyIndex(value uint32) {
	p.ptr.dstQueueFamilyIndex = (C.uint32_t)(value)
}

// GetImage returns the value in image.
func (p ImageMemoryBarrier) GetImage() Image {
	return Image(p.ptr.image)
}

// SetImage sets the value in image.
func (p ImageMemoryBarrier) SetImage(value Image) {
	p.ptr.image = (C.VkImage)(value)
}

// RefSubresourceRange returns pointer to the subresourceRange field.
func (p ImageMemoryBarrier) RefSubresourceRange() ImageSubresourceRange {
	return ImageSubresourceRange{ptr: (*C.VkImageSubresourceRange)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageMemoryBarrier_subresourceRange)))}
}

// ImageMemoryBarrier2 wraps VkImageMemoryBarrier2.
type ImageMemoryBarrier2 struct {
	ptr *C.VkImageMemoryBarrier2
}

// ImageMemoryBarrier2Nil is a null pointer.
var ImageMemoryBarrier2Nil ImageMemoryBarrier2

// ImageMemoryBarrier2SizeOf is the byte size of VkImageMemoryBarrier2.
const ImageMemoryBarrier2SizeOf = int(C.sizeof_VkImageMemoryBarrier2)

// ImageMemoryBarrier2FromPtr converts a raw pointer to a ImageMemoryBarrier2.
func ImageMemoryBarrier2FromPtr(ptr unsafe.Pointer) ImageMemoryBarrier2 {
	return ImageMemoryBarrier2{ptr: (*C.VkImageMemoryBarrier2)(ptr)}
}

// ImageMemoryBarrier2Alloc allocates a continuous block of VkImageMemoryBarrier2.
func ImageMemoryBarrier2Alloc(alloc ffi.Allocator, count int) ImageMemoryBarrier2 {
	ptr := alloc.Allocate(ImageMemoryBarrier2SizeOf * count)
	return ImageMemoryBarrier2{ptr: (*C.VkImageMemoryBarrier2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageMemoryBarrier2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageMemoryBarrier2) Offset(offset int) ImageMemoryBarrier2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageMemoryBarrier2SizeOf)
	return ImageMemoryBarrier2{ptr: (*C.VkImageMemoryBarrier2)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageMemoryBarrier2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageMemoryBarrier2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageMemoryBarrier2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageMemoryBarrier2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcStageMask returns the value in srcStageMask.
func (p ImageMemoryBarrier2) GetSrcStageMask() PipelineStageFlags2 {
	return PipelineStageFlags2(p.ptr.srcStageMask)
}

// SetSrcStageMask sets the value in srcStageMask.
func (p ImageMemoryBarrier2) SetSrcStageMask(value PipelineStageFlags2) {
	p.ptr.srcStageMask = (C.VkPipelineStageFlags2)(value)
}

// GetSrcAccessMask returns the value in srcAccessMask.
func (p ImageMemoryBarrier2) GetSrcAccessMask() AccessFlags2 {
	return AccessFlags2(p.ptr.srcAccessMask)
}

// SetSrcAccessMask sets the value in srcAccessMask.
func (p ImageMemoryBarrier2) SetSrcAccessMask(value AccessFlags2) {
	p.ptr.srcAccessMask = (C.VkAccessFlags2)(value)
}

// GetDstStageMask returns the value in dstStageMask.
func (p ImageMemoryBarrier2) GetDstStageMask() PipelineStageFlags2 {
	return PipelineStageFlags2(p.ptr.dstStageMask)
}

// SetDstStageMask sets the value in dstStageMask.
func (p ImageMemoryBarrier2) SetDstStageMask(value PipelineStageFlags2) {
	p.ptr.dstStageMask = (C.VkPipelineStageFlags2)(value)
}

// GetDstAccessMask returns the value in dstAccessMask.
func (p ImageMemoryBarrier2) GetDstAccessMask() AccessFlags2 {
	return AccessFlags2(p.ptr.dstAccessMask)
}

// SetDstAccessMask sets the value in dstAccessMask.
func (p ImageMemoryBarrier2) SetDstAccessMask(value AccessFlags2) {
	p.ptr.dstAccessMask = (C.VkAccessFlags2)(value)
}

// GetOldLayout returns the value in oldLayout.
func (p ImageMemoryBarrier2) GetOldLayout() ImageLayout {
	return ImageLayout(p.ptr.oldLayout)
}

// SetOldLayout sets the value in oldLayout.
func (p ImageMemoryBarrier2) SetOldLayout(value ImageLayout) {
	p.ptr.oldLayout = (C.VkImageLayout)(value)
}

// GetNewLayout returns the value in newLayout.
func (p ImageMemoryBarrier2) GetNewLayout() ImageLayout {
	return ImageLayout(p.ptr.newLayout)
}

// SetNewLayout sets the value in newLayout.
func (p ImageMemoryBarrier2) SetNewLayout(value ImageLayout) {
	p.ptr.newLayout = (C.VkImageLayout)(value)
}

// GetSrcQueueFamilyIndex returns the value in srcQueueFamilyIndex.
func (p ImageMemoryBarrier2) GetSrcQueueFamilyIndex() uint32 {
	return uint32(p.ptr.srcQueueFamilyIndex)
}

// SetSrcQueueFamilyIndex sets the value in srcQueueFamilyIndex.
func (p ImageMemoryBarrier2) SetSrcQueueFamilyIndex(value uint32) {
	p.ptr.srcQueueFamilyIndex = (C.uint32_t)(value)
}

// GetDstQueueFamilyIndex returns the value in dstQueueFamilyIndex.
func (p ImageMemoryBarrier2) GetDstQueueFamilyIndex() uint32 {
	return uint32(p.ptr.dstQueueFamilyIndex)
}

// SetDstQueueFamilyIndex sets the value in dstQueueFamilyIndex.
func (p ImageMemoryBarrier2) SetDstQueueFamilyIndex(value uint32) {
	p.ptr.dstQueueFamilyIndex = (C.uint32_t)(value)
}

// GetImage returns the value in image.
func (p ImageMemoryBarrier2) GetImage() Image {
	return Image(p.ptr.image)
}

// SetImage sets the value in image.
func (p ImageMemoryBarrier2) SetImage(value Image) {
	p.ptr.image = (C.VkImage)(value)
}

// RefSubresourceRange returns pointer to the subresourceRange field.
func (p ImageMemoryBarrier2) RefSubresourceRange() ImageSubresourceRange {
	return ImageSubresourceRange{ptr: (*C.VkImageSubresourceRange)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageMemoryBarrier2_subresourceRange)))}
}

// ImageMemoryRequirementsInfo2 wraps VkImageMemoryRequirementsInfo2.
type ImageMemoryRequirementsInfo2 struct {
	ptr *C.VkImageMemoryRequirementsInfo2
}

// ImageMemoryRequirementsInfo2Nil is a null pointer.
var ImageMemoryRequirementsInfo2Nil ImageMemoryRequirementsInfo2

// ImageMemoryRequirementsInfo2SizeOf is the byte size of VkImageMemoryRequirementsInfo2.
const ImageMemoryRequirementsInfo2SizeOf = int(C.sizeof_VkImageMemoryRequirementsInfo2)

// ImageMemoryRequirementsInfo2FromPtr converts a raw pointer to a ImageMemoryRequirementsInfo2.
func ImageMemoryRequirementsInfo2FromPtr(ptr unsafe.Pointer) ImageMemoryRequirementsInfo2 {
	return ImageMemoryRequirementsInfo2{ptr: (*C.VkImageMemoryRequirementsInfo2)(ptr)}
}

// ImageMemoryRequirementsInfo2Alloc allocates a continuous block of VkImageMemoryRequirementsInfo2.
func ImageMemoryRequirementsInfo2Alloc(alloc ffi.Allocator, count int) ImageMemoryRequirementsInfo2 {
	ptr := alloc.Allocate(ImageMemoryRequirementsInfo2SizeOf * count)
	return ImageMemoryRequirementsInfo2{ptr: (*C.VkImageMemoryRequirementsInfo2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageMemoryRequirementsInfo2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageMemoryRequirementsInfo2) Offset(offset int) ImageMemoryRequirementsInfo2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageMemoryRequirementsInfo2SizeOf)
	return ImageMemoryRequirementsInfo2{ptr: (*C.VkImageMemoryRequirementsInfo2)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageMemoryRequirementsInfo2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageMemoryRequirementsInfo2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageMemoryRequirementsInfo2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageMemoryRequirementsInfo2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetImage returns the value in image.
func (p ImageMemoryRequirementsInfo2) GetImage() Image {
	return Image(p.ptr.image)
}

// SetImage sets the value in image.
func (p ImageMemoryRequirementsInfo2) SetImage(value Image) {
	p.ptr.image = (C.VkImage)(value)
}

// ImagePlaneMemoryRequirementsInfo wraps VkImagePlaneMemoryRequirementsInfo.
type ImagePlaneMemoryRequirementsInfo struct {
	ptr *C.VkImagePlaneMemoryRequirementsInfo
}

// ImagePlaneMemoryRequirementsInfoNil is a null pointer.
var ImagePlaneMemoryRequirementsInfoNil ImagePlaneMemoryRequirementsInfo

// ImagePlaneMemoryRequirementsInfoSizeOf is the byte size of VkImagePlaneMemoryRequirementsInfo.
const ImagePlaneMemoryRequirementsInfoSizeOf = int(C.sizeof_VkImagePlaneMemoryRequirementsInfo)

// ImagePlaneMemoryRequirementsInfoFromPtr converts a raw pointer to a ImagePlaneMemoryRequirementsInfo.
func ImagePlaneMemoryRequirementsInfoFromPtr(ptr unsafe.Pointer) ImagePlaneMemoryRequirementsInfo {
	return ImagePlaneMemoryRequirementsInfo{ptr: (*C.VkImagePlaneMemoryRequirementsInfo)(ptr)}
}

// ImagePlaneMemoryRequirementsInfoAlloc allocates a continuous block of VkImagePlaneMemoryRequirementsInfo.
func ImagePlaneMemoryRequirementsInfoAlloc(alloc ffi.Allocator, count int) ImagePlaneMemoryRequirementsInfo {
	ptr := alloc.Allocate(ImagePlaneMemoryRequirementsInfoSizeOf * count)
	return ImagePlaneMemoryRequirementsInfo{ptr: (*C.VkImagePlaneMemoryRequirementsInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImagePlaneMemoryRequirementsInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImagePlaneMemoryRequirementsInfo) Offset(offset int) ImagePlaneMemoryRequirementsInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImagePlaneMemoryRequirementsInfoSizeOf)
	return ImagePlaneMemoryRequirementsInfo{ptr: (*C.VkImagePlaneMemoryRequirementsInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ImagePlaneMemoryRequirementsInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImagePlaneMemoryRequirementsInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImagePlaneMemoryRequirementsInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImagePlaneMemoryRequirementsInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPlaneAspect returns the value in planeAspect.
func (p ImagePlaneMemoryRequirementsInfo) GetPlaneAspect() ImageAspectFlags {
	return ImageAspectFlags(p.ptr.planeAspect)
}

// SetPlaneAspect sets the value in planeAspect.
func (p ImagePlaneMemoryRequirementsInfo) SetPlaneAspect(value ImageAspectFlags) {
	p.ptr.planeAspect = (C.VkImageAspectFlagBits)(value)
}

// ImageResolve wraps VkImageResolve.
type ImageResolve struct {
	ptr *C.VkImageResolve
}

// ImageResolveNil is a null pointer.
var ImageResolveNil ImageResolve

// ImageResolveSizeOf is the byte size of VkImageResolve.
const ImageResolveSizeOf = int(C.sizeof_VkImageResolve)

// ImageResolveFromPtr converts a raw pointer to a ImageResolve.
func ImageResolveFromPtr(ptr unsafe.Pointer) ImageResolve {
	return ImageResolve{ptr: (*C.VkImageResolve)(ptr)}
}

// ImageResolveAlloc allocates a continuous block of VkImageResolve.
func ImageResolveAlloc(alloc ffi.Allocator, count int) ImageResolve {
	ptr := alloc.Allocate(ImageResolveSizeOf * count)
	return ImageResolve{ptr: (*C.VkImageResolve)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageResolve) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageResolve) Offset(offset int) ImageResolve {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageResolveSizeOf)
	return ImageResolve{ptr: (*C.VkImageResolve)(ptr)}
}

// RefSrcSubresource returns pointer to the srcSubresource field.
func (p ImageResolve) RefSrcSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageResolve_srcSubresource)))}
}

// RefSrcOffset returns pointer to the srcOffset field.
func (p ImageResolve) RefSrcOffset() Offset3D {
	return Offset3D{ptr: (*C.VkOffset3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageResolve_srcOffset)))}
}

// RefDstSubresource returns pointer to the dstSubresource field.
func (p ImageResolve) RefDstSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageResolve_dstSubresource)))}
}

// RefDstOffset returns pointer to the dstOffset field.
func (p ImageResolve) RefDstOffset() Offset3D {
	return Offset3D{ptr: (*C.VkOffset3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageResolve_dstOffset)))}
}

// RefExtent returns pointer to the extent field.
func (p ImageResolve) RefExtent() Extent3D {
	return Extent3D{ptr: (*C.VkExtent3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageResolve_extent)))}
}

// ImageResolve2 wraps VkImageResolve2.
type ImageResolve2 struct {
	ptr *C.VkImageResolve2
}

// ImageResolve2Nil is a null pointer.
var ImageResolve2Nil ImageResolve2

// ImageResolve2SizeOf is the byte size of VkImageResolve2.
const ImageResolve2SizeOf = int(C.sizeof_VkImageResolve2)

// ImageResolve2FromPtr converts a raw pointer to a ImageResolve2.
func ImageResolve2FromPtr(ptr unsafe.Pointer) ImageResolve2 {
	return ImageResolve2{ptr: (*C.VkImageResolve2)(ptr)}
}

// ImageResolve2Alloc allocates a continuous block of VkImageResolve2.
func ImageResolve2Alloc(alloc ffi.Allocator, count int) ImageResolve2 {
	ptr := alloc.Allocate(ImageResolve2SizeOf * count)
	return ImageResolve2{ptr: (*C.VkImageResolve2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageResolve2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageResolve2) Offset(offset int) ImageResolve2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageResolve2SizeOf)
	return ImageResolve2{ptr: (*C.VkImageResolve2)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageResolve2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageResolve2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageResolve2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageResolve2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefSrcSubresource returns pointer to the srcSubresource field.
func (p ImageResolve2) RefSrcSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageResolve2_srcSubresource)))}
}

// RefSrcOffset returns pointer to the srcOffset field.
func (p ImageResolve2) RefSrcOffset() Offset3D {
	return Offset3D{ptr: (*C.VkOffset3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageResolve2_srcOffset)))}
}

// RefDstSubresource returns pointer to the dstSubresource field.
func (p ImageResolve2) RefDstSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageResolve2_dstSubresource)))}
}

// RefDstOffset returns pointer to the dstOffset field.
func (p ImageResolve2) RefDstOffset() Offset3D {
	return Offset3D{ptr: (*C.VkOffset3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageResolve2_dstOffset)))}
}

// RefExtent returns pointer to the extent field.
func (p ImageResolve2) RefExtent() Extent3D {
	return Extent3D{ptr: (*C.VkExtent3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageResolve2_extent)))}
}

// ImageSparseMemoryRequirementsInfo2 wraps VkImageSparseMemoryRequirementsInfo2.
type ImageSparseMemoryRequirementsInfo2 struct {
	ptr *C.VkImageSparseMemoryRequirementsInfo2
}

// ImageSparseMemoryRequirementsInfo2Nil is a null pointer.
var ImageSparseMemoryRequirementsInfo2Nil ImageSparseMemoryRequirementsInfo2

// ImageSparseMemoryRequirementsInfo2SizeOf is the byte size of VkImageSparseMemoryRequirementsInfo2.
const ImageSparseMemoryRequirementsInfo2SizeOf = int(C.sizeof_VkImageSparseMemoryRequirementsInfo2)

// ImageSparseMemoryRequirementsInfo2FromPtr converts a raw pointer to a ImageSparseMemoryRequirementsInfo2.
func ImageSparseMemoryRequirementsInfo2FromPtr(ptr unsafe.Pointer) ImageSparseMemoryRequirementsInfo2 {
	return ImageSparseMemoryRequirementsInfo2{ptr: (*C.VkImageSparseMemoryRequirementsInfo2)(ptr)}
}

// ImageSparseMemoryRequirementsInfo2Alloc allocates a continuous block of VkImageSparseMemoryRequirementsInfo2.
func ImageSparseMemoryRequirementsInfo2Alloc(alloc ffi.Allocator, count int) ImageSparseMemoryRequirementsInfo2 {
	ptr := alloc.Allocate(ImageSparseMemoryRequirementsInfo2SizeOf * count)
	return ImageSparseMemoryRequirementsInfo2{ptr: (*C.VkImageSparseMemoryRequirementsInfo2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageSparseMemoryRequirementsInfo2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageSparseMemoryRequirementsInfo2) Offset(offset int) ImageSparseMemoryRequirementsInfo2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageSparseMemoryRequirementsInfo2SizeOf)
	return ImageSparseMemoryRequirementsInfo2{ptr: (*C.VkImageSparseMemoryRequirementsInfo2)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageSparseMemoryRequirementsInfo2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageSparseMemoryRequirementsInfo2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageSparseMemoryRequirementsInfo2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageSparseMemoryRequirementsInfo2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetImage returns the value in image.
func (p ImageSparseMemoryRequirementsInfo2) GetImage() Image {
	return Image(p.ptr.image)
}

// SetImage sets the value in image.
func (p ImageSparseMemoryRequirementsInfo2) SetImage(value Image) {
	p.ptr.image = (C.VkImage)(value)
}

// ImageStencilUsageCreateInfo wraps VkImageStencilUsageCreateInfo.
type ImageStencilUsageCreateInfo struct {
	ptr *C.VkImageStencilUsageCreateInfo
}

// ImageStencilUsageCreateInfoNil is a null pointer.
var ImageStencilUsageCreateInfoNil ImageStencilUsageCreateInfo

// ImageStencilUsageCreateInfoSizeOf is the byte size of VkImageStencilUsageCreateInfo.
const ImageStencilUsageCreateInfoSizeOf = int(C.sizeof_VkImageStencilUsageCreateInfo)

// ImageStencilUsageCreateInfoFromPtr converts a raw pointer to a ImageStencilUsageCreateInfo.
func ImageStencilUsageCreateInfoFromPtr(ptr unsafe.Pointer) ImageStencilUsageCreateInfo {
	return ImageStencilUsageCreateInfo{ptr: (*C.VkImageStencilUsageCreateInfo)(ptr)}
}

// ImageStencilUsageCreateInfoAlloc allocates a continuous block of VkImageStencilUsageCreateInfo.
func ImageStencilUsageCreateInfoAlloc(alloc ffi.Allocator, count int) ImageStencilUsageCreateInfo {
	ptr := alloc.Allocate(ImageStencilUsageCreateInfoSizeOf * count)
	return ImageStencilUsageCreateInfo{ptr: (*C.VkImageStencilUsageCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageStencilUsageCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageStencilUsageCreateInfo) Offset(offset int) ImageStencilUsageCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageStencilUsageCreateInfoSizeOf)
	return ImageStencilUsageCreateInfo{ptr: (*C.VkImageStencilUsageCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageStencilUsageCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageStencilUsageCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageStencilUsageCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageStencilUsageCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetStencilUsage returns the value in stencilUsage.
func (p ImageStencilUsageCreateInfo) GetStencilUsage() ImageUsageFlags {
	return ImageUsageFlags(p.ptr.stencilUsage)
}

// SetStencilUsage sets the value in stencilUsage.
func (p ImageStencilUsageCreateInfo) SetStencilUsage(value ImageUsageFlags) {
	p.ptr.stencilUsage = (C.VkImageUsageFlags)(value)
}

// ImageSubresource wraps VkImageSubresource.
type ImageSubresource struct {
	ptr *C.VkImageSubresource
}

// ImageSubresourceNil is a null pointer.
var ImageSubresourceNil ImageSubresource

// ImageSubresourceSizeOf is the byte size of VkImageSubresource.
const ImageSubresourceSizeOf = int(C.sizeof_VkImageSubresource)

// ImageSubresourceFromPtr converts a raw pointer to a ImageSubresource.
func ImageSubresourceFromPtr(ptr unsafe.Pointer) ImageSubresource {
	return ImageSubresource{ptr: (*C.VkImageSubresource)(ptr)}
}

// ImageSubresourceAlloc allocates a continuous block of VkImageSubresource.
func ImageSubresourceAlloc(alloc ffi.Allocator, count int) ImageSubresource {
	ptr := alloc.Allocate(ImageSubresourceSizeOf * count)
	return ImageSubresource{ptr: (*C.VkImageSubresource)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageSubresource) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageSubresource) Offset(offset int) ImageSubresource {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageSubresourceSizeOf)
	return ImageSubresource{ptr: (*C.VkImageSubresource)(ptr)}
}

// GetAspectMask returns the value in aspectMask.
func (p ImageSubresource) GetAspectMask() ImageAspectFlags {
	return ImageAspectFlags(p.ptr.aspectMask)
}

// SetAspectMask sets the value in aspectMask.
func (p ImageSubresource) SetAspectMask(value ImageAspectFlags) {
	p.ptr.aspectMask = (C.VkImageAspectFlags)(value)
}

// GetMipLevel returns the value in mipLevel.
func (p ImageSubresource) GetMipLevel() uint32 {
	return uint32(p.ptr.mipLevel)
}

// SetMipLevel sets the value in mipLevel.
func (p ImageSubresource) SetMipLevel(value uint32) {
	p.ptr.mipLevel = (C.uint32_t)(value)
}

// GetArrayLayer returns the value in arrayLayer.
func (p ImageSubresource) GetArrayLayer() uint32 {
	return uint32(p.ptr.arrayLayer)
}

// SetArrayLayer sets the value in arrayLayer.
func (p ImageSubresource) SetArrayLayer(value uint32) {
	p.ptr.arrayLayer = (C.uint32_t)(value)
}

// ImageSubresource2 wraps VkImageSubresource2.
type ImageSubresource2 struct {
	ptr *C.VkImageSubresource2
}

// ImageSubresource2Nil is a null pointer.
var ImageSubresource2Nil ImageSubresource2

// ImageSubresource2SizeOf is the byte size of VkImageSubresource2.
const ImageSubresource2SizeOf = int(C.sizeof_VkImageSubresource2)

// ImageSubresource2FromPtr converts a raw pointer to a ImageSubresource2.
func ImageSubresource2FromPtr(ptr unsafe.Pointer) ImageSubresource2 {
	return ImageSubresource2{ptr: (*C.VkImageSubresource2)(ptr)}
}

// ImageSubresource2Alloc allocates a continuous block of VkImageSubresource2.
func ImageSubresource2Alloc(alloc ffi.Allocator, count int) ImageSubresource2 {
	ptr := alloc.Allocate(ImageSubresource2SizeOf * count)
	return ImageSubresource2{ptr: (*C.VkImageSubresource2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageSubresource2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageSubresource2) Offset(offset int) ImageSubresource2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageSubresource2SizeOf)
	return ImageSubresource2{ptr: (*C.VkImageSubresource2)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageSubresource2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageSubresource2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageSubresource2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageSubresource2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefImageSubresource returns pointer to the imageSubresource field.
func (p ImageSubresource2) RefImageSubresource() ImageSubresource {
	return ImageSubresource{ptr: (*C.VkImageSubresource)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageSubresource2_imageSubresource)))}
}

// ImageSubresourceLayers wraps VkImageSubresourceLayers.
type ImageSubresourceLayers struct {
	ptr *C.VkImageSubresourceLayers
}

// ImageSubresourceLayersNil is a null pointer.
var ImageSubresourceLayersNil ImageSubresourceLayers

// ImageSubresourceLayersSizeOf is the byte size of VkImageSubresourceLayers.
const ImageSubresourceLayersSizeOf = int(C.sizeof_VkImageSubresourceLayers)

// ImageSubresourceLayersFromPtr converts a raw pointer to a ImageSubresourceLayers.
func ImageSubresourceLayersFromPtr(ptr unsafe.Pointer) ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(ptr)}
}

// ImageSubresourceLayersAlloc allocates a continuous block of VkImageSubresourceLayers.
func ImageSubresourceLayersAlloc(alloc ffi.Allocator, count int) ImageSubresourceLayers {
	ptr := alloc.Allocate(ImageSubresourceLayersSizeOf * count)
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageSubresourceLayers) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageSubresourceLayers) Offset(offset int) ImageSubresourceLayers {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageSubresourceLayersSizeOf)
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(ptr)}
}

// GetAspectMask returns the value in aspectMask.
func (p ImageSubresourceLayers) GetAspectMask() ImageAspectFlags {
	return ImageAspectFlags(p.ptr.aspectMask)
}

// SetAspectMask sets the value in aspectMask.
func (p ImageSubresourceLayers) SetAspectMask(value ImageAspectFlags) {
	p.ptr.aspectMask = (C.VkImageAspectFlags)(value)
}

// GetMipLevel returns the value in mipLevel.
func (p ImageSubresourceLayers) GetMipLevel() uint32 {
	return uint32(p.ptr.mipLevel)
}

// SetMipLevel sets the value in mipLevel.
func (p ImageSubresourceLayers) SetMipLevel(value uint32) {
	p.ptr.mipLevel = (C.uint32_t)(value)
}

// GetBaseArrayLayer returns the value in baseArrayLayer.
func (p ImageSubresourceLayers) GetBaseArrayLayer() uint32 {
	return uint32(p.ptr.baseArrayLayer)
}

// SetBaseArrayLayer sets the value in baseArrayLayer.
func (p ImageSubresourceLayers) SetBaseArrayLayer(value uint32) {
	p.ptr.baseArrayLayer = (C.uint32_t)(value)
}

// GetLayerCount returns the value in layerCount.
func (p ImageSubresourceLayers) GetLayerCount() uint32 {
	return uint32(p.ptr.layerCount)
}

// SetLayerCount sets the value in layerCount.
func (p ImageSubresourceLayers) SetLayerCount(value uint32) {
	p.ptr.layerCount = (C.uint32_t)(value)
}

// ImageSubresourceRange wraps VkImageSubresourceRange.
type ImageSubresourceRange struct {
	ptr *C.VkImageSubresourceRange
}

// ImageSubresourceRangeNil is a null pointer.
var ImageSubresourceRangeNil ImageSubresourceRange

// ImageSubresourceRangeSizeOf is the byte size of VkImageSubresourceRange.
const ImageSubresourceRangeSizeOf = int(C.sizeof_VkImageSubresourceRange)

// ImageSubresourceRangeFromPtr converts a raw pointer to a ImageSubresourceRange.
func ImageSubresourceRangeFromPtr(ptr unsafe.Pointer) ImageSubresourceRange {
	return ImageSubresourceRange{ptr: (*C.VkImageSubresourceRange)(ptr)}
}

// ImageSubresourceRangeAlloc allocates a continuous block of VkImageSubresourceRange.
func ImageSubresourceRangeAlloc(alloc ffi.Allocator, count int) ImageSubresourceRange {
	ptr := alloc.Allocate(ImageSubresourceRangeSizeOf * count)
	return ImageSubresourceRange{ptr: (*C.VkImageSubresourceRange)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageSubresourceRange) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageSubresourceRange) Offset(offset int) ImageSubresourceRange {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageSubresourceRangeSizeOf)
	return ImageSubresourceRange{ptr: (*C.VkImageSubresourceRange)(ptr)}
}

// GetAspectMask returns the value in aspectMask.
func (p ImageSubresourceRange) GetAspectMask() ImageAspectFlags {
	return ImageAspectFlags(p.ptr.aspectMask)
}

// SetAspectMask sets the value in aspectMask.
func (p ImageSubresourceRange) SetAspectMask(value ImageAspectFlags) {
	p.ptr.aspectMask = (C.VkImageAspectFlags)(value)
}

// GetBaseMipLevel returns the value in baseMipLevel.
func (p ImageSubresourceRange) GetBaseMipLevel() uint32 {
	return uint32(p.ptr.baseMipLevel)
}

// SetBaseMipLevel sets the value in baseMipLevel.
func (p ImageSubresourceRange) SetBaseMipLevel(value uint32) {
	p.ptr.baseMipLevel = (C.uint32_t)(value)
}

// GetLevelCount returns the value in levelCount.
func (p ImageSubresourceRange) GetLevelCount() uint32 {
	return uint32(p.ptr.levelCount)
}

// SetLevelCount sets the value in levelCount.
func (p ImageSubresourceRange) SetLevelCount(value uint32) {
	p.ptr.levelCount = (C.uint32_t)(value)
}

// GetBaseArrayLayer returns the value in baseArrayLayer.
func (p ImageSubresourceRange) GetBaseArrayLayer() uint32 {
	return uint32(p.ptr.baseArrayLayer)
}

// SetBaseArrayLayer sets the value in baseArrayLayer.
func (p ImageSubresourceRange) SetBaseArrayLayer(value uint32) {
	p.ptr.baseArrayLayer = (C.uint32_t)(value)
}

// GetLayerCount returns the value in layerCount.
func (p ImageSubresourceRange) GetLayerCount() uint32 {
	return uint32(p.ptr.layerCount)
}

// SetLayerCount sets the value in layerCount.
func (p ImageSubresourceRange) SetLayerCount(value uint32) {
	p.ptr.layerCount = (C.uint32_t)(value)
}

// ImageToMemoryCopy wraps VkImageToMemoryCopy.
type ImageToMemoryCopy struct {
	ptr *C.VkImageToMemoryCopy
}

// ImageToMemoryCopyNil is a null pointer.
var ImageToMemoryCopyNil ImageToMemoryCopy

// ImageToMemoryCopySizeOf is the byte size of VkImageToMemoryCopy.
const ImageToMemoryCopySizeOf = int(C.sizeof_VkImageToMemoryCopy)

// ImageToMemoryCopyFromPtr converts a raw pointer to a ImageToMemoryCopy.
func ImageToMemoryCopyFromPtr(ptr unsafe.Pointer) ImageToMemoryCopy {
	return ImageToMemoryCopy{ptr: (*C.VkImageToMemoryCopy)(ptr)}
}

// ImageToMemoryCopyAlloc allocates a continuous block of VkImageToMemoryCopy.
func ImageToMemoryCopyAlloc(alloc ffi.Allocator, count int) ImageToMemoryCopy {
	ptr := alloc.Allocate(ImageToMemoryCopySizeOf * count)
	return ImageToMemoryCopy{ptr: (*C.VkImageToMemoryCopy)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageToMemoryCopy) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageToMemoryCopy) Offset(offset int) ImageToMemoryCopy {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageToMemoryCopySizeOf)
	return ImageToMemoryCopy{ptr: (*C.VkImageToMemoryCopy)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageToMemoryCopy) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageToMemoryCopy) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageToMemoryCopy) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageToMemoryCopy) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPHostPointer returns the value in pHostPointer.
func (p ImageToMemoryCopy) GetPHostPointer() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pHostPointer)
}

// SetPHostPointer sets the value in pHostPointer.
func (p ImageToMemoryCopy) SetPHostPointer(value unsafe.Pointer) {
	p.ptr.pHostPointer = value
}

// GetMemoryRowLength returns the value in memoryRowLength.
func (p ImageToMemoryCopy) GetMemoryRowLength() uint32 {
	return uint32(p.ptr.memoryRowLength)
}

// SetMemoryRowLength sets the value in memoryRowLength.
func (p ImageToMemoryCopy) SetMemoryRowLength(value uint32) {
	p.ptr.memoryRowLength = (C.uint32_t)(value)
}

// GetMemoryImageHeight returns the value in memoryImageHeight.
func (p ImageToMemoryCopy) GetMemoryImageHeight() uint32 {
	return uint32(p.ptr.memoryImageHeight)
}

// SetMemoryImageHeight sets the value in memoryImageHeight.
func (p ImageToMemoryCopy) SetMemoryImageHeight(value uint32) {
	p.ptr.memoryImageHeight = (C.uint32_t)(value)
}

// RefImageSubresource returns pointer to the imageSubresource field.
func (p ImageToMemoryCopy) RefImageSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageToMemoryCopy_imageSubresource)))}
}

// RefImageOffset returns pointer to the imageOffset field.
func (p ImageToMemoryCopy) RefImageOffset() Offset3D {
	return Offset3D{ptr: (*C.VkOffset3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageToMemoryCopy_imageOffset)))}
}

// RefImageExtent returns pointer to the imageExtent field.
func (p ImageToMemoryCopy) RefImageExtent() Extent3D {
	return Extent3D{ptr: (*C.VkExtent3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageToMemoryCopy_imageExtent)))}
}

// ImageViewCreateInfo wraps VkImageViewCreateInfo.
type ImageViewCreateInfo struct {
	ptr *C.VkImageViewCreateInfo
}

// ImageViewCreateInfoNil is a null pointer.
var ImageViewCreateInfoNil ImageViewCreateInfo

// ImageViewCreateInfoSizeOf is the byte size of VkImageViewCreateInfo.
const ImageViewCreateInfoSizeOf = int(C.sizeof_VkImageViewCreateInfo)

// ImageViewCreateInfoFromPtr converts a raw pointer to a ImageViewCreateInfo.
func ImageViewCreateInfoFromPtr(ptr unsafe.Pointer) ImageViewCreateInfo {
	return ImageViewCreateInfo{ptr: (*C.VkImageViewCreateInfo)(ptr)}
}

// ImageViewCreateInfoAlloc allocates a continuous block of VkImageViewCreateInfo.
func ImageViewCreateInfoAlloc(alloc ffi.Allocator, count int) ImageViewCreateInfo {
	ptr := alloc.Allocate(ImageViewCreateInfoSizeOf * count)
	return ImageViewCreateInfo{ptr: (*C.VkImageViewCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageViewCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageViewCreateInfo) Offset(offset int) ImageViewCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageViewCreateInfoSizeOf)
	return ImageViewCreateInfo{ptr: (*C.VkImageViewCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageViewCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageViewCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageViewCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageViewCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p ImageViewCreateInfo) GetFlags() ImageViewCreateFlags {
	return ImageViewCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p ImageViewCreateInfo) SetFlags(value ImageViewCreateFlags) {
	p.ptr.flags = (C.VkImageViewCreateFlags)(value)
}

// GetImage returns the value in image.
func (p ImageViewCreateInfo) GetImage() Image {
	return Image(p.ptr.image)
}

// SetImage sets the value in image.
func (p ImageViewCreateInfo) SetImage(value Image) {
	p.ptr.image = (C.VkImage)(value)
}

// GetViewType returns the value in viewType.
func (p ImageViewCreateInfo) GetViewType() ImageViewType {
	return ImageViewType(p.ptr.viewType)
}

// SetViewType sets the value in viewType.
func (p ImageViewCreateInfo) SetViewType(value ImageViewType) {
	p.ptr.viewType = (C.VkImageViewType)(value)
}

// GetFormat returns the value in format.
func (p ImageViewCreateInfo) GetFormat() Format {
	return Format(p.ptr.format)
}

// SetFormat sets the value in format.
func (p ImageViewCreateInfo) SetFormat(value Format) {
	p.ptr.format = (C.VkFormat)(value)
}

// RefComponents returns pointer to the components field.
func (p ImageViewCreateInfo) RefComponents() ComponentMapping {
	return ComponentMapping{ptr: (*C.VkComponentMapping)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageViewCreateInfo_components)))}
}

// RefSubresourceRange returns pointer to the subresourceRange field.
func (p ImageViewCreateInfo) RefSubresourceRange() ImageSubresourceRange {
	return ImageSubresourceRange{ptr: (*C.VkImageSubresourceRange)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkImageViewCreateInfo_subresourceRange)))}
}

// ImageViewUsageCreateInfo wraps VkImageViewUsageCreateInfo.
type ImageViewUsageCreateInfo struct {
	ptr *C.VkImageViewUsageCreateInfo
}

// ImageViewUsageCreateInfoNil is a null pointer.
var ImageViewUsageCreateInfoNil ImageViewUsageCreateInfo

// ImageViewUsageCreateInfoSizeOf is the byte size of VkImageViewUsageCreateInfo.
const ImageViewUsageCreateInfoSizeOf = int(C.sizeof_VkImageViewUsageCreateInfo)

// ImageViewUsageCreateInfoFromPtr converts a raw pointer to a ImageViewUsageCreateInfo.
func ImageViewUsageCreateInfoFromPtr(ptr unsafe.Pointer) ImageViewUsageCreateInfo {
	return ImageViewUsageCreateInfo{ptr: (*C.VkImageViewUsageCreateInfo)(ptr)}
}

// ImageViewUsageCreateInfoAlloc allocates a continuous block of VkImageViewUsageCreateInfo.
func ImageViewUsageCreateInfoAlloc(alloc ffi.Allocator, count int) ImageViewUsageCreateInfo {
	ptr := alloc.Allocate(ImageViewUsageCreateInfoSizeOf * count)
	return ImageViewUsageCreateInfo{ptr: (*C.VkImageViewUsageCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ImageViewUsageCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ImageViewUsageCreateInfo) Offset(offset int) ImageViewUsageCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ImageViewUsageCreateInfoSizeOf)
	return ImageViewUsageCreateInfo{ptr: (*C.VkImageViewUsageCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ImageViewUsageCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ImageViewUsageCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ImageViewUsageCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ImageViewUsageCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetUsage returns the value in usage.
func (p ImageViewUsageCreateInfo) GetUsage() ImageUsageFlags {
	return ImageUsageFlags(p.ptr.usage)
}

// SetUsage sets the value in usage.
func (p ImageViewUsageCreateInfo) SetUsage(value ImageUsageFlags) {
	p.ptr.usage = (C.VkImageUsageFlags)(value)
}

// InputAttachmentAspectReference wraps VkInputAttachmentAspectReference.
type InputAttachmentAspectReference struct {
	ptr *C.VkInputAttachmentAspectReference
}

// InputAttachmentAspectReferenceNil is a null pointer.
var InputAttachmentAspectReferenceNil InputAttachmentAspectReference

// InputAttachmentAspectReferenceSizeOf is the byte size of VkInputAttachmentAspectReference.
const InputAttachmentAspectReferenceSizeOf = int(C.sizeof_VkInputAttachmentAspectReference)

// InputAttachmentAspectReferenceFromPtr converts a raw pointer to a InputAttachmentAspectReference.
func InputAttachmentAspectReferenceFromPtr(ptr unsafe.Pointer) InputAttachmentAspectReference {
	return InputAttachmentAspectReference{ptr: (*C.VkInputAttachmentAspectReference)(ptr)}
}

// InputAttachmentAspectReferenceAlloc allocates a continuous block of VkInputAttachmentAspectReference.
func InputAttachmentAspectReferenceAlloc(alloc ffi.Allocator, count int) InputAttachmentAspectReference {
	ptr := alloc.Allocate(InputAttachmentAspectReferenceSizeOf * count)
	return InputAttachmentAspectReference{ptr: (*C.VkInputAttachmentAspectReference)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p InputAttachmentAspectReference) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p InputAttachmentAspectReference) Offset(offset int) InputAttachmentAspectReference {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*InputAttachmentAspectReferenceSizeOf)
	return InputAttachmentAspectReference{ptr: (*C.VkInputAttachmentAspectReference)(ptr)}
}

// GetSubpass returns the value in subpass.
func (p InputAttachmentAspectReference) GetSubpass() uint32 {
	return uint32(p.ptr.subpass)
}

// SetSubpass sets the value in subpass.
func (p InputAttachmentAspectReference) SetSubpass(value uint32) {
	p.ptr.subpass = (C.uint32_t)(value)
}

// GetInputAttachmentIndex returns the value in inputAttachmentIndex.
func (p InputAttachmentAspectReference) GetInputAttachmentIndex() uint32 {
	return uint32(p.ptr.inputAttachmentIndex)
}

// SetInputAttachmentIndex sets the value in inputAttachmentIndex.
func (p InputAttachmentAspectReference) SetInputAttachmentIndex(value uint32) {
	p.ptr.inputAttachmentIndex = (C.uint32_t)(value)
}

// GetAspectMask returns the value in aspectMask.
func (p InputAttachmentAspectReference) GetAspectMask() ImageAspectFlags {
	return ImageAspectFlags(p.ptr.aspectMask)
}

// SetAspectMask sets the value in aspectMask.
func (p InputAttachmentAspectReference) SetAspectMask(value ImageAspectFlags) {
	p.ptr.aspectMask = (C.VkImageAspectFlags)(value)
}

// InstanceCreateInfo wraps VkInstanceCreateInfo.
type InstanceCreateInfo struct {
	ptr *C.VkInstanceCreateInfo
}

// InstanceCreateInfoNil is a null pointer.
var InstanceCreateInfoNil InstanceCreateInfo

// InstanceCreateInfoSizeOf is the byte size of VkInstanceCreateInfo.
const InstanceCreateInfoSizeOf = int(C.sizeof_VkInstanceCreateInfo)

// InstanceCreateInfoFromPtr converts a raw pointer to a InstanceCreateInfo.
func InstanceCreateInfoFromPtr(ptr unsafe.Pointer) InstanceCreateInfo {
	return InstanceCreateInfo{ptr: (*C.VkInstanceCreateInfo)(ptr)}
}

// InstanceCreateInfoAlloc allocates a continuous block of VkInstanceCreateInfo.
func InstanceCreateInfoAlloc(alloc ffi.Allocator, count int) InstanceCreateInfo {
	ptr := alloc.Allocate(InstanceCreateInfoSizeOf * count)
	return InstanceCreateInfo{ptr: (*C.VkInstanceCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p InstanceCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p InstanceCreateInfo) Offset(offset int) InstanceCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*InstanceCreateInfoSizeOf)
	return InstanceCreateInfo{ptr: (*C.VkInstanceCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p InstanceCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p InstanceCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p InstanceCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p InstanceCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p InstanceCreateInfo) GetFlags() InstanceCreateFlags {
	return InstanceCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p InstanceCreateInfo) SetFlags(value InstanceCreateFlags) {
	p.ptr.flags = (C.VkInstanceCreateFlags)(value)
}

// GetPApplicationInfo returns the value in pApplicationInfo.
func (p InstanceCreateInfo) GetPApplicationInfo() ApplicationInfo {
	return ApplicationInfo{ptr: p.ptr.pApplicationInfo}
}

// SetPApplicationInfo sets the value in pApplicationInfo.
func (p InstanceCreateInfo) SetPApplicationInfo(value ApplicationInfo) {
	p.ptr.pApplicationInfo = value.ptr
}

// GetEnabledLayerCount returns the value in enabledLayerCount.
func (p InstanceCreateInfo) GetEnabledLayerCount() uint32 {
	return uint32(p.ptr.enabledLayerCount)
}

// SetEnabledLayerCount sets the value in enabledLayerCount.
func (p InstanceCreateInfo) SetEnabledLayerCount(value uint32) {
	p.ptr.enabledLayerCount = (C.uint32_t)(value)
}

// GetPpEnabledLayerNames returns the value in ppEnabledLayerNames.
func (p InstanceCreateInfo) GetPpEnabledLayerNames() ffi.Ref[ffi.CString] {
	return ffi.RefFromPtr[ffi.CString](unsafe.Pointer(p.ptr.ppEnabledLayerNames))
}

// SetPpEnabledLayerNames sets the value in ppEnabledLayerNames.
func (p InstanceCreateInfo) SetPpEnabledLayerNames(value ffi.Ref[ffi.CString]) {
	p.ptr.ppEnabledLayerNames = (**C.char)(value.Raw())
}

// GetEnabledExtensionCount returns the value in enabledExtensionCount.
func (p InstanceCreateInfo) GetEnabledExtensionCount() uint32 {
	return uint32(p.ptr.enabledExtensionCount)
}

// SetEnabledExtensionCount sets the value in enabledExtensionCount.
func (p InstanceCreateInfo) SetEnabledExtensionCount(value uint32) {
	p.ptr.enabledExtensionCount = (C.uint32_t)(value)
}

// GetPpEnabledExtensionNames returns the value in ppEnabledExtensionNames.
func (p InstanceCreateInfo) GetPpEnabledExtensionNames() ffi.Ref[ffi.CString] {
	return ffi.RefFromPtr[ffi.CString](unsafe.Pointer(p.ptr.ppEnabledExtensionNames))
}

// SetPpEnabledExtensionNames sets the value in ppEnabledExtensionNames.
func (p InstanceCreateInfo) SetPpEnabledExtensionNames(value ffi.Ref[ffi.CString]) {
	p.ptr.ppEnabledExtensionNames = (**C.char)(value.Raw())
}

// LayerProperties wraps VkLayerProperties.
type LayerProperties struct {
	ptr *C.VkLayerProperties
}

// LayerPropertiesNil is a null pointer.
var LayerPropertiesNil LayerProperties

// LayerPropertiesSizeOf is the byte size of VkLayerProperties.
const LayerPropertiesSizeOf = int(C.sizeof_VkLayerProperties)

// LayerPropertiesFromPtr converts a raw pointer to a LayerProperties.
func LayerPropertiesFromPtr(ptr unsafe.Pointer) LayerProperties {
	return LayerProperties{ptr: (*C.VkLayerProperties)(ptr)}
}

// LayerPropertiesAlloc allocates a continuous block of VkLayerProperties.
func LayerPropertiesAlloc(alloc ffi.Allocator, count int) LayerProperties {
	ptr := alloc.Allocate(LayerPropertiesSizeOf * count)
	return LayerProperties{ptr: (*C.VkLayerProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p LayerProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p LayerProperties) Offset(offset int) LayerProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*LayerPropertiesSizeOf)
	return LayerProperties{ptr: (*C.VkLayerProperties)(ptr)}
}

// LayerProperties.layerName is unsupported: category unsupported.

// GetSpecVersion returns the value in specVersion.
func (p LayerProperties) GetSpecVersion() uint32 {
	return uint32(p.ptr.specVersion)
}

// SetSpecVersion sets the value in specVersion.
func (p LayerProperties) SetSpecVersion(value uint32) {
	p.ptr.specVersion = (C.uint32_t)(value)
}

// GetImplementationVersion returns the value in implementationVersion.
func (p LayerProperties) GetImplementationVersion() uint32 {
	return uint32(p.ptr.implementationVersion)
}

// SetImplementationVersion sets the value in implementationVersion.
func (p LayerProperties) SetImplementationVersion(value uint32) {
	p.ptr.implementationVersion = (C.uint32_t)(value)
}

// LayerProperties.description is unsupported: category unsupported.

// MappedMemoryRange wraps VkMappedMemoryRange.
type MappedMemoryRange struct {
	ptr *C.VkMappedMemoryRange
}

// MappedMemoryRangeNil is a null pointer.
var MappedMemoryRangeNil MappedMemoryRange

// MappedMemoryRangeSizeOf is the byte size of VkMappedMemoryRange.
const MappedMemoryRangeSizeOf = int(C.sizeof_VkMappedMemoryRange)

// MappedMemoryRangeFromPtr converts a raw pointer to a MappedMemoryRange.
func MappedMemoryRangeFromPtr(ptr unsafe.Pointer) MappedMemoryRange {
	return MappedMemoryRange{ptr: (*C.VkMappedMemoryRange)(ptr)}
}

// MappedMemoryRangeAlloc allocates a continuous block of VkMappedMemoryRange.
func MappedMemoryRangeAlloc(alloc ffi.Allocator, count int) MappedMemoryRange {
	ptr := alloc.Allocate(MappedMemoryRangeSizeOf * count)
	return MappedMemoryRange{ptr: (*C.VkMappedMemoryRange)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MappedMemoryRange) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MappedMemoryRange) Offset(offset int) MappedMemoryRange {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MappedMemoryRangeSizeOf)
	return MappedMemoryRange{ptr: (*C.VkMappedMemoryRange)(ptr)}
}

// GetSType returns the value in sType.
func (p MappedMemoryRange) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p MappedMemoryRange) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p MappedMemoryRange) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p MappedMemoryRange) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMemory returns the value in memory.
func (p MappedMemoryRange) GetMemory() DeviceMemory {
	return DeviceMemory(p.ptr.memory)
}

// SetMemory sets the value in memory.
func (p MappedMemoryRange) SetMemory(value DeviceMemory) {
	p.ptr.memory = (C.VkDeviceMemory)(value)
}

// GetOffset returns the value in offset.
func (p MappedMemoryRange) GetOffset() DeviceSize {
	return DeviceSize(p.ptr.offset)
}

// SetOffset sets the value in offset.
func (p MappedMemoryRange) SetOffset(value DeviceSize) {
	p.ptr.offset = (C.VkDeviceSize)(value)
}

// GetSize returns the value in size.
func (p MappedMemoryRange) GetSize() DeviceSize {
	return DeviceSize(p.ptr.size)
}

// SetSize sets the value in size.
func (p MappedMemoryRange) SetSize(value DeviceSize) {
	p.ptr.size = (C.VkDeviceSize)(value)
}

// MemoryAllocateFlagsInfo wraps VkMemoryAllocateFlagsInfo.
type MemoryAllocateFlagsInfo struct {
	ptr *C.VkMemoryAllocateFlagsInfo
}

// MemoryAllocateFlagsInfoNil is a null pointer.
var MemoryAllocateFlagsInfoNil MemoryAllocateFlagsInfo

// MemoryAllocateFlagsInfoSizeOf is the byte size of VkMemoryAllocateFlagsInfo.
const MemoryAllocateFlagsInfoSizeOf = int(C.sizeof_VkMemoryAllocateFlagsInfo)

// MemoryAllocateFlagsInfoFromPtr converts a raw pointer to a MemoryAllocateFlagsInfo.
func MemoryAllocateFlagsInfoFromPtr(ptr unsafe.Pointer) MemoryAllocateFlagsInfo {
	return MemoryAllocateFlagsInfo{ptr: (*C.VkMemoryAllocateFlagsInfo)(ptr)}
}

// MemoryAllocateFlagsInfoAlloc allocates a continuous block of VkMemoryAllocateFlagsInfo.
func MemoryAllocateFlagsInfoAlloc(alloc ffi.Allocator, count int) MemoryAllocateFlagsInfo {
	ptr := alloc.Allocate(MemoryAllocateFlagsInfoSizeOf * count)
	return MemoryAllocateFlagsInfo{ptr: (*C.VkMemoryAllocateFlagsInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MemoryAllocateFlagsInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MemoryAllocateFlagsInfo) Offset(offset int) MemoryAllocateFlagsInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MemoryAllocateFlagsInfoSizeOf)
	return MemoryAllocateFlagsInfo{ptr: (*C.VkMemoryAllocateFlagsInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p MemoryAllocateFlagsInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p MemoryAllocateFlagsInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p MemoryAllocateFlagsInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p MemoryAllocateFlagsInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p MemoryAllocateFlagsInfo) GetFlags() MemoryAllocateFlags {
	return MemoryAllocateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p MemoryAllocateFlagsInfo) SetFlags(value MemoryAllocateFlags) {
	p.ptr.flags = (C.VkMemoryAllocateFlags)(value)
}

// GetDeviceMask returns the value in deviceMask.
func (p MemoryAllocateFlagsInfo) GetDeviceMask() uint32 {
	return uint32(p.ptr.deviceMask)
}

// SetDeviceMask sets the value in deviceMask.
func (p MemoryAllocateFlagsInfo) SetDeviceMask(value uint32) {
	p.ptr.deviceMask = (C.uint32_t)(value)
}

// MemoryAllocateInfo wraps VkMemoryAllocateInfo.
type MemoryAllocateInfo struct {
	ptr *C.VkMemoryAllocateInfo
}

// MemoryAllocateInfoNil is a null pointer.
var MemoryAllocateInfoNil MemoryAllocateInfo

// MemoryAllocateInfoSizeOf is the byte size of VkMemoryAllocateInfo.
const MemoryAllocateInfoSizeOf = int(C.sizeof_VkMemoryAllocateInfo)

// MemoryAllocateInfoFromPtr converts a raw pointer to a MemoryAllocateInfo.
func MemoryAllocateInfoFromPtr(ptr unsafe.Pointer) MemoryAllocateInfo {
	return MemoryAllocateInfo{ptr: (*C.VkMemoryAllocateInfo)(ptr)}
}

// MemoryAllocateInfoAlloc allocates a continuous block of VkMemoryAllocateInfo.
func MemoryAllocateInfoAlloc(alloc ffi.Allocator, count int) MemoryAllocateInfo {
	ptr := alloc.Allocate(MemoryAllocateInfoSizeOf * count)
	return MemoryAllocateInfo{ptr: (*C.VkMemoryAllocateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MemoryAllocateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MemoryAllocateInfo) Offset(offset int) MemoryAllocateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MemoryAllocateInfoSizeOf)
	return MemoryAllocateInfo{ptr: (*C.VkMemoryAllocateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p MemoryAllocateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p MemoryAllocateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p MemoryAllocateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p MemoryAllocateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetAllocationSize returns the value in allocationSize.
func (p MemoryAllocateInfo) GetAllocationSize() DeviceSize {
	return DeviceSize(p.ptr.allocationSize)
}

// SetAllocationSize sets the value in allocationSize.
func (p MemoryAllocateInfo) SetAllocationSize(value DeviceSize) {
	p.ptr.allocationSize = (C.VkDeviceSize)(value)
}

// GetMemoryTypeIndex returns the value in memoryTypeIndex.
func (p MemoryAllocateInfo) GetMemoryTypeIndex() uint32 {
	return uint32(p.ptr.memoryTypeIndex)
}

// SetMemoryTypeIndex sets the value in memoryTypeIndex.
func (p MemoryAllocateInfo) SetMemoryTypeIndex(value uint32) {
	p.ptr.memoryTypeIndex = (C.uint32_t)(value)
}

// MemoryBarrier wraps VkMemoryBarrier.
type MemoryBarrier struct {
	ptr *C.VkMemoryBarrier
}

// MemoryBarrierNil is a null pointer.
var MemoryBarrierNil MemoryBarrier

// MemoryBarrierSizeOf is the byte size of VkMemoryBarrier.
const MemoryBarrierSizeOf = int(C.sizeof_VkMemoryBarrier)

// MemoryBarrierFromPtr converts a raw pointer to a MemoryBarrier.
func MemoryBarrierFromPtr(ptr unsafe.Pointer) MemoryBarrier {
	return MemoryBarrier{ptr: (*C.VkMemoryBarrier)(ptr)}
}

// MemoryBarrierAlloc allocates a continuous block of VkMemoryBarrier.
func MemoryBarrierAlloc(alloc ffi.Allocator, count int) MemoryBarrier {
	ptr := alloc.Allocate(MemoryBarrierSizeOf * count)
	return MemoryBarrier{ptr: (*C.VkMemoryBarrier)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MemoryBarrier) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MemoryBarrier) Offset(offset int) MemoryBarrier {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MemoryBarrierSizeOf)
	return MemoryBarrier{ptr: (*C.VkMemoryBarrier)(ptr)}
}

// GetSType returns the value in sType.
func (p MemoryBarrier) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p MemoryBarrier) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p MemoryBarrier) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p MemoryBarrier) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcAccessMask returns the value in srcAccessMask.
func (p MemoryBarrier) GetSrcAccessMask() AccessFlags {
	return AccessFlags(p.ptr.srcAccessMask)
}

// SetSrcAccessMask sets the value in srcAccessMask.
func (p MemoryBarrier) SetSrcAccessMask(value AccessFlags) {
	p.ptr.srcAccessMask = (C.VkAccessFlags)(value)
}

// GetDstAccessMask returns the value in dstAccessMask.
func (p MemoryBarrier) GetDstAccessMask() AccessFlags {
	return AccessFlags(p.ptr.dstAccessMask)
}

// SetDstAccessMask sets the value in dstAccessMask.
func (p MemoryBarrier) SetDstAccessMask(value AccessFlags) {
	p.ptr.dstAccessMask = (C.VkAccessFlags)(value)
}

// MemoryBarrier2 wraps VkMemoryBarrier2.
type MemoryBarrier2 struct {
	ptr *C.VkMemoryBarrier2
}

// MemoryBarrier2Nil is a null pointer.
var MemoryBarrier2Nil MemoryBarrier2

// MemoryBarrier2SizeOf is the byte size of VkMemoryBarrier2.
const MemoryBarrier2SizeOf = int(C.sizeof_VkMemoryBarrier2)

// MemoryBarrier2FromPtr converts a raw pointer to a MemoryBarrier2.
func MemoryBarrier2FromPtr(ptr unsafe.Pointer) MemoryBarrier2 {
	return MemoryBarrier2{ptr: (*C.VkMemoryBarrier2)(ptr)}
}

// MemoryBarrier2Alloc allocates a continuous block of VkMemoryBarrier2.
func MemoryBarrier2Alloc(alloc ffi.Allocator, count int) MemoryBarrier2 {
	ptr := alloc.Allocate(MemoryBarrier2SizeOf * count)
	return MemoryBarrier2{ptr: (*C.VkMemoryBarrier2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MemoryBarrier2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MemoryBarrier2) Offset(offset int) MemoryBarrier2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MemoryBarrier2SizeOf)
	return MemoryBarrier2{ptr: (*C.VkMemoryBarrier2)(ptr)}
}

// GetSType returns the value in sType.
func (p MemoryBarrier2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p MemoryBarrier2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p MemoryBarrier2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p MemoryBarrier2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcStageMask returns the value in srcStageMask.
func (p MemoryBarrier2) GetSrcStageMask() PipelineStageFlags2 {
	return PipelineStageFlags2(p.ptr.srcStageMask)
}

// SetSrcStageMask sets the value in srcStageMask.
func (p MemoryBarrier2) SetSrcStageMask(value PipelineStageFlags2) {
	p.ptr.srcStageMask = (C.VkPipelineStageFlags2)(value)
}

// GetSrcAccessMask returns the value in srcAccessMask.
func (p MemoryBarrier2) GetSrcAccessMask() AccessFlags2 {
	return AccessFlags2(p.ptr.srcAccessMask)
}

// SetSrcAccessMask sets the value in srcAccessMask.
func (p MemoryBarrier2) SetSrcAccessMask(value AccessFlags2) {
	p.ptr.srcAccessMask = (C.VkAccessFlags2)(value)
}

// GetDstStageMask returns the value in dstStageMask.
func (p MemoryBarrier2) GetDstStageMask() PipelineStageFlags2 {
	return PipelineStageFlags2(p.ptr.dstStageMask)
}

// SetDstStageMask sets the value in dstStageMask.
func (p MemoryBarrier2) SetDstStageMask(value PipelineStageFlags2) {
	p.ptr.dstStageMask = (C.VkPipelineStageFlags2)(value)
}

// GetDstAccessMask returns the value in dstAccessMask.
func (p MemoryBarrier2) GetDstAccessMask() AccessFlags2 {
	return AccessFlags2(p.ptr.dstAccessMask)
}

// SetDstAccessMask sets the value in dstAccessMask.
func (p MemoryBarrier2) SetDstAccessMask(value AccessFlags2) {
	p.ptr.dstAccessMask = (C.VkAccessFlags2)(value)
}

// MemoryDedicatedAllocateInfo wraps VkMemoryDedicatedAllocateInfo.
type MemoryDedicatedAllocateInfo struct {
	ptr *C.VkMemoryDedicatedAllocateInfo
}

// MemoryDedicatedAllocateInfoNil is a null pointer.
var MemoryDedicatedAllocateInfoNil MemoryDedicatedAllocateInfo

// MemoryDedicatedAllocateInfoSizeOf is the byte size of VkMemoryDedicatedAllocateInfo.
const MemoryDedicatedAllocateInfoSizeOf = int(C.sizeof_VkMemoryDedicatedAllocateInfo)

// MemoryDedicatedAllocateInfoFromPtr converts a raw pointer to a MemoryDedicatedAllocateInfo.
func MemoryDedicatedAllocateInfoFromPtr(ptr unsafe.Pointer) MemoryDedicatedAllocateInfo {
	return MemoryDedicatedAllocateInfo{ptr: (*C.VkMemoryDedicatedAllocateInfo)(ptr)}
}

// MemoryDedicatedAllocateInfoAlloc allocates a continuous block of VkMemoryDedicatedAllocateInfo.
func MemoryDedicatedAllocateInfoAlloc(alloc ffi.Allocator, count int) MemoryDedicatedAllocateInfo {
	ptr := alloc.Allocate(MemoryDedicatedAllocateInfoSizeOf * count)
	return MemoryDedicatedAllocateInfo{ptr: (*C.VkMemoryDedicatedAllocateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MemoryDedicatedAllocateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MemoryDedicatedAllocateInfo) Offset(offset int) MemoryDedicatedAllocateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MemoryDedicatedAllocateInfoSizeOf)
	return MemoryDedicatedAllocateInfo{ptr: (*C.VkMemoryDedicatedAllocateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p MemoryDedicatedAllocateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p MemoryDedicatedAllocateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p MemoryDedicatedAllocateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p MemoryDedicatedAllocateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetImage returns the value in image.
func (p MemoryDedicatedAllocateInfo) GetImage() Image {
	return Image(p.ptr.image)
}

// SetImage sets the value in image.
func (p MemoryDedicatedAllocateInfo) SetImage(value Image) {
	p.ptr.image = (C.VkImage)(value)
}

// GetBuffer returns the value in buffer.
func (p MemoryDedicatedAllocateInfo) GetBuffer() Buffer {
	return Buffer(p.ptr.buffer)
}

// SetBuffer sets the value in buffer.
func (p MemoryDedicatedAllocateInfo) SetBuffer(value Buffer) {
	p.ptr.buffer = (C.VkBuffer)(value)
}

// MemoryDedicatedRequirements wraps VkMemoryDedicatedRequirements.
type MemoryDedicatedRequirements struct {
	ptr *C.VkMemoryDedicatedRequirements
}

// MemoryDedicatedRequirementsNil is a null pointer.
var MemoryDedicatedRequirementsNil MemoryDedicatedRequirements

// MemoryDedicatedRequirementsSizeOf is the byte size of VkMemoryDedicatedRequirements.
const MemoryDedicatedRequirementsSizeOf = int(C.sizeof_VkMemoryDedicatedRequirements)

// MemoryDedicatedRequirementsFromPtr converts a raw pointer to a MemoryDedicatedRequirements.
func MemoryDedicatedRequirementsFromPtr(ptr unsafe.Pointer) MemoryDedicatedRequirements {
	return MemoryDedicatedRequirements{ptr: (*C.VkMemoryDedicatedRequirements)(ptr)}
}

// MemoryDedicatedRequirementsAlloc allocates a continuous block of VkMemoryDedicatedRequirements.
func MemoryDedicatedRequirementsAlloc(alloc ffi.Allocator, count int) MemoryDedicatedRequirements {
	ptr := alloc.Allocate(MemoryDedicatedRequirementsSizeOf * count)
	return MemoryDedicatedRequirements{ptr: (*C.VkMemoryDedicatedRequirements)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MemoryDedicatedRequirements) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MemoryDedicatedRequirements) Offset(offset int) MemoryDedicatedRequirements {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MemoryDedicatedRequirementsSizeOf)
	return MemoryDedicatedRequirements{ptr: (*C.VkMemoryDedicatedRequirements)(ptr)}
}

// GetSType returns the value in sType.
func (p MemoryDedicatedRequirements) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p MemoryDedicatedRequirements) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p MemoryDedicatedRequirements) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p MemoryDedicatedRequirements) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPrefersDedicatedAllocation returns the value in prefersDedicatedAllocation.
func (p MemoryDedicatedRequirements) GetPrefersDedicatedAllocation() bool {
	return p.ptr.prefersDedicatedAllocation != 0
}

// SetPrefersDedicatedAllocation sets the value in prefersDedicatedAllocation.
func (p MemoryDedicatedRequirements) SetPrefersDedicatedAllocation(value bool) {
	if value {
		p.ptr.prefersDedicatedAllocation = C.VkBool32(1)
	} else {
		p.ptr.prefersDedicatedAllocation = C.VkBool32(0)
	}
}

// GetRequiresDedicatedAllocation returns the value in requiresDedicatedAllocation.
func (p MemoryDedicatedRequirements) GetRequiresDedicatedAllocation() bool {
	return p.ptr.requiresDedicatedAllocation != 0
}

// SetRequiresDedicatedAllocation sets the value in requiresDedicatedAllocation.
func (p MemoryDedicatedRequirements) SetRequiresDedicatedAllocation(value bool) {
	if value {
		p.ptr.requiresDedicatedAllocation = C.VkBool32(1)
	} else {
		p.ptr.requiresDedicatedAllocation = C.VkBool32(0)
	}
}

// MemoryHeap wraps VkMemoryHeap.
type MemoryHeap struct {
	ptr *C.VkMemoryHeap
}

// MemoryHeapNil is a null pointer.
var MemoryHeapNil MemoryHeap

// MemoryHeapSizeOf is the byte size of VkMemoryHeap.
const MemoryHeapSizeOf = int(C.sizeof_VkMemoryHeap)

// MemoryHeapFromPtr converts a raw pointer to a MemoryHeap.
func MemoryHeapFromPtr(ptr unsafe.Pointer) MemoryHeap {
	return MemoryHeap{ptr: (*C.VkMemoryHeap)(ptr)}
}

// MemoryHeapAlloc allocates a continuous block of VkMemoryHeap.
func MemoryHeapAlloc(alloc ffi.Allocator, count int) MemoryHeap {
	ptr := alloc.Allocate(MemoryHeapSizeOf * count)
	return MemoryHeap{ptr: (*C.VkMemoryHeap)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MemoryHeap) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MemoryHeap) Offset(offset int) MemoryHeap {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MemoryHeapSizeOf)
	return MemoryHeap{ptr: (*C.VkMemoryHeap)(ptr)}
}

// GetSize returns the value in size.
func (p MemoryHeap) GetSize() DeviceSize {
	return DeviceSize(p.ptr.size)
}

// SetSize sets the value in size.
func (p MemoryHeap) SetSize(value DeviceSize) {
	p.ptr.size = (C.VkDeviceSize)(value)
}

// GetFlags returns the value in flags.
func (p MemoryHeap) GetFlags() MemoryHeapFlags {
	return MemoryHeapFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p MemoryHeap) SetFlags(value MemoryHeapFlags) {
	p.ptr.flags = (C.VkMemoryHeapFlags)(value)
}

// MemoryMapInfo wraps VkMemoryMapInfo.
type MemoryMapInfo struct {
	ptr *C.VkMemoryMapInfo
}

// MemoryMapInfoNil is a null pointer.
var MemoryMapInfoNil MemoryMapInfo

// MemoryMapInfoSizeOf is the byte size of VkMemoryMapInfo.
const MemoryMapInfoSizeOf = int(C.sizeof_VkMemoryMapInfo)

// MemoryMapInfoFromPtr converts a raw pointer to a MemoryMapInfo.
func MemoryMapInfoFromPtr(ptr unsafe.Pointer) MemoryMapInfo {
	return MemoryMapInfo{ptr: (*C.VkMemoryMapInfo)(ptr)}
}

// MemoryMapInfoAlloc allocates a continuous block of VkMemoryMapInfo.
func MemoryMapInfoAlloc(alloc ffi.Allocator, count int) MemoryMapInfo {
	ptr := alloc.Allocate(MemoryMapInfoSizeOf * count)
	return MemoryMapInfo{ptr: (*C.VkMemoryMapInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MemoryMapInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MemoryMapInfo) Offset(offset int) MemoryMapInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MemoryMapInfoSizeOf)
	return MemoryMapInfo{ptr: (*C.VkMemoryMapInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p MemoryMapInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p MemoryMapInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p MemoryMapInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p MemoryMapInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p MemoryMapInfo) GetFlags() MemoryMapFlags {
	return MemoryMapFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p MemoryMapInfo) SetFlags(value MemoryMapFlags) {
	p.ptr.flags = (C.VkMemoryMapFlags)(value)
}

// GetMemory returns the value in memory.
func (p MemoryMapInfo) GetMemory() DeviceMemory {
	return DeviceMemory(p.ptr.memory)
}

// SetMemory sets the value in memory.
func (p MemoryMapInfo) SetMemory(value DeviceMemory) {
	p.ptr.memory = (C.VkDeviceMemory)(value)
}

// GetOffset returns the value in offset.
func (p MemoryMapInfo) GetOffset() DeviceSize {
	return DeviceSize(p.ptr.offset)
}

// SetOffset sets the value in offset.
func (p MemoryMapInfo) SetOffset(value DeviceSize) {
	p.ptr.offset = (C.VkDeviceSize)(value)
}

// GetSize returns the value in size.
func (p MemoryMapInfo) GetSize() DeviceSize {
	return DeviceSize(p.ptr.size)
}

// SetSize sets the value in size.
func (p MemoryMapInfo) SetSize(value DeviceSize) {
	p.ptr.size = (C.VkDeviceSize)(value)
}

// MemoryOpaqueCaptureAddressAllocateInfo wraps VkMemoryOpaqueCaptureAddressAllocateInfo.
type MemoryOpaqueCaptureAddressAllocateInfo struct {
	ptr *C.VkMemoryOpaqueCaptureAddressAllocateInfo
}

// MemoryOpaqueCaptureAddressAllocateInfoNil is a null pointer.
var MemoryOpaqueCaptureAddressAllocateInfoNil MemoryOpaqueCaptureAddressAllocateInfo

// MemoryOpaqueCaptureAddressAllocateInfoSizeOf is the byte size of VkMemoryOpaqueCaptureAddressAllocateInfo.
const MemoryOpaqueCaptureAddressAllocateInfoSizeOf = int(C.sizeof_VkMemoryOpaqueCaptureAddressAllocateInfo)

// MemoryOpaqueCaptureAddressAllocateInfoFromPtr converts a raw pointer to a MemoryOpaqueCaptureAddressAllocateInfo.
func MemoryOpaqueCaptureAddressAllocateInfoFromPtr(ptr unsafe.Pointer) MemoryOpaqueCaptureAddressAllocateInfo {
	return MemoryOpaqueCaptureAddressAllocateInfo{ptr: (*C.VkMemoryOpaqueCaptureAddressAllocateInfo)(ptr)}
}

// MemoryOpaqueCaptureAddressAllocateInfoAlloc allocates a continuous block of VkMemoryOpaqueCaptureAddressAllocateInfo.
func MemoryOpaqueCaptureAddressAllocateInfoAlloc(alloc ffi.Allocator, count int) MemoryOpaqueCaptureAddressAllocateInfo {
	ptr := alloc.Allocate(MemoryOpaqueCaptureAddressAllocateInfoSizeOf * count)
	return MemoryOpaqueCaptureAddressAllocateInfo{ptr: (*C.VkMemoryOpaqueCaptureAddressAllocateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MemoryOpaqueCaptureAddressAllocateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MemoryOpaqueCaptureAddressAllocateInfo) Offset(offset int) MemoryOpaqueCaptureAddressAllocateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MemoryOpaqueCaptureAddressAllocateInfoSizeOf)
	return MemoryOpaqueCaptureAddressAllocateInfo{ptr: (*C.VkMemoryOpaqueCaptureAddressAllocateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p MemoryOpaqueCaptureAddressAllocateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p MemoryOpaqueCaptureAddressAllocateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p MemoryOpaqueCaptureAddressAllocateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p MemoryOpaqueCaptureAddressAllocateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetOpaqueCaptureAddress returns the value in opaqueCaptureAddress.
func (p MemoryOpaqueCaptureAddressAllocateInfo) GetOpaqueCaptureAddress() uint64 {
	return uint64(p.ptr.opaqueCaptureAddress)
}

// SetOpaqueCaptureAddress sets the value in opaqueCaptureAddress.
func (p MemoryOpaqueCaptureAddressAllocateInfo) SetOpaqueCaptureAddress(value uint64) {
	p.ptr.opaqueCaptureAddress = (C.uint64_t)(value)
}

// MemoryRequirements wraps VkMemoryRequirements.
type MemoryRequirements struct {
	ptr *C.VkMemoryRequirements
}

// MemoryRequirementsNil is a null pointer.
var MemoryRequirementsNil MemoryRequirements

// MemoryRequirementsSizeOf is the byte size of VkMemoryRequirements.
const MemoryRequirementsSizeOf = int(C.sizeof_VkMemoryRequirements)

// MemoryRequirementsFromPtr converts a raw pointer to a MemoryRequirements.
func MemoryRequirementsFromPtr(ptr unsafe.Pointer) MemoryRequirements {
	return MemoryRequirements{ptr: (*C.VkMemoryRequirements)(ptr)}
}

// MemoryRequirementsAlloc allocates a continuous block of VkMemoryRequirements.
func MemoryRequirementsAlloc(alloc ffi.Allocator, count int) MemoryRequirements {
	ptr := alloc.Allocate(MemoryRequirementsSizeOf * count)
	return MemoryRequirements{ptr: (*C.VkMemoryRequirements)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MemoryRequirements) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MemoryRequirements) Offset(offset int) MemoryRequirements {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MemoryRequirementsSizeOf)
	return MemoryRequirements{ptr: (*C.VkMemoryRequirements)(ptr)}
}

// GetSize returns the value in size.
func (p MemoryRequirements) GetSize() DeviceSize {
	return DeviceSize(p.ptr.size)
}

// SetSize sets the value in size.
func (p MemoryRequirements) SetSize(value DeviceSize) {
	p.ptr.size = (C.VkDeviceSize)(value)
}

// GetAlignment returns the value in alignment.
func (p MemoryRequirements) GetAlignment() DeviceSize {
	return DeviceSize(p.ptr.alignment)
}

// SetAlignment sets the value in alignment.
func (p MemoryRequirements) SetAlignment(value DeviceSize) {
	p.ptr.alignment = (C.VkDeviceSize)(value)
}

// GetMemoryTypeBits returns the value in memoryTypeBits.
func (p MemoryRequirements) GetMemoryTypeBits() uint32 {
	return uint32(p.ptr.memoryTypeBits)
}

// SetMemoryTypeBits sets the value in memoryTypeBits.
func (p MemoryRequirements) SetMemoryTypeBits(value uint32) {
	p.ptr.memoryTypeBits = (C.uint32_t)(value)
}

// MemoryRequirements2 wraps VkMemoryRequirements2.
type MemoryRequirements2 struct {
	ptr *C.VkMemoryRequirements2
}

// MemoryRequirements2Nil is a null pointer.
var MemoryRequirements2Nil MemoryRequirements2

// MemoryRequirements2SizeOf is the byte size of VkMemoryRequirements2.
const MemoryRequirements2SizeOf = int(C.sizeof_VkMemoryRequirements2)

// MemoryRequirements2FromPtr converts a raw pointer to a MemoryRequirements2.
func MemoryRequirements2FromPtr(ptr unsafe.Pointer) MemoryRequirements2 {
	return MemoryRequirements2{ptr: (*C.VkMemoryRequirements2)(ptr)}
}

// MemoryRequirements2Alloc allocates a continuous block of VkMemoryRequirements2.
func MemoryRequirements2Alloc(alloc ffi.Allocator, count int) MemoryRequirements2 {
	ptr := alloc.Allocate(MemoryRequirements2SizeOf * count)
	return MemoryRequirements2{ptr: (*C.VkMemoryRequirements2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MemoryRequirements2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MemoryRequirements2) Offset(offset int) MemoryRequirements2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MemoryRequirements2SizeOf)
	return MemoryRequirements2{ptr: (*C.VkMemoryRequirements2)(ptr)}
}

// GetSType returns the value in sType.
func (p MemoryRequirements2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p MemoryRequirements2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p MemoryRequirements2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p MemoryRequirements2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefMemoryRequirements returns pointer to the memoryRequirements field.
func (p MemoryRequirements2) RefMemoryRequirements() MemoryRequirements {
	return MemoryRequirements{ptr: (*C.VkMemoryRequirements)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkMemoryRequirements2_memoryRequirements)))}
}

// MemoryToImageCopy wraps VkMemoryToImageCopy.
type MemoryToImageCopy struct {
	ptr *C.VkMemoryToImageCopy
}

// MemoryToImageCopyNil is a null pointer.
var MemoryToImageCopyNil MemoryToImageCopy

// MemoryToImageCopySizeOf is the byte size of VkMemoryToImageCopy.
const MemoryToImageCopySizeOf = int(C.sizeof_VkMemoryToImageCopy)

// MemoryToImageCopyFromPtr converts a raw pointer to a MemoryToImageCopy.
func MemoryToImageCopyFromPtr(ptr unsafe.Pointer) MemoryToImageCopy {
	return MemoryToImageCopy{ptr: (*C.VkMemoryToImageCopy)(ptr)}
}

// MemoryToImageCopyAlloc allocates a continuous block of VkMemoryToImageCopy.
func MemoryToImageCopyAlloc(alloc ffi.Allocator, count int) MemoryToImageCopy {
	ptr := alloc.Allocate(MemoryToImageCopySizeOf * count)
	return MemoryToImageCopy{ptr: (*C.VkMemoryToImageCopy)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MemoryToImageCopy) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MemoryToImageCopy) Offset(offset int) MemoryToImageCopy {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MemoryToImageCopySizeOf)
	return MemoryToImageCopy{ptr: (*C.VkMemoryToImageCopy)(ptr)}
}

// GetSType returns the value in sType.
func (p MemoryToImageCopy) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p MemoryToImageCopy) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p MemoryToImageCopy) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p MemoryToImageCopy) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPHostPointer returns the value in pHostPointer.
func (p MemoryToImageCopy) GetPHostPointer() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pHostPointer)
}

// SetPHostPointer sets the value in pHostPointer.
func (p MemoryToImageCopy) SetPHostPointer(value unsafe.Pointer) {
	p.ptr.pHostPointer = value
}

// GetMemoryRowLength returns the value in memoryRowLength.
func (p MemoryToImageCopy) GetMemoryRowLength() uint32 {
	return uint32(p.ptr.memoryRowLength)
}

// SetMemoryRowLength sets the value in memoryRowLength.
func (p MemoryToImageCopy) SetMemoryRowLength(value uint32) {
	p.ptr.memoryRowLength = (C.uint32_t)(value)
}

// GetMemoryImageHeight returns the value in memoryImageHeight.
func (p MemoryToImageCopy) GetMemoryImageHeight() uint32 {
	return uint32(p.ptr.memoryImageHeight)
}

// SetMemoryImageHeight sets the value in memoryImageHeight.
func (p MemoryToImageCopy) SetMemoryImageHeight(value uint32) {
	p.ptr.memoryImageHeight = (C.uint32_t)(value)
}

// RefImageSubresource returns pointer to the imageSubresource field.
func (p MemoryToImageCopy) RefImageSubresource() ImageSubresourceLayers {
	return ImageSubresourceLayers{ptr: (*C.VkImageSubresourceLayers)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkMemoryToImageCopy_imageSubresource)))}
}

// RefImageOffset returns pointer to the imageOffset field.
func (p MemoryToImageCopy) RefImageOffset() Offset3D {
	return Offset3D{ptr: (*C.VkOffset3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkMemoryToImageCopy_imageOffset)))}
}

// RefImageExtent returns pointer to the imageExtent field.
func (p MemoryToImageCopy) RefImageExtent() Extent3D {
	return Extent3D{ptr: (*C.VkExtent3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkMemoryToImageCopy_imageExtent)))}
}

// MemoryType wraps VkMemoryType.
type MemoryType struct {
	ptr *C.VkMemoryType
}

// MemoryTypeNil is a null pointer.
var MemoryTypeNil MemoryType

// MemoryTypeSizeOf is the byte size of VkMemoryType.
const MemoryTypeSizeOf = int(C.sizeof_VkMemoryType)

// MemoryTypeFromPtr converts a raw pointer to a MemoryType.
func MemoryTypeFromPtr(ptr unsafe.Pointer) MemoryType {
	return MemoryType{ptr: (*C.VkMemoryType)(ptr)}
}

// MemoryTypeAlloc allocates a continuous block of VkMemoryType.
func MemoryTypeAlloc(alloc ffi.Allocator, count int) MemoryType {
	ptr := alloc.Allocate(MemoryTypeSizeOf * count)
	return MemoryType{ptr: (*C.VkMemoryType)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MemoryType) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MemoryType) Offset(offset int) MemoryType {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MemoryTypeSizeOf)
	return MemoryType{ptr: (*C.VkMemoryType)(ptr)}
}

// GetPropertyFlags returns the value in propertyFlags.
func (p MemoryType) GetPropertyFlags() MemoryPropertyFlags {
	return MemoryPropertyFlags(p.ptr.propertyFlags)
}

// SetPropertyFlags sets the value in propertyFlags.
func (p MemoryType) SetPropertyFlags(value MemoryPropertyFlags) {
	p.ptr.propertyFlags = (C.VkMemoryPropertyFlags)(value)
}

// GetHeapIndex returns the value in heapIndex.
func (p MemoryType) GetHeapIndex() uint32 {
	return uint32(p.ptr.heapIndex)
}

// SetHeapIndex sets the value in heapIndex.
func (p MemoryType) SetHeapIndex(value uint32) {
	p.ptr.heapIndex = (C.uint32_t)(value)
}

// MemoryUnmapInfo wraps VkMemoryUnmapInfo.
type MemoryUnmapInfo struct {
	ptr *C.VkMemoryUnmapInfo
}

// MemoryUnmapInfoNil is a null pointer.
var MemoryUnmapInfoNil MemoryUnmapInfo

// MemoryUnmapInfoSizeOf is the byte size of VkMemoryUnmapInfo.
const MemoryUnmapInfoSizeOf = int(C.sizeof_VkMemoryUnmapInfo)

// MemoryUnmapInfoFromPtr converts a raw pointer to a MemoryUnmapInfo.
func MemoryUnmapInfoFromPtr(ptr unsafe.Pointer) MemoryUnmapInfo {
	return MemoryUnmapInfo{ptr: (*C.VkMemoryUnmapInfo)(ptr)}
}

// MemoryUnmapInfoAlloc allocates a continuous block of VkMemoryUnmapInfo.
func MemoryUnmapInfoAlloc(alloc ffi.Allocator, count int) MemoryUnmapInfo {
	ptr := alloc.Allocate(MemoryUnmapInfoSizeOf * count)
	return MemoryUnmapInfo{ptr: (*C.VkMemoryUnmapInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p MemoryUnmapInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p MemoryUnmapInfo) Offset(offset int) MemoryUnmapInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*MemoryUnmapInfoSizeOf)
	return MemoryUnmapInfo{ptr: (*C.VkMemoryUnmapInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p MemoryUnmapInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p MemoryUnmapInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p MemoryUnmapInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p MemoryUnmapInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p MemoryUnmapInfo) GetFlags() MemoryUnmapFlags {
	return MemoryUnmapFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p MemoryUnmapInfo) SetFlags(value MemoryUnmapFlags) {
	p.ptr.flags = (C.VkMemoryUnmapFlags)(value)
}

// GetMemory returns the value in memory.
func (p MemoryUnmapInfo) GetMemory() DeviceMemory {
	return DeviceMemory(p.ptr.memory)
}

// SetMemory sets the value in memory.
func (p MemoryUnmapInfo) SetMemory(value DeviceMemory) {
	p.ptr.memory = (C.VkDeviceMemory)(value)
}

// Offset2D wraps VkOffset2D.
type Offset2D struct {
	ptr *C.VkOffset2D
}

// Offset2DNil is a null pointer.
var Offset2DNil Offset2D

// Offset2DSizeOf is the byte size of VkOffset2D.
const Offset2DSizeOf = int(C.sizeof_VkOffset2D)

// Offset2DFromPtr converts a raw pointer to a Offset2D.
func Offset2DFromPtr(ptr unsafe.Pointer) Offset2D {
	return Offset2D{ptr: (*C.VkOffset2D)(ptr)}
}

// Offset2DAlloc allocates a continuous block of VkOffset2D.
func Offset2DAlloc(alloc ffi.Allocator, count int) Offset2D {
	ptr := alloc.Allocate(Offset2DSizeOf * count)
	return Offset2D{ptr: (*C.VkOffset2D)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p Offset2D) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p Offset2D) Offset(offset int) Offset2D {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*Offset2DSizeOf)
	return Offset2D{ptr: (*C.VkOffset2D)(ptr)}
}

// GetX returns the value in x.
func (p Offset2D) GetX() int32 {
	return int32(p.ptr.x)
}

// SetX sets the value in x.
func (p Offset2D) SetX(value int32) {
	p.ptr.x = (C.int32_t)(value)
}

// GetY returns the value in y.
func (p Offset2D) GetY() int32 {
	return int32(p.ptr.y)
}

// SetY sets the value in y.
func (p Offset2D) SetY(value int32) {
	p.ptr.y = (C.int32_t)(value)
}

// Offset3D wraps VkOffset3D.
type Offset3D struct {
	ptr *C.VkOffset3D
}

// Offset3DNil is a null pointer.
var Offset3DNil Offset3D

// Offset3DSizeOf is the byte size of VkOffset3D.
const Offset3DSizeOf = int(C.sizeof_VkOffset3D)

// Offset3DFromPtr converts a raw pointer to a Offset3D.
func Offset3DFromPtr(ptr unsafe.Pointer) Offset3D {
	return Offset3D{ptr: (*C.VkOffset3D)(ptr)}
}

// Offset3DAlloc allocates a continuous block of VkOffset3D.
func Offset3DAlloc(alloc ffi.Allocator, count int) Offset3D {
	ptr := alloc.Allocate(Offset3DSizeOf * count)
	return Offset3D{ptr: (*C.VkOffset3D)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p Offset3D) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p Offset3D) Offset(offset int) Offset3D {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*Offset3DSizeOf)
	return Offset3D{ptr: (*C.VkOffset3D)(ptr)}
}

// GetX returns the value in x.
func (p Offset3D) GetX() int32 {
	return int32(p.ptr.x)
}

// SetX sets the value in x.
func (p Offset3D) SetX(value int32) {
	p.ptr.x = (C.int32_t)(value)
}

// GetY returns the value in y.
func (p Offset3D) GetY() int32 {
	return int32(p.ptr.y)
}

// SetY sets the value in y.
func (p Offset3D) SetY(value int32) {
	p.ptr.y = (C.int32_t)(value)
}

// GetZ returns the value in z.
func (p Offset3D) GetZ() int32 {
	return int32(p.ptr.z)
}

// SetZ sets the value in z.
func (p Offset3D) SetZ(value int32) {
	p.ptr.z = (C.int32_t)(value)
}

// PhysicalDevice16BitStorageFeatures wraps VkPhysicalDevice16BitStorageFeatures.
type PhysicalDevice16BitStorageFeatures struct {
	ptr *C.VkPhysicalDevice16BitStorageFeatures
}

// PhysicalDevice16BitStorageFeaturesNil is a null pointer.
var PhysicalDevice16BitStorageFeaturesNil PhysicalDevice16BitStorageFeatures

// PhysicalDevice16BitStorageFeaturesSizeOf is the byte size of VkPhysicalDevice16BitStorageFeatures.
const PhysicalDevice16BitStorageFeaturesSizeOf = int(C.sizeof_VkPhysicalDevice16BitStorageFeatures)

// PhysicalDevice16BitStorageFeaturesFromPtr converts a raw pointer to a PhysicalDevice16BitStorageFeatures.
func PhysicalDevice16BitStorageFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDevice16BitStorageFeatures {
	return PhysicalDevice16BitStorageFeatures{ptr: (*C.VkPhysicalDevice16BitStorageFeatures)(ptr)}
}

// PhysicalDevice16BitStorageFeaturesAlloc allocates a continuous block of VkPhysicalDevice16BitStorageFeatures.
func PhysicalDevice16BitStorageFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDevice16BitStorageFeatures {
	ptr := alloc.Allocate(PhysicalDevice16BitStorageFeaturesSizeOf * count)
	return PhysicalDevice16BitStorageFeatures{ptr: (*C.VkPhysicalDevice16BitStorageFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDevice16BitStorageFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDevice16BitStorageFeatures) Offset(offset int) PhysicalDevice16BitStorageFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDevice16BitStorageFeaturesSizeOf)
	return PhysicalDevice16BitStorageFeatures{ptr: (*C.VkPhysicalDevice16BitStorageFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDevice16BitStorageFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDevice16BitStorageFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDevice16BitStorageFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDevice16BitStorageFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetStorageBuffer16BitAccess returns the value in storageBuffer16BitAccess.
func (p PhysicalDevice16BitStorageFeatures) GetStorageBuffer16BitAccess() bool {
	return p.ptr.storageBuffer16BitAccess != 0
}

// SetStorageBuffer16BitAccess sets the value in storageBuffer16BitAccess.
func (p PhysicalDevice16BitStorageFeatures) SetStorageBuffer16BitAccess(value bool) {
	if value {
		p.ptr.storageBuffer16BitAccess = C.VkBool32(1)
	} else {
		p.ptr.storageBuffer16BitAccess = C.VkBool32(0)
	}
}

// GetUniformAndStorageBuffer16BitAccess returns the value in uniformAndStorageBuffer16BitAccess.
func (p PhysicalDevice16BitStorageFeatures) GetUniformAndStorageBuffer16BitAccess() bool {
	return p.ptr.uniformAndStorageBuffer16BitAccess != 0
}

// SetUniformAndStorageBuffer16BitAccess sets the value in uniformAndStorageBuffer16BitAccess.
func (p PhysicalDevice16BitStorageFeatures) SetUniformAndStorageBuffer16BitAccess(value bool) {
	if value {
		p.ptr.uniformAndStorageBuffer16BitAccess = C.VkBool32(1)
	} else {
		p.ptr.uniformAndStorageBuffer16BitAccess = C.VkBool32(0)
	}
}

// GetStoragePushConstant16 returns the value in storagePushConstant16.
func (p PhysicalDevice16BitStorageFeatures) GetStoragePushConstant16() bool {
	return p.ptr.storagePushConstant16 != 0
}

// SetStoragePushConstant16 sets the value in storagePushConstant16.
func (p PhysicalDevice16BitStorageFeatures) SetStoragePushConstant16(value bool) {
	if value {
		p.ptr.storagePushConstant16 = C.VkBool32(1)
	} else {
		p.ptr.storagePushConstant16 = C.VkBool32(0)
	}
}

// GetStorageInputOutput16 returns the value in storageInputOutput16.
func (p PhysicalDevice16BitStorageFeatures) GetStorageInputOutput16() bool {
	return p.ptr.storageInputOutput16 != 0
}

// SetStorageInputOutput16 sets the value in storageInputOutput16.
func (p PhysicalDevice16BitStorageFeatures) SetStorageInputOutput16(value bool) {
	if value {
		p.ptr.storageInputOutput16 = C.VkBool32(1)
	} else {
		p.ptr.storageInputOutput16 = C.VkBool32(0)
	}
}

// PhysicalDevice8BitStorageFeatures wraps VkPhysicalDevice8BitStorageFeatures.
type PhysicalDevice8BitStorageFeatures struct {
	ptr *C.VkPhysicalDevice8BitStorageFeatures
}

// PhysicalDevice8BitStorageFeaturesNil is a null pointer.
var PhysicalDevice8BitStorageFeaturesNil PhysicalDevice8BitStorageFeatures

// PhysicalDevice8BitStorageFeaturesSizeOf is the byte size of VkPhysicalDevice8BitStorageFeatures.
const PhysicalDevice8BitStorageFeaturesSizeOf = int(C.sizeof_VkPhysicalDevice8BitStorageFeatures)

// PhysicalDevice8BitStorageFeaturesFromPtr converts a raw pointer to a PhysicalDevice8BitStorageFeatures.
func PhysicalDevice8BitStorageFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDevice8BitStorageFeatures {
	return PhysicalDevice8BitStorageFeatures{ptr: (*C.VkPhysicalDevice8BitStorageFeatures)(ptr)}
}

// PhysicalDevice8BitStorageFeaturesAlloc allocates a continuous block of VkPhysicalDevice8BitStorageFeatures.
func PhysicalDevice8BitStorageFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDevice8BitStorageFeatures {
	ptr := alloc.Allocate(PhysicalDevice8BitStorageFeaturesSizeOf * count)
	return PhysicalDevice8BitStorageFeatures{ptr: (*C.VkPhysicalDevice8BitStorageFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDevice8BitStorageFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDevice8BitStorageFeatures) Offset(offset int) PhysicalDevice8BitStorageFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDevice8BitStorageFeaturesSizeOf)
	return PhysicalDevice8BitStorageFeatures{ptr: (*C.VkPhysicalDevice8BitStorageFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDevice8BitStorageFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDevice8BitStorageFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDevice8BitStorageFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDevice8BitStorageFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetStorageBuffer8BitAccess returns the value in storageBuffer8BitAccess.
func (p PhysicalDevice8BitStorageFeatures) GetStorageBuffer8BitAccess() bool {
	return p.ptr.storageBuffer8BitAccess != 0
}

// SetStorageBuffer8BitAccess sets the value in storageBuffer8BitAccess.
func (p PhysicalDevice8BitStorageFeatures) SetStorageBuffer8BitAccess(value bool) {
	if value {
		p.ptr.storageBuffer8BitAccess = C.VkBool32(1)
	} else {
		p.ptr.storageBuffer8BitAccess = C.VkBool32(0)
	}
}

// GetUniformAndStorageBuffer8BitAccess returns the value in uniformAndStorageBuffer8BitAccess.
func (p PhysicalDevice8BitStorageFeatures) GetUniformAndStorageBuffer8BitAccess() bool {
	return p.ptr.uniformAndStorageBuffer8BitAccess != 0
}

// SetUniformAndStorageBuffer8BitAccess sets the value in uniformAndStorageBuffer8BitAccess.
func (p PhysicalDevice8BitStorageFeatures) SetUniformAndStorageBuffer8BitAccess(value bool) {
	if value {
		p.ptr.uniformAndStorageBuffer8BitAccess = C.VkBool32(1)
	} else {
		p.ptr.uniformAndStorageBuffer8BitAccess = C.VkBool32(0)
	}
}

// GetStoragePushConstant8 returns the value in storagePushConstant8.
func (p PhysicalDevice8BitStorageFeatures) GetStoragePushConstant8() bool {
	return p.ptr.storagePushConstant8 != 0
}

// SetStoragePushConstant8 sets the value in storagePushConstant8.
func (p PhysicalDevice8BitStorageFeatures) SetStoragePushConstant8(value bool) {
	if value {
		p.ptr.storagePushConstant8 = C.VkBool32(1)
	} else {
		p.ptr.storagePushConstant8 = C.VkBool32(0)
	}
}

// PhysicalDeviceBufferDeviceAddressFeatures wraps VkPhysicalDeviceBufferDeviceAddressFeatures.
type PhysicalDeviceBufferDeviceAddressFeatures struct {
	ptr *C.VkPhysicalDeviceBufferDeviceAddressFeatures
}

// PhysicalDeviceBufferDeviceAddressFeaturesNil is a null pointer.
var PhysicalDeviceBufferDeviceAddressFeaturesNil PhysicalDeviceBufferDeviceAddressFeatures

// PhysicalDeviceBufferDeviceAddressFeaturesSizeOf is the byte size of VkPhysicalDeviceBufferDeviceAddressFeatures.
const PhysicalDeviceBufferDeviceAddressFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceBufferDeviceAddressFeatures)

// PhysicalDeviceBufferDeviceAddressFeaturesFromPtr converts a raw pointer to a PhysicalDeviceBufferDeviceAddressFeatures.
func PhysicalDeviceBufferDeviceAddressFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceBufferDeviceAddressFeatures {
	return PhysicalDeviceBufferDeviceAddressFeatures{ptr: (*C.VkPhysicalDeviceBufferDeviceAddressFeatures)(ptr)}
}

// PhysicalDeviceBufferDeviceAddressFeaturesAlloc allocates a continuous block of VkPhysicalDeviceBufferDeviceAddressFeatures.
func PhysicalDeviceBufferDeviceAddressFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceBufferDeviceAddressFeatures {
	ptr := alloc.Allocate(PhysicalDeviceBufferDeviceAddressFeaturesSizeOf * count)
	return PhysicalDeviceBufferDeviceAddressFeatures{ptr: (*C.VkPhysicalDeviceBufferDeviceAddressFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceBufferDeviceAddressFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceBufferDeviceAddressFeatures) Offset(offset int) PhysicalDeviceBufferDeviceAddressFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceBufferDeviceAddressFeaturesSizeOf)
	return PhysicalDeviceBufferDeviceAddressFeatures{ptr: (*C.VkPhysicalDeviceBufferDeviceAddressFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceBufferDeviceAddressFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceBufferDeviceAddressFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceBufferDeviceAddressFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceBufferDeviceAddressFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetBufferDeviceAddress returns the value in bufferDeviceAddress.
func (p PhysicalDeviceBufferDeviceAddressFeatures) GetBufferDeviceAddress() bool {
	return p.ptr.bufferDeviceAddress != 0
}

// SetBufferDeviceAddress sets the value in bufferDeviceAddress.
func (p PhysicalDeviceBufferDeviceAddressFeatures) SetBufferDeviceAddress(value bool) {
	if value {
		p.ptr.bufferDeviceAddress = C.VkBool32(1)
	} else {
		p.ptr.bufferDeviceAddress = C.VkBool32(0)
	}
}

// GetBufferDeviceAddressCaptureReplay returns the value in bufferDeviceAddressCaptureReplay.
func (p PhysicalDeviceBufferDeviceAddressFeatures) GetBufferDeviceAddressCaptureReplay() bool {
	return p.ptr.bufferDeviceAddressCaptureReplay != 0
}

// SetBufferDeviceAddressCaptureReplay sets the value in bufferDeviceAddressCaptureReplay.
func (p PhysicalDeviceBufferDeviceAddressFeatures) SetBufferDeviceAddressCaptureReplay(value bool) {
	if value {
		p.ptr.bufferDeviceAddressCaptureReplay = C.VkBool32(1)
	} else {
		p.ptr.bufferDeviceAddressCaptureReplay = C.VkBool32(0)
	}
}

// GetBufferDeviceAddressMultiDevice returns the value in bufferDeviceAddressMultiDevice.
func (p PhysicalDeviceBufferDeviceAddressFeatures) GetBufferDeviceAddressMultiDevice() bool {
	return p.ptr.bufferDeviceAddressMultiDevice != 0
}

// SetBufferDeviceAddressMultiDevice sets the value in bufferDeviceAddressMultiDevice.
func (p PhysicalDeviceBufferDeviceAddressFeatures) SetBufferDeviceAddressMultiDevice(value bool) {
	if value {
		p.ptr.bufferDeviceAddressMultiDevice = C.VkBool32(1)
	} else {
		p.ptr.bufferDeviceAddressMultiDevice = C.VkBool32(0)
	}
}

// PhysicalDeviceDepthStencilResolveProperties wraps VkPhysicalDeviceDepthStencilResolveProperties.
type PhysicalDeviceDepthStencilResolveProperties struct {
	ptr *C.VkPhysicalDeviceDepthStencilResolveProperties
}

// PhysicalDeviceDepthStencilResolvePropertiesNil is a null pointer.
var PhysicalDeviceDepthStencilResolvePropertiesNil PhysicalDeviceDepthStencilResolveProperties

// PhysicalDeviceDepthStencilResolvePropertiesSizeOf is the byte size of VkPhysicalDeviceDepthStencilResolveProperties.
const PhysicalDeviceDepthStencilResolvePropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceDepthStencilResolveProperties)

// PhysicalDeviceDepthStencilResolvePropertiesFromPtr converts a raw pointer to a PhysicalDeviceDepthStencilResolveProperties.
func PhysicalDeviceDepthStencilResolvePropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceDepthStencilResolveProperties {
	return PhysicalDeviceDepthStencilResolveProperties{ptr: (*C.VkPhysicalDeviceDepthStencilResolveProperties)(ptr)}
}

// PhysicalDeviceDepthStencilResolvePropertiesAlloc allocates a continuous block of VkPhysicalDeviceDepthStencilResolveProperties.
func PhysicalDeviceDepthStencilResolvePropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceDepthStencilResolveProperties {
	ptr := alloc.Allocate(PhysicalDeviceDepthStencilResolvePropertiesSizeOf * count)
	return PhysicalDeviceDepthStencilResolveProperties{ptr: (*C.VkPhysicalDeviceDepthStencilResolveProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceDepthStencilResolveProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceDepthStencilResolveProperties) Offset(offset int) PhysicalDeviceDepthStencilResolveProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceDepthStencilResolvePropertiesSizeOf)
	return PhysicalDeviceDepthStencilResolveProperties{ptr: (*C.VkPhysicalDeviceDepthStencilResolveProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceDepthStencilResolveProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceDepthStencilResolveProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceDepthStencilResolveProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceDepthStencilResolveProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSupportedDepthResolveModes returns the value in supportedDepthResolveModes.
func (p PhysicalDeviceDepthStencilResolveProperties) GetSupportedDepthResolveModes() ResolveModeFlags {
	return ResolveModeFlags(p.ptr.supportedDepthResolveModes)
}

// SetSupportedDepthResolveModes sets the value in supportedDepthResolveModes.
func (p PhysicalDeviceDepthStencilResolveProperties) SetSupportedDepthResolveModes(value ResolveModeFlags) {
	p.ptr.supportedDepthResolveModes = (C.VkResolveModeFlags)(value)
}

// GetSupportedStencilResolveModes returns the value in supportedStencilResolveModes.
func (p PhysicalDeviceDepthStencilResolveProperties) GetSupportedStencilResolveModes() ResolveModeFlags {
	return ResolveModeFlags(p.ptr.supportedStencilResolveModes)
}

// SetSupportedStencilResolveModes sets the value in supportedStencilResolveModes.
func (p PhysicalDeviceDepthStencilResolveProperties) SetSupportedStencilResolveModes(value ResolveModeFlags) {
	p.ptr.supportedStencilResolveModes = (C.VkResolveModeFlags)(value)
}

// GetIndependentResolveNone returns the value in independentResolveNone.
func (p PhysicalDeviceDepthStencilResolveProperties) GetIndependentResolveNone() bool {
	return p.ptr.independentResolveNone != 0
}

// SetIndependentResolveNone sets the value in independentResolveNone.
func (p PhysicalDeviceDepthStencilResolveProperties) SetIndependentResolveNone(value bool) {
	if value {
		p.ptr.independentResolveNone = C.VkBool32(1)
	} else {
		p.ptr.independentResolveNone = C.VkBool32(0)
	}
}

// GetIndependentResolve returns the value in independentResolve.
func (p PhysicalDeviceDepthStencilResolveProperties) GetIndependentResolve() bool {
	return p.ptr.independentResolve != 0
}

// SetIndependentResolve sets the value in independentResolve.
func (p PhysicalDeviceDepthStencilResolveProperties) SetIndependentResolve(value bool) {
	if value {
		p.ptr.independentResolve = C.VkBool32(1)
	} else {
		p.ptr.independentResolve = C.VkBool32(0)
	}
}

// PhysicalDeviceDescriptorIndexingFeatures wraps VkPhysicalDeviceDescriptorIndexingFeatures.
type PhysicalDeviceDescriptorIndexingFeatures struct {
	ptr *C.VkPhysicalDeviceDescriptorIndexingFeatures
}

// PhysicalDeviceDescriptorIndexingFeaturesNil is a null pointer.
var PhysicalDeviceDescriptorIndexingFeaturesNil PhysicalDeviceDescriptorIndexingFeatures

// PhysicalDeviceDescriptorIndexingFeaturesSizeOf is the byte size of VkPhysicalDeviceDescriptorIndexingFeatures.
const PhysicalDeviceDescriptorIndexingFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceDescriptorIndexingFeatures)

// PhysicalDeviceDescriptorIndexingFeaturesFromPtr converts a raw pointer to a PhysicalDeviceDescriptorIndexingFeatures.
func PhysicalDeviceDescriptorIndexingFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceDescriptorIndexingFeatures {
	return PhysicalDeviceDescriptorIndexingFeatures{ptr: (*C.VkPhysicalDeviceDescriptorIndexingFeatures)(ptr)}
}

// PhysicalDeviceDescriptorIndexingFeaturesAlloc allocates a continuous block of VkPhysicalDeviceDescriptorIndexingFeatures.
func PhysicalDeviceDescriptorIndexingFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceDescriptorIndexingFeatures {
	ptr := alloc.Allocate(PhysicalDeviceDescriptorIndexingFeaturesSizeOf * count)
	return PhysicalDeviceDescriptorIndexingFeatures{ptr: (*C.VkPhysicalDeviceDescriptorIndexingFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceDescriptorIndexingFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceDescriptorIndexingFeatures) Offset(offset int) PhysicalDeviceDescriptorIndexingFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceDescriptorIndexingFeaturesSizeOf)
	return PhysicalDeviceDescriptorIndexingFeatures{ptr: (*C.VkPhysicalDeviceDescriptorIndexingFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetShaderInputAttachmentArrayDynamicIndexing returns the value in shaderInputAttachmentArrayDynamicIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetShaderInputAttachmentArrayDynamicIndexing() bool {
	return p.ptr.shaderInputAttachmentArrayDynamicIndexing != 0
}

// SetShaderInputAttachmentArrayDynamicIndexing sets the value in shaderInputAttachmentArrayDynamicIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetShaderInputAttachmentArrayDynamicIndexing(value bool) {
	if value {
		p.ptr.shaderInputAttachmentArrayDynamicIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderInputAttachmentArrayDynamicIndexing = C.VkBool32(0)
	}
}

// GetShaderUniformTexelBufferArrayDynamicIndexing returns the value in shaderUniformTexelBufferArrayDynamicIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetShaderUniformTexelBufferArrayDynamicIndexing() bool {
	return p.ptr.shaderUniformTexelBufferArrayDynamicIndexing != 0
}

// SetShaderUniformTexelBufferArrayDynamicIndexing sets the value in shaderUniformTexelBufferArrayDynamicIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetShaderUniformTexelBufferArrayDynamicIndexing(value bool) {
	if value {
		p.ptr.shaderUniformTexelBufferArrayDynamicIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderUniformTexelBufferArrayDynamicIndexing = C.VkBool32(0)
	}
}

// GetShaderStorageTexelBufferArrayDynamicIndexing returns the value in shaderStorageTexelBufferArrayDynamicIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetShaderStorageTexelBufferArrayDynamicIndexing() bool {
	return p.ptr.shaderStorageTexelBufferArrayDynamicIndexing != 0
}

// SetShaderStorageTexelBufferArrayDynamicIndexing sets the value in shaderStorageTexelBufferArrayDynamicIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetShaderStorageTexelBufferArrayDynamicIndexing(value bool) {
	if value {
		p.ptr.shaderStorageTexelBufferArrayDynamicIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageTexelBufferArrayDynamicIndexing = C.VkBool32(0)
	}
}

// GetShaderUniformBufferArrayNonUniformIndexing returns the value in shaderUniformBufferArrayNonUniformIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetShaderUniformBufferArrayNonUniformIndexing() bool {
	return p.ptr.shaderUniformBufferArrayNonUniformIndexing != 0
}

// SetShaderUniformBufferArrayNonUniformIndexing sets the value in shaderUniformBufferArrayNonUniformIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetShaderUniformBufferArrayNonUniformIndexing(value bool) {
	if value {
		p.ptr.shaderUniformBufferArrayNonUniformIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderUniformBufferArrayNonUniformIndexing = C.VkBool32(0)
	}
}

// GetShaderSampledImageArrayNonUniformIndexing returns the value in shaderSampledImageArrayNonUniformIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetShaderSampledImageArrayNonUniformIndexing() bool {
	return p.ptr.shaderSampledImageArrayNonUniformIndexing != 0
}

// SetShaderSampledImageArrayNonUniformIndexing sets the value in shaderSampledImageArrayNonUniformIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetShaderSampledImageArrayNonUniformIndexing(value bool) {
	if value {
		p.ptr.shaderSampledImageArrayNonUniformIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderSampledImageArrayNonUniformIndexing = C.VkBool32(0)
	}
}

// GetShaderStorageBufferArrayNonUniformIndexing returns the value in shaderStorageBufferArrayNonUniformIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetShaderStorageBufferArrayNonUniformIndexing() bool {
	return p.ptr.shaderStorageBufferArrayNonUniformIndexing != 0
}

// SetShaderStorageBufferArrayNonUniformIndexing sets the value in shaderStorageBufferArrayNonUniformIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetShaderStorageBufferArrayNonUniformIndexing(value bool) {
	if value {
		p.ptr.shaderStorageBufferArrayNonUniformIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageBufferArrayNonUniformIndexing = C.VkBool32(0)
	}
}

// GetShaderStorageImageArrayNonUniformIndexing returns the value in shaderStorageImageArrayNonUniformIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetShaderStorageImageArrayNonUniformIndexing() bool {
	return p.ptr.shaderStorageImageArrayNonUniformIndexing != 0
}

// SetShaderStorageImageArrayNonUniformIndexing sets the value in shaderStorageImageArrayNonUniformIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetShaderStorageImageArrayNonUniformIndexing(value bool) {
	if value {
		p.ptr.shaderStorageImageArrayNonUniformIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageImageArrayNonUniformIndexing = C.VkBool32(0)
	}
}

// GetShaderInputAttachmentArrayNonUniformIndexing returns the value in shaderInputAttachmentArrayNonUniformIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetShaderInputAttachmentArrayNonUniformIndexing() bool {
	return p.ptr.shaderInputAttachmentArrayNonUniformIndexing != 0
}

// SetShaderInputAttachmentArrayNonUniformIndexing sets the value in shaderInputAttachmentArrayNonUniformIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetShaderInputAttachmentArrayNonUniformIndexing(value bool) {
	if value {
		p.ptr.shaderInputAttachmentArrayNonUniformIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderInputAttachmentArrayNonUniformIndexing = C.VkBool32(0)
	}
}

// GetShaderUniformTexelBufferArrayNonUniformIndexing returns the value in shaderUniformTexelBufferArrayNonUniformIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetShaderUniformTexelBufferArrayNonUniformIndexing() bool {
	return p.ptr.shaderUniformTexelBufferArrayNonUniformIndexing != 0
}

// SetShaderUniformTexelBufferArrayNonUniformIndexing sets the value in shaderUniformTexelBufferArrayNonUniformIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetShaderUniformTexelBufferArrayNonUniformIndexing(value bool) {
	if value {
		p.ptr.shaderUniformTexelBufferArrayNonUniformIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderUniformTexelBufferArrayNonUniformIndexing = C.VkBool32(0)
	}
}

// GetShaderStorageTexelBufferArrayNonUniformIndexing returns the value in shaderStorageTexelBufferArrayNonUniformIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetShaderStorageTexelBufferArrayNonUniformIndexing() bool {
	return p.ptr.shaderStorageTexelBufferArrayNonUniformIndexing != 0
}

// SetShaderStorageTexelBufferArrayNonUniformIndexing sets the value in shaderStorageTexelBufferArrayNonUniformIndexing.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetShaderStorageTexelBufferArrayNonUniformIndexing(value bool) {
	if value {
		p.ptr.shaderStorageTexelBufferArrayNonUniformIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageTexelBufferArrayNonUniformIndexing = C.VkBool32(0)
	}
}

// GetDescriptorBindingUniformBufferUpdateAfterBind returns the value in descriptorBindingUniformBufferUpdateAfterBind.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetDescriptorBindingUniformBufferUpdateAfterBind() bool {
	return p.ptr.descriptorBindingUniformBufferUpdateAfterBind != 0
}

// SetDescriptorBindingUniformBufferUpdateAfterBind sets the value in descriptorBindingUniformBufferUpdateAfterBind.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetDescriptorBindingUniformBufferUpdateAfterBind(value bool) {
	if value {
		p.ptr.descriptorBindingUniformBufferUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingUniformBufferUpdateAfterBind = C.VkBool32(0)
	}
}

// GetDescriptorBindingSampledImageUpdateAfterBind returns the value in descriptorBindingSampledImageUpdateAfterBind.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetDescriptorBindingSampledImageUpdateAfterBind() bool {
	return p.ptr.descriptorBindingSampledImageUpdateAfterBind != 0
}

// SetDescriptorBindingSampledImageUpdateAfterBind sets the value in descriptorBindingSampledImageUpdateAfterBind.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetDescriptorBindingSampledImageUpdateAfterBind(value bool) {
	if value {
		p.ptr.descriptorBindingSampledImageUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingSampledImageUpdateAfterBind = C.VkBool32(0)
	}
}

// GetDescriptorBindingStorageImageUpdateAfterBind returns the value in descriptorBindingStorageImageUpdateAfterBind.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetDescriptorBindingStorageImageUpdateAfterBind() bool {
	return p.ptr.descriptorBindingStorageImageUpdateAfterBind != 0
}

// SetDescriptorBindingStorageImageUpdateAfterBind sets the value in descriptorBindingStorageImageUpdateAfterBind.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetDescriptorBindingStorageImageUpdateAfterBind(value bool) {
	if value {
		p.ptr.descriptorBindingStorageImageUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingStorageImageUpdateAfterBind = C.VkBool32(0)
	}
}

// GetDescriptorBindingStorageBufferUpdateAfterBind returns the value in descriptorBindingStorageBufferUpdateAfterBind.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetDescriptorBindingStorageBufferUpdateAfterBind() bool {
	return p.ptr.descriptorBindingStorageBufferUpdateAfterBind != 0
}

// SetDescriptorBindingStorageBufferUpdateAfterBind sets the value in descriptorBindingStorageBufferUpdateAfterBind.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetDescriptorBindingStorageBufferUpdateAfterBind(value bool) {
	if value {
		p.ptr.descriptorBindingStorageBufferUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingStorageBufferUpdateAfterBind = C.VkBool32(0)
	}
}

// GetDescriptorBindingUniformTexelBufferUpdateAfterBind returns the value in descriptorBindingUniformTexelBufferUpdateAfterBind.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetDescriptorBindingUniformTexelBufferUpdateAfterBind() bool {
	return p.ptr.descriptorBindingUniformTexelBufferUpdateAfterBind != 0
}

// SetDescriptorBindingUniformTexelBufferUpdateAfterBind sets the value in descriptorBindingUniformTexelBufferUpdateAfterBind.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetDescriptorBindingUniformTexelBufferUpdateAfterBind(value bool) {
	if value {
		p.ptr.descriptorBindingUniformTexelBufferUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingUniformTexelBufferUpdateAfterBind = C.VkBool32(0)
	}
}

// GetDescriptorBindingStorageTexelBufferUpdateAfterBind returns the value in descriptorBindingStorageTexelBufferUpdateAfterBind.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetDescriptorBindingStorageTexelBufferUpdateAfterBind() bool {
	return p.ptr.descriptorBindingStorageTexelBufferUpdateAfterBind != 0
}

// SetDescriptorBindingStorageTexelBufferUpdateAfterBind sets the value in descriptorBindingStorageTexelBufferUpdateAfterBind.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetDescriptorBindingStorageTexelBufferUpdateAfterBind(value bool) {
	if value {
		p.ptr.descriptorBindingStorageTexelBufferUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingStorageTexelBufferUpdateAfterBind = C.VkBool32(0)
	}
}

// GetDescriptorBindingUpdateUnusedWhilePending returns the value in descriptorBindingUpdateUnusedWhilePending.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetDescriptorBindingUpdateUnusedWhilePending() bool {
	return p.ptr.descriptorBindingUpdateUnusedWhilePending != 0
}

// SetDescriptorBindingUpdateUnusedWhilePending sets the value in descriptorBindingUpdateUnusedWhilePending.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetDescriptorBindingUpdateUnusedWhilePending(value bool) {
	if value {
		p.ptr.descriptorBindingUpdateUnusedWhilePending = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingUpdateUnusedWhilePending = C.VkBool32(0)
	}
}

// GetDescriptorBindingPartiallyBound returns the value in descriptorBindingPartiallyBound.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetDescriptorBindingPartiallyBound() bool {
	return p.ptr.descriptorBindingPartiallyBound != 0
}

// SetDescriptorBindingPartiallyBound sets the value in descriptorBindingPartiallyBound.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetDescriptorBindingPartiallyBound(value bool) {
	if value {
		p.ptr.descriptorBindingPartiallyBound = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingPartiallyBound = C.VkBool32(0)
	}
}

// GetDescriptorBindingVariableDescriptorCount returns the value in descriptorBindingVariableDescriptorCount.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetDescriptorBindingVariableDescriptorCount() bool {
	return p.ptr.descriptorBindingVariableDescriptorCount != 0
}

// SetDescriptorBindingVariableDescriptorCount sets the value in descriptorBindingVariableDescriptorCount.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetDescriptorBindingVariableDescriptorCount(value bool) {
	if value {
		p.ptr.descriptorBindingVariableDescriptorCount = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingVariableDescriptorCount = C.VkBool32(0)
	}
}

// GetRuntimeDescriptorArray returns the value in runtimeDescriptorArray.
func (p PhysicalDeviceDescriptorIndexingFeatures) GetRuntimeDescriptorArray() bool {
	return p.ptr.runtimeDescriptorArray != 0
}

// SetRuntimeDescriptorArray sets the value in runtimeDescriptorArray.
func (p PhysicalDeviceDescriptorIndexingFeatures) SetRuntimeDescriptorArray(value bool) {
	if value {
		p.ptr.runtimeDescriptorArray = C.VkBool32(1)
	} else {
		p.ptr.runtimeDescriptorArray = C.VkBool32(0)
	}
}

// PhysicalDeviceDescriptorIndexingProperties wraps VkPhysicalDeviceDescriptorIndexingProperties.
type PhysicalDeviceDescriptorIndexingProperties struct {
	ptr *C.VkPhysicalDeviceDescriptorIndexingProperties
}

// PhysicalDeviceDescriptorIndexingPropertiesNil is a null pointer.
var PhysicalDeviceDescriptorIndexingPropertiesNil PhysicalDeviceDescriptorIndexingProperties

// PhysicalDeviceDescriptorIndexingPropertiesSizeOf is the byte size of VkPhysicalDeviceDescriptorIndexingProperties.
const PhysicalDeviceDescriptorIndexingPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceDescriptorIndexingProperties)

// PhysicalDeviceDescriptorIndexingPropertiesFromPtr converts a raw pointer to a PhysicalDeviceDescriptorIndexingProperties.
func PhysicalDeviceDescriptorIndexingPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceDescriptorIndexingProperties {
	return PhysicalDeviceDescriptorIndexingProperties{ptr: (*C.VkPhysicalDeviceDescriptorIndexingProperties)(ptr)}
}

// PhysicalDeviceDescriptorIndexingPropertiesAlloc allocates a continuous block of VkPhysicalDeviceDescriptorIndexingProperties.
func PhysicalDeviceDescriptorIndexingPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceDescriptorIndexingProperties {
	ptr := alloc.Allocate(PhysicalDeviceDescriptorIndexingPropertiesSizeOf * count)
	return PhysicalDeviceDescriptorIndexingProperties{ptr: (*C.VkPhysicalDeviceDescriptorIndexingProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceDescriptorIndexingProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceDescriptorIndexingProperties) Offset(offset int) PhysicalDeviceDescriptorIndexingProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceDescriptorIndexingPropertiesSizeOf)
	return PhysicalDeviceDescriptorIndexingProperties{ptr: (*C.VkPhysicalDeviceDescriptorIndexingProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceDescriptorIndexingProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceDescriptorIndexingProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceDescriptorIndexingProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceDescriptorIndexingProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMaxUpdateAfterBindDescriptorsInAllPools returns the value in maxUpdateAfterBindDescriptorsInAllPools.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxUpdateAfterBindDescriptorsInAllPools() uint32 {
	return uint32(p.ptr.maxUpdateAfterBindDescriptorsInAllPools)
}

// SetMaxUpdateAfterBindDescriptorsInAllPools sets the value in maxUpdateAfterBindDescriptorsInAllPools.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxUpdateAfterBindDescriptorsInAllPools(value uint32) {
	p.ptr.maxUpdateAfterBindDescriptorsInAllPools = (C.uint32_t)(value)
}

// GetShaderUniformBufferArrayNonUniformIndexingNative returns the value in shaderUniformBufferArrayNonUniformIndexingNative.
func (p PhysicalDeviceDescriptorIndexingProperties) GetShaderUniformBufferArrayNonUniformIndexingNative() bool {
	return p.ptr.shaderUniformBufferArrayNonUniformIndexingNative != 0
}

// SetShaderUniformBufferArrayNonUniformIndexingNative sets the value in shaderUniformBufferArrayNonUniformIndexingNative.
func (p PhysicalDeviceDescriptorIndexingProperties) SetShaderUniformBufferArrayNonUniformIndexingNative(value bool) {
	if value {
		p.ptr.shaderUniformBufferArrayNonUniformIndexingNative = C.VkBool32(1)
	} else {
		p.ptr.shaderUniformBufferArrayNonUniformIndexingNative = C.VkBool32(0)
	}
}

// GetShaderSampledImageArrayNonUniformIndexingNative returns the value in shaderSampledImageArrayNonUniformIndexingNative.
func (p PhysicalDeviceDescriptorIndexingProperties) GetShaderSampledImageArrayNonUniformIndexingNative() bool {
	return p.ptr.shaderSampledImageArrayNonUniformIndexingNative != 0
}

// SetShaderSampledImageArrayNonUniformIndexingNative sets the value in shaderSampledImageArrayNonUniformIndexingNative.
func (p PhysicalDeviceDescriptorIndexingProperties) SetShaderSampledImageArrayNonUniformIndexingNative(value bool) {
	if value {
		p.ptr.shaderSampledImageArrayNonUniformIndexingNative = C.VkBool32(1)
	} else {
		p.ptr.shaderSampledImageArrayNonUniformIndexingNative = C.VkBool32(0)
	}
}

// GetShaderStorageBufferArrayNonUniformIndexingNative returns the value in shaderStorageBufferArrayNonUniformIndexingNative.
func (p PhysicalDeviceDescriptorIndexingProperties) GetShaderStorageBufferArrayNonUniformIndexingNative() bool {
	return p.ptr.shaderStorageBufferArrayNonUniformIndexingNative != 0
}

// SetShaderStorageBufferArrayNonUniformIndexingNative sets the value in shaderStorageBufferArrayNonUniformIndexingNative.
func (p PhysicalDeviceDescriptorIndexingProperties) SetShaderStorageBufferArrayNonUniformIndexingNative(value bool) {
	if value {
		p.ptr.shaderStorageBufferArrayNonUniformIndexingNative = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageBufferArrayNonUniformIndexingNative = C.VkBool32(0)
	}
}

// GetShaderStorageImageArrayNonUniformIndexingNative returns the value in shaderStorageImageArrayNonUniformIndexingNative.
func (p PhysicalDeviceDescriptorIndexingProperties) GetShaderStorageImageArrayNonUniformIndexingNative() bool {
	return p.ptr.shaderStorageImageArrayNonUniformIndexingNative != 0
}

// SetShaderStorageImageArrayNonUniformIndexingNative sets the value in shaderStorageImageArrayNonUniformIndexingNative.
func (p PhysicalDeviceDescriptorIndexingProperties) SetShaderStorageImageArrayNonUniformIndexingNative(value bool) {
	if value {
		p.ptr.shaderStorageImageArrayNonUniformIndexingNative = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageImageArrayNonUniformIndexingNative = C.VkBool32(0)
	}
}

// GetShaderInputAttachmentArrayNonUniformIndexingNative returns the value in shaderInputAttachmentArrayNonUniformIndexingNative.
func (p PhysicalDeviceDescriptorIndexingProperties) GetShaderInputAttachmentArrayNonUniformIndexingNative() bool {
	return p.ptr.shaderInputAttachmentArrayNonUniformIndexingNative != 0
}

// SetShaderInputAttachmentArrayNonUniformIndexingNative sets the value in shaderInputAttachmentArrayNonUniformIndexingNative.
func (p PhysicalDeviceDescriptorIndexingProperties) SetShaderInputAttachmentArrayNonUniformIndexingNative(value bool) {
	if value {
		p.ptr.shaderInputAttachmentArrayNonUniformIndexingNative = C.VkBool32(1)
	} else {
		p.ptr.shaderInputAttachmentArrayNonUniformIndexingNative = C.VkBool32(0)
	}
}

// GetRobustBufferAccessUpdateAfterBind returns the value in robustBufferAccessUpdateAfterBind.
func (p PhysicalDeviceDescriptorIndexingProperties) GetRobustBufferAccessUpdateAfterBind() bool {
	return p.ptr.robustBufferAccessUpdateAfterBind != 0
}

// SetRobustBufferAccessUpdateAfterBind sets the value in robustBufferAccessUpdateAfterBind.
func (p PhysicalDeviceDescriptorIndexingProperties) SetRobustBufferAccessUpdateAfterBind(value bool) {
	if value {
		p.ptr.robustBufferAccessUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.robustBufferAccessUpdateAfterBind = C.VkBool32(0)
	}
}

// GetQuadDivergentImplicitLod returns the value in quadDivergentImplicitLod.
func (p PhysicalDeviceDescriptorIndexingProperties) GetQuadDivergentImplicitLod() bool {
	return p.ptr.quadDivergentImplicitLod != 0
}

// SetQuadDivergentImplicitLod sets the value in quadDivergentImplicitLod.
func (p PhysicalDeviceDescriptorIndexingProperties) SetQuadDivergentImplicitLod(value bool) {
	if value {
		p.ptr.quadDivergentImplicitLod = C.VkBool32(1)
	} else {
		p.ptr.quadDivergentImplicitLod = C.VkBool32(0)
	}
}

// GetMaxPerStageDescriptorUpdateAfterBindSamplers returns the value in maxPerStageDescriptorUpdateAfterBindSamplers.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxPerStageDescriptorUpdateAfterBindSamplers() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUpdateAfterBindSamplers)
}

// SetMaxPerStageDescriptorUpdateAfterBindSamplers sets the value in maxPerStageDescriptorUpdateAfterBindSamplers.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxPerStageDescriptorUpdateAfterBindSamplers(value uint32) {
	p.ptr.maxPerStageDescriptorUpdateAfterBindSamplers = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorUpdateAfterBindUniformBuffers returns the value in maxPerStageDescriptorUpdateAfterBindUniformBuffers.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxPerStageDescriptorUpdateAfterBindUniformBuffers() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUpdateAfterBindUniformBuffers)
}

// SetMaxPerStageDescriptorUpdateAfterBindUniformBuffers sets the value in maxPerStageDescriptorUpdateAfterBindUniformBuffers.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxPerStageDescriptorUpdateAfterBindUniformBuffers(value uint32) {
	p.ptr.maxPerStageDescriptorUpdateAfterBindUniformBuffers = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorUpdateAfterBindStorageBuffers returns the value in maxPerStageDescriptorUpdateAfterBindStorageBuffers.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxPerStageDescriptorUpdateAfterBindStorageBuffers() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUpdateAfterBindStorageBuffers)
}

// SetMaxPerStageDescriptorUpdateAfterBindStorageBuffers sets the value in maxPerStageDescriptorUpdateAfterBindStorageBuffers.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxPerStageDescriptorUpdateAfterBindStorageBuffers(value uint32) {
	p.ptr.maxPerStageDescriptorUpdateAfterBindStorageBuffers = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorUpdateAfterBindSampledImages returns the value in maxPerStageDescriptorUpdateAfterBindSampledImages.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxPerStageDescriptorUpdateAfterBindSampledImages() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUpdateAfterBindSampledImages)
}

// SetMaxPerStageDescriptorUpdateAfterBindSampledImages sets the value in maxPerStageDescriptorUpdateAfterBindSampledImages.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxPerStageDescriptorUpdateAfterBindSampledImages(value uint32) {
	p.ptr.maxPerStageDescriptorUpdateAfterBindSampledImages = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorUpdateAfterBindStorageImages returns the value in maxPerStageDescriptorUpdateAfterBindStorageImages.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxPerStageDescriptorUpdateAfterBindStorageImages() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUpdateAfterBindStorageImages)
}

// SetMaxPerStageDescriptorUpdateAfterBindStorageImages sets the value in maxPerStageDescriptorUpdateAfterBindStorageImages.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxPerStageDescriptorUpdateAfterBindStorageImages(value uint32) {
	p.ptr.maxPerStageDescriptorUpdateAfterBindStorageImages = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorUpdateAfterBindInputAttachments returns the value in maxPerStageDescriptorUpdateAfterBindInputAttachments.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxPerStageDescriptorUpdateAfterBindInputAttachments() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUpdateAfterBindInputAttachments)
}

// SetMaxPerStageDescriptorUpdateAfterBindInputAttachments sets the value in maxPerStageDescriptorUpdateAfterBindInputAttachments.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxPerStageDescriptorUpdateAfterBindInputAttachments(value uint32) {
	p.ptr.maxPerStageDescriptorUpdateAfterBindInputAttachments = (C.uint32_t)(value)
}

// GetMaxPerStageUpdateAfterBindResources returns the value in maxPerStageUpdateAfterBindResources.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxPerStageUpdateAfterBindResources() uint32 {
	return uint32(p.ptr.maxPerStageUpdateAfterBindResources)
}

// SetMaxPerStageUpdateAfterBindResources sets the value in maxPerStageUpdateAfterBindResources.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxPerStageUpdateAfterBindResources(value uint32) {
	p.ptr.maxPerStageUpdateAfterBindResources = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindSamplers returns the value in maxDescriptorSetUpdateAfterBindSamplers.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxDescriptorSetUpdateAfterBindSamplers() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindSamplers)
}

// SetMaxDescriptorSetUpdateAfterBindSamplers sets the value in maxDescriptorSetUpdateAfterBindSamplers.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxDescriptorSetUpdateAfterBindSamplers(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindSamplers = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindUniformBuffers returns the value in maxDescriptorSetUpdateAfterBindUniformBuffers.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxDescriptorSetUpdateAfterBindUniformBuffers() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindUniformBuffers)
}

// SetMaxDescriptorSetUpdateAfterBindUniformBuffers sets the value in maxDescriptorSetUpdateAfterBindUniformBuffers.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxDescriptorSetUpdateAfterBindUniformBuffers(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindUniformBuffers = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindUniformBuffersDynamic returns the value in maxDescriptorSetUpdateAfterBindUniformBuffersDynamic.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxDescriptorSetUpdateAfterBindUniformBuffersDynamic() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)
}

// SetMaxDescriptorSetUpdateAfterBindUniformBuffersDynamic sets the value in maxDescriptorSetUpdateAfterBindUniformBuffersDynamic.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxDescriptorSetUpdateAfterBindUniformBuffersDynamic(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindStorageBuffers returns the value in maxDescriptorSetUpdateAfterBindStorageBuffers.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxDescriptorSetUpdateAfterBindStorageBuffers() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindStorageBuffers)
}

// SetMaxDescriptorSetUpdateAfterBindStorageBuffers sets the value in maxDescriptorSetUpdateAfterBindStorageBuffers.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxDescriptorSetUpdateAfterBindStorageBuffers(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindStorageBuffers = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindStorageBuffersDynamic returns the value in maxDescriptorSetUpdateAfterBindStorageBuffersDynamic.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxDescriptorSetUpdateAfterBindStorageBuffersDynamic() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)
}

// SetMaxDescriptorSetUpdateAfterBindStorageBuffersDynamic sets the value in maxDescriptorSetUpdateAfterBindStorageBuffersDynamic.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxDescriptorSetUpdateAfterBindStorageBuffersDynamic(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindSampledImages returns the value in maxDescriptorSetUpdateAfterBindSampledImages.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxDescriptorSetUpdateAfterBindSampledImages() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindSampledImages)
}

// SetMaxDescriptorSetUpdateAfterBindSampledImages sets the value in maxDescriptorSetUpdateAfterBindSampledImages.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxDescriptorSetUpdateAfterBindSampledImages(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindSampledImages = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindStorageImages returns the value in maxDescriptorSetUpdateAfterBindStorageImages.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxDescriptorSetUpdateAfterBindStorageImages() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindStorageImages)
}

// SetMaxDescriptorSetUpdateAfterBindStorageImages sets the value in maxDescriptorSetUpdateAfterBindStorageImages.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxDescriptorSetUpdateAfterBindStorageImages(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindStorageImages = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindInputAttachments returns the value in maxDescriptorSetUpdateAfterBindInputAttachments.
func (p PhysicalDeviceDescriptorIndexingProperties) GetMaxDescriptorSetUpdateAfterBindInputAttachments() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindInputAttachments)
}

// SetMaxDescriptorSetUpdateAfterBindInputAttachments sets the value in maxDescriptorSetUpdateAfterBindInputAttachments.
func (p PhysicalDeviceDescriptorIndexingProperties) SetMaxDescriptorSetUpdateAfterBindInputAttachments(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindInputAttachments = (C.uint32_t)(value)
}

// PhysicalDeviceDriverProperties wraps VkPhysicalDeviceDriverProperties.
type PhysicalDeviceDriverProperties struct {
	ptr *C.VkPhysicalDeviceDriverProperties
}

// PhysicalDeviceDriverPropertiesNil is a null pointer.
var PhysicalDeviceDriverPropertiesNil PhysicalDeviceDriverProperties

// PhysicalDeviceDriverPropertiesSizeOf is the byte size of VkPhysicalDeviceDriverProperties.
const PhysicalDeviceDriverPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceDriverProperties)

// PhysicalDeviceDriverPropertiesFromPtr converts a raw pointer to a PhysicalDeviceDriverProperties.
func PhysicalDeviceDriverPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceDriverProperties {
	return PhysicalDeviceDriverProperties{ptr: (*C.VkPhysicalDeviceDriverProperties)(ptr)}
}

// PhysicalDeviceDriverPropertiesAlloc allocates a continuous block of VkPhysicalDeviceDriverProperties.
func PhysicalDeviceDriverPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceDriverProperties {
	ptr := alloc.Allocate(PhysicalDeviceDriverPropertiesSizeOf * count)
	return PhysicalDeviceDriverProperties{ptr: (*C.VkPhysicalDeviceDriverProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceDriverProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceDriverProperties) Offset(offset int) PhysicalDeviceDriverProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceDriverPropertiesSizeOf)
	return PhysicalDeviceDriverProperties{ptr: (*C.VkPhysicalDeviceDriverProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceDriverProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceDriverProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceDriverProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceDriverProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDriverID returns the value in driverID.
func (p PhysicalDeviceDriverProperties) GetDriverID() DriverId {
	return DriverId(p.ptr.driverID)
}

// SetDriverID sets the value in driverID.
func (p PhysicalDeviceDriverProperties) SetDriverID(value DriverId) {
	p.ptr.driverID = (C.VkDriverId)(value)
}

// PhysicalDeviceDriverProperties.driverName is unsupported: category unsupported.

// PhysicalDeviceDriverProperties.driverInfo is unsupported: category unsupported.

// RefConformanceVersion returns pointer to the conformanceVersion field.
func (p PhysicalDeviceDriverProperties) RefConformanceVersion() ConformanceVersion {
	return ConformanceVersion{ptr: (*C.VkConformanceVersion)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkPhysicalDeviceDriverProperties_conformanceVersion)))}
}

// PhysicalDeviceDynamicRenderingFeatures wraps VkPhysicalDeviceDynamicRenderingFeatures.
type PhysicalDeviceDynamicRenderingFeatures struct {
	ptr *C.VkPhysicalDeviceDynamicRenderingFeatures
}

// PhysicalDeviceDynamicRenderingFeaturesNil is a null pointer.
var PhysicalDeviceDynamicRenderingFeaturesNil PhysicalDeviceDynamicRenderingFeatures

// PhysicalDeviceDynamicRenderingFeaturesSizeOf is the byte size of VkPhysicalDeviceDynamicRenderingFeatures.
const PhysicalDeviceDynamicRenderingFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceDynamicRenderingFeatures)

// PhysicalDeviceDynamicRenderingFeaturesFromPtr converts a raw pointer to a PhysicalDeviceDynamicRenderingFeatures.
func PhysicalDeviceDynamicRenderingFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceDynamicRenderingFeatures {
	return PhysicalDeviceDynamicRenderingFeatures{ptr: (*C.VkPhysicalDeviceDynamicRenderingFeatures)(ptr)}
}

// PhysicalDeviceDynamicRenderingFeaturesAlloc allocates a continuous block of VkPhysicalDeviceDynamicRenderingFeatures.
func PhysicalDeviceDynamicRenderingFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceDynamicRenderingFeatures {
	ptr := alloc.Allocate(PhysicalDeviceDynamicRenderingFeaturesSizeOf * count)
	return PhysicalDeviceDynamicRenderingFeatures{ptr: (*C.VkPhysicalDeviceDynamicRenderingFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceDynamicRenderingFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceDynamicRenderingFeatures) Offset(offset int) PhysicalDeviceDynamicRenderingFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceDynamicRenderingFeaturesSizeOf)
	return PhysicalDeviceDynamicRenderingFeatures{ptr: (*C.VkPhysicalDeviceDynamicRenderingFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceDynamicRenderingFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceDynamicRenderingFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceDynamicRenderingFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceDynamicRenderingFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDynamicRendering returns the value in dynamicRendering.
func (p PhysicalDeviceDynamicRenderingFeatures) GetDynamicRendering() bool {
	return p.ptr.dynamicRendering != 0
}

// SetDynamicRendering sets the value in dynamicRendering.
func (p PhysicalDeviceDynamicRenderingFeatures) SetDynamicRendering(value bool) {
	if value {
		p.ptr.dynamicRendering = C.VkBool32(1)
	} else {
		p.ptr.dynamicRendering = C.VkBool32(0)
	}
}

// PhysicalDeviceDynamicRenderingLocalReadFeatures wraps VkPhysicalDeviceDynamicRenderingLocalReadFeatures.
type PhysicalDeviceDynamicRenderingLocalReadFeatures struct {
	ptr *C.VkPhysicalDeviceDynamicRenderingLocalReadFeatures
}

// PhysicalDeviceDynamicRenderingLocalReadFeaturesNil is a null pointer.
var PhysicalDeviceDynamicRenderingLocalReadFeaturesNil PhysicalDeviceDynamicRenderingLocalReadFeatures

// PhysicalDeviceDynamicRenderingLocalReadFeaturesSizeOf is the byte size of VkPhysicalDeviceDynamicRenderingLocalReadFeatures.
const PhysicalDeviceDynamicRenderingLocalReadFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceDynamicRenderingLocalReadFeatures)

// PhysicalDeviceDynamicRenderingLocalReadFeaturesFromPtr converts a raw pointer to a PhysicalDeviceDynamicRenderingLocalReadFeatures.
func PhysicalDeviceDynamicRenderingLocalReadFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceDynamicRenderingLocalReadFeatures {
	return PhysicalDeviceDynamicRenderingLocalReadFeatures{ptr: (*C.VkPhysicalDeviceDynamicRenderingLocalReadFeatures)(ptr)}
}

// PhysicalDeviceDynamicRenderingLocalReadFeaturesAlloc allocates a continuous block of VkPhysicalDeviceDynamicRenderingLocalReadFeatures.
func PhysicalDeviceDynamicRenderingLocalReadFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceDynamicRenderingLocalReadFeatures {
	ptr := alloc.Allocate(PhysicalDeviceDynamicRenderingLocalReadFeaturesSizeOf * count)
	return PhysicalDeviceDynamicRenderingLocalReadFeatures{ptr: (*C.VkPhysicalDeviceDynamicRenderingLocalReadFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceDynamicRenderingLocalReadFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceDynamicRenderingLocalReadFeatures) Offset(offset int) PhysicalDeviceDynamicRenderingLocalReadFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceDynamicRenderingLocalReadFeaturesSizeOf)
	return PhysicalDeviceDynamicRenderingLocalReadFeatures{ptr: (*C.VkPhysicalDeviceDynamicRenderingLocalReadFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceDynamicRenderingLocalReadFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceDynamicRenderingLocalReadFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceDynamicRenderingLocalReadFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceDynamicRenderingLocalReadFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDynamicRenderingLocalRead returns the value in dynamicRenderingLocalRead.
func (p PhysicalDeviceDynamicRenderingLocalReadFeatures) GetDynamicRenderingLocalRead() bool {
	return p.ptr.dynamicRenderingLocalRead != 0
}

// SetDynamicRenderingLocalRead sets the value in dynamicRenderingLocalRead.
func (p PhysicalDeviceDynamicRenderingLocalReadFeatures) SetDynamicRenderingLocalRead(value bool) {
	if value {
		p.ptr.dynamicRenderingLocalRead = C.VkBool32(1)
	} else {
		p.ptr.dynamicRenderingLocalRead = C.VkBool32(0)
	}
}

// PhysicalDeviceExternalBufferInfo wraps VkPhysicalDeviceExternalBufferInfo.
type PhysicalDeviceExternalBufferInfo struct {
	ptr *C.VkPhysicalDeviceExternalBufferInfo
}

// PhysicalDeviceExternalBufferInfoNil is a null pointer.
var PhysicalDeviceExternalBufferInfoNil PhysicalDeviceExternalBufferInfo

// PhysicalDeviceExternalBufferInfoSizeOf is the byte size of VkPhysicalDeviceExternalBufferInfo.
const PhysicalDeviceExternalBufferInfoSizeOf = int(C.sizeof_VkPhysicalDeviceExternalBufferInfo)

// PhysicalDeviceExternalBufferInfoFromPtr converts a raw pointer to a PhysicalDeviceExternalBufferInfo.
func PhysicalDeviceExternalBufferInfoFromPtr(ptr unsafe.Pointer) PhysicalDeviceExternalBufferInfo {
	return PhysicalDeviceExternalBufferInfo{ptr: (*C.VkPhysicalDeviceExternalBufferInfo)(ptr)}
}

// PhysicalDeviceExternalBufferInfoAlloc allocates a continuous block of VkPhysicalDeviceExternalBufferInfo.
func PhysicalDeviceExternalBufferInfoAlloc(alloc ffi.Allocator, count int) PhysicalDeviceExternalBufferInfo {
	ptr := alloc.Allocate(PhysicalDeviceExternalBufferInfoSizeOf * count)
	return PhysicalDeviceExternalBufferInfo{ptr: (*C.VkPhysicalDeviceExternalBufferInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceExternalBufferInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceExternalBufferInfo) Offset(offset int) PhysicalDeviceExternalBufferInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceExternalBufferInfoSizeOf)
	return PhysicalDeviceExternalBufferInfo{ptr: (*C.VkPhysicalDeviceExternalBufferInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceExternalBufferInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceExternalBufferInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceExternalBufferInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceExternalBufferInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PhysicalDeviceExternalBufferInfo) GetFlags() BufferCreateFlags {
	return BufferCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PhysicalDeviceExternalBufferInfo) SetFlags(value BufferCreateFlags) {
	p.ptr.flags = (C.VkBufferCreateFlags)(value)
}

// GetUsage returns the value in usage.
func (p PhysicalDeviceExternalBufferInfo) GetUsage() BufferUsageFlags {
	return BufferUsageFlags(p.ptr.usage)
}

// SetUsage sets the value in usage.
func (p PhysicalDeviceExternalBufferInfo) SetUsage(value BufferUsageFlags) {
	p.ptr.usage = (C.VkBufferUsageFlags)(value)
}

// GetHandleType returns the value in handleType.
func (p PhysicalDeviceExternalBufferInfo) GetHandleType() ExternalMemoryHandleTypeFlags {
	return ExternalMemoryHandleTypeFlags(p.ptr.handleType)
}

// SetHandleType sets the value in handleType.
func (p PhysicalDeviceExternalBufferInfo) SetHandleType(value ExternalMemoryHandleTypeFlags) {
	p.ptr.handleType = (C.VkExternalMemoryHandleTypeFlagBits)(value)
}

// PhysicalDeviceExternalFenceInfo wraps VkPhysicalDeviceExternalFenceInfo.
type PhysicalDeviceExternalFenceInfo struct {
	ptr *C.VkPhysicalDeviceExternalFenceInfo
}

// PhysicalDeviceExternalFenceInfoNil is a null pointer.
var PhysicalDeviceExternalFenceInfoNil PhysicalDeviceExternalFenceInfo

// PhysicalDeviceExternalFenceInfoSizeOf is the byte size of VkPhysicalDeviceExternalFenceInfo.
const PhysicalDeviceExternalFenceInfoSizeOf = int(C.sizeof_VkPhysicalDeviceExternalFenceInfo)

// PhysicalDeviceExternalFenceInfoFromPtr converts a raw pointer to a PhysicalDeviceExternalFenceInfo.
func PhysicalDeviceExternalFenceInfoFromPtr(ptr unsafe.Pointer) PhysicalDeviceExternalFenceInfo {
	return PhysicalDeviceExternalFenceInfo{ptr: (*C.VkPhysicalDeviceExternalFenceInfo)(ptr)}
}

// PhysicalDeviceExternalFenceInfoAlloc allocates a continuous block of VkPhysicalDeviceExternalFenceInfo.
func PhysicalDeviceExternalFenceInfoAlloc(alloc ffi.Allocator, count int) PhysicalDeviceExternalFenceInfo {
	ptr := alloc.Allocate(PhysicalDeviceExternalFenceInfoSizeOf * count)
	return PhysicalDeviceExternalFenceInfo{ptr: (*C.VkPhysicalDeviceExternalFenceInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceExternalFenceInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceExternalFenceInfo) Offset(offset int) PhysicalDeviceExternalFenceInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceExternalFenceInfoSizeOf)
	return PhysicalDeviceExternalFenceInfo{ptr: (*C.VkPhysicalDeviceExternalFenceInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceExternalFenceInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceExternalFenceInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceExternalFenceInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceExternalFenceInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetHandleType returns the value in handleType.
func (p PhysicalDeviceExternalFenceInfo) GetHandleType() ExternalFenceHandleTypeFlags {
	return ExternalFenceHandleTypeFlags(p.ptr.handleType)
}

// SetHandleType sets the value in handleType.
func (p PhysicalDeviceExternalFenceInfo) SetHandleType(value ExternalFenceHandleTypeFlags) {
	p.ptr.handleType = (C.VkExternalFenceHandleTypeFlagBits)(value)
}

// PhysicalDeviceExternalImageFormatInfo wraps VkPhysicalDeviceExternalImageFormatInfo.
type PhysicalDeviceExternalImageFormatInfo struct {
	ptr *C.VkPhysicalDeviceExternalImageFormatInfo
}

// PhysicalDeviceExternalImageFormatInfoNil is a null pointer.
var PhysicalDeviceExternalImageFormatInfoNil PhysicalDeviceExternalImageFormatInfo

// PhysicalDeviceExternalImageFormatInfoSizeOf is the byte size of VkPhysicalDeviceExternalImageFormatInfo.
const PhysicalDeviceExternalImageFormatInfoSizeOf = int(C.sizeof_VkPhysicalDeviceExternalImageFormatInfo)

// PhysicalDeviceExternalImageFormatInfoFromPtr converts a raw pointer to a PhysicalDeviceExternalImageFormatInfo.
func PhysicalDeviceExternalImageFormatInfoFromPtr(ptr unsafe.Pointer) PhysicalDeviceExternalImageFormatInfo {
	return PhysicalDeviceExternalImageFormatInfo{ptr: (*C.VkPhysicalDeviceExternalImageFormatInfo)(ptr)}
}

// PhysicalDeviceExternalImageFormatInfoAlloc allocates a continuous block of VkPhysicalDeviceExternalImageFormatInfo.
func PhysicalDeviceExternalImageFormatInfoAlloc(alloc ffi.Allocator, count int) PhysicalDeviceExternalImageFormatInfo {
	ptr := alloc.Allocate(PhysicalDeviceExternalImageFormatInfoSizeOf * count)
	return PhysicalDeviceExternalImageFormatInfo{ptr: (*C.VkPhysicalDeviceExternalImageFormatInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceExternalImageFormatInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceExternalImageFormatInfo) Offset(offset int) PhysicalDeviceExternalImageFormatInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceExternalImageFormatInfoSizeOf)
	return PhysicalDeviceExternalImageFormatInfo{ptr: (*C.VkPhysicalDeviceExternalImageFormatInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceExternalImageFormatInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceExternalImageFormatInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceExternalImageFormatInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceExternalImageFormatInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetHandleType returns the value in handleType.
func (p PhysicalDeviceExternalImageFormatInfo) GetHandleType() ExternalMemoryHandleTypeFlags {
	return ExternalMemoryHandleTypeFlags(p.ptr.handleType)
}

// SetHandleType sets the value in handleType.
func (p PhysicalDeviceExternalImageFormatInfo) SetHandleType(value ExternalMemoryHandleTypeFlags) {
	p.ptr.handleType = (C.VkExternalMemoryHandleTypeFlagBits)(value)
}

// PhysicalDeviceExternalSemaphoreInfo wraps VkPhysicalDeviceExternalSemaphoreInfo.
type PhysicalDeviceExternalSemaphoreInfo struct {
	ptr *C.VkPhysicalDeviceExternalSemaphoreInfo
}

// PhysicalDeviceExternalSemaphoreInfoNil is a null pointer.
var PhysicalDeviceExternalSemaphoreInfoNil PhysicalDeviceExternalSemaphoreInfo

// PhysicalDeviceExternalSemaphoreInfoSizeOf is the byte size of VkPhysicalDeviceExternalSemaphoreInfo.
const PhysicalDeviceExternalSemaphoreInfoSizeOf = int(C.sizeof_VkPhysicalDeviceExternalSemaphoreInfo)

// PhysicalDeviceExternalSemaphoreInfoFromPtr converts a raw pointer to a PhysicalDeviceExternalSemaphoreInfo.
func PhysicalDeviceExternalSemaphoreInfoFromPtr(ptr unsafe.Pointer) PhysicalDeviceExternalSemaphoreInfo {
	return PhysicalDeviceExternalSemaphoreInfo{ptr: (*C.VkPhysicalDeviceExternalSemaphoreInfo)(ptr)}
}

// PhysicalDeviceExternalSemaphoreInfoAlloc allocates a continuous block of VkPhysicalDeviceExternalSemaphoreInfo.
func PhysicalDeviceExternalSemaphoreInfoAlloc(alloc ffi.Allocator, count int) PhysicalDeviceExternalSemaphoreInfo {
	ptr := alloc.Allocate(PhysicalDeviceExternalSemaphoreInfoSizeOf * count)
	return PhysicalDeviceExternalSemaphoreInfo{ptr: (*C.VkPhysicalDeviceExternalSemaphoreInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceExternalSemaphoreInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceExternalSemaphoreInfo) Offset(offset int) PhysicalDeviceExternalSemaphoreInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceExternalSemaphoreInfoSizeOf)
	return PhysicalDeviceExternalSemaphoreInfo{ptr: (*C.VkPhysicalDeviceExternalSemaphoreInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceExternalSemaphoreInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceExternalSemaphoreInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceExternalSemaphoreInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceExternalSemaphoreInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetHandleType returns the value in handleType.
func (p PhysicalDeviceExternalSemaphoreInfo) GetHandleType() ExternalSemaphoreHandleTypeFlags {
	return ExternalSemaphoreHandleTypeFlags(p.ptr.handleType)
}

// SetHandleType sets the value in handleType.
func (p PhysicalDeviceExternalSemaphoreInfo) SetHandleType(value ExternalSemaphoreHandleTypeFlags) {
	p.ptr.handleType = (C.VkExternalSemaphoreHandleTypeFlagBits)(value)
}

// PhysicalDeviceFeatures wraps VkPhysicalDeviceFeatures.
type PhysicalDeviceFeatures struct {
	ptr *C.VkPhysicalDeviceFeatures
}

// PhysicalDeviceFeaturesNil is a null pointer.
var PhysicalDeviceFeaturesNil PhysicalDeviceFeatures

// PhysicalDeviceFeaturesSizeOf is the byte size of VkPhysicalDeviceFeatures.
const PhysicalDeviceFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceFeatures)

// PhysicalDeviceFeaturesFromPtr converts a raw pointer to a PhysicalDeviceFeatures.
func PhysicalDeviceFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceFeatures {
	return PhysicalDeviceFeatures{ptr: (*C.VkPhysicalDeviceFeatures)(ptr)}
}

// PhysicalDeviceFeaturesAlloc allocates a continuous block of VkPhysicalDeviceFeatures.
func PhysicalDeviceFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceFeatures {
	ptr := alloc.Allocate(PhysicalDeviceFeaturesSizeOf * count)
	return PhysicalDeviceFeatures{ptr: (*C.VkPhysicalDeviceFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceFeatures) Offset(offset int) PhysicalDeviceFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceFeaturesSizeOf)
	return PhysicalDeviceFeatures{ptr: (*C.VkPhysicalDeviceFeatures)(ptr)}
}

// GetRobustBufferAccess returns the value in robustBufferAccess.
func (p PhysicalDeviceFeatures) GetRobustBufferAccess() bool {
	return p.ptr.robustBufferAccess != 0
}

// SetRobustBufferAccess sets the value in robustBufferAccess.
func (p PhysicalDeviceFeatures) SetRobustBufferAccess(value bool) {
	if value {
		p.ptr.robustBufferAccess = C.VkBool32(1)
	} else {
		p.ptr.robustBufferAccess = C.VkBool32(0)
	}
}

// GetFullDrawIndexUint32 returns the value in fullDrawIndexUint32.
func (p PhysicalDeviceFeatures) GetFullDrawIndexUint32() bool {
	return p.ptr.fullDrawIndexUint32 != 0
}

// SetFullDrawIndexUint32 sets the value in fullDrawIndexUint32.
func (p PhysicalDeviceFeatures) SetFullDrawIndexUint32(value bool) {
	if value {
		p.ptr.fullDrawIndexUint32 = C.VkBool32(1)
	} else {
		p.ptr.fullDrawIndexUint32 = C.VkBool32(0)
	}
}

// GetImageCubeArray returns the value in imageCubeArray.
func (p PhysicalDeviceFeatures) GetImageCubeArray() bool {
	return p.ptr.imageCubeArray != 0
}

// SetImageCubeArray sets the value in imageCubeArray.
func (p PhysicalDeviceFeatures) SetImageCubeArray(value bool) {
	if value {
		p.ptr.imageCubeArray = C.VkBool32(1)
	} else {
		p.ptr.imageCubeArray = C.VkBool32(0)
	}
}

// GetIndependentBlend returns the value in independentBlend.
func (p PhysicalDeviceFeatures) GetIndependentBlend() bool {
	return p.ptr.independentBlend != 0
}

// SetIndependentBlend sets the value in independentBlend.
func (p PhysicalDeviceFeatures) SetIndependentBlend(value bool) {
	if value {
		p.ptr.independentBlend = C.VkBool32(1)
	} else {
		p.ptr.independentBlend = C.VkBool32(0)
	}
}

// GetGeometryShader returns the value in geometryShader.
func (p PhysicalDeviceFeatures) GetGeometryShader() bool {
	return p.ptr.geometryShader != 0
}

// SetGeometryShader sets the value in geometryShader.
func (p PhysicalDeviceFeatures) SetGeometryShader(value bool) {
	if value {
		p.ptr.geometryShader = C.VkBool32(1)
	} else {
		p.ptr.geometryShader = C.VkBool32(0)
	}
}

// GetTessellationShader returns the value in tessellationShader.
func (p PhysicalDeviceFeatures) GetTessellationShader() bool {
	return p.ptr.tessellationShader != 0
}

// SetTessellationShader sets the value in tessellationShader.
func (p PhysicalDeviceFeatures) SetTessellationShader(value bool) {
	if value {
		p.ptr.tessellationShader = C.VkBool32(1)
	} else {
		p.ptr.tessellationShader = C.VkBool32(0)
	}
}

// GetSampleRateShading returns the value in sampleRateShading.
func (p PhysicalDeviceFeatures) GetSampleRateShading() bool {
	return p.ptr.sampleRateShading != 0
}

// SetSampleRateShading sets the value in sampleRateShading.
func (p PhysicalDeviceFeatures) SetSampleRateShading(value bool) {
	if value {
		p.ptr.sampleRateShading = C.VkBool32(1)
	} else {
		p.ptr.sampleRateShading = C.VkBool32(0)
	}
}

// GetDualSrcBlend returns the value in dualSrcBlend.
func (p PhysicalDeviceFeatures) GetDualSrcBlend() bool {
	return p.ptr.dualSrcBlend != 0
}

// SetDualSrcBlend sets the value in dualSrcBlend.
func (p PhysicalDeviceFeatures) SetDualSrcBlend(value bool) {
	if value {
		p.ptr.dualSrcBlend = C.VkBool32(1)
	} else {
		p.ptr.dualSrcBlend = C.VkBool32(0)
	}
}

// GetLogicOp returns the value in logicOp.
func (p PhysicalDeviceFeatures) GetLogicOp() bool {
	return p.ptr.logicOp != 0
}

// SetLogicOp sets the value in logicOp.
func (p PhysicalDeviceFeatures) SetLogicOp(value bool) {
	if value {
		p.ptr.logicOp = C.VkBool32(1)
	} else {
		p.ptr.logicOp = C.VkBool32(0)
	}
}

// GetMultiDrawIndirect returns the value in multiDrawIndirect.
func (p PhysicalDeviceFeatures) GetMultiDrawIndirect() bool {
	return p.ptr.multiDrawIndirect != 0
}

// SetMultiDrawIndirect sets the value in multiDrawIndirect.
func (p PhysicalDeviceFeatures) SetMultiDrawIndirect(value bool) {
	if value {
		p.ptr.multiDrawIndirect = C.VkBool32(1)
	} else {
		p.ptr.multiDrawIndirect = C.VkBool32(0)
	}
}

// GetDrawIndirectFirstInstance returns the value in drawIndirectFirstInstance.
func (p PhysicalDeviceFeatures) GetDrawIndirectFirstInstance() bool {
	return p.ptr.drawIndirectFirstInstance != 0
}

// SetDrawIndirectFirstInstance sets the value in drawIndirectFirstInstance.
func (p PhysicalDeviceFeatures) SetDrawIndirectFirstInstance(value bool) {
	if value {
		p.ptr.drawIndirectFirstInstance = C.VkBool32(1)
	} else {
		p.ptr.drawIndirectFirstInstance = C.VkBool32(0)
	}
}

// GetDepthClamp returns the value in depthClamp.
func (p PhysicalDeviceFeatures) GetDepthClamp() bool {
	return p.ptr.depthClamp != 0
}

// SetDepthClamp sets the value in depthClamp.
func (p PhysicalDeviceFeatures) SetDepthClamp(value bool) {
	if value {
		p.ptr.depthClamp = C.VkBool32(1)
	} else {
		p.ptr.depthClamp = C.VkBool32(0)
	}
}

// GetDepthBiasClamp returns the value in depthBiasClamp.
func (p PhysicalDeviceFeatures) GetDepthBiasClamp() bool {
	return p.ptr.depthBiasClamp != 0
}

// SetDepthBiasClamp sets the value in depthBiasClamp.
func (p PhysicalDeviceFeatures) SetDepthBiasClamp(value bool) {
	if value {
		p.ptr.depthBiasClamp = C.VkBool32(1)
	} else {
		p.ptr.depthBiasClamp = C.VkBool32(0)
	}
}

// GetFillModeNonSolid returns the value in fillModeNonSolid.
func (p PhysicalDeviceFeatures) GetFillModeNonSolid() bool {
	return p.ptr.fillModeNonSolid != 0
}

// SetFillModeNonSolid sets the value in fillModeNonSolid.
func (p PhysicalDeviceFeatures) SetFillModeNonSolid(value bool) {
	if value {
		p.ptr.fillModeNonSolid = C.VkBool32(1)
	} else {
		p.ptr.fillModeNonSolid = C.VkBool32(0)
	}
}

// GetDepthBounds returns the value in depthBounds.
func (p PhysicalDeviceFeatures) GetDepthBounds() bool {
	return p.ptr.depthBounds != 0
}

// SetDepthBounds sets the value in depthBounds.
func (p PhysicalDeviceFeatures) SetDepthBounds(value bool) {
	if value {
		p.ptr.depthBounds = C.VkBool32(1)
	} else {
		p.ptr.depthBounds = C.VkBool32(0)
	}
}

// GetWideLines returns the value in wideLines.
func (p PhysicalDeviceFeatures) GetWideLines() bool {
	return p.ptr.wideLines != 0
}

// SetWideLines sets the value in wideLines.
func (p PhysicalDeviceFeatures) SetWideLines(value bool) {
	if value {
		p.ptr.wideLines = C.VkBool32(1)
	} else {
		p.ptr.wideLines = C.VkBool32(0)
	}
}

// GetLargePoints returns the value in largePoints.
func (p PhysicalDeviceFeatures) GetLargePoints() bool {
	return p.ptr.largePoints != 0
}

// SetLargePoints sets the value in largePoints.
func (p PhysicalDeviceFeatures) SetLargePoints(value bool) {
	if value {
		p.ptr.largePoints = C.VkBool32(1)
	} else {
		p.ptr.largePoints = C.VkBool32(0)
	}
}

// GetAlphaToOne returns the value in alphaToOne.
func (p PhysicalDeviceFeatures) GetAlphaToOne() bool {
	return p.ptr.alphaToOne != 0
}

// SetAlphaToOne sets the value in alphaToOne.
func (p PhysicalDeviceFeatures) SetAlphaToOne(value bool) {
	if value {
		p.ptr.alphaToOne = C.VkBool32(1)
	} else {
		p.ptr.alphaToOne = C.VkBool32(0)
	}
}

// GetMultiViewport returns the value in multiViewport.
func (p PhysicalDeviceFeatures) GetMultiViewport() bool {
	return p.ptr.multiViewport != 0
}

// SetMultiViewport sets the value in multiViewport.
func (p PhysicalDeviceFeatures) SetMultiViewport(value bool) {
	if value {
		p.ptr.multiViewport = C.VkBool32(1)
	} else {
		p.ptr.multiViewport = C.VkBool32(0)
	}
}

// GetSamplerAnisotropy returns the value in samplerAnisotropy.
func (p PhysicalDeviceFeatures) GetSamplerAnisotropy() bool {
	return p.ptr.samplerAnisotropy != 0
}

// SetSamplerAnisotropy sets the value in samplerAnisotropy.
func (p PhysicalDeviceFeatures) SetSamplerAnisotropy(value bool) {
	if value {
		p.ptr.samplerAnisotropy = C.VkBool32(1)
	} else {
		p.ptr.samplerAnisotropy = C.VkBool32(0)
	}
}

// GetTextureCompressionETC2 returns the value in textureCompressionETC2.
func (p PhysicalDeviceFeatures) GetTextureCompressionETC2() bool {
	return p.ptr.textureCompressionETC2 != 0
}

// SetTextureCompressionETC2 sets the value in textureCompressionETC2.
func (p PhysicalDeviceFeatures) SetTextureCompressionETC2(value bool) {
	if value {
		p.ptr.textureCompressionETC2 = C.VkBool32(1)
	} else {
		p.ptr.textureCompressionETC2 = C.VkBool32(0)
	}
}

// GetTextureCompressionASTC_LDR returns the value in textureCompressionASTC_LDR.
func (p PhysicalDeviceFeatures) GetTextureCompressionASTC_LDR() bool {
	return p.ptr.textureCompressionASTC_LDR != 0
}

// SetTextureCompressionASTC_LDR sets the value in textureCompressionASTC_LDR.
func (p PhysicalDeviceFeatures) SetTextureCompressionASTC_LDR(value bool) {
	if value {
		p.ptr.textureCompressionASTC_LDR = C.VkBool32(1)
	} else {
		p.ptr.textureCompressionASTC_LDR = C.VkBool32(0)
	}
}

// GetTextureCompressionBC returns the value in textureCompressionBC.
func (p PhysicalDeviceFeatures) GetTextureCompressionBC() bool {
	return p.ptr.textureCompressionBC != 0
}

// SetTextureCompressionBC sets the value in textureCompressionBC.
func (p PhysicalDeviceFeatures) SetTextureCompressionBC(value bool) {
	if value {
		p.ptr.textureCompressionBC = C.VkBool32(1)
	} else {
		p.ptr.textureCompressionBC = C.VkBool32(0)
	}
}

// GetOcclusionQueryPrecise returns the value in occlusionQueryPrecise.
func (p PhysicalDeviceFeatures) GetOcclusionQueryPrecise() bool {
	return p.ptr.occlusionQueryPrecise != 0
}

// SetOcclusionQueryPrecise sets the value in occlusionQueryPrecise.
func (p PhysicalDeviceFeatures) SetOcclusionQueryPrecise(value bool) {
	if value {
		p.ptr.occlusionQueryPrecise = C.VkBool32(1)
	} else {
		p.ptr.occlusionQueryPrecise = C.VkBool32(0)
	}
}

// GetPipelineStatisticsQuery returns the value in pipelineStatisticsQuery.
func (p PhysicalDeviceFeatures) GetPipelineStatisticsQuery() bool {
	return p.ptr.pipelineStatisticsQuery != 0
}

// SetPipelineStatisticsQuery sets the value in pipelineStatisticsQuery.
func (p PhysicalDeviceFeatures) SetPipelineStatisticsQuery(value bool) {
	if value {
		p.ptr.pipelineStatisticsQuery = C.VkBool32(1)
	} else {
		p.ptr.pipelineStatisticsQuery = C.VkBool32(0)
	}
}

// GetVertexPipelineStoresAndAtomics returns the value in vertexPipelineStoresAndAtomics.
func (p PhysicalDeviceFeatures) GetVertexPipelineStoresAndAtomics() bool {
	return p.ptr.vertexPipelineStoresAndAtomics != 0
}

// SetVertexPipelineStoresAndAtomics sets the value in vertexPipelineStoresAndAtomics.
func (p PhysicalDeviceFeatures) SetVertexPipelineStoresAndAtomics(value bool) {
	if value {
		p.ptr.vertexPipelineStoresAndAtomics = C.VkBool32(1)
	} else {
		p.ptr.vertexPipelineStoresAndAtomics = C.VkBool32(0)
	}
}

// GetFragmentStoresAndAtomics returns the value in fragmentStoresAndAtomics.
func (p PhysicalDeviceFeatures) GetFragmentStoresAndAtomics() bool {
	return p.ptr.fragmentStoresAndAtomics != 0
}

// SetFragmentStoresAndAtomics sets the value in fragmentStoresAndAtomics.
func (p PhysicalDeviceFeatures) SetFragmentStoresAndAtomics(value bool) {
	if value {
		p.ptr.fragmentStoresAndAtomics = C.VkBool32(1)
	} else {
		p.ptr.fragmentStoresAndAtomics = C.VkBool32(0)
	}
}

// GetShaderTessellationAndGeometryPointSize returns the value in shaderTessellationAndGeometryPointSize.
func (p PhysicalDeviceFeatures) GetShaderTessellationAndGeometryPointSize() bool {
	return p.ptr.shaderTessellationAndGeometryPointSize != 0
}

// SetShaderTessellationAndGeometryPointSize sets the value in shaderTessellationAndGeometryPointSize.
func (p PhysicalDeviceFeatures) SetShaderTessellationAndGeometryPointSize(value bool) {
	if value {
		p.ptr.shaderTessellationAndGeometryPointSize = C.VkBool32(1)
	} else {
		p.ptr.shaderTessellationAndGeometryPointSize = C.VkBool32(0)
	}
}

// GetShaderImageGatherExtended returns the value in shaderImageGatherExtended.
func (p PhysicalDeviceFeatures) GetShaderImageGatherExtended() bool {
	return p.ptr.shaderImageGatherExtended != 0
}

// SetShaderImageGatherExtended sets the value in shaderImageGatherExtended.
func (p PhysicalDeviceFeatures) SetShaderImageGatherExtended(value bool) {
	if value {
		p.ptr.shaderImageGatherExtended = C.VkBool32(1)
	} else {
		p.ptr.shaderImageGatherExtended = C.VkBool32(0)
	}
}

// GetShaderStorageImageExtendedFormats returns the value in shaderStorageImageExtendedFormats.
func (p PhysicalDeviceFeatures) GetShaderStorageImageExtendedFormats() bool {
	return p.ptr.shaderStorageImageExtendedFormats != 0
}

// SetShaderStorageImageExtendedFormats sets the value in shaderStorageImageExtendedFormats.
func (p PhysicalDeviceFeatures) SetShaderStorageImageExtendedFormats(value bool) {
	if value {
		p.ptr.shaderStorageImageExtendedFormats = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageImageExtendedFormats = C.VkBool32(0)
	}
}

// GetShaderStorageImageMultisample returns the value in shaderStorageImageMultisample.
func (p PhysicalDeviceFeatures) GetShaderStorageImageMultisample() bool {
	return p.ptr.shaderStorageImageMultisample != 0
}

// SetShaderStorageImageMultisample sets the value in shaderStorageImageMultisample.
func (p PhysicalDeviceFeatures) SetShaderStorageImageMultisample(value bool) {
	if value {
		p.ptr.shaderStorageImageMultisample = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageImageMultisample = C.VkBool32(0)
	}
}

// GetShaderStorageImageReadWithoutFormat returns the value in shaderStorageImageReadWithoutFormat.
func (p PhysicalDeviceFeatures) GetShaderStorageImageReadWithoutFormat() bool {
	return p.ptr.shaderStorageImageReadWithoutFormat != 0
}

// SetShaderStorageImageReadWithoutFormat sets the value in shaderStorageImageReadWithoutFormat.
func (p PhysicalDeviceFeatures) SetShaderStorageImageReadWithoutFormat(value bool) {
	if value {
		p.ptr.shaderStorageImageReadWithoutFormat = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageImageReadWithoutFormat = C.VkBool32(0)
	}
}

// GetShaderStorageImageWriteWithoutFormat returns the value in shaderStorageImageWriteWithoutFormat.
func (p PhysicalDeviceFeatures) GetShaderStorageImageWriteWithoutFormat() bool {
	return p.ptr.shaderStorageImageWriteWithoutFormat != 0
}

// SetShaderStorageImageWriteWithoutFormat sets the value in shaderStorageImageWriteWithoutFormat.
func (p PhysicalDeviceFeatures) SetShaderStorageImageWriteWithoutFormat(value bool) {
	if value {
		p.ptr.shaderStorageImageWriteWithoutFormat = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageImageWriteWithoutFormat = C.VkBool32(0)
	}
}

// GetShaderUniformBufferArrayDynamicIndexing returns the value in shaderUniformBufferArrayDynamicIndexing.
func (p PhysicalDeviceFeatures) GetShaderUniformBufferArrayDynamicIndexing() bool {
	return p.ptr.shaderUniformBufferArrayDynamicIndexing != 0
}

// SetShaderUniformBufferArrayDynamicIndexing sets the value in shaderUniformBufferArrayDynamicIndexing.
func (p PhysicalDeviceFeatures) SetShaderUniformBufferArrayDynamicIndexing(value bool) {
	if value {
		p.ptr.shaderUniformBufferArrayDynamicIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderUniformBufferArrayDynamicIndexing = C.VkBool32(0)
	}
}

// GetShaderSampledImageArrayDynamicIndexing returns the value in shaderSampledImageArrayDynamicIndexing.
func (p PhysicalDeviceFeatures) GetShaderSampledImageArrayDynamicIndexing() bool {
	return p.ptr.shaderSampledImageArrayDynamicIndexing != 0
}

// SetShaderSampledImageArrayDynamicIndexing sets the value in shaderSampledImageArrayDynamicIndexing.
func (p PhysicalDeviceFeatures) SetShaderSampledImageArrayDynamicIndexing(value bool) {
	if value {
		p.ptr.shaderSampledImageArrayDynamicIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderSampledImageArrayDynamicIndexing = C.VkBool32(0)
	}
}

// GetShaderStorageBufferArrayDynamicIndexing returns the value in shaderStorageBufferArrayDynamicIndexing.
func (p PhysicalDeviceFeatures) GetShaderStorageBufferArrayDynamicIndexing() bool {
	return p.ptr.shaderStorageBufferArrayDynamicIndexing != 0
}

// SetShaderStorageBufferArrayDynamicIndexing sets the value in shaderStorageBufferArrayDynamicIndexing.
func (p PhysicalDeviceFeatures) SetShaderStorageBufferArrayDynamicIndexing(value bool) {
	if value {
		p.ptr.shaderStorageBufferArrayDynamicIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageBufferArrayDynamicIndexing = C.VkBool32(0)
	}
}

// GetShaderStorageImageArrayDynamicIndexing returns the value in shaderStorageImageArrayDynamicIndexing.
func (p PhysicalDeviceFeatures) GetShaderStorageImageArrayDynamicIndexing() bool {
	return p.ptr.shaderStorageImageArrayDynamicIndexing != 0
}

// SetShaderStorageImageArrayDynamicIndexing sets the value in shaderStorageImageArrayDynamicIndexing.
func (p PhysicalDeviceFeatures) SetShaderStorageImageArrayDynamicIndexing(value bool) {
	if value {
		p.ptr.shaderStorageImageArrayDynamicIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageImageArrayDynamicIndexing = C.VkBool32(0)
	}
}

// GetShaderClipDistance returns the value in shaderClipDistance.
func (p PhysicalDeviceFeatures) GetShaderClipDistance() bool {
	return p.ptr.shaderClipDistance != 0
}

// SetShaderClipDistance sets the value in shaderClipDistance.
func (p PhysicalDeviceFeatures) SetShaderClipDistance(value bool) {
	if value {
		p.ptr.shaderClipDistance = C.VkBool32(1)
	} else {
		p.ptr.shaderClipDistance = C.VkBool32(0)
	}
}

// GetShaderCullDistance returns the value in shaderCullDistance.
func (p PhysicalDeviceFeatures) GetShaderCullDistance() bool {
	return p.ptr.shaderCullDistance != 0
}

// SetShaderCullDistance sets the value in shaderCullDistance.
func (p PhysicalDeviceFeatures) SetShaderCullDistance(value bool) {
	if value {
		p.ptr.shaderCullDistance = C.VkBool32(1)
	} else {
		p.ptr.shaderCullDistance = C.VkBool32(0)
	}
}

// GetShaderFloat64 returns the value in shaderFloat64.
func (p PhysicalDeviceFeatures) GetShaderFloat64() bool {
	return p.ptr.shaderFloat64 != 0
}

// SetShaderFloat64 sets the value in shaderFloat64.
func (p PhysicalDeviceFeatures) SetShaderFloat64(value bool) {
	if value {
		p.ptr.shaderFloat64 = C.VkBool32(1)
	} else {
		p.ptr.shaderFloat64 = C.VkBool32(0)
	}
}

// GetShaderInt64 returns the value in shaderInt64.
func (p PhysicalDeviceFeatures) GetShaderInt64() bool {
	return p.ptr.shaderInt64 != 0
}

// SetShaderInt64 sets the value in shaderInt64.
func (p PhysicalDeviceFeatures) SetShaderInt64(value bool) {
	if value {
		p.ptr.shaderInt64 = C.VkBool32(1)
	} else {
		p.ptr.shaderInt64 = C.VkBool32(0)
	}
}

// GetShaderInt16 returns the value in shaderInt16.
func (p PhysicalDeviceFeatures) GetShaderInt16() bool {
	return p.ptr.shaderInt16 != 0
}

// SetShaderInt16 sets the value in shaderInt16.
func (p PhysicalDeviceFeatures) SetShaderInt16(value bool) {
	if value {
		p.ptr.shaderInt16 = C.VkBool32(1)
	} else {
		p.ptr.shaderInt16 = C.VkBool32(0)
	}
}

// GetShaderResourceResidency returns the value in shaderResourceResidency.
func (p PhysicalDeviceFeatures) GetShaderResourceResidency() bool {
	return p.ptr.shaderResourceResidency != 0
}

// SetShaderResourceResidency sets the value in shaderResourceResidency.
func (p PhysicalDeviceFeatures) SetShaderResourceResidency(value bool) {
	if value {
		p.ptr.shaderResourceResidency = C.VkBool32(1)
	} else {
		p.ptr.shaderResourceResidency = C.VkBool32(0)
	}
}

// GetShaderResourceMinLod returns the value in shaderResourceMinLod.
func (p PhysicalDeviceFeatures) GetShaderResourceMinLod() bool {
	return p.ptr.shaderResourceMinLod != 0
}

// SetShaderResourceMinLod sets the value in shaderResourceMinLod.
func (p PhysicalDeviceFeatures) SetShaderResourceMinLod(value bool) {
	if value {
		p.ptr.shaderResourceMinLod = C.VkBool32(1)
	} else {
		p.ptr.shaderResourceMinLod = C.VkBool32(0)
	}
}

// GetSparseBinding returns the value in sparseBinding.
func (p PhysicalDeviceFeatures) GetSparseBinding() bool {
	return p.ptr.sparseBinding != 0
}

// SetSparseBinding sets the value in sparseBinding.
func (p PhysicalDeviceFeatures) SetSparseBinding(value bool) {
	if value {
		p.ptr.sparseBinding = C.VkBool32(1)
	} else {
		p.ptr.sparseBinding = C.VkBool32(0)
	}
}

// GetSparseResidencyBuffer returns the value in sparseResidencyBuffer.
func (p PhysicalDeviceFeatures) GetSparseResidencyBuffer() bool {
	return p.ptr.sparseResidencyBuffer != 0
}

// SetSparseResidencyBuffer sets the value in sparseResidencyBuffer.
func (p PhysicalDeviceFeatures) SetSparseResidencyBuffer(value bool) {
	if value {
		p.ptr.sparseResidencyBuffer = C.VkBool32(1)
	} else {
		p.ptr.sparseResidencyBuffer = C.VkBool32(0)
	}
}

// GetSparseResidencyImage2D returns the value in sparseResidencyImage2D.
func (p PhysicalDeviceFeatures) GetSparseResidencyImage2D() bool {
	return p.ptr.sparseResidencyImage2D != 0
}

// SetSparseResidencyImage2D sets the value in sparseResidencyImage2D.
func (p PhysicalDeviceFeatures) SetSparseResidencyImage2D(value bool) {
	if value {
		p.ptr.sparseResidencyImage2D = C.VkBool32(1)
	} else {
		p.ptr.sparseResidencyImage2D = C.VkBool32(0)
	}
}

// GetSparseResidencyImage3D returns the value in sparseResidencyImage3D.
func (p PhysicalDeviceFeatures) GetSparseResidencyImage3D() bool {
	return p.ptr.sparseResidencyImage3D != 0
}

// SetSparseResidencyImage3D sets the value in sparseResidencyImage3D.
func (p PhysicalDeviceFeatures) SetSparseResidencyImage3D(value bool) {
	if value {
		p.ptr.sparseResidencyImage3D = C.VkBool32(1)
	} else {
		p.ptr.sparseResidencyImage3D = C.VkBool32(0)
	}
}

// GetSparseResidency2Samples returns the value in sparseResidency2Samples.
func (p PhysicalDeviceFeatures) GetSparseResidency2Samples() bool {
	return p.ptr.sparseResidency2Samples != 0
}

// SetSparseResidency2Samples sets the value in sparseResidency2Samples.
func (p PhysicalDeviceFeatures) SetSparseResidency2Samples(value bool) {
	if value {
		p.ptr.sparseResidency2Samples = C.VkBool32(1)
	} else {
		p.ptr.sparseResidency2Samples = C.VkBool32(0)
	}
}

// GetSparseResidency4Samples returns the value in sparseResidency4Samples.
func (p PhysicalDeviceFeatures) GetSparseResidency4Samples() bool {
	return p.ptr.sparseResidency4Samples != 0
}

// SetSparseResidency4Samples sets the value in sparseResidency4Samples.
func (p PhysicalDeviceFeatures) SetSparseResidency4Samples(value bool) {
	if value {
		p.ptr.sparseResidency4Samples = C.VkBool32(1)
	} else {
		p.ptr.sparseResidency4Samples = C.VkBool32(0)
	}
}

// GetSparseResidency8Samples returns the value in sparseResidency8Samples.
func (p PhysicalDeviceFeatures) GetSparseResidency8Samples() bool {
	return p.ptr.sparseResidency8Samples != 0
}

// SetSparseResidency8Samples sets the value in sparseResidency8Samples.
func (p PhysicalDeviceFeatures) SetSparseResidency8Samples(value bool) {
	if value {
		p.ptr.sparseResidency8Samples = C.VkBool32(1)
	} else {
		p.ptr.sparseResidency8Samples = C.VkBool32(0)
	}
}

// GetSparseResidency16Samples returns the value in sparseResidency16Samples.
func (p PhysicalDeviceFeatures) GetSparseResidency16Samples() bool {
	return p.ptr.sparseResidency16Samples != 0
}

// SetSparseResidency16Samples sets the value in sparseResidency16Samples.
func (p PhysicalDeviceFeatures) SetSparseResidency16Samples(value bool) {
	if value {
		p.ptr.sparseResidency16Samples = C.VkBool32(1)
	} else {
		p.ptr.sparseResidency16Samples = C.VkBool32(0)
	}
}

// GetSparseResidencyAliased returns the value in sparseResidencyAliased.
func (p PhysicalDeviceFeatures) GetSparseResidencyAliased() bool {
	return p.ptr.sparseResidencyAliased != 0
}

// SetSparseResidencyAliased sets the value in sparseResidencyAliased.
func (p PhysicalDeviceFeatures) SetSparseResidencyAliased(value bool) {
	if value {
		p.ptr.sparseResidencyAliased = C.VkBool32(1)
	} else {
		p.ptr.sparseResidencyAliased = C.VkBool32(0)
	}
}

// GetVariableMultisampleRate returns the value in variableMultisampleRate.
func (p PhysicalDeviceFeatures) GetVariableMultisampleRate() bool {
	return p.ptr.variableMultisampleRate != 0
}

// SetVariableMultisampleRate sets the value in variableMultisampleRate.
func (p PhysicalDeviceFeatures) SetVariableMultisampleRate(value bool) {
	if value {
		p.ptr.variableMultisampleRate = C.VkBool32(1)
	} else {
		p.ptr.variableMultisampleRate = C.VkBool32(0)
	}
}

// GetInheritedQueries returns the value in inheritedQueries.
func (p PhysicalDeviceFeatures) GetInheritedQueries() bool {
	return p.ptr.inheritedQueries != 0
}

// SetInheritedQueries sets the value in inheritedQueries.
func (p PhysicalDeviceFeatures) SetInheritedQueries(value bool) {
	if value {
		p.ptr.inheritedQueries = C.VkBool32(1)
	} else {
		p.ptr.inheritedQueries = C.VkBool32(0)
	}
}

// PhysicalDeviceFeatures2 wraps VkPhysicalDeviceFeatures2.
type PhysicalDeviceFeatures2 struct {
	ptr *C.VkPhysicalDeviceFeatures2
}

// PhysicalDeviceFeatures2Nil is a null pointer.
var PhysicalDeviceFeatures2Nil PhysicalDeviceFeatures2

// PhysicalDeviceFeatures2SizeOf is the byte size of VkPhysicalDeviceFeatures2.
const PhysicalDeviceFeatures2SizeOf = int(C.sizeof_VkPhysicalDeviceFeatures2)

// PhysicalDeviceFeatures2FromPtr converts a raw pointer to a PhysicalDeviceFeatures2.
func PhysicalDeviceFeatures2FromPtr(ptr unsafe.Pointer) PhysicalDeviceFeatures2 {
	return PhysicalDeviceFeatures2{ptr: (*C.VkPhysicalDeviceFeatures2)(ptr)}
}

// PhysicalDeviceFeatures2Alloc allocates a continuous block of VkPhysicalDeviceFeatures2.
func PhysicalDeviceFeatures2Alloc(alloc ffi.Allocator, count int) PhysicalDeviceFeatures2 {
	ptr := alloc.Allocate(PhysicalDeviceFeatures2SizeOf * count)
	return PhysicalDeviceFeatures2{ptr: (*C.VkPhysicalDeviceFeatures2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceFeatures2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceFeatures2) Offset(offset int) PhysicalDeviceFeatures2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceFeatures2SizeOf)
	return PhysicalDeviceFeatures2{ptr: (*C.VkPhysicalDeviceFeatures2)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceFeatures2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceFeatures2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceFeatures2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceFeatures2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefFeatures returns pointer to the features field.
func (p PhysicalDeviceFeatures2) RefFeatures() PhysicalDeviceFeatures {
	return PhysicalDeviceFeatures{ptr: (*C.VkPhysicalDeviceFeatures)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkPhysicalDeviceFeatures2_features)))}
}

// PhysicalDeviceFloatControlsProperties wraps VkPhysicalDeviceFloatControlsProperties.
type PhysicalDeviceFloatControlsProperties struct {
	ptr *C.VkPhysicalDeviceFloatControlsProperties
}

// PhysicalDeviceFloatControlsPropertiesNil is a null pointer.
var PhysicalDeviceFloatControlsPropertiesNil PhysicalDeviceFloatControlsProperties

// PhysicalDeviceFloatControlsPropertiesSizeOf is the byte size of VkPhysicalDeviceFloatControlsProperties.
const PhysicalDeviceFloatControlsPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceFloatControlsProperties)

// PhysicalDeviceFloatControlsPropertiesFromPtr converts a raw pointer to a PhysicalDeviceFloatControlsProperties.
func PhysicalDeviceFloatControlsPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceFloatControlsProperties {
	return PhysicalDeviceFloatControlsProperties{ptr: (*C.VkPhysicalDeviceFloatControlsProperties)(ptr)}
}

// PhysicalDeviceFloatControlsPropertiesAlloc allocates a continuous block of VkPhysicalDeviceFloatControlsProperties.
func PhysicalDeviceFloatControlsPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceFloatControlsProperties {
	ptr := alloc.Allocate(PhysicalDeviceFloatControlsPropertiesSizeOf * count)
	return PhysicalDeviceFloatControlsProperties{ptr: (*C.VkPhysicalDeviceFloatControlsProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceFloatControlsProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceFloatControlsProperties) Offset(offset int) PhysicalDeviceFloatControlsProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceFloatControlsPropertiesSizeOf)
	return PhysicalDeviceFloatControlsProperties{ptr: (*C.VkPhysicalDeviceFloatControlsProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceFloatControlsProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceFloatControlsProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceFloatControlsProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceFloatControlsProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDenormBehaviorIndependence returns the value in denormBehaviorIndependence.
func (p PhysicalDeviceFloatControlsProperties) GetDenormBehaviorIndependence() ShaderFloatControlsIndependence {
	return ShaderFloatControlsIndependence(p.ptr.denormBehaviorIndependence)
}

// SetDenormBehaviorIndependence sets the value in denormBehaviorIndependence.
func (p PhysicalDeviceFloatControlsProperties) SetDenormBehaviorIndependence(value ShaderFloatControlsIndependence) {
	p.ptr.denormBehaviorIndependence = (C.VkShaderFloatControlsIndependence)(value)
}

// GetRoundingModeIndependence returns the value in roundingModeIndependence.
func (p PhysicalDeviceFloatControlsProperties) GetRoundingModeIndependence() ShaderFloatControlsIndependence {
	return ShaderFloatControlsIndependence(p.ptr.roundingModeIndependence)
}

// SetRoundingModeIndependence sets the value in roundingModeIndependence.
func (p PhysicalDeviceFloatControlsProperties) SetRoundingModeIndependence(value ShaderFloatControlsIndependence) {
	p.ptr.roundingModeIndependence = (C.VkShaderFloatControlsIndependence)(value)
}

// GetShaderSignedZeroInfNanPreserveFloat16 returns the value in shaderSignedZeroInfNanPreserveFloat16.
func (p PhysicalDeviceFloatControlsProperties) GetShaderSignedZeroInfNanPreserveFloat16() bool {
	return p.ptr.shaderSignedZeroInfNanPreserveFloat16 != 0
}

// SetShaderSignedZeroInfNanPreserveFloat16 sets the value in shaderSignedZeroInfNanPreserveFloat16.
func (p PhysicalDeviceFloatControlsProperties) SetShaderSignedZeroInfNanPreserveFloat16(value bool) {
	if value {
		p.ptr.shaderSignedZeroInfNanPreserveFloat16 = C.VkBool32(1)
	} else {
		p.ptr.shaderSignedZeroInfNanPreserveFloat16 = C.VkBool32(0)
	}
}

// GetShaderSignedZeroInfNanPreserveFloat32 returns the value in shaderSignedZeroInfNanPreserveFloat32.
func (p PhysicalDeviceFloatControlsProperties) GetShaderSignedZeroInfNanPreserveFloat32() bool {
	return p.ptr.shaderSignedZeroInfNanPreserveFloat32 != 0
}

// SetShaderSignedZeroInfNanPreserveFloat32 sets the value in shaderSignedZeroInfNanPreserveFloat32.
func (p PhysicalDeviceFloatControlsProperties) SetShaderSignedZeroInfNanPreserveFloat32(value bool) {
	if value {
		p.ptr.shaderSignedZeroInfNanPreserveFloat32 = C.VkBool32(1)
	} else {
		p.ptr.shaderSignedZeroInfNanPreserveFloat32 = C.VkBool32(0)
	}
}

// GetShaderSignedZeroInfNanPreserveFloat64 returns the value in shaderSignedZeroInfNanPreserveFloat64.
func (p PhysicalDeviceFloatControlsProperties) GetShaderSignedZeroInfNanPreserveFloat64() bool {
	return p.ptr.shaderSignedZeroInfNanPreserveFloat64 != 0
}

// SetShaderSignedZeroInfNanPreserveFloat64 sets the value in shaderSignedZeroInfNanPreserveFloat64.
func (p PhysicalDeviceFloatControlsProperties) SetShaderSignedZeroInfNanPreserveFloat64(value bool) {
	if value {
		p.ptr.shaderSignedZeroInfNanPreserveFloat64 = C.VkBool32(1)
	} else {
		p.ptr.shaderSignedZeroInfNanPreserveFloat64 = C.VkBool32(0)
	}
}

// GetShaderDenormPreserveFloat16 returns the value in shaderDenormPreserveFloat16.
func (p PhysicalDeviceFloatControlsProperties) GetShaderDenormPreserveFloat16() bool {
	return p.ptr.shaderDenormPreserveFloat16 != 0
}

// SetShaderDenormPreserveFloat16 sets the value in shaderDenormPreserveFloat16.
func (p PhysicalDeviceFloatControlsProperties) SetShaderDenormPreserveFloat16(value bool) {
	if value {
		p.ptr.shaderDenormPreserveFloat16 = C.VkBool32(1)
	} else {
		p.ptr.shaderDenormPreserveFloat16 = C.VkBool32(0)
	}
}

// GetShaderDenormPreserveFloat32 returns the value in shaderDenormPreserveFloat32.
func (p PhysicalDeviceFloatControlsProperties) GetShaderDenormPreserveFloat32() bool {
	return p.ptr.shaderDenormPreserveFloat32 != 0
}

// SetShaderDenormPreserveFloat32 sets the value in shaderDenormPreserveFloat32.
func (p PhysicalDeviceFloatControlsProperties) SetShaderDenormPreserveFloat32(value bool) {
	if value {
		p.ptr.shaderDenormPreserveFloat32 = C.VkBool32(1)
	} else {
		p.ptr.shaderDenormPreserveFloat32 = C.VkBool32(0)
	}
}

// GetShaderDenormPreserveFloat64 returns the value in shaderDenormPreserveFloat64.
func (p PhysicalDeviceFloatControlsProperties) GetShaderDenormPreserveFloat64() bool {
	return p.ptr.shaderDenormPreserveFloat64 != 0
}

// SetShaderDenormPreserveFloat64 sets the value in shaderDenormPreserveFloat64.
func (p PhysicalDeviceFloatControlsProperties) SetShaderDenormPreserveFloat64(value bool) {
	if value {
		p.ptr.shaderDenormPreserveFloat64 = C.VkBool32(1)
	} else {
		p.ptr.shaderDenormPreserveFloat64 = C.VkBool32(0)
	}
}

// GetShaderDenormFlushToZeroFloat16 returns the value in shaderDenormFlushToZeroFloat16.
func (p PhysicalDeviceFloatControlsProperties) GetShaderDenormFlushToZeroFloat16() bool {
	return p.ptr.shaderDenormFlushToZeroFloat16 != 0
}

// SetShaderDenormFlushToZeroFloat16 sets the value in shaderDenormFlushToZeroFloat16.
func (p PhysicalDeviceFloatControlsProperties) SetShaderDenormFlushToZeroFloat16(value bool) {
	if value {
		p.ptr.shaderDenormFlushToZeroFloat16 = C.VkBool32(1)
	} else {
		p.ptr.shaderDenormFlushToZeroFloat16 = C.VkBool32(0)
	}
}

// GetShaderDenormFlushToZeroFloat32 returns the value in shaderDenormFlushToZeroFloat32.
func (p PhysicalDeviceFloatControlsProperties) GetShaderDenormFlushToZeroFloat32() bool {
	return p.ptr.shaderDenormFlushToZeroFloat32 != 0
}

// SetShaderDenormFlushToZeroFloat32 sets the value in shaderDenormFlushToZeroFloat32.
func (p PhysicalDeviceFloatControlsProperties) SetShaderDenormFlushToZeroFloat32(value bool) {
	if value {
		p.ptr.shaderDenormFlushToZeroFloat32 = C.VkBool32(1)
	} else {
		p.ptr.shaderDenormFlushToZeroFloat32 = C.VkBool32(0)
	}
}

// GetShaderDenormFlushToZeroFloat64 returns the value in shaderDenormFlushToZeroFloat64.
func (p PhysicalDeviceFloatControlsProperties) GetShaderDenormFlushToZeroFloat64() bool {
	return p.ptr.shaderDenormFlushToZeroFloat64 != 0
}

// SetShaderDenormFlushToZeroFloat64 sets the value in shaderDenormFlushToZeroFloat64.
func (p PhysicalDeviceFloatControlsProperties) SetShaderDenormFlushToZeroFloat64(value bool) {
	if value {
		p.ptr.shaderDenormFlushToZeroFloat64 = C.VkBool32(1)
	} else {
		p.ptr.shaderDenormFlushToZeroFloat64 = C.VkBool32(0)
	}
}

// GetShaderRoundingModeRTEFloat16 returns the value in shaderRoundingModeRTEFloat16.
func (p PhysicalDeviceFloatControlsProperties) GetShaderRoundingModeRTEFloat16() bool {
	return p.ptr.shaderRoundingModeRTEFloat16 != 0
}

// SetShaderRoundingModeRTEFloat16 sets the value in shaderRoundingModeRTEFloat16.
func (p PhysicalDeviceFloatControlsProperties) SetShaderRoundingModeRTEFloat16(value bool) {
	if value {
		p.ptr.shaderRoundingModeRTEFloat16 = C.VkBool32(1)
	} else {
		p.ptr.shaderRoundingModeRTEFloat16 = C.VkBool32(0)
	}
}

// GetShaderRoundingModeRTEFloat32 returns the value in shaderRoundingModeRTEFloat32.
func (p PhysicalDeviceFloatControlsProperties) GetShaderRoundingModeRTEFloat32() bool {
	return p.ptr.shaderRoundingModeRTEFloat32 != 0
}

// SetShaderRoundingModeRTEFloat32 sets the value in shaderRoundingModeRTEFloat32.
func (p PhysicalDeviceFloatControlsProperties) SetShaderRoundingModeRTEFloat32(value bool) {
	if value {
		p.ptr.shaderRoundingModeRTEFloat32 = C.VkBool32(1)
	} else {
		p.ptr.shaderRoundingModeRTEFloat32 = C.VkBool32(0)
	}
}

// GetShaderRoundingModeRTEFloat64 returns the value in shaderRoundingModeRTEFloat64.
func (p PhysicalDeviceFloatControlsProperties) GetShaderRoundingModeRTEFloat64() bool {
	return p.ptr.shaderRoundingModeRTEFloat64 != 0
}

// SetShaderRoundingModeRTEFloat64 sets the value in shaderRoundingModeRTEFloat64.
func (p PhysicalDeviceFloatControlsProperties) SetShaderRoundingModeRTEFloat64(value bool) {
	if value {
		p.ptr.shaderRoundingModeRTEFloat64 = C.VkBool32(1)
	} else {
		p.ptr.shaderRoundingModeRTEFloat64 = C.VkBool32(0)
	}
}

// GetShaderRoundingModeRTZFloat16 returns the value in shaderRoundingModeRTZFloat16.
func (p PhysicalDeviceFloatControlsProperties) GetShaderRoundingModeRTZFloat16() bool {
	return p.ptr.shaderRoundingModeRTZFloat16 != 0
}

// SetShaderRoundingModeRTZFloat16 sets the value in shaderRoundingModeRTZFloat16.
func (p PhysicalDeviceFloatControlsProperties) SetShaderRoundingModeRTZFloat16(value bool) {
	if value {
		p.ptr.shaderRoundingModeRTZFloat16 = C.VkBool32(1)
	} else {
		p.ptr.shaderRoundingModeRTZFloat16 = C.VkBool32(0)
	}
}

// GetShaderRoundingModeRTZFloat32 returns the value in shaderRoundingModeRTZFloat32.
func (p PhysicalDeviceFloatControlsProperties) GetShaderRoundingModeRTZFloat32() bool {
	return p.ptr.shaderRoundingModeRTZFloat32 != 0
}

// SetShaderRoundingModeRTZFloat32 sets the value in shaderRoundingModeRTZFloat32.
func (p PhysicalDeviceFloatControlsProperties) SetShaderRoundingModeRTZFloat32(value bool) {
	if value {
		p.ptr.shaderRoundingModeRTZFloat32 = C.VkBool32(1)
	} else {
		p.ptr.shaderRoundingModeRTZFloat32 = C.VkBool32(0)
	}
}

// GetShaderRoundingModeRTZFloat64 returns the value in shaderRoundingModeRTZFloat64.
func (p PhysicalDeviceFloatControlsProperties) GetShaderRoundingModeRTZFloat64() bool {
	return p.ptr.shaderRoundingModeRTZFloat64 != 0
}

// SetShaderRoundingModeRTZFloat64 sets the value in shaderRoundingModeRTZFloat64.
func (p PhysicalDeviceFloatControlsProperties) SetShaderRoundingModeRTZFloat64(value bool) {
	if value {
		p.ptr.shaderRoundingModeRTZFloat64 = C.VkBool32(1)
	} else {
		p.ptr.shaderRoundingModeRTZFloat64 = C.VkBool32(0)
	}
}

// PhysicalDeviceGlobalPriorityQueryFeatures wraps VkPhysicalDeviceGlobalPriorityQueryFeatures.
type PhysicalDeviceGlobalPriorityQueryFeatures struct {
	ptr *C.VkPhysicalDeviceGlobalPriorityQueryFeatures
}

// PhysicalDeviceGlobalPriorityQueryFeaturesNil is a null pointer.
var PhysicalDeviceGlobalPriorityQueryFeaturesNil PhysicalDeviceGlobalPriorityQueryFeatures

// PhysicalDeviceGlobalPriorityQueryFeaturesSizeOf is the byte size of VkPhysicalDeviceGlobalPriorityQueryFeatures.
const PhysicalDeviceGlobalPriorityQueryFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceGlobalPriorityQueryFeatures)

// PhysicalDeviceGlobalPriorityQueryFeaturesFromPtr converts a raw pointer to a PhysicalDeviceGlobalPriorityQueryFeatures.
func PhysicalDeviceGlobalPriorityQueryFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceGlobalPriorityQueryFeatures {
	return PhysicalDeviceGlobalPriorityQueryFeatures{ptr: (*C.VkPhysicalDeviceGlobalPriorityQueryFeatures)(ptr)}
}

// PhysicalDeviceGlobalPriorityQueryFeaturesAlloc allocates a continuous block of VkPhysicalDeviceGlobalPriorityQueryFeatures.
func PhysicalDeviceGlobalPriorityQueryFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceGlobalPriorityQueryFeatures {
	ptr := alloc.Allocate(PhysicalDeviceGlobalPriorityQueryFeaturesSizeOf * count)
	return PhysicalDeviceGlobalPriorityQueryFeatures{ptr: (*C.VkPhysicalDeviceGlobalPriorityQueryFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceGlobalPriorityQueryFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceGlobalPriorityQueryFeatures) Offset(offset int) PhysicalDeviceGlobalPriorityQueryFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceGlobalPriorityQueryFeaturesSizeOf)
	return PhysicalDeviceGlobalPriorityQueryFeatures{ptr: (*C.VkPhysicalDeviceGlobalPriorityQueryFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceGlobalPriorityQueryFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceGlobalPriorityQueryFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceGlobalPriorityQueryFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceGlobalPriorityQueryFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetGlobalPriorityQuery returns the value in globalPriorityQuery.
func (p PhysicalDeviceGlobalPriorityQueryFeatures) GetGlobalPriorityQuery() bool {
	return p.ptr.globalPriorityQuery != 0
}

// SetGlobalPriorityQuery sets the value in globalPriorityQuery.
func (p PhysicalDeviceGlobalPriorityQueryFeatures) SetGlobalPriorityQuery(value bool) {
	if value {
		p.ptr.globalPriorityQuery = C.VkBool32(1)
	} else {
		p.ptr.globalPriorityQuery = C.VkBool32(0)
	}
}

// PhysicalDeviceGroupProperties wraps VkPhysicalDeviceGroupProperties.
type PhysicalDeviceGroupProperties struct {
	ptr *C.VkPhysicalDeviceGroupProperties
}

// PhysicalDeviceGroupPropertiesNil is a null pointer.
var PhysicalDeviceGroupPropertiesNil PhysicalDeviceGroupProperties

// PhysicalDeviceGroupPropertiesSizeOf is the byte size of VkPhysicalDeviceGroupProperties.
const PhysicalDeviceGroupPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceGroupProperties)

// PhysicalDeviceGroupPropertiesFromPtr converts a raw pointer to a PhysicalDeviceGroupProperties.
func PhysicalDeviceGroupPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceGroupProperties {
	return PhysicalDeviceGroupProperties{ptr: (*C.VkPhysicalDeviceGroupProperties)(ptr)}
}

// PhysicalDeviceGroupPropertiesAlloc allocates a continuous block of VkPhysicalDeviceGroupProperties.
func PhysicalDeviceGroupPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceGroupProperties {
	ptr := alloc.Allocate(PhysicalDeviceGroupPropertiesSizeOf * count)
	return PhysicalDeviceGroupProperties{ptr: (*C.VkPhysicalDeviceGroupProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceGroupProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceGroupProperties) Offset(offset int) PhysicalDeviceGroupProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceGroupPropertiesSizeOf)
	return PhysicalDeviceGroupProperties{ptr: (*C.VkPhysicalDeviceGroupProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceGroupProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceGroupProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceGroupProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceGroupProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPhysicalDeviceCount returns the value in physicalDeviceCount.
func (p PhysicalDeviceGroupProperties) GetPhysicalDeviceCount() uint32 {
	return uint32(p.ptr.physicalDeviceCount)
}

// SetPhysicalDeviceCount sets the value in physicalDeviceCount.
func (p PhysicalDeviceGroupProperties) SetPhysicalDeviceCount(value uint32) {
	p.ptr.physicalDeviceCount = (C.uint32_t)(value)
}

// PhysicalDeviceGroupProperties.physicalDevices is unsupported: category unsupported.

// GetSubsetAllocation returns the value in subsetAllocation.
func (p PhysicalDeviceGroupProperties) GetSubsetAllocation() bool {
	return p.ptr.subsetAllocation != 0
}

// SetSubsetAllocation sets the value in subsetAllocation.
func (p PhysicalDeviceGroupProperties) SetSubsetAllocation(value bool) {
	if value {
		p.ptr.subsetAllocation = C.VkBool32(1)
	} else {
		p.ptr.subsetAllocation = C.VkBool32(0)
	}
}

// PhysicalDeviceHostImageCopyFeatures wraps VkPhysicalDeviceHostImageCopyFeatures.
type PhysicalDeviceHostImageCopyFeatures struct {
	ptr *C.VkPhysicalDeviceHostImageCopyFeatures
}

// PhysicalDeviceHostImageCopyFeaturesNil is a null pointer.
var PhysicalDeviceHostImageCopyFeaturesNil PhysicalDeviceHostImageCopyFeatures

// PhysicalDeviceHostImageCopyFeaturesSizeOf is the byte size of VkPhysicalDeviceHostImageCopyFeatures.
const PhysicalDeviceHostImageCopyFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceHostImageCopyFeatures)

// PhysicalDeviceHostImageCopyFeaturesFromPtr converts a raw pointer to a PhysicalDeviceHostImageCopyFeatures.
func PhysicalDeviceHostImageCopyFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceHostImageCopyFeatures {
	return PhysicalDeviceHostImageCopyFeatures{ptr: (*C.VkPhysicalDeviceHostImageCopyFeatures)(ptr)}
}

// PhysicalDeviceHostImageCopyFeaturesAlloc allocates a continuous block of VkPhysicalDeviceHostImageCopyFeatures.
func PhysicalDeviceHostImageCopyFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceHostImageCopyFeatures {
	ptr := alloc.Allocate(PhysicalDeviceHostImageCopyFeaturesSizeOf * count)
	return PhysicalDeviceHostImageCopyFeatures{ptr: (*C.VkPhysicalDeviceHostImageCopyFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceHostImageCopyFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceHostImageCopyFeatures) Offset(offset int) PhysicalDeviceHostImageCopyFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceHostImageCopyFeaturesSizeOf)
	return PhysicalDeviceHostImageCopyFeatures{ptr: (*C.VkPhysicalDeviceHostImageCopyFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceHostImageCopyFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceHostImageCopyFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceHostImageCopyFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceHostImageCopyFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetHostImageCopy returns the value in hostImageCopy.
func (p PhysicalDeviceHostImageCopyFeatures) GetHostImageCopy() bool {
	return p.ptr.hostImageCopy != 0
}

// SetHostImageCopy sets the value in hostImageCopy.
func (p PhysicalDeviceHostImageCopyFeatures) SetHostImageCopy(value bool) {
	if value {
		p.ptr.hostImageCopy = C.VkBool32(1)
	} else {
		p.ptr.hostImageCopy = C.VkBool32(0)
	}
}

// PhysicalDeviceHostImageCopyProperties wraps VkPhysicalDeviceHostImageCopyProperties.
type PhysicalDeviceHostImageCopyProperties struct {
	ptr *C.VkPhysicalDeviceHostImageCopyProperties
}

// PhysicalDeviceHostImageCopyPropertiesNil is a null pointer.
var PhysicalDeviceHostImageCopyPropertiesNil PhysicalDeviceHostImageCopyProperties

// PhysicalDeviceHostImageCopyPropertiesSizeOf is the byte size of VkPhysicalDeviceHostImageCopyProperties.
const PhysicalDeviceHostImageCopyPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceHostImageCopyProperties)

// PhysicalDeviceHostImageCopyPropertiesFromPtr converts a raw pointer to a PhysicalDeviceHostImageCopyProperties.
func PhysicalDeviceHostImageCopyPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceHostImageCopyProperties {
	return PhysicalDeviceHostImageCopyProperties{ptr: (*C.VkPhysicalDeviceHostImageCopyProperties)(ptr)}
}

// PhysicalDeviceHostImageCopyPropertiesAlloc allocates a continuous block of VkPhysicalDeviceHostImageCopyProperties.
func PhysicalDeviceHostImageCopyPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceHostImageCopyProperties {
	ptr := alloc.Allocate(PhysicalDeviceHostImageCopyPropertiesSizeOf * count)
	return PhysicalDeviceHostImageCopyProperties{ptr: (*C.VkPhysicalDeviceHostImageCopyProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceHostImageCopyProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceHostImageCopyProperties) Offset(offset int) PhysicalDeviceHostImageCopyProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceHostImageCopyPropertiesSizeOf)
	return PhysicalDeviceHostImageCopyProperties{ptr: (*C.VkPhysicalDeviceHostImageCopyProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceHostImageCopyProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceHostImageCopyProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceHostImageCopyProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceHostImageCopyProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetCopySrcLayoutCount returns the value in copySrcLayoutCount.
func (p PhysicalDeviceHostImageCopyProperties) GetCopySrcLayoutCount() uint32 {
	return uint32(p.ptr.copySrcLayoutCount)
}

// SetCopySrcLayoutCount sets the value in copySrcLayoutCount.
func (p PhysicalDeviceHostImageCopyProperties) SetCopySrcLayoutCount(value uint32) {
	p.ptr.copySrcLayoutCount = (C.uint32_t)(value)
}

// GetPCopySrcLayouts returns the value in pCopySrcLayouts.
func (p PhysicalDeviceHostImageCopyProperties) GetPCopySrcLayouts() ffi.Ref[ImageLayout] {
	return ffi.RefFromPtr[ImageLayout](unsafe.Pointer(p.ptr.pCopySrcLayouts))
}

// SetPCopySrcLayouts sets the value in pCopySrcLayouts.
func (p PhysicalDeviceHostImageCopyProperties) SetPCopySrcLayouts(value ffi.Ref[ImageLayout]) {
	p.ptr.pCopySrcLayouts = (*C.VkImageLayout)(value.Raw())
}

// GetCopyDstLayoutCount returns the value in copyDstLayoutCount.
func (p PhysicalDeviceHostImageCopyProperties) GetCopyDstLayoutCount() uint32 {
	return uint32(p.ptr.copyDstLayoutCount)
}

// SetCopyDstLayoutCount sets the value in copyDstLayoutCount.
func (p PhysicalDeviceHostImageCopyProperties) SetCopyDstLayoutCount(value uint32) {
	p.ptr.copyDstLayoutCount = (C.uint32_t)(value)
}

// GetPCopyDstLayouts returns the value in pCopyDstLayouts.
func (p PhysicalDeviceHostImageCopyProperties) GetPCopyDstLayouts() ffi.Ref[ImageLayout] {
	return ffi.RefFromPtr[ImageLayout](unsafe.Pointer(p.ptr.pCopyDstLayouts))
}

// SetPCopyDstLayouts sets the value in pCopyDstLayouts.
func (p PhysicalDeviceHostImageCopyProperties) SetPCopyDstLayouts(value ffi.Ref[ImageLayout]) {
	p.ptr.pCopyDstLayouts = (*C.VkImageLayout)(value.Raw())
}

// PhysicalDeviceHostImageCopyProperties.optimalTilingLayoutUUID is unsupported: category unsupported.

// GetIdenticalMemoryTypeRequirements returns the value in identicalMemoryTypeRequirements.
func (p PhysicalDeviceHostImageCopyProperties) GetIdenticalMemoryTypeRequirements() bool {
	return p.ptr.identicalMemoryTypeRequirements != 0
}

// SetIdenticalMemoryTypeRequirements sets the value in identicalMemoryTypeRequirements.
func (p PhysicalDeviceHostImageCopyProperties) SetIdenticalMemoryTypeRequirements(value bool) {
	if value {
		p.ptr.identicalMemoryTypeRequirements = C.VkBool32(1)
	} else {
		p.ptr.identicalMemoryTypeRequirements = C.VkBool32(0)
	}
}

// PhysicalDeviceHostQueryResetFeatures wraps VkPhysicalDeviceHostQueryResetFeatures.
type PhysicalDeviceHostQueryResetFeatures struct {
	ptr *C.VkPhysicalDeviceHostQueryResetFeatures
}

// PhysicalDeviceHostQueryResetFeaturesNil is a null pointer.
var PhysicalDeviceHostQueryResetFeaturesNil PhysicalDeviceHostQueryResetFeatures

// PhysicalDeviceHostQueryResetFeaturesSizeOf is the byte size of VkPhysicalDeviceHostQueryResetFeatures.
const PhysicalDeviceHostQueryResetFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceHostQueryResetFeatures)

// PhysicalDeviceHostQueryResetFeaturesFromPtr converts a raw pointer to a PhysicalDeviceHostQueryResetFeatures.
func PhysicalDeviceHostQueryResetFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceHostQueryResetFeatures {
	return PhysicalDeviceHostQueryResetFeatures{ptr: (*C.VkPhysicalDeviceHostQueryResetFeatures)(ptr)}
}

// PhysicalDeviceHostQueryResetFeaturesAlloc allocates a continuous block of VkPhysicalDeviceHostQueryResetFeatures.
func PhysicalDeviceHostQueryResetFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceHostQueryResetFeatures {
	ptr := alloc.Allocate(PhysicalDeviceHostQueryResetFeaturesSizeOf * count)
	return PhysicalDeviceHostQueryResetFeatures{ptr: (*C.VkPhysicalDeviceHostQueryResetFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceHostQueryResetFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceHostQueryResetFeatures) Offset(offset int) PhysicalDeviceHostQueryResetFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceHostQueryResetFeaturesSizeOf)
	return PhysicalDeviceHostQueryResetFeatures{ptr: (*C.VkPhysicalDeviceHostQueryResetFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceHostQueryResetFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceHostQueryResetFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceHostQueryResetFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceHostQueryResetFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetHostQueryReset returns the value in hostQueryReset.
func (p PhysicalDeviceHostQueryResetFeatures) GetHostQueryReset() bool {
	return p.ptr.hostQueryReset != 0
}

// SetHostQueryReset sets the value in hostQueryReset.
func (p PhysicalDeviceHostQueryResetFeatures) SetHostQueryReset(value bool) {
	if value {
		p.ptr.hostQueryReset = C.VkBool32(1)
	} else {
		p.ptr.hostQueryReset = C.VkBool32(0)
	}
}

// PhysicalDeviceIDProperties wraps VkPhysicalDeviceIDProperties.
type PhysicalDeviceIDProperties struct {
	ptr *C.VkPhysicalDeviceIDProperties
}

// PhysicalDeviceIDPropertiesNil is a null pointer.
var PhysicalDeviceIDPropertiesNil PhysicalDeviceIDProperties

// PhysicalDeviceIDPropertiesSizeOf is the byte size of VkPhysicalDeviceIDProperties.
const PhysicalDeviceIDPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceIDProperties)

// PhysicalDeviceIDPropertiesFromPtr converts a raw pointer to a PhysicalDeviceIDProperties.
func PhysicalDeviceIDPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceIDProperties {
	return PhysicalDeviceIDProperties{ptr: (*C.VkPhysicalDeviceIDProperties)(ptr)}
}

// PhysicalDeviceIDPropertiesAlloc allocates a continuous block of VkPhysicalDeviceIDProperties.
func PhysicalDeviceIDPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceIDProperties {
	ptr := alloc.Allocate(PhysicalDeviceIDPropertiesSizeOf * count)
	return PhysicalDeviceIDProperties{ptr: (*C.VkPhysicalDeviceIDProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceIDProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceIDProperties) Offset(offset int) PhysicalDeviceIDProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceIDPropertiesSizeOf)
	return PhysicalDeviceIDProperties{ptr: (*C.VkPhysicalDeviceIDProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceIDProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceIDProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceIDProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceIDProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// PhysicalDeviceIDProperties.deviceUUID is unsupported: category unsupported.

// PhysicalDeviceIDProperties.driverUUID is unsupported: category unsupported.

// PhysicalDeviceIDProperties.deviceLUID is unsupported: category unsupported.

// GetDeviceNodeMask returns the value in deviceNodeMask.
func (p PhysicalDeviceIDProperties) GetDeviceNodeMask() uint32 {
	return uint32(p.ptr.deviceNodeMask)
}

// SetDeviceNodeMask sets the value in deviceNodeMask.
func (p PhysicalDeviceIDProperties) SetDeviceNodeMask(value uint32) {
	p.ptr.deviceNodeMask = (C.uint32_t)(value)
}

// GetDeviceLUIDValid returns the value in deviceLUIDValid.
func (p PhysicalDeviceIDProperties) GetDeviceLUIDValid() bool {
	return p.ptr.deviceLUIDValid != 0
}

// SetDeviceLUIDValid sets the value in deviceLUIDValid.
func (p PhysicalDeviceIDProperties) SetDeviceLUIDValid(value bool) {
	if value {
		p.ptr.deviceLUIDValid = C.VkBool32(1)
	} else {
		p.ptr.deviceLUIDValid = C.VkBool32(0)
	}
}

// PhysicalDeviceImageFormatInfo2 wraps VkPhysicalDeviceImageFormatInfo2.
type PhysicalDeviceImageFormatInfo2 struct {
	ptr *C.VkPhysicalDeviceImageFormatInfo2
}

// PhysicalDeviceImageFormatInfo2Nil is a null pointer.
var PhysicalDeviceImageFormatInfo2Nil PhysicalDeviceImageFormatInfo2

// PhysicalDeviceImageFormatInfo2SizeOf is the byte size of VkPhysicalDeviceImageFormatInfo2.
const PhysicalDeviceImageFormatInfo2SizeOf = int(C.sizeof_VkPhysicalDeviceImageFormatInfo2)

// PhysicalDeviceImageFormatInfo2FromPtr converts a raw pointer to a PhysicalDeviceImageFormatInfo2.
func PhysicalDeviceImageFormatInfo2FromPtr(ptr unsafe.Pointer) PhysicalDeviceImageFormatInfo2 {
	return PhysicalDeviceImageFormatInfo2{ptr: (*C.VkPhysicalDeviceImageFormatInfo2)(ptr)}
}

// PhysicalDeviceImageFormatInfo2Alloc allocates a continuous block of VkPhysicalDeviceImageFormatInfo2.
func PhysicalDeviceImageFormatInfo2Alloc(alloc ffi.Allocator, count int) PhysicalDeviceImageFormatInfo2 {
	ptr := alloc.Allocate(PhysicalDeviceImageFormatInfo2SizeOf * count)
	return PhysicalDeviceImageFormatInfo2{ptr: (*C.VkPhysicalDeviceImageFormatInfo2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceImageFormatInfo2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceImageFormatInfo2) Offset(offset int) PhysicalDeviceImageFormatInfo2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceImageFormatInfo2SizeOf)
	return PhysicalDeviceImageFormatInfo2{ptr: (*C.VkPhysicalDeviceImageFormatInfo2)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceImageFormatInfo2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceImageFormatInfo2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceImageFormatInfo2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceImageFormatInfo2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFormat returns the value in format.
func (p PhysicalDeviceImageFormatInfo2) GetFormat() Format {
	return Format(p.ptr.format)
}

// SetFormat sets the value in format.
func (p PhysicalDeviceImageFormatInfo2) SetFormat(value Format) {
	p.ptr.format = (C.VkFormat)(value)
}

// GetType returns the value in type.
func (p PhysicalDeviceImageFormatInfo2) GetType() ImageType {
	return ImageType(p.ptr._type)
}

// SetType sets the value in type.
func (p PhysicalDeviceImageFormatInfo2) SetType(value ImageType) {
	p.ptr._type = (C.VkImageType)(value)
}

// GetTiling returns the value in tiling.
func (p PhysicalDeviceImageFormatInfo2) GetTiling() ImageTiling {
	return ImageTiling(p.ptr.tiling)
}

// SetTiling sets the value in tiling.
func (p PhysicalDeviceImageFormatInfo2) SetTiling(value ImageTiling) {
	p.ptr.tiling = (C.VkImageTiling)(value)
}

// GetUsage returns the value in usage.
func (p PhysicalDeviceImageFormatInfo2) GetUsage() ImageUsageFlags {
	return ImageUsageFlags(p.ptr.usage)
}

// SetUsage sets the value in usage.
func (p PhysicalDeviceImageFormatInfo2) SetUsage(value ImageUsageFlags) {
	p.ptr.usage = (C.VkImageUsageFlags)(value)
}

// GetFlags returns the value in flags.
func (p PhysicalDeviceImageFormatInfo2) GetFlags() ImageCreateFlags {
	return ImageCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PhysicalDeviceImageFormatInfo2) SetFlags(value ImageCreateFlags) {
	p.ptr.flags = (C.VkImageCreateFlags)(value)
}

// PhysicalDeviceImageRobustnessFeatures wraps VkPhysicalDeviceImageRobustnessFeatures.
type PhysicalDeviceImageRobustnessFeatures struct {
	ptr *C.VkPhysicalDeviceImageRobustnessFeatures
}

// PhysicalDeviceImageRobustnessFeaturesNil is a null pointer.
var PhysicalDeviceImageRobustnessFeaturesNil PhysicalDeviceImageRobustnessFeatures

// PhysicalDeviceImageRobustnessFeaturesSizeOf is the byte size of VkPhysicalDeviceImageRobustnessFeatures.
const PhysicalDeviceImageRobustnessFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceImageRobustnessFeatures)

// PhysicalDeviceImageRobustnessFeaturesFromPtr converts a raw pointer to a PhysicalDeviceImageRobustnessFeatures.
func PhysicalDeviceImageRobustnessFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceImageRobustnessFeatures {
	return PhysicalDeviceImageRobustnessFeatures{ptr: (*C.VkPhysicalDeviceImageRobustnessFeatures)(ptr)}
}

// PhysicalDeviceImageRobustnessFeaturesAlloc allocates a continuous block of VkPhysicalDeviceImageRobustnessFeatures.
func PhysicalDeviceImageRobustnessFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceImageRobustnessFeatures {
	ptr := alloc.Allocate(PhysicalDeviceImageRobustnessFeaturesSizeOf * count)
	return PhysicalDeviceImageRobustnessFeatures{ptr: (*C.VkPhysicalDeviceImageRobustnessFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceImageRobustnessFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceImageRobustnessFeatures) Offset(offset int) PhysicalDeviceImageRobustnessFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceImageRobustnessFeaturesSizeOf)
	return PhysicalDeviceImageRobustnessFeatures{ptr: (*C.VkPhysicalDeviceImageRobustnessFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceImageRobustnessFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceImageRobustnessFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceImageRobustnessFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceImageRobustnessFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetRobustImageAccess returns the value in robustImageAccess.
func (p PhysicalDeviceImageRobustnessFeatures) GetRobustImageAccess() bool {
	return p.ptr.robustImageAccess != 0
}

// SetRobustImageAccess sets the value in robustImageAccess.
func (p PhysicalDeviceImageRobustnessFeatures) SetRobustImageAccess(value bool) {
	if value {
		p.ptr.robustImageAccess = C.VkBool32(1)
	} else {
		p.ptr.robustImageAccess = C.VkBool32(0)
	}
}

// PhysicalDeviceImagelessFramebufferFeatures wraps VkPhysicalDeviceImagelessFramebufferFeatures.
type PhysicalDeviceImagelessFramebufferFeatures struct {
	ptr *C.VkPhysicalDeviceImagelessFramebufferFeatures
}

// PhysicalDeviceImagelessFramebufferFeaturesNil is a null pointer.
var PhysicalDeviceImagelessFramebufferFeaturesNil PhysicalDeviceImagelessFramebufferFeatures

// PhysicalDeviceImagelessFramebufferFeaturesSizeOf is the byte size of VkPhysicalDeviceImagelessFramebufferFeatures.
const PhysicalDeviceImagelessFramebufferFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceImagelessFramebufferFeatures)

// PhysicalDeviceImagelessFramebufferFeaturesFromPtr converts a raw pointer to a PhysicalDeviceImagelessFramebufferFeatures.
func PhysicalDeviceImagelessFramebufferFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceImagelessFramebufferFeatures {
	return PhysicalDeviceImagelessFramebufferFeatures{ptr: (*C.VkPhysicalDeviceImagelessFramebufferFeatures)(ptr)}
}

// PhysicalDeviceImagelessFramebufferFeaturesAlloc allocates a continuous block of VkPhysicalDeviceImagelessFramebufferFeatures.
func PhysicalDeviceImagelessFramebufferFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceImagelessFramebufferFeatures {
	ptr := alloc.Allocate(PhysicalDeviceImagelessFramebufferFeaturesSizeOf * count)
	return PhysicalDeviceImagelessFramebufferFeatures{ptr: (*C.VkPhysicalDeviceImagelessFramebufferFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceImagelessFramebufferFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceImagelessFramebufferFeatures) Offset(offset int) PhysicalDeviceImagelessFramebufferFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceImagelessFramebufferFeaturesSizeOf)
	return PhysicalDeviceImagelessFramebufferFeatures{ptr: (*C.VkPhysicalDeviceImagelessFramebufferFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceImagelessFramebufferFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceImagelessFramebufferFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceImagelessFramebufferFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceImagelessFramebufferFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetImagelessFramebuffer returns the value in imagelessFramebuffer.
func (p PhysicalDeviceImagelessFramebufferFeatures) GetImagelessFramebuffer() bool {
	return p.ptr.imagelessFramebuffer != 0
}

// SetImagelessFramebuffer sets the value in imagelessFramebuffer.
func (p PhysicalDeviceImagelessFramebufferFeatures) SetImagelessFramebuffer(value bool) {
	if value {
		p.ptr.imagelessFramebuffer = C.VkBool32(1)
	} else {
		p.ptr.imagelessFramebuffer = C.VkBool32(0)
	}
}

// PhysicalDeviceIndexTypeUint8Features wraps VkPhysicalDeviceIndexTypeUint8Features.
type PhysicalDeviceIndexTypeUint8Features struct {
	ptr *C.VkPhysicalDeviceIndexTypeUint8Features
}

// PhysicalDeviceIndexTypeUint8FeaturesNil is a null pointer.
var PhysicalDeviceIndexTypeUint8FeaturesNil PhysicalDeviceIndexTypeUint8Features

// PhysicalDeviceIndexTypeUint8FeaturesSizeOf is the byte size of VkPhysicalDeviceIndexTypeUint8Features.
const PhysicalDeviceIndexTypeUint8FeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceIndexTypeUint8Features)

// PhysicalDeviceIndexTypeUint8FeaturesFromPtr converts a raw pointer to a PhysicalDeviceIndexTypeUint8Features.
func PhysicalDeviceIndexTypeUint8FeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceIndexTypeUint8Features {
	return PhysicalDeviceIndexTypeUint8Features{ptr: (*C.VkPhysicalDeviceIndexTypeUint8Features)(ptr)}
}

// PhysicalDeviceIndexTypeUint8FeaturesAlloc allocates a continuous block of VkPhysicalDeviceIndexTypeUint8Features.
func PhysicalDeviceIndexTypeUint8FeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceIndexTypeUint8Features {
	ptr := alloc.Allocate(PhysicalDeviceIndexTypeUint8FeaturesSizeOf * count)
	return PhysicalDeviceIndexTypeUint8Features{ptr: (*C.VkPhysicalDeviceIndexTypeUint8Features)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceIndexTypeUint8Features) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceIndexTypeUint8Features) Offset(offset int) PhysicalDeviceIndexTypeUint8Features {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceIndexTypeUint8FeaturesSizeOf)
	return PhysicalDeviceIndexTypeUint8Features{ptr: (*C.VkPhysicalDeviceIndexTypeUint8Features)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceIndexTypeUint8Features) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceIndexTypeUint8Features) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceIndexTypeUint8Features) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceIndexTypeUint8Features) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetIndexTypeUint8 returns the value in indexTypeUint8.
func (p PhysicalDeviceIndexTypeUint8Features) GetIndexTypeUint8() bool {
	return p.ptr.indexTypeUint8 != 0
}

// SetIndexTypeUint8 sets the value in indexTypeUint8.
func (p PhysicalDeviceIndexTypeUint8Features) SetIndexTypeUint8(value bool) {
	if value {
		p.ptr.indexTypeUint8 = C.VkBool32(1)
	} else {
		p.ptr.indexTypeUint8 = C.VkBool32(0)
	}
}

// PhysicalDeviceInlineUniformBlockFeatures wraps VkPhysicalDeviceInlineUniformBlockFeatures.
type PhysicalDeviceInlineUniformBlockFeatures struct {
	ptr *C.VkPhysicalDeviceInlineUniformBlockFeatures
}

// PhysicalDeviceInlineUniformBlockFeaturesNil is a null pointer.
var PhysicalDeviceInlineUniformBlockFeaturesNil PhysicalDeviceInlineUniformBlockFeatures

// PhysicalDeviceInlineUniformBlockFeaturesSizeOf is the byte size of VkPhysicalDeviceInlineUniformBlockFeatures.
const PhysicalDeviceInlineUniformBlockFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceInlineUniformBlockFeatures)

// PhysicalDeviceInlineUniformBlockFeaturesFromPtr converts a raw pointer to a PhysicalDeviceInlineUniformBlockFeatures.
func PhysicalDeviceInlineUniformBlockFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceInlineUniformBlockFeatures {
	return PhysicalDeviceInlineUniformBlockFeatures{ptr: (*C.VkPhysicalDeviceInlineUniformBlockFeatures)(ptr)}
}

// PhysicalDeviceInlineUniformBlockFeaturesAlloc allocates a continuous block of VkPhysicalDeviceInlineUniformBlockFeatures.
func PhysicalDeviceInlineUniformBlockFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceInlineUniformBlockFeatures {
	ptr := alloc.Allocate(PhysicalDeviceInlineUniformBlockFeaturesSizeOf * count)
	return PhysicalDeviceInlineUniformBlockFeatures{ptr: (*C.VkPhysicalDeviceInlineUniformBlockFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceInlineUniformBlockFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceInlineUniformBlockFeatures) Offset(offset int) PhysicalDeviceInlineUniformBlockFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceInlineUniformBlockFeaturesSizeOf)
	return PhysicalDeviceInlineUniformBlockFeatures{ptr: (*C.VkPhysicalDeviceInlineUniformBlockFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceInlineUniformBlockFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceInlineUniformBlockFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceInlineUniformBlockFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceInlineUniformBlockFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetInlineUniformBlock returns the value in inlineUniformBlock.
func (p PhysicalDeviceInlineUniformBlockFeatures) GetInlineUniformBlock() bool {
	return p.ptr.inlineUniformBlock != 0
}

// SetInlineUniformBlock sets the value in inlineUniformBlock.
func (p PhysicalDeviceInlineUniformBlockFeatures) SetInlineUniformBlock(value bool) {
	if value {
		p.ptr.inlineUniformBlock = C.VkBool32(1)
	} else {
		p.ptr.inlineUniformBlock = C.VkBool32(0)
	}
}

// GetDescriptorBindingInlineUniformBlockUpdateAfterBind returns the value in descriptorBindingInlineUniformBlockUpdateAfterBind.
func (p PhysicalDeviceInlineUniformBlockFeatures) GetDescriptorBindingInlineUniformBlockUpdateAfterBind() bool {
	return p.ptr.descriptorBindingInlineUniformBlockUpdateAfterBind != 0
}

// SetDescriptorBindingInlineUniformBlockUpdateAfterBind sets the value in descriptorBindingInlineUniformBlockUpdateAfterBind.
func (p PhysicalDeviceInlineUniformBlockFeatures) SetDescriptorBindingInlineUniformBlockUpdateAfterBind(value bool) {
	if value {
		p.ptr.descriptorBindingInlineUniformBlockUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingInlineUniformBlockUpdateAfterBind = C.VkBool32(0)
	}
}

// PhysicalDeviceInlineUniformBlockProperties wraps VkPhysicalDeviceInlineUniformBlockProperties.
type PhysicalDeviceInlineUniformBlockProperties struct {
	ptr *C.VkPhysicalDeviceInlineUniformBlockProperties
}

// PhysicalDeviceInlineUniformBlockPropertiesNil is a null pointer.
var PhysicalDeviceInlineUniformBlockPropertiesNil PhysicalDeviceInlineUniformBlockProperties

// PhysicalDeviceInlineUniformBlockPropertiesSizeOf is the byte size of VkPhysicalDeviceInlineUniformBlockProperties.
const PhysicalDeviceInlineUniformBlockPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceInlineUniformBlockProperties)

// PhysicalDeviceInlineUniformBlockPropertiesFromPtr converts a raw pointer to a PhysicalDeviceInlineUniformBlockProperties.
func PhysicalDeviceInlineUniformBlockPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceInlineUniformBlockProperties {
	return PhysicalDeviceInlineUniformBlockProperties{ptr: (*C.VkPhysicalDeviceInlineUniformBlockProperties)(ptr)}
}

// PhysicalDeviceInlineUniformBlockPropertiesAlloc allocates a continuous block of VkPhysicalDeviceInlineUniformBlockProperties.
func PhysicalDeviceInlineUniformBlockPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceInlineUniformBlockProperties {
	ptr := alloc.Allocate(PhysicalDeviceInlineUniformBlockPropertiesSizeOf * count)
	return PhysicalDeviceInlineUniformBlockProperties{ptr: (*C.VkPhysicalDeviceInlineUniformBlockProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceInlineUniformBlockProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceInlineUniformBlockProperties) Offset(offset int) PhysicalDeviceInlineUniformBlockProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceInlineUniformBlockPropertiesSizeOf)
	return PhysicalDeviceInlineUniformBlockProperties{ptr: (*C.VkPhysicalDeviceInlineUniformBlockProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceInlineUniformBlockProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceInlineUniformBlockProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceInlineUniformBlockProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceInlineUniformBlockProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMaxInlineUniformBlockSize returns the value in maxInlineUniformBlockSize.
func (p PhysicalDeviceInlineUniformBlockProperties) GetMaxInlineUniformBlockSize() uint32 {
	return uint32(p.ptr.maxInlineUniformBlockSize)
}

// SetMaxInlineUniformBlockSize sets the value in maxInlineUniformBlockSize.
func (p PhysicalDeviceInlineUniformBlockProperties) SetMaxInlineUniformBlockSize(value uint32) {
	p.ptr.maxInlineUniformBlockSize = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorInlineUniformBlocks returns the value in maxPerStageDescriptorInlineUniformBlocks.
func (p PhysicalDeviceInlineUniformBlockProperties) GetMaxPerStageDescriptorInlineUniformBlocks() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorInlineUniformBlocks)
}

// SetMaxPerStageDescriptorInlineUniformBlocks sets the value in maxPerStageDescriptorInlineUniformBlocks.
func (p PhysicalDeviceInlineUniformBlockProperties) SetMaxPerStageDescriptorInlineUniformBlocks(value uint32) {
	p.ptr.maxPerStageDescriptorInlineUniformBlocks = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks returns the value in maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks.
func (p PhysicalDeviceInlineUniformBlockProperties) GetMaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)
}

// SetMaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks sets the value in maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks.
func (p PhysicalDeviceInlineUniformBlockProperties) SetMaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks(value uint32) {
	p.ptr.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = (C.uint32_t)(value)
}

// GetMaxDescriptorSetInlineUniformBlocks returns the value in maxDescriptorSetInlineUniformBlocks.
func (p PhysicalDeviceInlineUniformBlockProperties) GetMaxDescriptorSetInlineUniformBlocks() uint32 {
	return uint32(p.ptr.maxDescriptorSetInlineUniformBlocks)
}

// SetMaxDescriptorSetInlineUniformBlocks sets the value in maxDescriptorSetInlineUniformBlocks.
func (p PhysicalDeviceInlineUniformBlockProperties) SetMaxDescriptorSetInlineUniformBlocks(value uint32) {
	p.ptr.maxDescriptorSetInlineUniformBlocks = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindInlineUniformBlocks returns the value in maxDescriptorSetUpdateAfterBindInlineUniformBlocks.
func (p PhysicalDeviceInlineUniformBlockProperties) GetMaxDescriptorSetUpdateAfterBindInlineUniformBlocks() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindInlineUniformBlocks)
}

// SetMaxDescriptorSetUpdateAfterBindInlineUniformBlocks sets the value in maxDescriptorSetUpdateAfterBindInlineUniformBlocks.
func (p PhysicalDeviceInlineUniformBlockProperties) SetMaxDescriptorSetUpdateAfterBindInlineUniformBlocks(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = (C.uint32_t)(value)
}

// PhysicalDeviceLimits wraps VkPhysicalDeviceLimits.
type PhysicalDeviceLimits struct {
	ptr *C.VkPhysicalDeviceLimits
}

// PhysicalDeviceLimitsNil is a null pointer.
var PhysicalDeviceLimitsNil PhysicalDeviceLimits

// PhysicalDeviceLimitsSizeOf is the byte size of VkPhysicalDeviceLimits.
const PhysicalDeviceLimitsSizeOf = int(C.sizeof_VkPhysicalDeviceLimits)

// PhysicalDeviceLimitsFromPtr converts a raw pointer to a PhysicalDeviceLimits.
func PhysicalDeviceLimitsFromPtr(ptr unsafe.Pointer) PhysicalDeviceLimits {
	return PhysicalDeviceLimits{ptr: (*C.VkPhysicalDeviceLimits)(ptr)}
}

// PhysicalDeviceLimitsAlloc allocates a continuous block of VkPhysicalDeviceLimits.
func PhysicalDeviceLimitsAlloc(alloc ffi.Allocator, count int) PhysicalDeviceLimits {
	ptr := alloc.Allocate(PhysicalDeviceLimitsSizeOf * count)
	return PhysicalDeviceLimits{ptr: (*C.VkPhysicalDeviceLimits)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceLimits) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceLimits) Offset(offset int) PhysicalDeviceLimits {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceLimitsSizeOf)
	return PhysicalDeviceLimits{ptr: (*C.VkPhysicalDeviceLimits)(ptr)}
}

// GetMaxImageDimension1D returns the value in maxImageDimension1D.
func (p PhysicalDeviceLimits) GetMaxImageDimension1D() uint32 {
	return uint32(p.ptr.maxImageDimension1D)
}

// SetMaxImageDimension1D sets the value in maxImageDimension1D.
func (p PhysicalDeviceLimits) SetMaxImageDimension1D(value uint32) {
	p.ptr.maxImageDimension1D = (C.uint32_t)(value)
}

// GetMaxImageDimension2D returns the value in maxImageDimension2D.
func (p PhysicalDeviceLimits) GetMaxImageDimension2D() uint32 {
	return uint32(p.ptr.maxImageDimension2D)
}

// SetMaxImageDimension2D sets the value in maxImageDimension2D.
func (p PhysicalDeviceLimits) SetMaxImageDimension2D(value uint32) {
	p.ptr.maxImageDimension2D = (C.uint32_t)(value)
}

// GetMaxImageDimension3D returns the value in maxImageDimension3D.
func (p PhysicalDeviceLimits) GetMaxImageDimension3D() uint32 {
	return uint32(p.ptr.maxImageDimension3D)
}

// SetMaxImageDimension3D sets the value in maxImageDimension3D.
func (p PhysicalDeviceLimits) SetMaxImageDimension3D(value uint32) {
	p.ptr.maxImageDimension3D = (C.uint32_t)(value)
}

// GetMaxImageDimensionCube returns the value in maxImageDimensionCube.
func (p PhysicalDeviceLimits) GetMaxImageDimensionCube() uint32 {
	return uint32(p.ptr.maxImageDimensionCube)
}

// SetMaxImageDimensionCube sets the value in maxImageDimensionCube.
func (p PhysicalDeviceLimits) SetMaxImageDimensionCube(value uint32) {
	p.ptr.maxImageDimensionCube = (C.uint32_t)(value)
}

// GetMaxImageArrayLayers returns the value in maxImageArrayLayers.
func (p PhysicalDeviceLimits) GetMaxImageArrayLayers() uint32 {
	return uint32(p.ptr.maxImageArrayLayers)
}

// SetMaxImageArrayLayers sets the value in maxImageArrayLayers.
func (p PhysicalDeviceLimits) SetMaxImageArrayLayers(value uint32) {
	p.ptr.maxImageArrayLayers = (C.uint32_t)(value)
}

// GetMaxTexelBufferElements returns the value in maxTexelBufferElements.
func (p PhysicalDeviceLimits) GetMaxTexelBufferElements() uint32 {
	return uint32(p.ptr.maxTexelBufferElements)
}

// SetMaxTexelBufferElements sets the value in maxTexelBufferElements.
func (p PhysicalDeviceLimits) SetMaxTexelBufferElements(value uint32) {
	p.ptr.maxTexelBufferElements = (C.uint32_t)(value)
}

// GetMaxUniformBufferRange returns the value in maxUniformBufferRange.
func (p PhysicalDeviceLimits) GetMaxUniformBufferRange() uint32 {
	return uint32(p.ptr.maxUniformBufferRange)
}

// SetMaxUniformBufferRange sets the value in maxUniformBufferRange.
func (p PhysicalDeviceLimits) SetMaxUniformBufferRange(value uint32) {
	p.ptr.maxUniformBufferRange = (C.uint32_t)(value)
}

// GetMaxStorageBufferRange returns the value in maxStorageBufferRange.
func (p PhysicalDeviceLimits) GetMaxStorageBufferRange() uint32 {
	return uint32(p.ptr.maxStorageBufferRange)
}

// SetMaxStorageBufferRange sets the value in maxStorageBufferRange.
func (p PhysicalDeviceLimits) SetMaxStorageBufferRange(value uint32) {
	p.ptr.maxStorageBufferRange = (C.uint32_t)(value)
}

// GetMaxPushConstantsSize returns the value in maxPushConstantsSize.
func (p PhysicalDeviceLimits) GetMaxPushConstantsSize() uint32 {
	return uint32(p.ptr.maxPushConstantsSize)
}

// SetMaxPushConstantsSize sets the value in maxPushConstantsSize.
func (p PhysicalDeviceLimits) SetMaxPushConstantsSize(value uint32) {
	p.ptr.maxPushConstantsSize = (C.uint32_t)(value)
}

// GetMaxMemoryAllocationCount returns the value in maxMemoryAllocationCount.
func (p PhysicalDeviceLimits) GetMaxMemoryAllocationCount() uint32 {
	return uint32(p.ptr.maxMemoryAllocationCount)
}

// SetMaxMemoryAllocationCount sets the value in maxMemoryAllocationCount.
func (p PhysicalDeviceLimits) SetMaxMemoryAllocationCount(value uint32) {
	p.ptr.maxMemoryAllocationCount = (C.uint32_t)(value)
}

// GetMaxSamplerAllocationCount returns the value in maxSamplerAllocationCount.
func (p PhysicalDeviceLimits) GetMaxSamplerAllocationCount() uint32 {
	return uint32(p.ptr.maxSamplerAllocationCount)
}

// SetMaxSamplerAllocationCount sets the value in maxSamplerAllocationCount.
func (p PhysicalDeviceLimits) SetMaxSamplerAllocationCount(value uint32) {
	p.ptr.maxSamplerAllocationCount = (C.uint32_t)(value)
}

// GetBufferImageGranularity returns the value in bufferImageGranularity.
func (p PhysicalDeviceLimits) GetBufferImageGranularity() DeviceSize {
	return DeviceSize(p.ptr.bufferImageGranularity)
}

// SetBufferImageGranularity sets the value in bufferImageGranularity.
func (p PhysicalDeviceLimits) SetBufferImageGranularity(value DeviceSize) {
	p.ptr.bufferImageGranularity = (C.VkDeviceSize)(value)
}

// GetSparseAddressSpaceSize returns the value in sparseAddressSpaceSize.
func (p PhysicalDeviceLimits) GetSparseAddressSpaceSize() DeviceSize {
	return DeviceSize(p.ptr.sparseAddressSpaceSize)
}

// SetSparseAddressSpaceSize sets the value in sparseAddressSpaceSize.
func (p PhysicalDeviceLimits) SetSparseAddressSpaceSize(value DeviceSize) {
	p.ptr.sparseAddressSpaceSize = (C.VkDeviceSize)(value)
}

// GetMaxBoundDescriptorSets returns the value in maxBoundDescriptorSets.
func (p PhysicalDeviceLimits) GetMaxBoundDescriptorSets() uint32 {
	return uint32(p.ptr.maxBoundDescriptorSets)
}

// SetMaxBoundDescriptorSets sets the value in maxBoundDescriptorSets.
func (p PhysicalDeviceLimits) SetMaxBoundDescriptorSets(value uint32) {
	p.ptr.maxBoundDescriptorSets = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorSamplers returns the value in maxPerStageDescriptorSamplers.
func (p PhysicalDeviceLimits) GetMaxPerStageDescriptorSamplers() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorSamplers)
}

// SetMaxPerStageDescriptorSamplers sets the value in maxPerStageDescriptorSamplers.
func (p PhysicalDeviceLimits) SetMaxPerStageDescriptorSamplers(value uint32) {
	p.ptr.maxPerStageDescriptorSamplers = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorUniformBuffers returns the value in maxPerStageDescriptorUniformBuffers.
func (p PhysicalDeviceLimits) GetMaxPerStageDescriptorUniformBuffers() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUniformBuffers)
}

// SetMaxPerStageDescriptorUniformBuffers sets the value in maxPerStageDescriptorUniformBuffers.
func (p PhysicalDeviceLimits) SetMaxPerStageDescriptorUniformBuffers(value uint32) {
	p.ptr.maxPerStageDescriptorUniformBuffers = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorStorageBuffers returns the value in maxPerStageDescriptorStorageBuffers.
func (p PhysicalDeviceLimits) GetMaxPerStageDescriptorStorageBuffers() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorStorageBuffers)
}

// SetMaxPerStageDescriptorStorageBuffers sets the value in maxPerStageDescriptorStorageBuffers.
func (p PhysicalDeviceLimits) SetMaxPerStageDescriptorStorageBuffers(value uint32) {
	p.ptr.maxPerStageDescriptorStorageBuffers = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorSampledImages returns the value in maxPerStageDescriptorSampledImages.
func (p PhysicalDeviceLimits) GetMaxPerStageDescriptorSampledImages() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorSampledImages)
}

// SetMaxPerStageDescriptorSampledImages sets the value in maxPerStageDescriptorSampledImages.
func (p PhysicalDeviceLimits) SetMaxPerStageDescriptorSampledImages(value uint32) {
	p.ptr.maxPerStageDescriptorSampledImages = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorStorageImages returns the value in maxPerStageDescriptorStorageImages.
func (p PhysicalDeviceLimits) GetMaxPerStageDescriptorStorageImages() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorStorageImages)
}

// SetMaxPerStageDescriptorStorageImages sets the value in maxPerStageDescriptorStorageImages.
func (p PhysicalDeviceLimits) SetMaxPerStageDescriptorStorageImages(value uint32) {
	p.ptr.maxPerStageDescriptorStorageImages = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorInputAttachments returns the value in maxPerStageDescriptorInputAttachments.
func (p PhysicalDeviceLimits) GetMaxPerStageDescriptorInputAttachments() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorInputAttachments)
}

// SetMaxPerStageDescriptorInputAttachments sets the value in maxPerStageDescriptorInputAttachments.
func (p PhysicalDeviceLimits) SetMaxPerStageDescriptorInputAttachments(value uint32) {
	p.ptr.maxPerStageDescriptorInputAttachments = (C.uint32_t)(value)
}

// GetMaxPerStageResources returns the value in maxPerStageResources.
func (p PhysicalDeviceLimits) GetMaxPerStageResources() uint32 {
	return uint32(p.ptr.maxPerStageResources)
}

// SetMaxPerStageResources sets the value in maxPerStageResources.
func (p PhysicalDeviceLimits) SetMaxPerStageResources(value uint32) {
	p.ptr.maxPerStageResources = (C.uint32_t)(value)
}

// GetMaxDescriptorSetSamplers returns the value in maxDescriptorSetSamplers.
func (p PhysicalDeviceLimits) GetMaxDescriptorSetSamplers() uint32 {
	return uint32(p.ptr.maxDescriptorSetSamplers)
}

// SetMaxDescriptorSetSamplers sets the value in maxDescriptorSetSamplers.
func (p PhysicalDeviceLimits) SetMaxDescriptorSetSamplers(value uint32) {
	p.ptr.maxDescriptorSetSamplers = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUniformBuffers returns the value in maxDescriptorSetUniformBuffers.
func (p PhysicalDeviceLimits) GetMaxDescriptorSetUniformBuffers() uint32 {
	return uint32(p.ptr.maxDescriptorSetUniformBuffers)
}

// SetMaxDescriptorSetUniformBuffers sets the value in maxDescriptorSetUniformBuffers.
func (p PhysicalDeviceLimits) SetMaxDescriptorSetUniformBuffers(value uint32) {
	p.ptr.maxDescriptorSetUniformBuffers = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUniformBuffersDynamic returns the value in maxDescriptorSetUniformBuffersDynamic.
func (p PhysicalDeviceLimits) GetMaxDescriptorSetUniformBuffersDynamic() uint32 {
	return uint32(p.ptr.maxDescriptorSetUniformBuffersDynamic)
}

// SetMaxDescriptorSetUniformBuffersDynamic sets the value in maxDescriptorSetUniformBuffersDynamic.
func (p PhysicalDeviceLimits) SetMaxDescriptorSetUniformBuffersDynamic(value uint32) {
	p.ptr.maxDescriptorSetUniformBuffersDynamic = (C.uint32_t)(value)
}

// GetMaxDescriptorSetStorageBuffers returns the value in maxDescriptorSetStorageBuffers.
func (p PhysicalDeviceLimits) GetMaxDescriptorSetStorageBuffers() uint32 {
	return uint32(p.ptr.maxDescriptorSetStorageBuffers)
}

// SetMaxDescriptorSetStorageBuffers sets the value in maxDescriptorSetStorageBuffers.
func (p PhysicalDeviceLimits) SetMaxDescriptorSetStorageBuffers(value uint32) {
	p.ptr.maxDescriptorSetStorageBuffers = (C.uint32_t)(value)
}

// GetMaxDescriptorSetStorageBuffersDynamic returns the value in maxDescriptorSetStorageBuffersDynamic.
func (p PhysicalDeviceLimits) GetMaxDescriptorSetStorageBuffersDynamic() uint32 {
	return uint32(p.ptr.maxDescriptorSetStorageBuffersDynamic)
}

// SetMaxDescriptorSetStorageBuffersDynamic sets the value in maxDescriptorSetStorageBuffersDynamic.
func (p PhysicalDeviceLimits) SetMaxDescriptorSetStorageBuffersDynamic(value uint32) {
	p.ptr.maxDescriptorSetStorageBuffersDynamic = (C.uint32_t)(value)
}

// GetMaxDescriptorSetSampledImages returns the value in maxDescriptorSetSampledImages.
func (p PhysicalDeviceLimits) GetMaxDescriptorSetSampledImages() uint32 {
	return uint32(p.ptr.maxDescriptorSetSampledImages)
}

// SetMaxDescriptorSetSampledImages sets the value in maxDescriptorSetSampledImages.
func (p PhysicalDeviceLimits) SetMaxDescriptorSetSampledImages(value uint32) {
	p.ptr.maxDescriptorSetSampledImages = (C.uint32_t)(value)
}

// GetMaxDescriptorSetStorageImages returns the value in maxDescriptorSetStorageImages.
func (p PhysicalDeviceLimits) GetMaxDescriptorSetStorageImages() uint32 {
	return uint32(p.ptr.maxDescriptorSetStorageImages)
}

// SetMaxDescriptorSetStorageImages sets the value in maxDescriptorSetStorageImages.
func (p PhysicalDeviceLimits) SetMaxDescriptorSetStorageImages(value uint32) {
	p.ptr.maxDescriptorSetStorageImages = (C.uint32_t)(value)
}

// GetMaxDescriptorSetInputAttachments returns the value in maxDescriptorSetInputAttachments.
func (p PhysicalDeviceLimits) GetMaxDescriptorSetInputAttachments() uint32 {
	return uint32(p.ptr.maxDescriptorSetInputAttachments)
}

// SetMaxDescriptorSetInputAttachments sets the value in maxDescriptorSetInputAttachments.
func (p PhysicalDeviceLimits) SetMaxDescriptorSetInputAttachments(value uint32) {
	p.ptr.maxDescriptorSetInputAttachments = (C.uint32_t)(value)
}

// GetMaxVertexInputAttributes returns the value in maxVertexInputAttributes.
func (p PhysicalDeviceLimits) GetMaxVertexInputAttributes() uint32 {
	return uint32(p.ptr.maxVertexInputAttributes)
}

// SetMaxVertexInputAttributes sets the value in maxVertexInputAttributes.
func (p PhysicalDeviceLimits) SetMaxVertexInputAttributes(value uint32) {
	p.ptr.maxVertexInputAttributes = (C.uint32_t)(value)
}

// GetMaxVertexInputBindings returns the value in maxVertexInputBindings.
func (p PhysicalDeviceLimits) GetMaxVertexInputBindings() uint32 {
	return uint32(p.ptr.maxVertexInputBindings)
}

// SetMaxVertexInputBindings sets the value in maxVertexInputBindings.
func (p PhysicalDeviceLimits) SetMaxVertexInputBindings(value uint32) {
	p.ptr.maxVertexInputBindings = (C.uint32_t)(value)
}

// GetMaxVertexInputAttributeOffset returns the value in maxVertexInputAttributeOffset.
func (p PhysicalDeviceLimits) GetMaxVertexInputAttributeOffset() uint32 {
	return uint32(p.ptr.maxVertexInputAttributeOffset)
}

// SetMaxVertexInputAttributeOffset sets the value in maxVertexInputAttributeOffset.
func (p PhysicalDeviceLimits) SetMaxVertexInputAttributeOffset(value uint32) {
	p.ptr.maxVertexInputAttributeOffset = (C.uint32_t)(value)
}

// GetMaxVertexInputBindingStride returns the value in maxVertexInputBindingStride.
func (p PhysicalDeviceLimits) GetMaxVertexInputBindingStride() uint32 {
	return uint32(p.ptr.maxVertexInputBindingStride)
}

// SetMaxVertexInputBindingStride sets the value in maxVertexInputBindingStride.
func (p PhysicalDeviceLimits) SetMaxVertexInputBindingStride(value uint32) {
	p.ptr.maxVertexInputBindingStride = (C.uint32_t)(value)
}

// GetMaxVertexOutputComponents returns the value in maxVertexOutputComponents.
func (p PhysicalDeviceLimits) GetMaxVertexOutputComponents() uint32 {
	return uint32(p.ptr.maxVertexOutputComponents)
}

// SetMaxVertexOutputComponents sets the value in maxVertexOutputComponents.
func (p PhysicalDeviceLimits) SetMaxVertexOutputComponents(value uint32) {
	p.ptr.maxVertexOutputComponents = (C.uint32_t)(value)
}

// GetMaxTessellationGenerationLevel returns the value in maxTessellationGenerationLevel.
func (p PhysicalDeviceLimits) GetMaxTessellationGenerationLevel() uint32 {
	return uint32(p.ptr.maxTessellationGenerationLevel)
}

// SetMaxTessellationGenerationLevel sets the value in maxTessellationGenerationLevel.
func (p PhysicalDeviceLimits) SetMaxTessellationGenerationLevel(value uint32) {
	p.ptr.maxTessellationGenerationLevel = (C.uint32_t)(value)
}

// GetMaxTessellationPatchSize returns the value in maxTessellationPatchSize.
func (p PhysicalDeviceLimits) GetMaxTessellationPatchSize() uint32 {
	return uint32(p.ptr.maxTessellationPatchSize)
}

// SetMaxTessellationPatchSize sets the value in maxTessellationPatchSize.
func (p PhysicalDeviceLimits) SetMaxTessellationPatchSize(value uint32) {
	p.ptr.maxTessellationPatchSize = (C.uint32_t)(value)
}

// GetMaxTessellationControlPerVertexInputComponents returns the value in maxTessellationControlPerVertexInputComponents.
func (p PhysicalDeviceLimits) GetMaxTessellationControlPerVertexInputComponents() uint32 {
	return uint32(p.ptr.maxTessellationControlPerVertexInputComponents)
}

// SetMaxTessellationControlPerVertexInputComponents sets the value in maxTessellationControlPerVertexInputComponents.
func (p PhysicalDeviceLimits) SetMaxTessellationControlPerVertexInputComponents(value uint32) {
	p.ptr.maxTessellationControlPerVertexInputComponents = (C.uint32_t)(value)
}

// GetMaxTessellationControlPerVertexOutputComponents returns the value in maxTessellationControlPerVertexOutputComponents.
func (p PhysicalDeviceLimits) GetMaxTessellationControlPerVertexOutputComponents() uint32 {
	return uint32(p.ptr.maxTessellationControlPerVertexOutputComponents)
}

// SetMaxTessellationControlPerVertexOutputComponents sets the value in maxTessellationControlPerVertexOutputComponents.
func (p PhysicalDeviceLimits) SetMaxTessellationControlPerVertexOutputComponents(value uint32) {
	p.ptr.maxTessellationControlPerVertexOutputComponents = (C.uint32_t)(value)
}

// GetMaxTessellationControlPerPatchOutputComponents returns the value in maxTessellationControlPerPatchOutputComponents.
func (p PhysicalDeviceLimits) GetMaxTessellationControlPerPatchOutputComponents() uint32 {
	return uint32(p.ptr.maxTessellationControlPerPatchOutputComponents)
}

// SetMaxTessellationControlPerPatchOutputComponents sets the value in maxTessellationControlPerPatchOutputComponents.
func (p PhysicalDeviceLimits) SetMaxTessellationControlPerPatchOutputComponents(value uint32) {
	p.ptr.maxTessellationControlPerPatchOutputComponents = (C.uint32_t)(value)
}

// GetMaxTessellationControlTotalOutputComponents returns the value in maxTessellationControlTotalOutputComponents.
func (p PhysicalDeviceLimits) GetMaxTessellationControlTotalOutputComponents() uint32 {
	return uint32(p.ptr.maxTessellationControlTotalOutputComponents)
}

// SetMaxTessellationControlTotalOutputComponents sets the value in maxTessellationControlTotalOutputComponents.
func (p PhysicalDeviceLimits) SetMaxTessellationControlTotalOutputComponents(value uint32) {
	p.ptr.maxTessellationControlTotalOutputComponents = (C.uint32_t)(value)
}

// GetMaxTessellationEvaluationInputComponents returns the value in maxTessellationEvaluationInputComponents.
func (p PhysicalDeviceLimits) GetMaxTessellationEvaluationInputComponents() uint32 {
	return uint32(p.ptr.maxTessellationEvaluationInputComponents)
}

// SetMaxTessellationEvaluationInputComponents sets the value in maxTessellationEvaluationInputComponents.
func (p PhysicalDeviceLimits) SetMaxTessellationEvaluationInputComponents(value uint32) {
	p.ptr.maxTessellationEvaluationInputComponents = (C.uint32_t)(value)
}

// GetMaxTessellationEvaluationOutputComponents returns the value in maxTessellationEvaluationOutputComponents.
func (p PhysicalDeviceLimits) GetMaxTessellationEvaluationOutputComponents() uint32 {
	return uint32(p.ptr.maxTessellationEvaluationOutputComponents)
}

// SetMaxTessellationEvaluationOutputComponents sets the value in maxTessellationEvaluationOutputComponents.
func (p PhysicalDeviceLimits) SetMaxTessellationEvaluationOutputComponents(value uint32) {
	p.ptr.maxTessellationEvaluationOutputComponents = (C.uint32_t)(value)
}

// GetMaxGeometryShaderInvocations returns the value in maxGeometryShaderInvocations.
func (p PhysicalDeviceLimits) GetMaxGeometryShaderInvocations() uint32 {
	return uint32(p.ptr.maxGeometryShaderInvocations)
}

// SetMaxGeometryShaderInvocations sets the value in maxGeometryShaderInvocations.
func (p PhysicalDeviceLimits) SetMaxGeometryShaderInvocations(value uint32) {
	p.ptr.maxGeometryShaderInvocations = (C.uint32_t)(value)
}

// GetMaxGeometryInputComponents returns the value in maxGeometryInputComponents.
func (p PhysicalDeviceLimits) GetMaxGeometryInputComponents() uint32 {
	return uint32(p.ptr.maxGeometryInputComponents)
}

// SetMaxGeometryInputComponents sets the value in maxGeometryInputComponents.
func (p PhysicalDeviceLimits) SetMaxGeometryInputComponents(value uint32) {
	p.ptr.maxGeometryInputComponents = (C.uint32_t)(value)
}

// GetMaxGeometryOutputComponents returns the value in maxGeometryOutputComponents.
func (p PhysicalDeviceLimits) GetMaxGeometryOutputComponents() uint32 {
	return uint32(p.ptr.maxGeometryOutputComponents)
}

// SetMaxGeometryOutputComponents sets the value in maxGeometryOutputComponents.
func (p PhysicalDeviceLimits) SetMaxGeometryOutputComponents(value uint32) {
	p.ptr.maxGeometryOutputComponents = (C.uint32_t)(value)
}

// GetMaxGeometryOutputVertices returns the value in maxGeometryOutputVertices.
func (p PhysicalDeviceLimits) GetMaxGeometryOutputVertices() uint32 {
	return uint32(p.ptr.maxGeometryOutputVertices)
}

// SetMaxGeometryOutputVertices sets the value in maxGeometryOutputVertices.
func (p PhysicalDeviceLimits) SetMaxGeometryOutputVertices(value uint32) {
	p.ptr.maxGeometryOutputVertices = (C.uint32_t)(value)
}

// GetMaxGeometryTotalOutputComponents returns the value in maxGeometryTotalOutputComponents.
func (p PhysicalDeviceLimits) GetMaxGeometryTotalOutputComponents() uint32 {
	return uint32(p.ptr.maxGeometryTotalOutputComponents)
}

// SetMaxGeometryTotalOutputComponents sets the value in maxGeometryTotalOutputComponents.
func (p PhysicalDeviceLimits) SetMaxGeometryTotalOutputComponents(value uint32) {
	p.ptr.maxGeometryTotalOutputComponents = (C.uint32_t)(value)
}

// GetMaxFragmentInputComponents returns the value in maxFragmentInputComponents.
func (p PhysicalDeviceLimits) GetMaxFragmentInputComponents() uint32 {
	return uint32(p.ptr.maxFragmentInputComponents)
}

// SetMaxFragmentInputComponents sets the value in maxFragmentInputComponents.
func (p PhysicalDeviceLimits) SetMaxFragmentInputComponents(value uint32) {
	p.ptr.maxFragmentInputComponents = (C.uint32_t)(value)
}

// GetMaxFragmentOutputAttachments returns the value in maxFragmentOutputAttachments.
func (p PhysicalDeviceLimits) GetMaxFragmentOutputAttachments() uint32 {
	return uint32(p.ptr.maxFragmentOutputAttachments)
}

// SetMaxFragmentOutputAttachments sets the value in maxFragmentOutputAttachments.
func (p PhysicalDeviceLimits) SetMaxFragmentOutputAttachments(value uint32) {
	p.ptr.maxFragmentOutputAttachments = (C.uint32_t)(value)
}

// GetMaxFragmentDualSrcAttachments returns the value in maxFragmentDualSrcAttachments.
func (p PhysicalDeviceLimits) GetMaxFragmentDualSrcAttachments() uint32 {
	return uint32(p.ptr.maxFragmentDualSrcAttachments)
}

// SetMaxFragmentDualSrcAttachments sets the value in maxFragmentDualSrcAttachments.
func (p PhysicalDeviceLimits) SetMaxFragmentDualSrcAttachments(value uint32) {
	p.ptr.maxFragmentDualSrcAttachments = (C.uint32_t)(value)
}

// GetMaxFragmentCombinedOutputResources returns the value in maxFragmentCombinedOutputResources.
func (p PhysicalDeviceLimits) GetMaxFragmentCombinedOutputResources() uint32 {
	return uint32(p.ptr.maxFragmentCombinedOutputResources)
}

// SetMaxFragmentCombinedOutputResources sets the value in maxFragmentCombinedOutputResources.
func (p PhysicalDeviceLimits) SetMaxFragmentCombinedOutputResources(value uint32) {
	p.ptr.maxFragmentCombinedOutputResources = (C.uint32_t)(value)
}

// GetMaxComputeSharedMemorySize returns the value in maxComputeSharedMemorySize.
func (p PhysicalDeviceLimits) GetMaxComputeSharedMemorySize() uint32 {
	return uint32(p.ptr.maxComputeSharedMemorySize)
}

// SetMaxComputeSharedMemorySize sets the value in maxComputeSharedMemorySize.
func (p PhysicalDeviceLimits) SetMaxComputeSharedMemorySize(value uint32) {
	p.ptr.maxComputeSharedMemorySize = (C.uint32_t)(value)
}

// PhysicalDeviceLimits.maxComputeWorkGroupCount is unsupported: category unsupported.

// GetMaxComputeWorkGroupInvocations returns the value in maxComputeWorkGroupInvocations.
func (p PhysicalDeviceLimits) GetMaxComputeWorkGroupInvocations() uint32 {
	return uint32(p.ptr.maxComputeWorkGroupInvocations)
}

// SetMaxComputeWorkGroupInvocations sets the value in maxComputeWorkGroupInvocations.
func (p PhysicalDeviceLimits) SetMaxComputeWorkGroupInvocations(value uint32) {
	p.ptr.maxComputeWorkGroupInvocations = (C.uint32_t)(value)
}

// PhysicalDeviceLimits.maxComputeWorkGroupSize is unsupported: category unsupported.

// GetSubPixelPrecisionBits returns the value in subPixelPrecisionBits.
func (p PhysicalDeviceLimits) GetSubPixelPrecisionBits() uint32 {
	return uint32(p.ptr.subPixelPrecisionBits)
}

// SetSubPixelPrecisionBits sets the value in subPixelPrecisionBits.
func (p PhysicalDeviceLimits) SetSubPixelPrecisionBits(value uint32) {
	p.ptr.subPixelPrecisionBits = (C.uint32_t)(value)
}

// GetSubTexelPrecisionBits returns the value in subTexelPrecisionBits.
func (p PhysicalDeviceLimits) GetSubTexelPrecisionBits() uint32 {
	return uint32(p.ptr.subTexelPrecisionBits)
}

// SetSubTexelPrecisionBits sets the value in subTexelPrecisionBits.
func (p PhysicalDeviceLimits) SetSubTexelPrecisionBits(value uint32) {
	p.ptr.subTexelPrecisionBits = (C.uint32_t)(value)
}

// GetMipmapPrecisionBits returns the value in mipmapPrecisionBits.
func (p PhysicalDeviceLimits) GetMipmapPrecisionBits() uint32 {
	return uint32(p.ptr.mipmapPrecisionBits)
}

// SetMipmapPrecisionBits sets the value in mipmapPrecisionBits.
func (p PhysicalDeviceLimits) SetMipmapPrecisionBits(value uint32) {
	p.ptr.mipmapPrecisionBits = (C.uint32_t)(value)
}

// GetMaxDrawIndexedIndexValue returns the value in maxDrawIndexedIndexValue.
func (p PhysicalDeviceLimits) GetMaxDrawIndexedIndexValue() uint32 {
	return uint32(p.ptr.maxDrawIndexedIndexValue)
}

// SetMaxDrawIndexedIndexValue sets the value in maxDrawIndexedIndexValue.
func (p PhysicalDeviceLimits) SetMaxDrawIndexedIndexValue(value uint32) {
	p.ptr.maxDrawIndexedIndexValue = (C.uint32_t)(value)
}

// GetMaxDrawIndirectCount returns the value in maxDrawIndirectCount.
func (p PhysicalDeviceLimits) GetMaxDrawIndirectCount() uint32 {
	return uint32(p.ptr.maxDrawIndirectCount)
}

// SetMaxDrawIndirectCount sets the value in maxDrawIndirectCount.
func (p PhysicalDeviceLimits) SetMaxDrawIndirectCount(value uint32) {
	p.ptr.maxDrawIndirectCount = (C.uint32_t)(value)
}

// GetMaxSamplerLodBias returns the value in maxSamplerLodBias.
func (p PhysicalDeviceLimits) GetMaxSamplerLodBias() float32 {
	return float32(p.ptr.maxSamplerLodBias)
}

// SetMaxSamplerLodBias sets the value in maxSamplerLodBias.
func (p PhysicalDeviceLimits) SetMaxSamplerLodBias(value float32) {
	p.ptr.maxSamplerLodBias = (C.float)(value)
}

// GetMaxSamplerAnisotropy returns the value in maxSamplerAnisotropy.
func (p PhysicalDeviceLimits) GetMaxSamplerAnisotropy() float32 {
	return float32(p.ptr.maxSamplerAnisotropy)
}

// SetMaxSamplerAnisotropy sets the value in maxSamplerAnisotropy.
func (p PhysicalDeviceLimits) SetMaxSamplerAnisotropy(value float32) {
	p.ptr.maxSamplerAnisotropy = (C.float)(value)
}

// GetMaxViewports returns the value in maxViewports.
func (p PhysicalDeviceLimits) GetMaxViewports() uint32 {
	return uint32(p.ptr.maxViewports)
}

// SetMaxViewports sets the value in maxViewports.
func (p PhysicalDeviceLimits) SetMaxViewports(value uint32) {
	p.ptr.maxViewports = (C.uint32_t)(value)
}

// PhysicalDeviceLimits.maxViewportDimensions is unsupported: category unsupported.

// PhysicalDeviceLimits.viewportBoundsRange is unsupported: category unsupported.

// GetViewportSubPixelBits returns the value in viewportSubPixelBits.
func (p PhysicalDeviceLimits) GetViewportSubPixelBits() uint32 {
	return uint32(p.ptr.viewportSubPixelBits)
}

// SetViewportSubPixelBits sets the value in viewportSubPixelBits.
func (p PhysicalDeviceLimits) SetViewportSubPixelBits(value uint32) {
	p.ptr.viewportSubPixelBits = (C.uint32_t)(value)
}

// GetMinMemoryMapAlignment returns the value in minMemoryMapAlignment.
func (p PhysicalDeviceLimits) GetMinMemoryMapAlignment() uintptr {
	return uintptr(p.ptr.minMemoryMapAlignment)
}

// SetMinMemoryMapAlignment sets the value in minMemoryMapAlignment.
func (p PhysicalDeviceLimits) SetMinMemoryMapAlignment(value uintptr) {
	p.ptr.minMemoryMapAlignment = (C.size_t)(value)
}

// GetMinTexelBufferOffsetAlignment returns the value in minTexelBufferOffsetAlignment.
func (p PhysicalDeviceLimits) GetMinTexelBufferOffsetAlignment() DeviceSize {
	return DeviceSize(p.ptr.minTexelBufferOffsetAlignment)
}

// SetMinTexelBufferOffsetAlignment sets the value in minTexelBufferOffsetAlignment.
func (p PhysicalDeviceLimits) SetMinTexelBufferOffsetAlignment(value DeviceSize) {
	p.ptr.minTexelBufferOffsetAlignment = (C.VkDeviceSize)(value)
}

// GetMinUniformBufferOffsetAlignment returns the value in minUniformBufferOffsetAlignment.
func (p PhysicalDeviceLimits) GetMinUniformBufferOffsetAlignment() DeviceSize {
	return DeviceSize(p.ptr.minUniformBufferOffsetAlignment)
}

// SetMinUniformBufferOffsetAlignment sets the value in minUniformBufferOffsetAlignment.
func (p PhysicalDeviceLimits) SetMinUniformBufferOffsetAlignment(value DeviceSize) {
	p.ptr.minUniformBufferOffsetAlignment = (C.VkDeviceSize)(value)
}

// GetMinStorageBufferOffsetAlignment returns the value in minStorageBufferOffsetAlignment.
func (p PhysicalDeviceLimits) GetMinStorageBufferOffsetAlignment() DeviceSize {
	return DeviceSize(p.ptr.minStorageBufferOffsetAlignment)
}

// SetMinStorageBufferOffsetAlignment sets the value in minStorageBufferOffsetAlignment.
func (p PhysicalDeviceLimits) SetMinStorageBufferOffsetAlignment(value DeviceSize) {
	p.ptr.minStorageBufferOffsetAlignment = (C.VkDeviceSize)(value)
}

// GetMinTexelOffset returns the value in minTexelOffset.
func (p PhysicalDeviceLimits) GetMinTexelOffset() int32 {
	return int32(p.ptr.minTexelOffset)
}

// SetMinTexelOffset sets the value in minTexelOffset.
func (p PhysicalDeviceLimits) SetMinTexelOffset(value int32) {
	p.ptr.minTexelOffset = (C.int32_t)(value)
}

// GetMaxTexelOffset returns the value in maxTexelOffset.
func (p PhysicalDeviceLimits) GetMaxTexelOffset() uint32 {
	return uint32(p.ptr.maxTexelOffset)
}

// SetMaxTexelOffset sets the value in maxTexelOffset.
func (p PhysicalDeviceLimits) SetMaxTexelOffset(value uint32) {
	p.ptr.maxTexelOffset = (C.uint32_t)(value)
}

// GetMinTexelGatherOffset returns the value in minTexelGatherOffset.
func (p PhysicalDeviceLimits) GetMinTexelGatherOffset() int32 {
	return int32(p.ptr.minTexelGatherOffset)
}

// SetMinTexelGatherOffset sets the value in minTexelGatherOffset.
func (p PhysicalDeviceLimits) SetMinTexelGatherOffset(value int32) {
	p.ptr.minTexelGatherOffset = (C.int32_t)(value)
}

// GetMaxTexelGatherOffset returns the value in maxTexelGatherOffset.
func (p PhysicalDeviceLimits) GetMaxTexelGatherOffset() uint32 {
	return uint32(p.ptr.maxTexelGatherOffset)
}

// SetMaxTexelGatherOffset sets the value in maxTexelGatherOffset.
func (p PhysicalDeviceLimits) SetMaxTexelGatherOffset(value uint32) {
	p.ptr.maxTexelGatherOffset = (C.uint32_t)(value)
}

// GetMinInterpolationOffset returns the value in minInterpolationOffset.
func (p PhysicalDeviceLimits) GetMinInterpolationOffset() float32 {
	return float32(p.ptr.minInterpolationOffset)
}

// SetMinInterpolationOffset sets the value in minInterpolationOffset.
func (p PhysicalDeviceLimits) SetMinInterpolationOffset(value float32) {
	p.ptr.minInterpolationOffset = (C.float)(value)
}

// GetMaxInterpolationOffset returns the value in maxInterpolationOffset.
func (p PhysicalDeviceLimits) GetMaxInterpolationOffset() float32 {
	return float32(p.ptr.maxInterpolationOffset)
}

// SetMaxInterpolationOffset sets the value in maxInterpolationOffset.
func (p PhysicalDeviceLimits) SetMaxInterpolationOffset(value float32) {
	p.ptr.maxInterpolationOffset = (C.float)(value)
}

// GetSubPixelInterpolationOffsetBits returns the value in subPixelInterpolationOffsetBits.
func (p PhysicalDeviceLimits) GetSubPixelInterpolationOffsetBits() uint32 {
	return uint32(p.ptr.subPixelInterpolationOffsetBits)
}

// SetSubPixelInterpolationOffsetBits sets the value in subPixelInterpolationOffsetBits.
func (p PhysicalDeviceLimits) SetSubPixelInterpolationOffsetBits(value uint32) {
	p.ptr.subPixelInterpolationOffsetBits = (C.uint32_t)(value)
}

// GetMaxFramebufferWidth returns the value in maxFramebufferWidth.
func (p PhysicalDeviceLimits) GetMaxFramebufferWidth() uint32 {
	return uint32(p.ptr.maxFramebufferWidth)
}

// SetMaxFramebufferWidth sets the value in maxFramebufferWidth.
func (p PhysicalDeviceLimits) SetMaxFramebufferWidth(value uint32) {
	p.ptr.maxFramebufferWidth = (C.uint32_t)(value)
}

// GetMaxFramebufferHeight returns the value in maxFramebufferHeight.
func (p PhysicalDeviceLimits) GetMaxFramebufferHeight() uint32 {
	return uint32(p.ptr.maxFramebufferHeight)
}

// SetMaxFramebufferHeight sets the value in maxFramebufferHeight.
func (p PhysicalDeviceLimits) SetMaxFramebufferHeight(value uint32) {
	p.ptr.maxFramebufferHeight = (C.uint32_t)(value)
}

// GetMaxFramebufferLayers returns the value in maxFramebufferLayers.
func (p PhysicalDeviceLimits) GetMaxFramebufferLayers() uint32 {
	return uint32(p.ptr.maxFramebufferLayers)
}

// SetMaxFramebufferLayers sets the value in maxFramebufferLayers.
func (p PhysicalDeviceLimits) SetMaxFramebufferLayers(value uint32) {
	p.ptr.maxFramebufferLayers = (C.uint32_t)(value)
}

// GetFramebufferColorSampleCounts returns the value in framebufferColorSampleCounts.
func (p PhysicalDeviceLimits) GetFramebufferColorSampleCounts() SampleCountFlags {
	return SampleCountFlags(p.ptr.framebufferColorSampleCounts)
}

// SetFramebufferColorSampleCounts sets the value in framebufferColorSampleCounts.
func (p PhysicalDeviceLimits) SetFramebufferColorSampleCounts(value SampleCountFlags) {
	p.ptr.framebufferColorSampleCounts = (C.VkSampleCountFlags)(value)
}

// GetFramebufferDepthSampleCounts returns the value in framebufferDepthSampleCounts.
func (p PhysicalDeviceLimits) GetFramebufferDepthSampleCounts() SampleCountFlags {
	return SampleCountFlags(p.ptr.framebufferDepthSampleCounts)
}

// SetFramebufferDepthSampleCounts sets the value in framebufferDepthSampleCounts.
func (p PhysicalDeviceLimits) SetFramebufferDepthSampleCounts(value SampleCountFlags) {
	p.ptr.framebufferDepthSampleCounts = (C.VkSampleCountFlags)(value)
}

// GetFramebufferStencilSampleCounts returns the value in framebufferStencilSampleCounts.
func (p PhysicalDeviceLimits) GetFramebufferStencilSampleCounts() SampleCountFlags {
	return SampleCountFlags(p.ptr.framebufferStencilSampleCounts)
}

// SetFramebufferStencilSampleCounts sets the value in framebufferStencilSampleCounts.
func (p PhysicalDeviceLimits) SetFramebufferStencilSampleCounts(value SampleCountFlags) {
	p.ptr.framebufferStencilSampleCounts = (C.VkSampleCountFlags)(value)
}

// GetFramebufferNoAttachmentsSampleCounts returns the value in framebufferNoAttachmentsSampleCounts.
func (p PhysicalDeviceLimits) GetFramebufferNoAttachmentsSampleCounts() SampleCountFlags {
	return SampleCountFlags(p.ptr.framebufferNoAttachmentsSampleCounts)
}

// SetFramebufferNoAttachmentsSampleCounts sets the value in framebufferNoAttachmentsSampleCounts.
func (p PhysicalDeviceLimits) SetFramebufferNoAttachmentsSampleCounts(value SampleCountFlags) {
	p.ptr.framebufferNoAttachmentsSampleCounts = (C.VkSampleCountFlags)(value)
}

// GetMaxColorAttachments returns the value in maxColorAttachments.
func (p PhysicalDeviceLimits) GetMaxColorAttachments() uint32 {
	return uint32(p.ptr.maxColorAttachments)
}

// SetMaxColorAttachments sets the value in maxColorAttachments.
func (p PhysicalDeviceLimits) SetMaxColorAttachments(value uint32) {
	p.ptr.maxColorAttachments = (C.uint32_t)(value)
}

// GetSampledImageColorSampleCounts returns the value in sampledImageColorSampleCounts.
func (p PhysicalDeviceLimits) GetSampledImageColorSampleCounts() SampleCountFlags {
	return SampleCountFlags(p.ptr.sampledImageColorSampleCounts)
}

// SetSampledImageColorSampleCounts sets the value in sampledImageColorSampleCounts.
func (p PhysicalDeviceLimits) SetSampledImageColorSampleCounts(value SampleCountFlags) {
	p.ptr.sampledImageColorSampleCounts = (C.VkSampleCountFlags)(value)
}

// GetSampledImageIntegerSampleCounts returns the value in sampledImageIntegerSampleCounts.
func (p PhysicalDeviceLimits) GetSampledImageIntegerSampleCounts() SampleCountFlags {
	return SampleCountFlags(p.ptr.sampledImageIntegerSampleCounts)
}

// SetSampledImageIntegerSampleCounts sets the value in sampledImageIntegerSampleCounts.
func (p PhysicalDeviceLimits) SetSampledImageIntegerSampleCounts(value SampleCountFlags) {
	p.ptr.sampledImageIntegerSampleCounts = (C.VkSampleCountFlags)(value)
}

// GetSampledImageDepthSampleCounts returns the value in sampledImageDepthSampleCounts.
func (p PhysicalDeviceLimits) GetSampledImageDepthSampleCounts() SampleCountFlags {
	return SampleCountFlags(p.ptr.sampledImageDepthSampleCounts)
}

// SetSampledImageDepthSampleCounts sets the value in sampledImageDepthSampleCounts.
func (p PhysicalDeviceLimits) SetSampledImageDepthSampleCounts(value SampleCountFlags) {
	p.ptr.sampledImageDepthSampleCounts = (C.VkSampleCountFlags)(value)
}

// GetSampledImageStencilSampleCounts returns the value in sampledImageStencilSampleCounts.
func (p PhysicalDeviceLimits) GetSampledImageStencilSampleCounts() SampleCountFlags {
	return SampleCountFlags(p.ptr.sampledImageStencilSampleCounts)
}

// SetSampledImageStencilSampleCounts sets the value in sampledImageStencilSampleCounts.
func (p PhysicalDeviceLimits) SetSampledImageStencilSampleCounts(value SampleCountFlags) {
	p.ptr.sampledImageStencilSampleCounts = (C.VkSampleCountFlags)(value)
}

// GetStorageImageSampleCounts returns the value in storageImageSampleCounts.
func (p PhysicalDeviceLimits) GetStorageImageSampleCounts() SampleCountFlags {
	return SampleCountFlags(p.ptr.storageImageSampleCounts)
}

// SetStorageImageSampleCounts sets the value in storageImageSampleCounts.
func (p PhysicalDeviceLimits) SetStorageImageSampleCounts(value SampleCountFlags) {
	p.ptr.storageImageSampleCounts = (C.VkSampleCountFlags)(value)
}

// GetMaxSampleMaskWords returns the value in maxSampleMaskWords.
func (p PhysicalDeviceLimits) GetMaxSampleMaskWords() uint32 {
	return uint32(p.ptr.maxSampleMaskWords)
}

// SetMaxSampleMaskWords sets the value in maxSampleMaskWords.
func (p PhysicalDeviceLimits) SetMaxSampleMaskWords(value uint32) {
	p.ptr.maxSampleMaskWords = (C.uint32_t)(value)
}

// GetTimestampComputeAndGraphics returns the value in timestampComputeAndGraphics.
func (p PhysicalDeviceLimits) GetTimestampComputeAndGraphics() bool {
	return p.ptr.timestampComputeAndGraphics != 0
}

// SetTimestampComputeAndGraphics sets the value in timestampComputeAndGraphics.
func (p PhysicalDeviceLimits) SetTimestampComputeAndGraphics(value bool) {
	if value {
		p.ptr.timestampComputeAndGraphics = C.VkBool32(1)
	} else {
		p.ptr.timestampComputeAndGraphics = C.VkBool32(0)
	}
}

// GetTimestampPeriod returns the value in timestampPeriod.
func (p PhysicalDeviceLimits) GetTimestampPeriod() float32 {
	return float32(p.ptr.timestampPeriod)
}

// SetTimestampPeriod sets the value in timestampPeriod.
func (p PhysicalDeviceLimits) SetTimestampPeriod(value float32) {
	p.ptr.timestampPeriod = (C.float)(value)
}

// GetMaxClipDistances returns the value in maxClipDistances.
func (p PhysicalDeviceLimits) GetMaxClipDistances() uint32 {
	return uint32(p.ptr.maxClipDistances)
}

// SetMaxClipDistances sets the value in maxClipDistances.
func (p PhysicalDeviceLimits) SetMaxClipDistances(value uint32) {
	p.ptr.maxClipDistances = (C.uint32_t)(value)
}

// GetMaxCullDistances returns the value in maxCullDistances.
func (p PhysicalDeviceLimits) GetMaxCullDistances() uint32 {
	return uint32(p.ptr.maxCullDistances)
}

// SetMaxCullDistances sets the value in maxCullDistances.
func (p PhysicalDeviceLimits) SetMaxCullDistances(value uint32) {
	p.ptr.maxCullDistances = (C.uint32_t)(value)
}

// GetMaxCombinedClipAndCullDistances returns the value in maxCombinedClipAndCullDistances.
func (p PhysicalDeviceLimits) GetMaxCombinedClipAndCullDistances() uint32 {
	return uint32(p.ptr.maxCombinedClipAndCullDistances)
}

// SetMaxCombinedClipAndCullDistances sets the value in maxCombinedClipAndCullDistances.
func (p PhysicalDeviceLimits) SetMaxCombinedClipAndCullDistances(value uint32) {
	p.ptr.maxCombinedClipAndCullDistances = (C.uint32_t)(value)
}

// GetDiscreteQueuePriorities returns the value in discreteQueuePriorities.
func (p PhysicalDeviceLimits) GetDiscreteQueuePriorities() uint32 {
	return uint32(p.ptr.discreteQueuePriorities)
}

// SetDiscreteQueuePriorities sets the value in discreteQueuePriorities.
func (p PhysicalDeviceLimits) SetDiscreteQueuePriorities(value uint32) {
	p.ptr.discreteQueuePriorities = (C.uint32_t)(value)
}

// PhysicalDeviceLimits.pointSizeRange is unsupported: category unsupported.

// PhysicalDeviceLimits.lineWidthRange is unsupported: category unsupported.

// GetPointSizeGranularity returns the value in pointSizeGranularity.
func (p PhysicalDeviceLimits) GetPointSizeGranularity() float32 {
	return float32(p.ptr.pointSizeGranularity)
}

// SetPointSizeGranularity sets the value in pointSizeGranularity.
func (p PhysicalDeviceLimits) SetPointSizeGranularity(value float32) {
	p.ptr.pointSizeGranularity = (C.float)(value)
}

// GetLineWidthGranularity returns the value in lineWidthGranularity.
func (p PhysicalDeviceLimits) GetLineWidthGranularity() float32 {
	return float32(p.ptr.lineWidthGranularity)
}

// SetLineWidthGranularity sets the value in lineWidthGranularity.
func (p PhysicalDeviceLimits) SetLineWidthGranularity(value float32) {
	p.ptr.lineWidthGranularity = (C.float)(value)
}

// GetStrictLines returns the value in strictLines.
func (p PhysicalDeviceLimits) GetStrictLines() bool {
	return p.ptr.strictLines != 0
}

// SetStrictLines sets the value in strictLines.
func (p PhysicalDeviceLimits) SetStrictLines(value bool) {
	if value {
		p.ptr.strictLines = C.VkBool32(1)
	} else {
		p.ptr.strictLines = C.VkBool32(0)
	}
}

// GetStandardSampleLocations returns the value in standardSampleLocations.
func (p PhysicalDeviceLimits) GetStandardSampleLocations() bool {
	return p.ptr.standardSampleLocations != 0
}

// SetStandardSampleLocations sets the value in standardSampleLocations.
func (p PhysicalDeviceLimits) SetStandardSampleLocations(value bool) {
	if value {
		p.ptr.standardSampleLocations = C.VkBool32(1)
	} else {
		p.ptr.standardSampleLocations = C.VkBool32(0)
	}
}

// GetOptimalBufferCopyOffsetAlignment returns the value in optimalBufferCopyOffsetAlignment.
func (p PhysicalDeviceLimits) GetOptimalBufferCopyOffsetAlignment() DeviceSize {
	return DeviceSize(p.ptr.optimalBufferCopyOffsetAlignment)
}

// SetOptimalBufferCopyOffsetAlignment sets the value in optimalBufferCopyOffsetAlignment.
func (p PhysicalDeviceLimits) SetOptimalBufferCopyOffsetAlignment(value DeviceSize) {
	p.ptr.optimalBufferCopyOffsetAlignment = (C.VkDeviceSize)(value)
}

// GetOptimalBufferCopyRowPitchAlignment returns the value in optimalBufferCopyRowPitchAlignment.
func (p PhysicalDeviceLimits) GetOptimalBufferCopyRowPitchAlignment() DeviceSize {
	return DeviceSize(p.ptr.optimalBufferCopyRowPitchAlignment)
}

// SetOptimalBufferCopyRowPitchAlignment sets the value in optimalBufferCopyRowPitchAlignment.
func (p PhysicalDeviceLimits) SetOptimalBufferCopyRowPitchAlignment(value DeviceSize) {
	p.ptr.optimalBufferCopyRowPitchAlignment = (C.VkDeviceSize)(value)
}

// GetNonCoherentAtomSize returns the value in nonCoherentAtomSize.
func (p PhysicalDeviceLimits) GetNonCoherentAtomSize() DeviceSize {
	return DeviceSize(p.ptr.nonCoherentAtomSize)
}

// SetNonCoherentAtomSize sets the value in nonCoherentAtomSize.
func (p PhysicalDeviceLimits) SetNonCoherentAtomSize(value DeviceSize) {
	p.ptr.nonCoherentAtomSize = (C.VkDeviceSize)(value)
}

// PhysicalDeviceLineRasterizationFeatures wraps VkPhysicalDeviceLineRasterizationFeatures.
type PhysicalDeviceLineRasterizationFeatures struct {
	ptr *C.VkPhysicalDeviceLineRasterizationFeatures
}

// PhysicalDeviceLineRasterizationFeaturesNil is a null pointer.
var PhysicalDeviceLineRasterizationFeaturesNil PhysicalDeviceLineRasterizationFeatures

// PhysicalDeviceLineRasterizationFeaturesSizeOf is the byte size of VkPhysicalDeviceLineRasterizationFeatures.
const PhysicalDeviceLineRasterizationFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceLineRasterizationFeatures)

// PhysicalDeviceLineRasterizationFeaturesFromPtr converts a raw pointer to a PhysicalDeviceLineRasterizationFeatures.
func PhysicalDeviceLineRasterizationFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceLineRasterizationFeatures {
	return PhysicalDeviceLineRasterizationFeatures{ptr: (*C.VkPhysicalDeviceLineRasterizationFeatures)(ptr)}
}

// PhysicalDeviceLineRasterizationFeaturesAlloc allocates a continuous block of VkPhysicalDeviceLineRasterizationFeatures.
func PhysicalDeviceLineRasterizationFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceLineRasterizationFeatures {
	ptr := alloc.Allocate(PhysicalDeviceLineRasterizationFeaturesSizeOf * count)
	return PhysicalDeviceLineRasterizationFeatures{ptr: (*C.VkPhysicalDeviceLineRasterizationFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceLineRasterizationFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceLineRasterizationFeatures) Offset(offset int) PhysicalDeviceLineRasterizationFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceLineRasterizationFeaturesSizeOf)
	return PhysicalDeviceLineRasterizationFeatures{ptr: (*C.VkPhysicalDeviceLineRasterizationFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceLineRasterizationFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceLineRasterizationFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceLineRasterizationFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceLineRasterizationFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetRectangularLines returns the value in rectangularLines.
func (p PhysicalDeviceLineRasterizationFeatures) GetRectangularLines() bool {
	return p.ptr.rectangularLines != 0
}

// SetRectangularLines sets the value in rectangularLines.
func (p PhysicalDeviceLineRasterizationFeatures) SetRectangularLines(value bool) {
	if value {
		p.ptr.rectangularLines = C.VkBool32(1)
	} else {
		p.ptr.rectangularLines = C.VkBool32(0)
	}
}

// GetBresenhamLines returns the value in bresenhamLines.
func (p PhysicalDeviceLineRasterizationFeatures) GetBresenhamLines() bool {
	return p.ptr.bresenhamLines != 0
}

// SetBresenhamLines sets the value in bresenhamLines.
func (p PhysicalDeviceLineRasterizationFeatures) SetBresenhamLines(value bool) {
	if value {
		p.ptr.bresenhamLines = C.VkBool32(1)
	} else {
		p.ptr.bresenhamLines = C.VkBool32(0)
	}
}

// GetSmoothLines returns the value in smoothLines.
func (p PhysicalDeviceLineRasterizationFeatures) GetSmoothLines() bool {
	return p.ptr.smoothLines != 0
}

// SetSmoothLines sets the value in smoothLines.
func (p PhysicalDeviceLineRasterizationFeatures) SetSmoothLines(value bool) {
	if value {
		p.ptr.smoothLines = C.VkBool32(1)
	} else {
		p.ptr.smoothLines = C.VkBool32(0)
	}
}

// GetStippledRectangularLines returns the value in stippledRectangularLines.
func (p PhysicalDeviceLineRasterizationFeatures) GetStippledRectangularLines() bool {
	return p.ptr.stippledRectangularLines != 0
}

// SetStippledRectangularLines sets the value in stippledRectangularLines.
func (p PhysicalDeviceLineRasterizationFeatures) SetStippledRectangularLines(value bool) {
	if value {
		p.ptr.stippledRectangularLines = C.VkBool32(1)
	} else {
		p.ptr.stippledRectangularLines = C.VkBool32(0)
	}
}

// GetStippledBresenhamLines returns the value in stippledBresenhamLines.
func (p PhysicalDeviceLineRasterizationFeatures) GetStippledBresenhamLines() bool {
	return p.ptr.stippledBresenhamLines != 0
}

// SetStippledBresenhamLines sets the value in stippledBresenhamLines.
func (p PhysicalDeviceLineRasterizationFeatures) SetStippledBresenhamLines(value bool) {
	if value {
		p.ptr.stippledBresenhamLines = C.VkBool32(1)
	} else {
		p.ptr.stippledBresenhamLines = C.VkBool32(0)
	}
}

// GetStippledSmoothLines returns the value in stippledSmoothLines.
func (p PhysicalDeviceLineRasterizationFeatures) GetStippledSmoothLines() bool {
	return p.ptr.stippledSmoothLines != 0
}

// SetStippledSmoothLines sets the value in stippledSmoothLines.
func (p PhysicalDeviceLineRasterizationFeatures) SetStippledSmoothLines(value bool) {
	if value {
		p.ptr.stippledSmoothLines = C.VkBool32(1)
	} else {
		p.ptr.stippledSmoothLines = C.VkBool32(0)
	}
}

// PhysicalDeviceLineRasterizationProperties wraps VkPhysicalDeviceLineRasterizationProperties.
type PhysicalDeviceLineRasterizationProperties struct {
	ptr *C.VkPhysicalDeviceLineRasterizationProperties
}

// PhysicalDeviceLineRasterizationPropertiesNil is a null pointer.
var PhysicalDeviceLineRasterizationPropertiesNil PhysicalDeviceLineRasterizationProperties

// PhysicalDeviceLineRasterizationPropertiesSizeOf is the byte size of VkPhysicalDeviceLineRasterizationProperties.
const PhysicalDeviceLineRasterizationPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceLineRasterizationProperties)

// PhysicalDeviceLineRasterizationPropertiesFromPtr converts a raw pointer to a PhysicalDeviceLineRasterizationProperties.
func PhysicalDeviceLineRasterizationPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceLineRasterizationProperties {
	return PhysicalDeviceLineRasterizationProperties{ptr: (*C.VkPhysicalDeviceLineRasterizationProperties)(ptr)}
}

// PhysicalDeviceLineRasterizationPropertiesAlloc allocates a continuous block of VkPhysicalDeviceLineRasterizationProperties.
func PhysicalDeviceLineRasterizationPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceLineRasterizationProperties {
	ptr := alloc.Allocate(PhysicalDeviceLineRasterizationPropertiesSizeOf * count)
	return PhysicalDeviceLineRasterizationProperties{ptr: (*C.VkPhysicalDeviceLineRasterizationProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceLineRasterizationProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceLineRasterizationProperties) Offset(offset int) PhysicalDeviceLineRasterizationProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceLineRasterizationPropertiesSizeOf)
	return PhysicalDeviceLineRasterizationProperties{ptr: (*C.VkPhysicalDeviceLineRasterizationProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceLineRasterizationProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceLineRasterizationProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceLineRasterizationProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceLineRasterizationProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetLineSubPixelPrecisionBits returns the value in lineSubPixelPrecisionBits.
func (p PhysicalDeviceLineRasterizationProperties) GetLineSubPixelPrecisionBits() uint32 {
	return uint32(p.ptr.lineSubPixelPrecisionBits)
}

// SetLineSubPixelPrecisionBits sets the value in lineSubPixelPrecisionBits.
func (p PhysicalDeviceLineRasterizationProperties) SetLineSubPixelPrecisionBits(value uint32) {
	p.ptr.lineSubPixelPrecisionBits = (C.uint32_t)(value)
}

// PhysicalDeviceMaintenance3Properties wraps VkPhysicalDeviceMaintenance3Properties.
type PhysicalDeviceMaintenance3Properties struct {
	ptr *C.VkPhysicalDeviceMaintenance3Properties
}

// PhysicalDeviceMaintenance3PropertiesNil is a null pointer.
var PhysicalDeviceMaintenance3PropertiesNil PhysicalDeviceMaintenance3Properties

// PhysicalDeviceMaintenance3PropertiesSizeOf is the byte size of VkPhysicalDeviceMaintenance3Properties.
const PhysicalDeviceMaintenance3PropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceMaintenance3Properties)

// PhysicalDeviceMaintenance3PropertiesFromPtr converts a raw pointer to a PhysicalDeviceMaintenance3Properties.
func PhysicalDeviceMaintenance3PropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceMaintenance3Properties {
	return PhysicalDeviceMaintenance3Properties{ptr: (*C.VkPhysicalDeviceMaintenance3Properties)(ptr)}
}

// PhysicalDeviceMaintenance3PropertiesAlloc allocates a continuous block of VkPhysicalDeviceMaintenance3Properties.
func PhysicalDeviceMaintenance3PropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceMaintenance3Properties {
	ptr := alloc.Allocate(PhysicalDeviceMaintenance3PropertiesSizeOf * count)
	return PhysicalDeviceMaintenance3Properties{ptr: (*C.VkPhysicalDeviceMaintenance3Properties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceMaintenance3Properties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceMaintenance3Properties) Offset(offset int) PhysicalDeviceMaintenance3Properties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceMaintenance3PropertiesSizeOf)
	return PhysicalDeviceMaintenance3Properties{ptr: (*C.VkPhysicalDeviceMaintenance3Properties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceMaintenance3Properties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceMaintenance3Properties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceMaintenance3Properties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceMaintenance3Properties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMaxPerSetDescriptors returns the value in maxPerSetDescriptors.
func (p PhysicalDeviceMaintenance3Properties) GetMaxPerSetDescriptors() uint32 {
	return uint32(p.ptr.maxPerSetDescriptors)
}

// SetMaxPerSetDescriptors sets the value in maxPerSetDescriptors.
func (p PhysicalDeviceMaintenance3Properties) SetMaxPerSetDescriptors(value uint32) {
	p.ptr.maxPerSetDescriptors = (C.uint32_t)(value)
}

// GetMaxMemoryAllocationSize returns the value in maxMemoryAllocationSize.
func (p PhysicalDeviceMaintenance3Properties) GetMaxMemoryAllocationSize() DeviceSize {
	return DeviceSize(p.ptr.maxMemoryAllocationSize)
}

// SetMaxMemoryAllocationSize sets the value in maxMemoryAllocationSize.
func (p PhysicalDeviceMaintenance3Properties) SetMaxMemoryAllocationSize(value DeviceSize) {
	p.ptr.maxMemoryAllocationSize = (C.VkDeviceSize)(value)
}

// PhysicalDeviceMaintenance4Features wraps VkPhysicalDeviceMaintenance4Features.
type PhysicalDeviceMaintenance4Features struct {
	ptr *C.VkPhysicalDeviceMaintenance4Features
}

// PhysicalDeviceMaintenance4FeaturesNil is a null pointer.
var PhysicalDeviceMaintenance4FeaturesNil PhysicalDeviceMaintenance4Features

// PhysicalDeviceMaintenance4FeaturesSizeOf is the byte size of VkPhysicalDeviceMaintenance4Features.
const PhysicalDeviceMaintenance4FeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceMaintenance4Features)

// PhysicalDeviceMaintenance4FeaturesFromPtr converts a raw pointer to a PhysicalDeviceMaintenance4Features.
func PhysicalDeviceMaintenance4FeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceMaintenance4Features {
	return PhysicalDeviceMaintenance4Features{ptr: (*C.VkPhysicalDeviceMaintenance4Features)(ptr)}
}

// PhysicalDeviceMaintenance4FeaturesAlloc allocates a continuous block of VkPhysicalDeviceMaintenance4Features.
func PhysicalDeviceMaintenance4FeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceMaintenance4Features {
	ptr := alloc.Allocate(PhysicalDeviceMaintenance4FeaturesSizeOf * count)
	return PhysicalDeviceMaintenance4Features{ptr: (*C.VkPhysicalDeviceMaintenance4Features)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceMaintenance4Features) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceMaintenance4Features) Offset(offset int) PhysicalDeviceMaintenance4Features {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceMaintenance4FeaturesSizeOf)
	return PhysicalDeviceMaintenance4Features{ptr: (*C.VkPhysicalDeviceMaintenance4Features)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceMaintenance4Features) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceMaintenance4Features) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceMaintenance4Features) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceMaintenance4Features) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMaintenance4 returns the value in maintenance4.
func (p PhysicalDeviceMaintenance4Features) GetMaintenance4() bool {
	return p.ptr.maintenance4 != 0
}

// SetMaintenance4 sets the value in maintenance4.
func (p PhysicalDeviceMaintenance4Features) SetMaintenance4(value bool) {
	if value {
		p.ptr.maintenance4 = C.VkBool32(1)
	} else {
		p.ptr.maintenance4 = C.VkBool32(0)
	}
}

// PhysicalDeviceMaintenance4Properties wraps VkPhysicalDeviceMaintenance4Properties.
type PhysicalDeviceMaintenance4Properties struct {
	ptr *C.VkPhysicalDeviceMaintenance4Properties
}

// PhysicalDeviceMaintenance4PropertiesNil is a null pointer.
var PhysicalDeviceMaintenance4PropertiesNil PhysicalDeviceMaintenance4Properties

// PhysicalDeviceMaintenance4PropertiesSizeOf is the byte size of VkPhysicalDeviceMaintenance4Properties.
const PhysicalDeviceMaintenance4PropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceMaintenance4Properties)

// PhysicalDeviceMaintenance4PropertiesFromPtr converts a raw pointer to a PhysicalDeviceMaintenance4Properties.
func PhysicalDeviceMaintenance4PropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceMaintenance4Properties {
	return PhysicalDeviceMaintenance4Properties{ptr: (*C.VkPhysicalDeviceMaintenance4Properties)(ptr)}
}

// PhysicalDeviceMaintenance4PropertiesAlloc allocates a continuous block of VkPhysicalDeviceMaintenance4Properties.
func PhysicalDeviceMaintenance4PropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceMaintenance4Properties {
	ptr := alloc.Allocate(PhysicalDeviceMaintenance4PropertiesSizeOf * count)
	return PhysicalDeviceMaintenance4Properties{ptr: (*C.VkPhysicalDeviceMaintenance4Properties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceMaintenance4Properties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceMaintenance4Properties) Offset(offset int) PhysicalDeviceMaintenance4Properties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceMaintenance4PropertiesSizeOf)
	return PhysicalDeviceMaintenance4Properties{ptr: (*C.VkPhysicalDeviceMaintenance4Properties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceMaintenance4Properties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceMaintenance4Properties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceMaintenance4Properties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceMaintenance4Properties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMaxBufferSize returns the value in maxBufferSize.
func (p PhysicalDeviceMaintenance4Properties) GetMaxBufferSize() DeviceSize {
	return DeviceSize(p.ptr.maxBufferSize)
}

// SetMaxBufferSize sets the value in maxBufferSize.
func (p PhysicalDeviceMaintenance4Properties) SetMaxBufferSize(value DeviceSize) {
	p.ptr.maxBufferSize = (C.VkDeviceSize)(value)
}

// PhysicalDeviceMaintenance5Features wraps VkPhysicalDeviceMaintenance5Features.
type PhysicalDeviceMaintenance5Features struct {
	ptr *C.VkPhysicalDeviceMaintenance5Features
}

// PhysicalDeviceMaintenance5FeaturesNil is a null pointer.
var PhysicalDeviceMaintenance5FeaturesNil PhysicalDeviceMaintenance5Features

// PhysicalDeviceMaintenance5FeaturesSizeOf is the byte size of VkPhysicalDeviceMaintenance5Features.
const PhysicalDeviceMaintenance5FeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceMaintenance5Features)

// PhysicalDeviceMaintenance5FeaturesFromPtr converts a raw pointer to a PhysicalDeviceMaintenance5Features.
func PhysicalDeviceMaintenance5FeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceMaintenance5Features {
	return PhysicalDeviceMaintenance5Features{ptr: (*C.VkPhysicalDeviceMaintenance5Features)(ptr)}
}

// PhysicalDeviceMaintenance5FeaturesAlloc allocates a continuous block of VkPhysicalDeviceMaintenance5Features.
func PhysicalDeviceMaintenance5FeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceMaintenance5Features {
	ptr := alloc.Allocate(PhysicalDeviceMaintenance5FeaturesSizeOf * count)
	return PhysicalDeviceMaintenance5Features{ptr: (*C.VkPhysicalDeviceMaintenance5Features)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceMaintenance5Features) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceMaintenance5Features) Offset(offset int) PhysicalDeviceMaintenance5Features {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceMaintenance5FeaturesSizeOf)
	return PhysicalDeviceMaintenance5Features{ptr: (*C.VkPhysicalDeviceMaintenance5Features)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceMaintenance5Features) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceMaintenance5Features) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceMaintenance5Features) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceMaintenance5Features) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMaintenance5 returns the value in maintenance5.
func (p PhysicalDeviceMaintenance5Features) GetMaintenance5() bool {
	return p.ptr.maintenance5 != 0
}

// SetMaintenance5 sets the value in maintenance5.
func (p PhysicalDeviceMaintenance5Features) SetMaintenance5(value bool) {
	if value {
		p.ptr.maintenance5 = C.VkBool32(1)
	} else {
		p.ptr.maintenance5 = C.VkBool32(0)
	}
}

// PhysicalDeviceMaintenance5Properties wraps VkPhysicalDeviceMaintenance5Properties.
type PhysicalDeviceMaintenance5Properties struct {
	ptr *C.VkPhysicalDeviceMaintenance5Properties
}

// PhysicalDeviceMaintenance5PropertiesNil is a null pointer.
var PhysicalDeviceMaintenance5PropertiesNil PhysicalDeviceMaintenance5Properties

// PhysicalDeviceMaintenance5PropertiesSizeOf is the byte size of VkPhysicalDeviceMaintenance5Properties.
const PhysicalDeviceMaintenance5PropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceMaintenance5Properties)

// PhysicalDeviceMaintenance5PropertiesFromPtr converts a raw pointer to a PhysicalDeviceMaintenance5Properties.
func PhysicalDeviceMaintenance5PropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceMaintenance5Properties {
	return PhysicalDeviceMaintenance5Properties{ptr: (*C.VkPhysicalDeviceMaintenance5Properties)(ptr)}
}

// PhysicalDeviceMaintenance5PropertiesAlloc allocates a continuous block of VkPhysicalDeviceMaintenance5Properties.
func PhysicalDeviceMaintenance5PropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceMaintenance5Properties {
	ptr := alloc.Allocate(PhysicalDeviceMaintenance5PropertiesSizeOf * count)
	return PhysicalDeviceMaintenance5Properties{ptr: (*C.VkPhysicalDeviceMaintenance5Properties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceMaintenance5Properties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceMaintenance5Properties) Offset(offset int) PhysicalDeviceMaintenance5Properties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceMaintenance5PropertiesSizeOf)
	return PhysicalDeviceMaintenance5Properties{ptr: (*C.VkPhysicalDeviceMaintenance5Properties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceMaintenance5Properties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceMaintenance5Properties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceMaintenance5Properties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceMaintenance5Properties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetEarlyFragmentMultisampleCoverageAfterSampleCounting returns the value in earlyFragmentMultisampleCoverageAfterSampleCounting.
func (p PhysicalDeviceMaintenance5Properties) GetEarlyFragmentMultisampleCoverageAfterSampleCounting() bool {
	return p.ptr.earlyFragmentMultisampleCoverageAfterSampleCounting != 0
}

// SetEarlyFragmentMultisampleCoverageAfterSampleCounting sets the value in earlyFragmentMultisampleCoverageAfterSampleCounting.
func (p PhysicalDeviceMaintenance5Properties) SetEarlyFragmentMultisampleCoverageAfterSampleCounting(value bool) {
	if value {
		p.ptr.earlyFragmentMultisampleCoverageAfterSampleCounting = C.VkBool32(1)
	} else {
		p.ptr.earlyFragmentMultisampleCoverageAfterSampleCounting = C.VkBool32(0)
	}
}

// GetEarlyFragmentSampleMaskTestBeforeSampleCounting returns the value in earlyFragmentSampleMaskTestBeforeSampleCounting.
func (p PhysicalDeviceMaintenance5Properties) GetEarlyFragmentSampleMaskTestBeforeSampleCounting() bool {
	return p.ptr.earlyFragmentSampleMaskTestBeforeSampleCounting != 0
}

// SetEarlyFragmentSampleMaskTestBeforeSampleCounting sets the value in earlyFragmentSampleMaskTestBeforeSampleCounting.
func (p PhysicalDeviceMaintenance5Properties) SetEarlyFragmentSampleMaskTestBeforeSampleCounting(value bool) {
	if value {
		p.ptr.earlyFragmentSampleMaskTestBeforeSampleCounting = C.VkBool32(1)
	} else {
		p.ptr.earlyFragmentSampleMaskTestBeforeSampleCounting = C.VkBool32(0)
	}
}

// GetDepthStencilSwizzleOneSupport returns the value in depthStencilSwizzleOneSupport.
func (p PhysicalDeviceMaintenance5Properties) GetDepthStencilSwizzleOneSupport() bool {
	return p.ptr.depthStencilSwizzleOneSupport != 0
}

// SetDepthStencilSwizzleOneSupport sets the value in depthStencilSwizzleOneSupport.
func (p PhysicalDeviceMaintenance5Properties) SetDepthStencilSwizzleOneSupport(value bool) {
	if value {
		p.ptr.depthStencilSwizzleOneSupport = C.VkBool32(1)
	} else {
		p.ptr.depthStencilSwizzleOneSupport = C.VkBool32(0)
	}
}

// GetPolygonModePointSize returns the value in polygonModePointSize.
func (p PhysicalDeviceMaintenance5Properties) GetPolygonModePointSize() bool {
	return p.ptr.polygonModePointSize != 0
}

// SetPolygonModePointSize sets the value in polygonModePointSize.
func (p PhysicalDeviceMaintenance5Properties) SetPolygonModePointSize(value bool) {
	if value {
		p.ptr.polygonModePointSize = C.VkBool32(1)
	} else {
		p.ptr.polygonModePointSize = C.VkBool32(0)
	}
}

// GetNonStrictSinglePixelWideLinesUseParallelogram returns the value in nonStrictSinglePixelWideLinesUseParallelogram.
func (p PhysicalDeviceMaintenance5Properties) GetNonStrictSinglePixelWideLinesUseParallelogram() bool {
	return p.ptr.nonStrictSinglePixelWideLinesUseParallelogram != 0
}

// SetNonStrictSinglePixelWideLinesUseParallelogram sets the value in nonStrictSinglePixelWideLinesUseParallelogram.
func (p PhysicalDeviceMaintenance5Properties) SetNonStrictSinglePixelWideLinesUseParallelogram(value bool) {
	if value {
		p.ptr.nonStrictSinglePixelWideLinesUseParallelogram = C.VkBool32(1)
	} else {
		p.ptr.nonStrictSinglePixelWideLinesUseParallelogram = C.VkBool32(0)
	}
}

// GetNonStrictWideLinesUseParallelogram returns the value in nonStrictWideLinesUseParallelogram.
func (p PhysicalDeviceMaintenance5Properties) GetNonStrictWideLinesUseParallelogram() bool {
	return p.ptr.nonStrictWideLinesUseParallelogram != 0
}

// SetNonStrictWideLinesUseParallelogram sets the value in nonStrictWideLinesUseParallelogram.
func (p PhysicalDeviceMaintenance5Properties) SetNonStrictWideLinesUseParallelogram(value bool) {
	if value {
		p.ptr.nonStrictWideLinesUseParallelogram = C.VkBool32(1)
	} else {
		p.ptr.nonStrictWideLinesUseParallelogram = C.VkBool32(0)
	}
}

// PhysicalDeviceMaintenance6Features wraps VkPhysicalDeviceMaintenance6Features.
type PhysicalDeviceMaintenance6Features struct {
	ptr *C.VkPhysicalDeviceMaintenance6Features
}

// PhysicalDeviceMaintenance6FeaturesNil is a null pointer.
var PhysicalDeviceMaintenance6FeaturesNil PhysicalDeviceMaintenance6Features

// PhysicalDeviceMaintenance6FeaturesSizeOf is the byte size of VkPhysicalDeviceMaintenance6Features.
const PhysicalDeviceMaintenance6FeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceMaintenance6Features)

// PhysicalDeviceMaintenance6FeaturesFromPtr converts a raw pointer to a PhysicalDeviceMaintenance6Features.
func PhysicalDeviceMaintenance6FeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceMaintenance6Features {
	return PhysicalDeviceMaintenance6Features{ptr: (*C.VkPhysicalDeviceMaintenance6Features)(ptr)}
}

// PhysicalDeviceMaintenance6FeaturesAlloc allocates a continuous block of VkPhysicalDeviceMaintenance6Features.
func PhysicalDeviceMaintenance6FeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceMaintenance6Features {
	ptr := alloc.Allocate(PhysicalDeviceMaintenance6FeaturesSizeOf * count)
	return PhysicalDeviceMaintenance6Features{ptr: (*C.VkPhysicalDeviceMaintenance6Features)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceMaintenance6Features) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceMaintenance6Features) Offset(offset int) PhysicalDeviceMaintenance6Features {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceMaintenance6FeaturesSizeOf)
	return PhysicalDeviceMaintenance6Features{ptr: (*C.VkPhysicalDeviceMaintenance6Features)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceMaintenance6Features) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceMaintenance6Features) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceMaintenance6Features) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceMaintenance6Features) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMaintenance6 returns the value in maintenance6.
func (p PhysicalDeviceMaintenance6Features) GetMaintenance6() bool {
	return p.ptr.maintenance6 != 0
}

// SetMaintenance6 sets the value in maintenance6.
func (p PhysicalDeviceMaintenance6Features) SetMaintenance6(value bool) {
	if value {
		p.ptr.maintenance6 = C.VkBool32(1)
	} else {
		p.ptr.maintenance6 = C.VkBool32(0)
	}
}

// PhysicalDeviceMaintenance6Properties wraps VkPhysicalDeviceMaintenance6Properties.
type PhysicalDeviceMaintenance6Properties struct {
	ptr *C.VkPhysicalDeviceMaintenance6Properties
}

// PhysicalDeviceMaintenance6PropertiesNil is a null pointer.
var PhysicalDeviceMaintenance6PropertiesNil PhysicalDeviceMaintenance6Properties

// PhysicalDeviceMaintenance6PropertiesSizeOf is the byte size of VkPhysicalDeviceMaintenance6Properties.
const PhysicalDeviceMaintenance6PropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceMaintenance6Properties)

// PhysicalDeviceMaintenance6PropertiesFromPtr converts a raw pointer to a PhysicalDeviceMaintenance6Properties.
func PhysicalDeviceMaintenance6PropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceMaintenance6Properties {
	return PhysicalDeviceMaintenance6Properties{ptr: (*C.VkPhysicalDeviceMaintenance6Properties)(ptr)}
}

// PhysicalDeviceMaintenance6PropertiesAlloc allocates a continuous block of VkPhysicalDeviceMaintenance6Properties.
func PhysicalDeviceMaintenance6PropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceMaintenance6Properties {
	ptr := alloc.Allocate(PhysicalDeviceMaintenance6PropertiesSizeOf * count)
	return PhysicalDeviceMaintenance6Properties{ptr: (*C.VkPhysicalDeviceMaintenance6Properties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceMaintenance6Properties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceMaintenance6Properties) Offset(offset int) PhysicalDeviceMaintenance6Properties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceMaintenance6PropertiesSizeOf)
	return PhysicalDeviceMaintenance6Properties{ptr: (*C.VkPhysicalDeviceMaintenance6Properties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceMaintenance6Properties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceMaintenance6Properties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceMaintenance6Properties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceMaintenance6Properties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetBlockTexelViewCompatibleMultipleLayers returns the value in blockTexelViewCompatibleMultipleLayers.
func (p PhysicalDeviceMaintenance6Properties) GetBlockTexelViewCompatibleMultipleLayers() bool {
	return p.ptr.blockTexelViewCompatibleMultipleLayers != 0
}

// SetBlockTexelViewCompatibleMultipleLayers sets the value in blockTexelViewCompatibleMultipleLayers.
func (p PhysicalDeviceMaintenance6Properties) SetBlockTexelViewCompatibleMultipleLayers(value bool) {
	if value {
		p.ptr.blockTexelViewCompatibleMultipleLayers = C.VkBool32(1)
	} else {
		p.ptr.blockTexelViewCompatibleMultipleLayers = C.VkBool32(0)
	}
}

// GetMaxCombinedImageSamplerDescriptorCount returns the value in maxCombinedImageSamplerDescriptorCount.
func (p PhysicalDeviceMaintenance6Properties) GetMaxCombinedImageSamplerDescriptorCount() uint32 {
	return uint32(p.ptr.maxCombinedImageSamplerDescriptorCount)
}

// SetMaxCombinedImageSamplerDescriptorCount sets the value in maxCombinedImageSamplerDescriptorCount.
func (p PhysicalDeviceMaintenance6Properties) SetMaxCombinedImageSamplerDescriptorCount(value uint32) {
	p.ptr.maxCombinedImageSamplerDescriptorCount = (C.uint32_t)(value)
}

// GetFragmentShadingRateClampCombinerInputs returns the value in fragmentShadingRateClampCombinerInputs.
func (p PhysicalDeviceMaintenance6Properties) GetFragmentShadingRateClampCombinerInputs() bool {
	return p.ptr.fragmentShadingRateClampCombinerInputs != 0
}

// SetFragmentShadingRateClampCombinerInputs sets the value in fragmentShadingRateClampCombinerInputs.
func (p PhysicalDeviceMaintenance6Properties) SetFragmentShadingRateClampCombinerInputs(value bool) {
	if value {
		p.ptr.fragmentShadingRateClampCombinerInputs = C.VkBool32(1)
	} else {
		p.ptr.fragmentShadingRateClampCombinerInputs = C.VkBool32(0)
	}
}

// PhysicalDeviceMemoryProperties wraps VkPhysicalDeviceMemoryProperties.
type PhysicalDeviceMemoryProperties struct {
	ptr *C.VkPhysicalDeviceMemoryProperties
}

// PhysicalDeviceMemoryPropertiesNil is a null pointer.
var PhysicalDeviceMemoryPropertiesNil PhysicalDeviceMemoryProperties

// PhysicalDeviceMemoryPropertiesSizeOf is the byte size of VkPhysicalDeviceMemoryProperties.
const PhysicalDeviceMemoryPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceMemoryProperties)

// PhysicalDeviceMemoryPropertiesFromPtr converts a raw pointer to a PhysicalDeviceMemoryProperties.
func PhysicalDeviceMemoryPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceMemoryProperties {
	return PhysicalDeviceMemoryProperties{ptr: (*C.VkPhysicalDeviceMemoryProperties)(ptr)}
}

// PhysicalDeviceMemoryPropertiesAlloc allocates a continuous block of VkPhysicalDeviceMemoryProperties.
func PhysicalDeviceMemoryPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceMemoryProperties {
	ptr := alloc.Allocate(PhysicalDeviceMemoryPropertiesSizeOf * count)
	return PhysicalDeviceMemoryProperties{ptr: (*C.VkPhysicalDeviceMemoryProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceMemoryProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceMemoryProperties) Offset(offset int) PhysicalDeviceMemoryProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceMemoryPropertiesSizeOf)
	return PhysicalDeviceMemoryProperties{ptr: (*C.VkPhysicalDeviceMemoryProperties)(ptr)}
}

// GetMemoryTypeCount returns the value in memoryTypeCount.
func (p PhysicalDeviceMemoryProperties) GetMemoryTypeCount() uint32 {
	return uint32(p.ptr.memoryTypeCount)
}

// SetMemoryTypeCount sets the value in memoryTypeCount.
func (p PhysicalDeviceMemoryProperties) SetMemoryTypeCount(value uint32) {
	p.ptr.memoryTypeCount = (C.uint32_t)(value)
}

// PhysicalDeviceMemoryProperties.memoryTypes is unsupported: category unsupported.

// GetMemoryHeapCount returns the value in memoryHeapCount.
func (p PhysicalDeviceMemoryProperties) GetMemoryHeapCount() uint32 {
	return uint32(p.ptr.memoryHeapCount)
}

// SetMemoryHeapCount sets the value in memoryHeapCount.
func (p PhysicalDeviceMemoryProperties) SetMemoryHeapCount(value uint32) {
	p.ptr.memoryHeapCount = (C.uint32_t)(value)
}

// PhysicalDeviceMemoryProperties.memoryHeaps is unsupported: category unsupported.

// PhysicalDeviceMemoryProperties2 wraps VkPhysicalDeviceMemoryProperties2.
type PhysicalDeviceMemoryProperties2 struct {
	ptr *C.VkPhysicalDeviceMemoryProperties2
}

// PhysicalDeviceMemoryProperties2Nil is a null pointer.
var PhysicalDeviceMemoryProperties2Nil PhysicalDeviceMemoryProperties2

// PhysicalDeviceMemoryProperties2SizeOf is the byte size of VkPhysicalDeviceMemoryProperties2.
const PhysicalDeviceMemoryProperties2SizeOf = int(C.sizeof_VkPhysicalDeviceMemoryProperties2)

// PhysicalDeviceMemoryProperties2FromPtr converts a raw pointer to a PhysicalDeviceMemoryProperties2.
func PhysicalDeviceMemoryProperties2FromPtr(ptr unsafe.Pointer) PhysicalDeviceMemoryProperties2 {
	return PhysicalDeviceMemoryProperties2{ptr: (*C.VkPhysicalDeviceMemoryProperties2)(ptr)}
}

// PhysicalDeviceMemoryProperties2Alloc allocates a continuous block of VkPhysicalDeviceMemoryProperties2.
func PhysicalDeviceMemoryProperties2Alloc(alloc ffi.Allocator, count int) PhysicalDeviceMemoryProperties2 {
	ptr := alloc.Allocate(PhysicalDeviceMemoryProperties2SizeOf * count)
	return PhysicalDeviceMemoryProperties2{ptr: (*C.VkPhysicalDeviceMemoryProperties2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceMemoryProperties2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceMemoryProperties2) Offset(offset int) PhysicalDeviceMemoryProperties2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceMemoryProperties2SizeOf)
	return PhysicalDeviceMemoryProperties2{ptr: (*C.VkPhysicalDeviceMemoryProperties2)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceMemoryProperties2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceMemoryProperties2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceMemoryProperties2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceMemoryProperties2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefMemoryProperties returns pointer to the memoryProperties field.
func (p PhysicalDeviceMemoryProperties2) RefMemoryProperties() PhysicalDeviceMemoryProperties {
	return PhysicalDeviceMemoryProperties{ptr: (*C.VkPhysicalDeviceMemoryProperties)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkPhysicalDeviceMemoryProperties2_memoryProperties)))}
}

// PhysicalDeviceMultiviewFeatures wraps VkPhysicalDeviceMultiviewFeatures.
type PhysicalDeviceMultiviewFeatures struct {
	ptr *C.VkPhysicalDeviceMultiviewFeatures
}

// PhysicalDeviceMultiviewFeaturesNil is a null pointer.
var PhysicalDeviceMultiviewFeaturesNil PhysicalDeviceMultiviewFeatures

// PhysicalDeviceMultiviewFeaturesSizeOf is the byte size of VkPhysicalDeviceMultiviewFeatures.
const PhysicalDeviceMultiviewFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceMultiviewFeatures)

// PhysicalDeviceMultiviewFeaturesFromPtr converts a raw pointer to a PhysicalDeviceMultiviewFeatures.
func PhysicalDeviceMultiviewFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceMultiviewFeatures {
	return PhysicalDeviceMultiviewFeatures{ptr: (*C.VkPhysicalDeviceMultiviewFeatures)(ptr)}
}

// PhysicalDeviceMultiviewFeaturesAlloc allocates a continuous block of VkPhysicalDeviceMultiviewFeatures.
func PhysicalDeviceMultiviewFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceMultiviewFeatures {
	ptr := alloc.Allocate(PhysicalDeviceMultiviewFeaturesSizeOf * count)
	return PhysicalDeviceMultiviewFeatures{ptr: (*C.VkPhysicalDeviceMultiviewFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceMultiviewFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceMultiviewFeatures) Offset(offset int) PhysicalDeviceMultiviewFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceMultiviewFeaturesSizeOf)
	return PhysicalDeviceMultiviewFeatures{ptr: (*C.VkPhysicalDeviceMultiviewFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceMultiviewFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceMultiviewFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceMultiviewFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceMultiviewFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMultiview returns the value in multiview.
func (p PhysicalDeviceMultiviewFeatures) GetMultiview() bool {
	return p.ptr.multiview != 0
}

// SetMultiview sets the value in multiview.
func (p PhysicalDeviceMultiviewFeatures) SetMultiview(value bool) {
	if value {
		p.ptr.multiview = C.VkBool32(1)
	} else {
		p.ptr.multiview = C.VkBool32(0)
	}
}

// GetMultiviewGeometryShader returns the value in multiviewGeometryShader.
func (p PhysicalDeviceMultiviewFeatures) GetMultiviewGeometryShader() bool {
	return p.ptr.multiviewGeometryShader != 0
}

// SetMultiviewGeometryShader sets the value in multiviewGeometryShader.
func (p PhysicalDeviceMultiviewFeatures) SetMultiviewGeometryShader(value bool) {
	if value {
		p.ptr.multiviewGeometryShader = C.VkBool32(1)
	} else {
		p.ptr.multiviewGeometryShader = C.VkBool32(0)
	}
}

// GetMultiviewTessellationShader returns the value in multiviewTessellationShader.
func (p PhysicalDeviceMultiviewFeatures) GetMultiviewTessellationShader() bool {
	return p.ptr.multiviewTessellationShader != 0
}

// SetMultiviewTessellationShader sets the value in multiviewTessellationShader.
func (p PhysicalDeviceMultiviewFeatures) SetMultiviewTessellationShader(value bool) {
	if value {
		p.ptr.multiviewTessellationShader = C.VkBool32(1)
	} else {
		p.ptr.multiviewTessellationShader = C.VkBool32(0)
	}
}

// PhysicalDeviceMultiviewProperties wraps VkPhysicalDeviceMultiviewProperties.
type PhysicalDeviceMultiviewProperties struct {
	ptr *C.VkPhysicalDeviceMultiviewProperties
}

// PhysicalDeviceMultiviewPropertiesNil is a null pointer.
var PhysicalDeviceMultiviewPropertiesNil PhysicalDeviceMultiviewProperties

// PhysicalDeviceMultiviewPropertiesSizeOf is the byte size of VkPhysicalDeviceMultiviewProperties.
const PhysicalDeviceMultiviewPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceMultiviewProperties)

// PhysicalDeviceMultiviewPropertiesFromPtr converts a raw pointer to a PhysicalDeviceMultiviewProperties.
func PhysicalDeviceMultiviewPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceMultiviewProperties {
	return PhysicalDeviceMultiviewProperties{ptr: (*C.VkPhysicalDeviceMultiviewProperties)(ptr)}
}

// PhysicalDeviceMultiviewPropertiesAlloc allocates a continuous block of VkPhysicalDeviceMultiviewProperties.
func PhysicalDeviceMultiviewPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceMultiviewProperties {
	ptr := alloc.Allocate(PhysicalDeviceMultiviewPropertiesSizeOf * count)
	return PhysicalDeviceMultiviewProperties{ptr: (*C.VkPhysicalDeviceMultiviewProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceMultiviewProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceMultiviewProperties) Offset(offset int) PhysicalDeviceMultiviewProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceMultiviewPropertiesSizeOf)
	return PhysicalDeviceMultiviewProperties{ptr: (*C.VkPhysicalDeviceMultiviewProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceMultiviewProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceMultiviewProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceMultiviewProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceMultiviewProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMaxMultiviewViewCount returns the value in maxMultiviewViewCount.
func (p PhysicalDeviceMultiviewProperties) GetMaxMultiviewViewCount() uint32 {
	return uint32(p.ptr.maxMultiviewViewCount)
}

// SetMaxMultiviewViewCount sets the value in maxMultiviewViewCount.
func (p PhysicalDeviceMultiviewProperties) SetMaxMultiviewViewCount(value uint32) {
	p.ptr.maxMultiviewViewCount = (C.uint32_t)(value)
}

// GetMaxMultiviewInstanceIndex returns the value in maxMultiviewInstanceIndex.
func (p PhysicalDeviceMultiviewProperties) GetMaxMultiviewInstanceIndex() uint32 {
	return uint32(p.ptr.maxMultiviewInstanceIndex)
}

// SetMaxMultiviewInstanceIndex sets the value in maxMultiviewInstanceIndex.
func (p PhysicalDeviceMultiviewProperties) SetMaxMultiviewInstanceIndex(value uint32) {
	p.ptr.maxMultiviewInstanceIndex = (C.uint32_t)(value)
}

// PhysicalDevicePipelineCreationCacheControlFeatures wraps VkPhysicalDevicePipelineCreationCacheControlFeatures.
type PhysicalDevicePipelineCreationCacheControlFeatures struct {
	ptr *C.VkPhysicalDevicePipelineCreationCacheControlFeatures
}

// PhysicalDevicePipelineCreationCacheControlFeaturesNil is a null pointer.
var PhysicalDevicePipelineCreationCacheControlFeaturesNil PhysicalDevicePipelineCreationCacheControlFeatures

// PhysicalDevicePipelineCreationCacheControlFeaturesSizeOf is the byte size of VkPhysicalDevicePipelineCreationCacheControlFeatures.
const PhysicalDevicePipelineCreationCacheControlFeaturesSizeOf = int(C.sizeof_VkPhysicalDevicePipelineCreationCacheControlFeatures)

// PhysicalDevicePipelineCreationCacheControlFeaturesFromPtr converts a raw pointer to a PhysicalDevicePipelineCreationCacheControlFeatures.
func PhysicalDevicePipelineCreationCacheControlFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDevicePipelineCreationCacheControlFeatures {
	return PhysicalDevicePipelineCreationCacheControlFeatures{ptr: (*C.VkPhysicalDevicePipelineCreationCacheControlFeatures)(ptr)}
}

// PhysicalDevicePipelineCreationCacheControlFeaturesAlloc allocates a continuous block of VkPhysicalDevicePipelineCreationCacheControlFeatures.
func PhysicalDevicePipelineCreationCacheControlFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDevicePipelineCreationCacheControlFeatures {
	ptr := alloc.Allocate(PhysicalDevicePipelineCreationCacheControlFeaturesSizeOf * count)
	return PhysicalDevicePipelineCreationCacheControlFeatures{ptr: (*C.VkPhysicalDevicePipelineCreationCacheControlFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDevicePipelineCreationCacheControlFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDevicePipelineCreationCacheControlFeatures) Offset(offset int) PhysicalDevicePipelineCreationCacheControlFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDevicePipelineCreationCacheControlFeaturesSizeOf)
	return PhysicalDevicePipelineCreationCacheControlFeatures{ptr: (*C.VkPhysicalDevicePipelineCreationCacheControlFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDevicePipelineCreationCacheControlFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDevicePipelineCreationCacheControlFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDevicePipelineCreationCacheControlFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDevicePipelineCreationCacheControlFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPipelineCreationCacheControl returns the value in pipelineCreationCacheControl.
func (p PhysicalDevicePipelineCreationCacheControlFeatures) GetPipelineCreationCacheControl() bool {
	return p.ptr.pipelineCreationCacheControl != 0
}

// SetPipelineCreationCacheControl sets the value in pipelineCreationCacheControl.
func (p PhysicalDevicePipelineCreationCacheControlFeatures) SetPipelineCreationCacheControl(value bool) {
	if value {
		p.ptr.pipelineCreationCacheControl = C.VkBool32(1)
	} else {
		p.ptr.pipelineCreationCacheControl = C.VkBool32(0)
	}
}

// PhysicalDevicePipelineProtectedAccessFeatures wraps VkPhysicalDevicePipelineProtectedAccessFeatures.
type PhysicalDevicePipelineProtectedAccessFeatures struct {
	ptr *C.VkPhysicalDevicePipelineProtectedAccessFeatures
}

// PhysicalDevicePipelineProtectedAccessFeaturesNil is a null pointer.
var PhysicalDevicePipelineProtectedAccessFeaturesNil PhysicalDevicePipelineProtectedAccessFeatures

// PhysicalDevicePipelineProtectedAccessFeaturesSizeOf is the byte size of VkPhysicalDevicePipelineProtectedAccessFeatures.
const PhysicalDevicePipelineProtectedAccessFeaturesSizeOf = int(C.sizeof_VkPhysicalDevicePipelineProtectedAccessFeatures)

// PhysicalDevicePipelineProtectedAccessFeaturesFromPtr converts a raw pointer to a PhysicalDevicePipelineProtectedAccessFeatures.
func PhysicalDevicePipelineProtectedAccessFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDevicePipelineProtectedAccessFeatures {
	return PhysicalDevicePipelineProtectedAccessFeatures{ptr: (*C.VkPhysicalDevicePipelineProtectedAccessFeatures)(ptr)}
}

// PhysicalDevicePipelineProtectedAccessFeaturesAlloc allocates a continuous block of VkPhysicalDevicePipelineProtectedAccessFeatures.
func PhysicalDevicePipelineProtectedAccessFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDevicePipelineProtectedAccessFeatures {
	ptr := alloc.Allocate(PhysicalDevicePipelineProtectedAccessFeaturesSizeOf * count)
	return PhysicalDevicePipelineProtectedAccessFeatures{ptr: (*C.VkPhysicalDevicePipelineProtectedAccessFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDevicePipelineProtectedAccessFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDevicePipelineProtectedAccessFeatures) Offset(offset int) PhysicalDevicePipelineProtectedAccessFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDevicePipelineProtectedAccessFeaturesSizeOf)
	return PhysicalDevicePipelineProtectedAccessFeatures{ptr: (*C.VkPhysicalDevicePipelineProtectedAccessFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDevicePipelineProtectedAccessFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDevicePipelineProtectedAccessFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDevicePipelineProtectedAccessFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDevicePipelineProtectedAccessFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPipelineProtectedAccess returns the value in pipelineProtectedAccess.
func (p PhysicalDevicePipelineProtectedAccessFeatures) GetPipelineProtectedAccess() bool {
	return p.ptr.pipelineProtectedAccess != 0
}

// SetPipelineProtectedAccess sets the value in pipelineProtectedAccess.
func (p PhysicalDevicePipelineProtectedAccessFeatures) SetPipelineProtectedAccess(value bool) {
	if value {
		p.ptr.pipelineProtectedAccess = C.VkBool32(1)
	} else {
		p.ptr.pipelineProtectedAccess = C.VkBool32(0)
	}
}

// PhysicalDevicePipelineRobustnessFeatures wraps VkPhysicalDevicePipelineRobustnessFeatures.
type PhysicalDevicePipelineRobustnessFeatures struct {
	ptr *C.VkPhysicalDevicePipelineRobustnessFeatures
}

// PhysicalDevicePipelineRobustnessFeaturesNil is a null pointer.
var PhysicalDevicePipelineRobustnessFeaturesNil PhysicalDevicePipelineRobustnessFeatures

// PhysicalDevicePipelineRobustnessFeaturesSizeOf is the byte size of VkPhysicalDevicePipelineRobustnessFeatures.
const PhysicalDevicePipelineRobustnessFeaturesSizeOf = int(C.sizeof_VkPhysicalDevicePipelineRobustnessFeatures)

// PhysicalDevicePipelineRobustnessFeaturesFromPtr converts a raw pointer to a PhysicalDevicePipelineRobustnessFeatures.
func PhysicalDevicePipelineRobustnessFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDevicePipelineRobustnessFeatures {
	return PhysicalDevicePipelineRobustnessFeatures{ptr: (*C.VkPhysicalDevicePipelineRobustnessFeatures)(ptr)}
}

// PhysicalDevicePipelineRobustnessFeaturesAlloc allocates a continuous block of VkPhysicalDevicePipelineRobustnessFeatures.
func PhysicalDevicePipelineRobustnessFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDevicePipelineRobustnessFeatures {
	ptr := alloc.Allocate(PhysicalDevicePipelineRobustnessFeaturesSizeOf * count)
	return PhysicalDevicePipelineRobustnessFeatures{ptr: (*C.VkPhysicalDevicePipelineRobustnessFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDevicePipelineRobustnessFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDevicePipelineRobustnessFeatures) Offset(offset int) PhysicalDevicePipelineRobustnessFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDevicePipelineRobustnessFeaturesSizeOf)
	return PhysicalDevicePipelineRobustnessFeatures{ptr: (*C.VkPhysicalDevicePipelineRobustnessFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDevicePipelineRobustnessFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDevicePipelineRobustnessFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDevicePipelineRobustnessFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDevicePipelineRobustnessFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPipelineRobustness returns the value in pipelineRobustness.
func (p PhysicalDevicePipelineRobustnessFeatures) GetPipelineRobustness() bool {
	return p.ptr.pipelineRobustness != 0
}

// SetPipelineRobustness sets the value in pipelineRobustness.
func (p PhysicalDevicePipelineRobustnessFeatures) SetPipelineRobustness(value bool) {
	if value {
		p.ptr.pipelineRobustness = C.VkBool32(1)
	} else {
		p.ptr.pipelineRobustness = C.VkBool32(0)
	}
}

// PhysicalDevicePipelineRobustnessProperties wraps VkPhysicalDevicePipelineRobustnessProperties.
type PhysicalDevicePipelineRobustnessProperties struct {
	ptr *C.VkPhysicalDevicePipelineRobustnessProperties
}

// PhysicalDevicePipelineRobustnessPropertiesNil is a null pointer.
var PhysicalDevicePipelineRobustnessPropertiesNil PhysicalDevicePipelineRobustnessProperties

// PhysicalDevicePipelineRobustnessPropertiesSizeOf is the byte size of VkPhysicalDevicePipelineRobustnessProperties.
const PhysicalDevicePipelineRobustnessPropertiesSizeOf = int(C.sizeof_VkPhysicalDevicePipelineRobustnessProperties)

// PhysicalDevicePipelineRobustnessPropertiesFromPtr converts a raw pointer to a PhysicalDevicePipelineRobustnessProperties.
func PhysicalDevicePipelineRobustnessPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDevicePipelineRobustnessProperties {
	return PhysicalDevicePipelineRobustnessProperties{ptr: (*C.VkPhysicalDevicePipelineRobustnessProperties)(ptr)}
}

// PhysicalDevicePipelineRobustnessPropertiesAlloc allocates a continuous block of VkPhysicalDevicePipelineRobustnessProperties.
func PhysicalDevicePipelineRobustnessPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDevicePipelineRobustnessProperties {
	ptr := alloc.Allocate(PhysicalDevicePipelineRobustnessPropertiesSizeOf * count)
	return PhysicalDevicePipelineRobustnessProperties{ptr: (*C.VkPhysicalDevicePipelineRobustnessProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDevicePipelineRobustnessProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDevicePipelineRobustnessProperties) Offset(offset int) PhysicalDevicePipelineRobustnessProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDevicePipelineRobustnessPropertiesSizeOf)
	return PhysicalDevicePipelineRobustnessProperties{ptr: (*C.VkPhysicalDevicePipelineRobustnessProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDevicePipelineRobustnessProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDevicePipelineRobustnessProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDevicePipelineRobustnessProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDevicePipelineRobustnessProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDefaultRobustnessStorageBuffers returns the value in defaultRobustnessStorageBuffers.
func (p PhysicalDevicePipelineRobustnessProperties) GetDefaultRobustnessStorageBuffers() PipelineRobustnessBufferBehavior {
	return PipelineRobustnessBufferBehavior(p.ptr.defaultRobustnessStorageBuffers)
}

// SetDefaultRobustnessStorageBuffers sets the value in defaultRobustnessStorageBuffers.
func (p PhysicalDevicePipelineRobustnessProperties) SetDefaultRobustnessStorageBuffers(value PipelineRobustnessBufferBehavior) {
	p.ptr.defaultRobustnessStorageBuffers = (C.VkPipelineRobustnessBufferBehavior)(value)
}

// GetDefaultRobustnessUniformBuffers returns the value in defaultRobustnessUniformBuffers.
func (p PhysicalDevicePipelineRobustnessProperties) GetDefaultRobustnessUniformBuffers() PipelineRobustnessBufferBehavior {
	return PipelineRobustnessBufferBehavior(p.ptr.defaultRobustnessUniformBuffers)
}

// SetDefaultRobustnessUniformBuffers sets the value in defaultRobustnessUniformBuffers.
func (p PhysicalDevicePipelineRobustnessProperties) SetDefaultRobustnessUniformBuffers(value PipelineRobustnessBufferBehavior) {
	p.ptr.defaultRobustnessUniformBuffers = (C.VkPipelineRobustnessBufferBehavior)(value)
}

// GetDefaultRobustnessVertexInputs returns the value in defaultRobustnessVertexInputs.
func (p PhysicalDevicePipelineRobustnessProperties) GetDefaultRobustnessVertexInputs() PipelineRobustnessBufferBehavior {
	return PipelineRobustnessBufferBehavior(p.ptr.defaultRobustnessVertexInputs)
}

// SetDefaultRobustnessVertexInputs sets the value in defaultRobustnessVertexInputs.
func (p PhysicalDevicePipelineRobustnessProperties) SetDefaultRobustnessVertexInputs(value PipelineRobustnessBufferBehavior) {
	p.ptr.defaultRobustnessVertexInputs = (C.VkPipelineRobustnessBufferBehavior)(value)
}

// GetDefaultRobustnessImages returns the value in defaultRobustnessImages.
func (p PhysicalDevicePipelineRobustnessProperties) GetDefaultRobustnessImages() PipelineRobustnessImageBehavior {
	return PipelineRobustnessImageBehavior(p.ptr.defaultRobustnessImages)
}

// SetDefaultRobustnessImages sets the value in defaultRobustnessImages.
func (p PhysicalDevicePipelineRobustnessProperties) SetDefaultRobustnessImages(value PipelineRobustnessImageBehavior) {
	p.ptr.defaultRobustnessImages = (C.VkPipelineRobustnessImageBehavior)(value)
}

// PhysicalDevicePointClippingProperties wraps VkPhysicalDevicePointClippingProperties.
type PhysicalDevicePointClippingProperties struct {
	ptr *C.VkPhysicalDevicePointClippingProperties
}

// PhysicalDevicePointClippingPropertiesNil is a null pointer.
var PhysicalDevicePointClippingPropertiesNil PhysicalDevicePointClippingProperties

// PhysicalDevicePointClippingPropertiesSizeOf is the byte size of VkPhysicalDevicePointClippingProperties.
const PhysicalDevicePointClippingPropertiesSizeOf = int(C.sizeof_VkPhysicalDevicePointClippingProperties)

// PhysicalDevicePointClippingPropertiesFromPtr converts a raw pointer to a PhysicalDevicePointClippingProperties.
func PhysicalDevicePointClippingPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDevicePointClippingProperties {
	return PhysicalDevicePointClippingProperties{ptr: (*C.VkPhysicalDevicePointClippingProperties)(ptr)}
}

// PhysicalDevicePointClippingPropertiesAlloc allocates a continuous block of VkPhysicalDevicePointClippingProperties.
func PhysicalDevicePointClippingPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDevicePointClippingProperties {
	ptr := alloc.Allocate(PhysicalDevicePointClippingPropertiesSizeOf * count)
	return PhysicalDevicePointClippingProperties{ptr: (*C.VkPhysicalDevicePointClippingProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDevicePointClippingProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDevicePointClippingProperties) Offset(offset int) PhysicalDevicePointClippingProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDevicePointClippingPropertiesSizeOf)
	return PhysicalDevicePointClippingProperties{ptr: (*C.VkPhysicalDevicePointClippingProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDevicePointClippingProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDevicePointClippingProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDevicePointClippingProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDevicePointClippingProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPointClippingBehavior returns the value in pointClippingBehavior.
func (p PhysicalDevicePointClippingProperties) GetPointClippingBehavior() PointClippingBehavior {
	return PointClippingBehavior(p.ptr.pointClippingBehavior)
}

// SetPointClippingBehavior sets the value in pointClippingBehavior.
func (p PhysicalDevicePointClippingProperties) SetPointClippingBehavior(value PointClippingBehavior) {
	p.ptr.pointClippingBehavior = (C.VkPointClippingBehavior)(value)
}

// PhysicalDevicePrivateDataFeatures wraps VkPhysicalDevicePrivateDataFeatures.
type PhysicalDevicePrivateDataFeatures struct {
	ptr *C.VkPhysicalDevicePrivateDataFeatures
}

// PhysicalDevicePrivateDataFeaturesNil is a null pointer.
var PhysicalDevicePrivateDataFeaturesNil PhysicalDevicePrivateDataFeatures

// PhysicalDevicePrivateDataFeaturesSizeOf is the byte size of VkPhysicalDevicePrivateDataFeatures.
const PhysicalDevicePrivateDataFeaturesSizeOf = int(C.sizeof_VkPhysicalDevicePrivateDataFeatures)

// PhysicalDevicePrivateDataFeaturesFromPtr converts a raw pointer to a PhysicalDevicePrivateDataFeatures.
func PhysicalDevicePrivateDataFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDevicePrivateDataFeatures {
	return PhysicalDevicePrivateDataFeatures{ptr: (*C.VkPhysicalDevicePrivateDataFeatures)(ptr)}
}

// PhysicalDevicePrivateDataFeaturesAlloc allocates a continuous block of VkPhysicalDevicePrivateDataFeatures.
func PhysicalDevicePrivateDataFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDevicePrivateDataFeatures {
	ptr := alloc.Allocate(PhysicalDevicePrivateDataFeaturesSizeOf * count)
	return PhysicalDevicePrivateDataFeatures{ptr: (*C.VkPhysicalDevicePrivateDataFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDevicePrivateDataFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDevicePrivateDataFeatures) Offset(offset int) PhysicalDevicePrivateDataFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDevicePrivateDataFeaturesSizeOf)
	return PhysicalDevicePrivateDataFeatures{ptr: (*C.VkPhysicalDevicePrivateDataFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDevicePrivateDataFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDevicePrivateDataFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDevicePrivateDataFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDevicePrivateDataFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPrivateData returns the value in privateData.
func (p PhysicalDevicePrivateDataFeatures) GetPrivateData() bool {
	return p.ptr.privateData != 0
}

// SetPrivateData sets the value in privateData.
func (p PhysicalDevicePrivateDataFeatures) SetPrivateData(value bool) {
	if value {
		p.ptr.privateData = C.VkBool32(1)
	} else {
		p.ptr.privateData = C.VkBool32(0)
	}
}

// PhysicalDeviceProperties wraps VkPhysicalDeviceProperties.
type PhysicalDeviceProperties struct {
	ptr *C.VkPhysicalDeviceProperties
}

// PhysicalDevicePropertiesNil is a null pointer.
var PhysicalDevicePropertiesNil PhysicalDeviceProperties

// PhysicalDevicePropertiesSizeOf is the byte size of VkPhysicalDeviceProperties.
const PhysicalDevicePropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceProperties)

// PhysicalDevicePropertiesFromPtr converts a raw pointer to a PhysicalDeviceProperties.
func PhysicalDevicePropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceProperties {
	return PhysicalDeviceProperties{ptr: (*C.VkPhysicalDeviceProperties)(ptr)}
}

// PhysicalDevicePropertiesAlloc allocates a continuous block of VkPhysicalDeviceProperties.
func PhysicalDevicePropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceProperties {
	ptr := alloc.Allocate(PhysicalDevicePropertiesSizeOf * count)
	return PhysicalDeviceProperties{ptr: (*C.VkPhysicalDeviceProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceProperties) Offset(offset int) PhysicalDeviceProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDevicePropertiesSizeOf)
	return PhysicalDeviceProperties{ptr: (*C.VkPhysicalDeviceProperties)(ptr)}
}

// GetApiVersion returns the value in apiVersion.
func (p PhysicalDeviceProperties) GetApiVersion() uint32 {
	return uint32(p.ptr.apiVersion)
}

// SetApiVersion sets the value in apiVersion.
func (p PhysicalDeviceProperties) SetApiVersion(value uint32) {
	p.ptr.apiVersion = (C.uint32_t)(value)
}

// GetDriverVersion returns the value in driverVersion.
func (p PhysicalDeviceProperties) GetDriverVersion() uint32 {
	return uint32(p.ptr.driverVersion)
}

// SetDriverVersion sets the value in driverVersion.
func (p PhysicalDeviceProperties) SetDriverVersion(value uint32) {
	p.ptr.driverVersion = (C.uint32_t)(value)
}

// GetVendorID returns the value in vendorID.
func (p PhysicalDeviceProperties) GetVendorID() uint32 {
	return uint32(p.ptr.vendorID)
}

// SetVendorID sets the value in vendorID.
func (p PhysicalDeviceProperties) SetVendorID(value uint32) {
	p.ptr.vendorID = (C.uint32_t)(value)
}

// GetDeviceID returns the value in deviceID.
func (p PhysicalDeviceProperties) GetDeviceID() uint32 {
	return uint32(p.ptr.deviceID)
}

// SetDeviceID sets the value in deviceID.
func (p PhysicalDeviceProperties) SetDeviceID(value uint32) {
	p.ptr.deviceID = (C.uint32_t)(value)
}

// GetDeviceType returns the value in deviceType.
func (p PhysicalDeviceProperties) GetDeviceType() PhysicalDeviceType {
	return PhysicalDeviceType(p.ptr.deviceType)
}

// SetDeviceType sets the value in deviceType.
func (p PhysicalDeviceProperties) SetDeviceType(value PhysicalDeviceType) {
	p.ptr.deviceType = (C.VkPhysicalDeviceType)(value)
}

// PhysicalDeviceProperties.deviceName is unsupported: category unsupported.

// PhysicalDeviceProperties.pipelineCacheUUID is unsupported: category unsupported.

// RefLimits returns pointer to the limits field.
func (p PhysicalDeviceProperties) RefLimits() PhysicalDeviceLimits {
	return PhysicalDeviceLimits{ptr: (*C.VkPhysicalDeviceLimits)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkPhysicalDeviceProperties_limits)))}
}

// RefSparseProperties returns pointer to the sparseProperties field.
func (p PhysicalDeviceProperties) RefSparseProperties() PhysicalDeviceSparseProperties {
	return PhysicalDeviceSparseProperties{ptr: (*C.VkPhysicalDeviceSparseProperties)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkPhysicalDeviceProperties_sparseProperties)))}
}

// PhysicalDeviceProperties2 wraps VkPhysicalDeviceProperties2.
type PhysicalDeviceProperties2 struct {
	ptr *C.VkPhysicalDeviceProperties2
}

// PhysicalDeviceProperties2Nil is a null pointer.
var PhysicalDeviceProperties2Nil PhysicalDeviceProperties2

// PhysicalDeviceProperties2SizeOf is the byte size of VkPhysicalDeviceProperties2.
const PhysicalDeviceProperties2SizeOf = int(C.sizeof_VkPhysicalDeviceProperties2)

// PhysicalDeviceProperties2FromPtr converts a raw pointer to a PhysicalDeviceProperties2.
func PhysicalDeviceProperties2FromPtr(ptr unsafe.Pointer) PhysicalDeviceProperties2 {
	return PhysicalDeviceProperties2{ptr: (*C.VkPhysicalDeviceProperties2)(ptr)}
}

// PhysicalDeviceProperties2Alloc allocates a continuous block of VkPhysicalDeviceProperties2.
func PhysicalDeviceProperties2Alloc(alloc ffi.Allocator, count int) PhysicalDeviceProperties2 {
	ptr := alloc.Allocate(PhysicalDeviceProperties2SizeOf * count)
	return PhysicalDeviceProperties2{ptr: (*C.VkPhysicalDeviceProperties2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceProperties2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceProperties2) Offset(offset int) PhysicalDeviceProperties2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceProperties2SizeOf)
	return PhysicalDeviceProperties2{ptr: (*C.VkPhysicalDeviceProperties2)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceProperties2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceProperties2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceProperties2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceProperties2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefProperties returns pointer to the properties field.
func (p PhysicalDeviceProperties2) RefProperties() PhysicalDeviceProperties {
	return PhysicalDeviceProperties{ptr: (*C.VkPhysicalDeviceProperties)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkPhysicalDeviceProperties2_properties)))}
}

// PhysicalDeviceProtectedMemoryFeatures wraps VkPhysicalDeviceProtectedMemoryFeatures.
type PhysicalDeviceProtectedMemoryFeatures struct {
	ptr *C.VkPhysicalDeviceProtectedMemoryFeatures
}

// PhysicalDeviceProtectedMemoryFeaturesNil is a null pointer.
var PhysicalDeviceProtectedMemoryFeaturesNil PhysicalDeviceProtectedMemoryFeatures

// PhysicalDeviceProtectedMemoryFeaturesSizeOf is the byte size of VkPhysicalDeviceProtectedMemoryFeatures.
const PhysicalDeviceProtectedMemoryFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceProtectedMemoryFeatures)

// PhysicalDeviceProtectedMemoryFeaturesFromPtr converts a raw pointer to a PhysicalDeviceProtectedMemoryFeatures.
func PhysicalDeviceProtectedMemoryFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceProtectedMemoryFeatures {
	return PhysicalDeviceProtectedMemoryFeatures{ptr: (*C.VkPhysicalDeviceProtectedMemoryFeatures)(ptr)}
}

// PhysicalDeviceProtectedMemoryFeaturesAlloc allocates a continuous block of VkPhysicalDeviceProtectedMemoryFeatures.
func PhysicalDeviceProtectedMemoryFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceProtectedMemoryFeatures {
	ptr := alloc.Allocate(PhysicalDeviceProtectedMemoryFeaturesSizeOf * count)
	return PhysicalDeviceProtectedMemoryFeatures{ptr: (*C.VkPhysicalDeviceProtectedMemoryFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceProtectedMemoryFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceProtectedMemoryFeatures) Offset(offset int) PhysicalDeviceProtectedMemoryFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceProtectedMemoryFeaturesSizeOf)
	return PhysicalDeviceProtectedMemoryFeatures{ptr: (*C.VkPhysicalDeviceProtectedMemoryFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceProtectedMemoryFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceProtectedMemoryFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceProtectedMemoryFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceProtectedMemoryFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetProtectedMemory returns the value in protectedMemory.
func (p PhysicalDeviceProtectedMemoryFeatures) GetProtectedMemory() bool {
	return p.ptr.protectedMemory != 0
}

// SetProtectedMemory sets the value in protectedMemory.
func (p PhysicalDeviceProtectedMemoryFeatures) SetProtectedMemory(value bool) {
	if value {
		p.ptr.protectedMemory = C.VkBool32(1)
	} else {
		p.ptr.protectedMemory = C.VkBool32(0)
	}
}

// PhysicalDeviceProtectedMemoryProperties wraps VkPhysicalDeviceProtectedMemoryProperties.
type PhysicalDeviceProtectedMemoryProperties struct {
	ptr *C.VkPhysicalDeviceProtectedMemoryProperties
}

// PhysicalDeviceProtectedMemoryPropertiesNil is a null pointer.
var PhysicalDeviceProtectedMemoryPropertiesNil PhysicalDeviceProtectedMemoryProperties

// PhysicalDeviceProtectedMemoryPropertiesSizeOf is the byte size of VkPhysicalDeviceProtectedMemoryProperties.
const PhysicalDeviceProtectedMemoryPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceProtectedMemoryProperties)

// PhysicalDeviceProtectedMemoryPropertiesFromPtr converts a raw pointer to a PhysicalDeviceProtectedMemoryProperties.
func PhysicalDeviceProtectedMemoryPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceProtectedMemoryProperties {
	return PhysicalDeviceProtectedMemoryProperties{ptr: (*C.VkPhysicalDeviceProtectedMemoryProperties)(ptr)}
}

// PhysicalDeviceProtectedMemoryPropertiesAlloc allocates a continuous block of VkPhysicalDeviceProtectedMemoryProperties.
func PhysicalDeviceProtectedMemoryPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceProtectedMemoryProperties {
	ptr := alloc.Allocate(PhysicalDeviceProtectedMemoryPropertiesSizeOf * count)
	return PhysicalDeviceProtectedMemoryProperties{ptr: (*C.VkPhysicalDeviceProtectedMemoryProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceProtectedMemoryProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceProtectedMemoryProperties) Offset(offset int) PhysicalDeviceProtectedMemoryProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceProtectedMemoryPropertiesSizeOf)
	return PhysicalDeviceProtectedMemoryProperties{ptr: (*C.VkPhysicalDeviceProtectedMemoryProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceProtectedMemoryProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceProtectedMemoryProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceProtectedMemoryProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceProtectedMemoryProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetProtectedNoFault returns the value in protectedNoFault.
func (p PhysicalDeviceProtectedMemoryProperties) GetProtectedNoFault() bool {
	return p.ptr.protectedNoFault != 0
}

// SetProtectedNoFault sets the value in protectedNoFault.
func (p PhysicalDeviceProtectedMemoryProperties) SetProtectedNoFault(value bool) {
	if value {
		p.ptr.protectedNoFault = C.VkBool32(1)
	} else {
		p.ptr.protectedNoFault = C.VkBool32(0)
	}
}

// PhysicalDevicePushDescriptorProperties wraps VkPhysicalDevicePushDescriptorProperties.
type PhysicalDevicePushDescriptorProperties struct {
	ptr *C.VkPhysicalDevicePushDescriptorProperties
}

// PhysicalDevicePushDescriptorPropertiesNil is a null pointer.
var PhysicalDevicePushDescriptorPropertiesNil PhysicalDevicePushDescriptorProperties

// PhysicalDevicePushDescriptorPropertiesSizeOf is the byte size of VkPhysicalDevicePushDescriptorProperties.
const PhysicalDevicePushDescriptorPropertiesSizeOf = int(C.sizeof_VkPhysicalDevicePushDescriptorProperties)

// PhysicalDevicePushDescriptorPropertiesFromPtr converts a raw pointer to a PhysicalDevicePushDescriptorProperties.
func PhysicalDevicePushDescriptorPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDevicePushDescriptorProperties {
	return PhysicalDevicePushDescriptorProperties{ptr: (*C.VkPhysicalDevicePushDescriptorProperties)(ptr)}
}

// PhysicalDevicePushDescriptorPropertiesAlloc allocates a continuous block of VkPhysicalDevicePushDescriptorProperties.
func PhysicalDevicePushDescriptorPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDevicePushDescriptorProperties {
	ptr := alloc.Allocate(PhysicalDevicePushDescriptorPropertiesSizeOf * count)
	return PhysicalDevicePushDescriptorProperties{ptr: (*C.VkPhysicalDevicePushDescriptorProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDevicePushDescriptorProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDevicePushDescriptorProperties) Offset(offset int) PhysicalDevicePushDescriptorProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDevicePushDescriptorPropertiesSizeOf)
	return PhysicalDevicePushDescriptorProperties{ptr: (*C.VkPhysicalDevicePushDescriptorProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDevicePushDescriptorProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDevicePushDescriptorProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDevicePushDescriptorProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDevicePushDescriptorProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMaxPushDescriptors returns the value in maxPushDescriptors.
func (p PhysicalDevicePushDescriptorProperties) GetMaxPushDescriptors() uint32 {
	return uint32(p.ptr.maxPushDescriptors)
}

// SetMaxPushDescriptors sets the value in maxPushDescriptors.
func (p PhysicalDevicePushDescriptorProperties) SetMaxPushDescriptors(value uint32) {
	p.ptr.maxPushDescriptors = (C.uint32_t)(value)
}

// PhysicalDeviceSamplerFilterMinmaxProperties wraps VkPhysicalDeviceSamplerFilterMinmaxProperties.
type PhysicalDeviceSamplerFilterMinmaxProperties struct {
	ptr *C.VkPhysicalDeviceSamplerFilterMinmaxProperties
}

// PhysicalDeviceSamplerFilterMinmaxPropertiesNil is a null pointer.
var PhysicalDeviceSamplerFilterMinmaxPropertiesNil PhysicalDeviceSamplerFilterMinmaxProperties

// PhysicalDeviceSamplerFilterMinmaxPropertiesSizeOf is the byte size of VkPhysicalDeviceSamplerFilterMinmaxProperties.
const PhysicalDeviceSamplerFilterMinmaxPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceSamplerFilterMinmaxProperties)

// PhysicalDeviceSamplerFilterMinmaxPropertiesFromPtr converts a raw pointer to a PhysicalDeviceSamplerFilterMinmaxProperties.
func PhysicalDeviceSamplerFilterMinmaxPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceSamplerFilterMinmaxProperties {
	return PhysicalDeviceSamplerFilterMinmaxProperties{ptr: (*C.VkPhysicalDeviceSamplerFilterMinmaxProperties)(ptr)}
}

// PhysicalDeviceSamplerFilterMinmaxPropertiesAlloc allocates a continuous block of VkPhysicalDeviceSamplerFilterMinmaxProperties.
func PhysicalDeviceSamplerFilterMinmaxPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceSamplerFilterMinmaxProperties {
	ptr := alloc.Allocate(PhysicalDeviceSamplerFilterMinmaxPropertiesSizeOf * count)
	return PhysicalDeviceSamplerFilterMinmaxProperties{ptr: (*C.VkPhysicalDeviceSamplerFilterMinmaxProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceSamplerFilterMinmaxProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceSamplerFilterMinmaxProperties) Offset(offset int) PhysicalDeviceSamplerFilterMinmaxProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceSamplerFilterMinmaxPropertiesSizeOf)
	return PhysicalDeviceSamplerFilterMinmaxProperties{ptr: (*C.VkPhysicalDeviceSamplerFilterMinmaxProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceSamplerFilterMinmaxProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceSamplerFilterMinmaxProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceSamplerFilterMinmaxProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceSamplerFilterMinmaxProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFilterMinmaxSingleComponentFormats returns the value in filterMinmaxSingleComponentFormats.
func (p PhysicalDeviceSamplerFilterMinmaxProperties) GetFilterMinmaxSingleComponentFormats() bool {
	return p.ptr.filterMinmaxSingleComponentFormats != 0
}

// SetFilterMinmaxSingleComponentFormats sets the value in filterMinmaxSingleComponentFormats.
func (p PhysicalDeviceSamplerFilterMinmaxProperties) SetFilterMinmaxSingleComponentFormats(value bool) {
	if value {
		p.ptr.filterMinmaxSingleComponentFormats = C.VkBool32(1)
	} else {
		p.ptr.filterMinmaxSingleComponentFormats = C.VkBool32(0)
	}
}

// GetFilterMinmaxImageComponentMapping returns the value in filterMinmaxImageComponentMapping.
func (p PhysicalDeviceSamplerFilterMinmaxProperties) GetFilterMinmaxImageComponentMapping() bool {
	return p.ptr.filterMinmaxImageComponentMapping != 0
}

// SetFilterMinmaxImageComponentMapping sets the value in filterMinmaxImageComponentMapping.
func (p PhysicalDeviceSamplerFilterMinmaxProperties) SetFilterMinmaxImageComponentMapping(value bool) {
	if value {
		p.ptr.filterMinmaxImageComponentMapping = C.VkBool32(1)
	} else {
		p.ptr.filterMinmaxImageComponentMapping = C.VkBool32(0)
	}
}

// PhysicalDeviceSamplerYcbcrConversionFeatures wraps VkPhysicalDeviceSamplerYcbcrConversionFeatures.
type PhysicalDeviceSamplerYcbcrConversionFeatures struct {
	ptr *C.VkPhysicalDeviceSamplerYcbcrConversionFeatures
}

// PhysicalDeviceSamplerYcbcrConversionFeaturesNil is a null pointer.
var PhysicalDeviceSamplerYcbcrConversionFeaturesNil PhysicalDeviceSamplerYcbcrConversionFeatures

// PhysicalDeviceSamplerYcbcrConversionFeaturesSizeOf is the byte size of VkPhysicalDeviceSamplerYcbcrConversionFeatures.
const PhysicalDeviceSamplerYcbcrConversionFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceSamplerYcbcrConversionFeatures)

// PhysicalDeviceSamplerYcbcrConversionFeaturesFromPtr converts a raw pointer to a PhysicalDeviceSamplerYcbcrConversionFeatures.
func PhysicalDeviceSamplerYcbcrConversionFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceSamplerYcbcrConversionFeatures {
	return PhysicalDeviceSamplerYcbcrConversionFeatures{ptr: (*C.VkPhysicalDeviceSamplerYcbcrConversionFeatures)(ptr)}
}

// PhysicalDeviceSamplerYcbcrConversionFeaturesAlloc allocates a continuous block of VkPhysicalDeviceSamplerYcbcrConversionFeatures.
func PhysicalDeviceSamplerYcbcrConversionFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceSamplerYcbcrConversionFeatures {
	ptr := alloc.Allocate(PhysicalDeviceSamplerYcbcrConversionFeaturesSizeOf * count)
	return PhysicalDeviceSamplerYcbcrConversionFeatures{ptr: (*C.VkPhysicalDeviceSamplerYcbcrConversionFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceSamplerYcbcrConversionFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceSamplerYcbcrConversionFeatures) Offset(offset int) PhysicalDeviceSamplerYcbcrConversionFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceSamplerYcbcrConversionFeaturesSizeOf)
	return PhysicalDeviceSamplerYcbcrConversionFeatures{ptr: (*C.VkPhysicalDeviceSamplerYcbcrConversionFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceSamplerYcbcrConversionFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceSamplerYcbcrConversionFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceSamplerYcbcrConversionFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceSamplerYcbcrConversionFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSamplerYcbcrConversion returns the value in samplerYcbcrConversion.
func (p PhysicalDeviceSamplerYcbcrConversionFeatures) GetSamplerYcbcrConversion() bool {
	return p.ptr.samplerYcbcrConversion != 0
}

// SetSamplerYcbcrConversion sets the value in samplerYcbcrConversion.
func (p PhysicalDeviceSamplerYcbcrConversionFeatures) SetSamplerYcbcrConversion(value bool) {
	if value {
		p.ptr.samplerYcbcrConversion = C.VkBool32(1)
	} else {
		p.ptr.samplerYcbcrConversion = C.VkBool32(0)
	}
}

// PhysicalDeviceScalarBlockLayoutFeatures wraps VkPhysicalDeviceScalarBlockLayoutFeatures.
type PhysicalDeviceScalarBlockLayoutFeatures struct {
	ptr *C.VkPhysicalDeviceScalarBlockLayoutFeatures
}

// PhysicalDeviceScalarBlockLayoutFeaturesNil is a null pointer.
var PhysicalDeviceScalarBlockLayoutFeaturesNil PhysicalDeviceScalarBlockLayoutFeatures

// PhysicalDeviceScalarBlockLayoutFeaturesSizeOf is the byte size of VkPhysicalDeviceScalarBlockLayoutFeatures.
const PhysicalDeviceScalarBlockLayoutFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceScalarBlockLayoutFeatures)

// PhysicalDeviceScalarBlockLayoutFeaturesFromPtr converts a raw pointer to a PhysicalDeviceScalarBlockLayoutFeatures.
func PhysicalDeviceScalarBlockLayoutFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceScalarBlockLayoutFeatures {
	return PhysicalDeviceScalarBlockLayoutFeatures{ptr: (*C.VkPhysicalDeviceScalarBlockLayoutFeatures)(ptr)}
}

// PhysicalDeviceScalarBlockLayoutFeaturesAlloc allocates a continuous block of VkPhysicalDeviceScalarBlockLayoutFeatures.
func PhysicalDeviceScalarBlockLayoutFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceScalarBlockLayoutFeatures {
	ptr := alloc.Allocate(PhysicalDeviceScalarBlockLayoutFeaturesSizeOf * count)
	return PhysicalDeviceScalarBlockLayoutFeatures{ptr: (*C.VkPhysicalDeviceScalarBlockLayoutFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceScalarBlockLayoutFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceScalarBlockLayoutFeatures) Offset(offset int) PhysicalDeviceScalarBlockLayoutFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceScalarBlockLayoutFeaturesSizeOf)
	return PhysicalDeviceScalarBlockLayoutFeatures{ptr: (*C.VkPhysicalDeviceScalarBlockLayoutFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceScalarBlockLayoutFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceScalarBlockLayoutFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceScalarBlockLayoutFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceScalarBlockLayoutFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetScalarBlockLayout returns the value in scalarBlockLayout.
func (p PhysicalDeviceScalarBlockLayoutFeatures) GetScalarBlockLayout() bool {
	return p.ptr.scalarBlockLayout != 0
}

// SetScalarBlockLayout sets the value in scalarBlockLayout.
func (p PhysicalDeviceScalarBlockLayoutFeatures) SetScalarBlockLayout(value bool) {
	if value {
		p.ptr.scalarBlockLayout = C.VkBool32(1)
	} else {
		p.ptr.scalarBlockLayout = C.VkBool32(0)
	}
}

// PhysicalDeviceSeparateDepthStencilLayoutsFeatures wraps VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.
type PhysicalDeviceSeparateDepthStencilLayoutsFeatures struct {
	ptr *C.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
}

// PhysicalDeviceSeparateDepthStencilLayoutsFeaturesNil is a null pointer.
var PhysicalDeviceSeparateDepthStencilLayoutsFeaturesNil PhysicalDeviceSeparateDepthStencilLayoutsFeatures

// PhysicalDeviceSeparateDepthStencilLayoutsFeaturesSizeOf is the byte size of VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.
const PhysicalDeviceSeparateDepthStencilLayoutsFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures)

// PhysicalDeviceSeparateDepthStencilLayoutsFeaturesFromPtr converts a raw pointer to a PhysicalDeviceSeparateDepthStencilLayoutsFeatures.
func PhysicalDeviceSeparateDepthStencilLayoutsFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceSeparateDepthStencilLayoutsFeatures {
	return PhysicalDeviceSeparateDepthStencilLayoutsFeatures{ptr: (*C.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures)(ptr)}
}

// PhysicalDeviceSeparateDepthStencilLayoutsFeaturesAlloc allocates a continuous block of VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.
func PhysicalDeviceSeparateDepthStencilLayoutsFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceSeparateDepthStencilLayoutsFeatures {
	ptr := alloc.Allocate(PhysicalDeviceSeparateDepthStencilLayoutsFeaturesSizeOf * count)
	return PhysicalDeviceSeparateDepthStencilLayoutsFeatures{ptr: (*C.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceSeparateDepthStencilLayoutsFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceSeparateDepthStencilLayoutsFeatures) Offset(offset int) PhysicalDeviceSeparateDepthStencilLayoutsFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceSeparateDepthStencilLayoutsFeaturesSizeOf)
	return PhysicalDeviceSeparateDepthStencilLayoutsFeatures{ptr: (*C.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceSeparateDepthStencilLayoutsFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceSeparateDepthStencilLayoutsFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceSeparateDepthStencilLayoutsFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceSeparateDepthStencilLayoutsFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSeparateDepthStencilLayouts returns the value in separateDepthStencilLayouts.
func (p PhysicalDeviceSeparateDepthStencilLayoutsFeatures) GetSeparateDepthStencilLayouts() bool {
	return p.ptr.separateDepthStencilLayouts != 0
}

// SetSeparateDepthStencilLayouts sets the value in separateDepthStencilLayouts.
func (p PhysicalDeviceSeparateDepthStencilLayoutsFeatures) SetSeparateDepthStencilLayouts(value bool) {
	if value {
		p.ptr.separateDepthStencilLayouts = C.VkBool32(1)
	} else {
		p.ptr.separateDepthStencilLayouts = C.VkBool32(0)
	}
}

// PhysicalDeviceShaderAtomicInt64Features wraps VkPhysicalDeviceShaderAtomicInt64Features.
type PhysicalDeviceShaderAtomicInt64Features struct {
	ptr *C.VkPhysicalDeviceShaderAtomicInt64Features
}

// PhysicalDeviceShaderAtomicInt64FeaturesNil is a null pointer.
var PhysicalDeviceShaderAtomicInt64FeaturesNil PhysicalDeviceShaderAtomicInt64Features

// PhysicalDeviceShaderAtomicInt64FeaturesSizeOf is the byte size of VkPhysicalDeviceShaderAtomicInt64Features.
const PhysicalDeviceShaderAtomicInt64FeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceShaderAtomicInt64Features)

// PhysicalDeviceShaderAtomicInt64FeaturesFromPtr converts a raw pointer to a PhysicalDeviceShaderAtomicInt64Features.
func PhysicalDeviceShaderAtomicInt64FeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceShaderAtomicInt64Features {
	return PhysicalDeviceShaderAtomicInt64Features{ptr: (*C.VkPhysicalDeviceShaderAtomicInt64Features)(ptr)}
}

// PhysicalDeviceShaderAtomicInt64FeaturesAlloc allocates a continuous block of VkPhysicalDeviceShaderAtomicInt64Features.
func PhysicalDeviceShaderAtomicInt64FeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceShaderAtomicInt64Features {
	ptr := alloc.Allocate(PhysicalDeviceShaderAtomicInt64FeaturesSizeOf * count)
	return PhysicalDeviceShaderAtomicInt64Features{ptr: (*C.VkPhysicalDeviceShaderAtomicInt64Features)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceShaderAtomicInt64Features) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceShaderAtomicInt64Features) Offset(offset int) PhysicalDeviceShaderAtomicInt64Features {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceShaderAtomicInt64FeaturesSizeOf)
	return PhysicalDeviceShaderAtomicInt64Features{ptr: (*C.VkPhysicalDeviceShaderAtomicInt64Features)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceShaderAtomicInt64Features) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceShaderAtomicInt64Features) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceShaderAtomicInt64Features) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceShaderAtomicInt64Features) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetShaderBufferInt64Atomics returns the value in shaderBufferInt64Atomics.
func (p PhysicalDeviceShaderAtomicInt64Features) GetShaderBufferInt64Atomics() bool {
	return p.ptr.shaderBufferInt64Atomics != 0
}

// SetShaderBufferInt64Atomics sets the value in shaderBufferInt64Atomics.
func (p PhysicalDeviceShaderAtomicInt64Features) SetShaderBufferInt64Atomics(value bool) {
	if value {
		p.ptr.shaderBufferInt64Atomics = C.VkBool32(1)
	} else {
		p.ptr.shaderBufferInt64Atomics = C.VkBool32(0)
	}
}

// GetShaderSharedInt64Atomics returns the value in shaderSharedInt64Atomics.
func (p PhysicalDeviceShaderAtomicInt64Features) GetShaderSharedInt64Atomics() bool {
	return p.ptr.shaderSharedInt64Atomics != 0
}

// SetShaderSharedInt64Atomics sets the value in shaderSharedInt64Atomics.
func (p PhysicalDeviceShaderAtomicInt64Features) SetShaderSharedInt64Atomics(value bool) {
	if value {
		p.ptr.shaderSharedInt64Atomics = C.VkBool32(1)
	} else {
		p.ptr.shaderSharedInt64Atomics = C.VkBool32(0)
	}
}

// PhysicalDeviceShaderDemoteToHelperInvocationFeatures wraps VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.
type PhysicalDeviceShaderDemoteToHelperInvocationFeatures struct {
	ptr *C.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures
}

// PhysicalDeviceShaderDemoteToHelperInvocationFeaturesNil is a null pointer.
var PhysicalDeviceShaderDemoteToHelperInvocationFeaturesNil PhysicalDeviceShaderDemoteToHelperInvocationFeatures

// PhysicalDeviceShaderDemoteToHelperInvocationFeaturesSizeOf is the byte size of VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.
const PhysicalDeviceShaderDemoteToHelperInvocationFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures)

// PhysicalDeviceShaderDemoteToHelperInvocationFeaturesFromPtr converts a raw pointer to a PhysicalDeviceShaderDemoteToHelperInvocationFeatures.
func PhysicalDeviceShaderDemoteToHelperInvocationFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceShaderDemoteToHelperInvocationFeatures {
	return PhysicalDeviceShaderDemoteToHelperInvocationFeatures{ptr: (*C.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures)(ptr)}
}

// PhysicalDeviceShaderDemoteToHelperInvocationFeaturesAlloc allocates a continuous block of VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.
func PhysicalDeviceShaderDemoteToHelperInvocationFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceShaderDemoteToHelperInvocationFeatures {
	ptr := alloc.Allocate(PhysicalDeviceShaderDemoteToHelperInvocationFeaturesSizeOf * count)
	return PhysicalDeviceShaderDemoteToHelperInvocationFeatures{ptr: (*C.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceShaderDemoteToHelperInvocationFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceShaderDemoteToHelperInvocationFeatures) Offset(offset int) PhysicalDeviceShaderDemoteToHelperInvocationFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceShaderDemoteToHelperInvocationFeaturesSizeOf)
	return PhysicalDeviceShaderDemoteToHelperInvocationFeatures{ptr: (*C.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceShaderDemoteToHelperInvocationFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceShaderDemoteToHelperInvocationFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceShaderDemoteToHelperInvocationFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceShaderDemoteToHelperInvocationFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetShaderDemoteToHelperInvocation returns the value in shaderDemoteToHelperInvocation.
func (p PhysicalDeviceShaderDemoteToHelperInvocationFeatures) GetShaderDemoteToHelperInvocation() bool {
	return p.ptr.shaderDemoteToHelperInvocation != 0
}

// SetShaderDemoteToHelperInvocation sets the value in shaderDemoteToHelperInvocation.
func (p PhysicalDeviceShaderDemoteToHelperInvocationFeatures) SetShaderDemoteToHelperInvocation(value bool) {
	if value {
		p.ptr.shaderDemoteToHelperInvocation = C.VkBool32(1)
	} else {
		p.ptr.shaderDemoteToHelperInvocation = C.VkBool32(0)
	}
}

// PhysicalDeviceShaderDrawParametersFeatures wraps VkPhysicalDeviceShaderDrawParametersFeatures.
type PhysicalDeviceShaderDrawParametersFeatures struct {
	ptr *C.VkPhysicalDeviceShaderDrawParametersFeatures
}

// PhysicalDeviceShaderDrawParametersFeaturesNil is a null pointer.
var PhysicalDeviceShaderDrawParametersFeaturesNil PhysicalDeviceShaderDrawParametersFeatures

// PhysicalDeviceShaderDrawParametersFeaturesSizeOf is the byte size of VkPhysicalDeviceShaderDrawParametersFeatures.
const PhysicalDeviceShaderDrawParametersFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceShaderDrawParametersFeatures)

// PhysicalDeviceShaderDrawParametersFeaturesFromPtr converts a raw pointer to a PhysicalDeviceShaderDrawParametersFeatures.
func PhysicalDeviceShaderDrawParametersFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceShaderDrawParametersFeatures {
	return PhysicalDeviceShaderDrawParametersFeatures{ptr: (*C.VkPhysicalDeviceShaderDrawParametersFeatures)(ptr)}
}

// PhysicalDeviceShaderDrawParametersFeaturesAlloc allocates a continuous block of VkPhysicalDeviceShaderDrawParametersFeatures.
func PhysicalDeviceShaderDrawParametersFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceShaderDrawParametersFeatures {
	ptr := alloc.Allocate(PhysicalDeviceShaderDrawParametersFeaturesSizeOf * count)
	return PhysicalDeviceShaderDrawParametersFeatures{ptr: (*C.VkPhysicalDeviceShaderDrawParametersFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceShaderDrawParametersFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceShaderDrawParametersFeatures) Offset(offset int) PhysicalDeviceShaderDrawParametersFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceShaderDrawParametersFeaturesSizeOf)
	return PhysicalDeviceShaderDrawParametersFeatures{ptr: (*C.VkPhysicalDeviceShaderDrawParametersFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceShaderDrawParametersFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceShaderDrawParametersFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceShaderDrawParametersFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceShaderDrawParametersFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetShaderDrawParameters returns the value in shaderDrawParameters.
func (p PhysicalDeviceShaderDrawParametersFeatures) GetShaderDrawParameters() bool {
	return p.ptr.shaderDrawParameters != 0
}

// SetShaderDrawParameters sets the value in shaderDrawParameters.
func (p PhysicalDeviceShaderDrawParametersFeatures) SetShaderDrawParameters(value bool) {
	if value {
		p.ptr.shaderDrawParameters = C.VkBool32(1)
	} else {
		p.ptr.shaderDrawParameters = C.VkBool32(0)
	}
}

// PhysicalDeviceShaderExpectAssumeFeatures wraps VkPhysicalDeviceShaderExpectAssumeFeatures.
type PhysicalDeviceShaderExpectAssumeFeatures struct {
	ptr *C.VkPhysicalDeviceShaderExpectAssumeFeatures
}

// PhysicalDeviceShaderExpectAssumeFeaturesNil is a null pointer.
var PhysicalDeviceShaderExpectAssumeFeaturesNil PhysicalDeviceShaderExpectAssumeFeatures

// PhysicalDeviceShaderExpectAssumeFeaturesSizeOf is the byte size of VkPhysicalDeviceShaderExpectAssumeFeatures.
const PhysicalDeviceShaderExpectAssumeFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceShaderExpectAssumeFeatures)

// PhysicalDeviceShaderExpectAssumeFeaturesFromPtr converts a raw pointer to a PhysicalDeviceShaderExpectAssumeFeatures.
func PhysicalDeviceShaderExpectAssumeFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceShaderExpectAssumeFeatures {
	return PhysicalDeviceShaderExpectAssumeFeatures{ptr: (*C.VkPhysicalDeviceShaderExpectAssumeFeatures)(ptr)}
}

// PhysicalDeviceShaderExpectAssumeFeaturesAlloc allocates a continuous block of VkPhysicalDeviceShaderExpectAssumeFeatures.
func PhysicalDeviceShaderExpectAssumeFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceShaderExpectAssumeFeatures {
	ptr := alloc.Allocate(PhysicalDeviceShaderExpectAssumeFeaturesSizeOf * count)
	return PhysicalDeviceShaderExpectAssumeFeatures{ptr: (*C.VkPhysicalDeviceShaderExpectAssumeFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceShaderExpectAssumeFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceShaderExpectAssumeFeatures) Offset(offset int) PhysicalDeviceShaderExpectAssumeFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceShaderExpectAssumeFeaturesSizeOf)
	return PhysicalDeviceShaderExpectAssumeFeatures{ptr: (*C.VkPhysicalDeviceShaderExpectAssumeFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceShaderExpectAssumeFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceShaderExpectAssumeFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceShaderExpectAssumeFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceShaderExpectAssumeFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetShaderExpectAssume returns the value in shaderExpectAssume.
func (p PhysicalDeviceShaderExpectAssumeFeatures) GetShaderExpectAssume() bool {
	return p.ptr.shaderExpectAssume != 0
}

// SetShaderExpectAssume sets the value in shaderExpectAssume.
func (p PhysicalDeviceShaderExpectAssumeFeatures) SetShaderExpectAssume(value bool) {
	if value {
		p.ptr.shaderExpectAssume = C.VkBool32(1)
	} else {
		p.ptr.shaderExpectAssume = C.VkBool32(0)
	}
}

// PhysicalDeviceShaderFloat16Int8Features wraps VkPhysicalDeviceShaderFloat16Int8Features.
type PhysicalDeviceShaderFloat16Int8Features struct {
	ptr *C.VkPhysicalDeviceShaderFloat16Int8Features
}

// PhysicalDeviceShaderFloat16Int8FeaturesNil is a null pointer.
var PhysicalDeviceShaderFloat16Int8FeaturesNil PhysicalDeviceShaderFloat16Int8Features

// PhysicalDeviceShaderFloat16Int8FeaturesSizeOf is the byte size of VkPhysicalDeviceShaderFloat16Int8Features.
const PhysicalDeviceShaderFloat16Int8FeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceShaderFloat16Int8Features)

// PhysicalDeviceShaderFloat16Int8FeaturesFromPtr converts a raw pointer to a PhysicalDeviceShaderFloat16Int8Features.
func PhysicalDeviceShaderFloat16Int8FeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceShaderFloat16Int8Features {
	return PhysicalDeviceShaderFloat16Int8Features{ptr: (*C.VkPhysicalDeviceShaderFloat16Int8Features)(ptr)}
}

// PhysicalDeviceShaderFloat16Int8FeaturesAlloc allocates a continuous block of VkPhysicalDeviceShaderFloat16Int8Features.
func PhysicalDeviceShaderFloat16Int8FeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceShaderFloat16Int8Features {
	ptr := alloc.Allocate(PhysicalDeviceShaderFloat16Int8FeaturesSizeOf * count)
	return PhysicalDeviceShaderFloat16Int8Features{ptr: (*C.VkPhysicalDeviceShaderFloat16Int8Features)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceShaderFloat16Int8Features) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceShaderFloat16Int8Features) Offset(offset int) PhysicalDeviceShaderFloat16Int8Features {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceShaderFloat16Int8FeaturesSizeOf)
	return PhysicalDeviceShaderFloat16Int8Features{ptr: (*C.VkPhysicalDeviceShaderFloat16Int8Features)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceShaderFloat16Int8Features) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceShaderFloat16Int8Features) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceShaderFloat16Int8Features) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceShaderFloat16Int8Features) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetShaderFloat16 returns the value in shaderFloat16.
func (p PhysicalDeviceShaderFloat16Int8Features) GetShaderFloat16() bool {
	return p.ptr.shaderFloat16 != 0
}

// SetShaderFloat16 sets the value in shaderFloat16.
func (p PhysicalDeviceShaderFloat16Int8Features) SetShaderFloat16(value bool) {
	if value {
		p.ptr.shaderFloat16 = C.VkBool32(1)
	} else {
		p.ptr.shaderFloat16 = C.VkBool32(0)
	}
}

// GetShaderInt8 returns the value in shaderInt8.
func (p PhysicalDeviceShaderFloat16Int8Features) GetShaderInt8() bool {
	return p.ptr.shaderInt8 != 0
}

// SetShaderInt8 sets the value in shaderInt8.
func (p PhysicalDeviceShaderFloat16Int8Features) SetShaderInt8(value bool) {
	if value {
		p.ptr.shaderInt8 = C.VkBool32(1)
	} else {
		p.ptr.shaderInt8 = C.VkBool32(0)
	}
}

// PhysicalDeviceShaderFloatControls2Features wraps VkPhysicalDeviceShaderFloatControls2Features.
type PhysicalDeviceShaderFloatControls2Features struct {
	ptr *C.VkPhysicalDeviceShaderFloatControls2Features
}

// PhysicalDeviceShaderFloatControls2FeaturesNil is a null pointer.
var PhysicalDeviceShaderFloatControls2FeaturesNil PhysicalDeviceShaderFloatControls2Features

// PhysicalDeviceShaderFloatControls2FeaturesSizeOf is the byte size of VkPhysicalDeviceShaderFloatControls2Features.
const PhysicalDeviceShaderFloatControls2FeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceShaderFloatControls2Features)

// PhysicalDeviceShaderFloatControls2FeaturesFromPtr converts a raw pointer to a PhysicalDeviceShaderFloatControls2Features.
func PhysicalDeviceShaderFloatControls2FeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceShaderFloatControls2Features {
	return PhysicalDeviceShaderFloatControls2Features{ptr: (*C.VkPhysicalDeviceShaderFloatControls2Features)(ptr)}
}

// PhysicalDeviceShaderFloatControls2FeaturesAlloc allocates a continuous block of VkPhysicalDeviceShaderFloatControls2Features.
func PhysicalDeviceShaderFloatControls2FeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceShaderFloatControls2Features {
	ptr := alloc.Allocate(PhysicalDeviceShaderFloatControls2FeaturesSizeOf * count)
	return PhysicalDeviceShaderFloatControls2Features{ptr: (*C.VkPhysicalDeviceShaderFloatControls2Features)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceShaderFloatControls2Features) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceShaderFloatControls2Features) Offset(offset int) PhysicalDeviceShaderFloatControls2Features {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceShaderFloatControls2FeaturesSizeOf)
	return PhysicalDeviceShaderFloatControls2Features{ptr: (*C.VkPhysicalDeviceShaderFloatControls2Features)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceShaderFloatControls2Features) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceShaderFloatControls2Features) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceShaderFloatControls2Features) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceShaderFloatControls2Features) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetShaderFloatControls2 returns the value in shaderFloatControls2.
func (p PhysicalDeviceShaderFloatControls2Features) GetShaderFloatControls2() bool {
	return p.ptr.shaderFloatControls2 != 0
}

// SetShaderFloatControls2 sets the value in shaderFloatControls2.
func (p PhysicalDeviceShaderFloatControls2Features) SetShaderFloatControls2(value bool) {
	if value {
		p.ptr.shaderFloatControls2 = C.VkBool32(1)
	} else {
		p.ptr.shaderFloatControls2 = C.VkBool32(0)
	}
}

// PhysicalDeviceShaderIntegerDotProductFeatures wraps VkPhysicalDeviceShaderIntegerDotProductFeatures.
type PhysicalDeviceShaderIntegerDotProductFeatures struct {
	ptr *C.VkPhysicalDeviceShaderIntegerDotProductFeatures
}

// PhysicalDeviceShaderIntegerDotProductFeaturesNil is a null pointer.
var PhysicalDeviceShaderIntegerDotProductFeaturesNil PhysicalDeviceShaderIntegerDotProductFeatures

// PhysicalDeviceShaderIntegerDotProductFeaturesSizeOf is the byte size of VkPhysicalDeviceShaderIntegerDotProductFeatures.
const PhysicalDeviceShaderIntegerDotProductFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceShaderIntegerDotProductFeatures)

// PhysicalDeviceShaderIntegerDotProductFeaturesFromPtr converts a raw pointer to a PhysicalDeviceShaderIntegerDotProductFeatures.
func PhysicalDeviceShaderIntegerDotProductFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceShaderIntegerDotProductFeatures {
	return PhysicalDeviceShaderIntegerDotProductFeatures{ptr: (*C.VkPhysicalDeviceShaderIntegerDotProductFeatures)(ptr)}
}

// PhysicalDeviceShaderIntegerDotProductFeaturesAlloc allocates a continuous block of VkPhysicalDeviceShaderIntegerDotProductFeatures.
func PhysicalDeviceShaderIntegerDotProductFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceShaderIntegerDotProductFeatures {
	ptr := alloc.Allocate(PhysicalDeviceShaderIntegerDotProductFeaturesSizeOf * count)
	return PhysicalDeviceShaderIntegerDotProductFeatures{ptr: (*C.VkPhysicalDeviceShaderIntegerDotProductFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceShaderIntegerDotProductFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceShaderIntegerDotProductFeatures) Offset(offset int) PhysicalDeviceShaderIntegerDotProductFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceShaderIntegerDotProductFeaturesSizeOf)
	return PhysicalDeviceShaderIntegerDotProductFeatures{ptr: (*C.VkPhysicalDeviceShaderIntegerDotProductFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceShaderIntegerDotProductFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceShaderIntegerDotProductFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceShaderIntegerDotProductFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceShaderIntegerDotProductFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetShaderIntegerDotProduct returns the value in shaderIntegerDotProduct.
func (p PhysicalDeviceShaderIntegerDotProductFeatures) GetShaderIntegerDotProduct() bool {
	return p.ptr.shaderIntegerDotProduct != 0
}

// SetShaderIntegerDotProduct sets the value in shaderIntegerDotProduct.
func (p PhysicalDeviceShaderIntegerDotProductFeatures) SetShaderIntegerDotProduct(value bool) {
	if value {
		p.ptr.shaderIntegerDotProduct = C.VkBool32(1)
	} else {
		p.ptr.shaderIntegerDotProduct = C.VkBool32(0)
	}
}

// PhysicalDeviceShaderIntegerDotProductProperties wraps VkPhysicalDeviceShaderIntegerDotProductProperties.
type PhysicalDeviceShaderIntegerDotProductProperties struct {
	ptr *C.VkPhysicalDeviceShaderIntegerDotProductProperties
}

// PhysicalDeviceShaderIntegerDotProductPropertiesNil is a null pointer.
var PhysicalDeviceShaderIntegerDotProductPropertiesNil PhysicalDeviceShaderIntegerDotProductProperties

// PhysicalDeviceShaderIntegerDotProductPropertiesSizeOf is the byte size of VkPhysicalDeviceShaderIntegerDotProductProperties.
const PhysicalDeviceShaderIntegerDotProductPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceShaderIntegerDotProductProperties)

// PhysicalDeviceShaderIntegerDotProductPropertiesFromPtr converts a raw pointer to a PhysicalDeviceShaderIntegerDotProductProperties.
func PhysicalDeviceShaderIntegerDotProductPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceShaderIntegerDotProductProperties {
	return PhysicalDeviceShaderIntegerDotProductProperties{ptr: (*C.VkPhysicalDeviceShaderIntegerDotProductProperties)(ptr)}
}

// PhysicalDeviceShaderIntegerDotProductPropertiesAlloc allocates a continuous block of VkPhysicalDeviceShaderIntegerDotProductProperties.
func PhysicalDeviceShaderIntegerDotProductPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceShaderIntegerDotProductProperties {
	ptr := alloc.Allocate(PhysicalDeviceShaderIntegerDotProductPropertiesSizeOf * count)
	return PhysicalDeviceShaderIntegerDotProductProperties{ptr: (*C.VkPhysicalDeviceShaderIntegerDotProductProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceShaderIntegerDotProductProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceShaderIntegerDotProductProperties) Offset(offset int) PhysicalDeviceShaderIntegerDotProductProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceShaderIntegerDotProductPropertiesSizeOf)
	return PhysicalDeviceShaderIntegerDotProductProperties{ptr: (*C.VkPhysicalDeviceShaderIntegerDotProductProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetIntegerDotProduct8BitUnsignedAccelerated returns the value in integerDotProduct8BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct8BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProduct8BitUnsignedAccelerated != 0
}

// SetIntegerDotProduct8BitUnsignedAccelerated sets the value in integerDotProduct8BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct8BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct8BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct8BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct8BitSignedAccelerated returns the value in integerDotProduct8BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct8BitSignedAccelerated() bool {
	return p.ptr.integerDotProduct8BitSignedAccelerated != 0
}

// SetIntegerDotProduct8BitSignedAccelerated sets the value in integerDotProduct8BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct8BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct8BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct8BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct8BitMixedSignednessAccelerated returns the value in integerDotProduct8BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct8BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProduct8BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProduct8BitMixedSignednessAccelerated sets the value in integerDotProduct8BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct8BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct8BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct8BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct4x8BitPackedUnsignedAccelerated returns the value in integerDotProduct4x8BitPackedUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct4x8BitPackedUnsignedAccelerated() bool {
	return p.ptr.integerDotProduct4x8BitPackedUnsignedAccelerated != 0
}

// SetIntegerDotProduct4x8BitPackedUnsignedAccelerated sets the value in integerDotProduct4x8BitPackedUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct4x8BitPackedUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct4x8BitPackedUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct4x8BitPackedUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct4x8BitPackedSignedAccelerated returns the value in integerDotProduct4x8BitPackedSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct4x8BitPackedSignedAccelerated() bool {
	return p.ptr.integerDotProduct4x8BitPackedSignedAccelerated != 0
}

// SetIntegerDotProduct4x8BitPackedSignedAccelerated sets the value in integerDotProduct4x8BitPackedSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct4x8BitPackedSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct4x8BitPackedSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct4x8BitPackedSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct4x8BitPackedMixedSignednessAccelerated returns the value in integerDotProduct4x8BitPackedMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct4x8BitPackedMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProduct4x8BitPackedMixedSignednessAccelerated != 0
}

// SetIntegerDotProduct4x8BitPackedMixedSignednessAccelerated sets the value in integerDotProduct4x8BitPackedMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct4x8BitPackedMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct4x8BitPackedMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct4x8BitPackedMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct16BitUnsignedAccelerated returns the value in integerDotProduct16BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct16BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProduct16BitUnsignedAccelerated != 0
}

// SetIntegerDotProduct16BitUnsignedAccelerated sets the value in integerDotProduct16BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct16BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct16BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct16BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct16BitSignedAccelerated returns the value in integerDotProduct16BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct16BitSignedAccelerated() bool {
	return p.ptr.integerDotProduct16BitSignedAccelerated != 0
}

// SetIntegerDotProduct16BitSignedAccelerated sets the value in integerDotProduct16BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct16BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct16BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct16BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct16BitMixedSignednessAccelerated returns the value in integerDotProduct16BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct16BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProduct16BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProduct16BitMixedSignednessAccelerated sets the value in integerDotProduct16BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct16BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct16BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct16BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct32BitUnsignedAccelerated returns the value in integerDotProduct32BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct32BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProduct32BitUnsignedAccelerated != 0
}

// SetIntegerDotProduct32BitUnsignedAccelerated sets the value in integerDotProduct32BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct32BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct32BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct32BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct32BitSignedAccelerated returns the value in integerDotProduct32BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct32BitSignedAccelerated() bool {
	return p.ptr.integerDotProduct32BitSignedAccelerated != 0
}

// SetIntegerDotProduct32BitSignedAccelerated sets the value in integerDotProduct32BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct32BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct32BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct32BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct32BitMixedSignednessAccelerated returns the value in integerDotProduct32BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct32BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProduct32BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProduct32BitMixedSignednessAccelerated sets the value in integerDotProduct32BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct32BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct32BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct32BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct64BitUnsignedAccelerated returns the value in integerDotProduct64BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct64BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProduct64BitUnsignedAccelerated != 0
}

// SetIntegerDotProduct64BitUnsignedAccelerated sets the value in integerDotProduct64BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct64BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct64BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct64BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct64BitSignedAccelerated returns the value in integerDotProduct64BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct64BitSignedAccelerated() bool {
	return p.ptr.integerDotProduct64BitSignedAccelerated != 0
}

// SetIntegerDotProduct64BitSignedAccelerated sets the value in integerDotProduct64BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct64BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct64BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct64BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct64BitMixedSignednessAccelerated returns the value in integerDotProduct64BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProduct64BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProduct64BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProduct64BitMixedSignednessAccelerated sets the value in integerDotProduct64BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProduct64BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct64BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct64BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating8BitUnsignedAccelerated returns the value in integerDotProductAccumulatingSaturating8BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating8BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating8BitUnsignedAccelerated sets the value in integerDotProductAccumulatingSaturating8BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating8BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating8BitSignedAccelerated returns the value in integerDotProductAccumulatingSaturating8BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating8BitSignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating8BitSignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating8BitSignedAccelerated sets the value in integerDotProductAccumulatingSaturating8BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating8BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating8BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating8BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated returns the value in integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated sets the value in integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated returns the value in integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated sets the value in integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated returns the value in integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated sets the value in integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated returns the value in integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated sets the value in integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating16BitUnsignedAccelerated returns the value in integerDotProductAccumulatingSaturating16BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating16BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating16BitUnsignedAccelerated sets the value in integerDotProductAccumulatingSaturating16BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating16BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating16BitSignedAccelerated returns the value in integerDotProductAccumulatingSaturating16BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating16BitSignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating16BitSignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating16BitSignedAccelerated sets the value in integerDotProductAccumulatingSaturating16BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating16BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating16BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating16BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated returns the value in integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated sets the value in integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating32BitUnsignedAccelerated returns the value in integerDotProductAccumulatingSaturating32BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating32BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating32BitUnsignedAccelerated sets the value in integerDotProductAccumulatingSaturating32BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating32BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating32BitSignedAccelerated returns the value in integerDotProductAccumulatingSaturating32BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating32BitSignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating32BitSignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating32BitSignedAccelerated sets the value in integerDotProductAccumulatingSaturating32BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating32BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating32BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating32BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated returns the value in integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated sets the value in integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating64BitUnsignedAccelerated returns the value in integerDotProductAccumulatingSaturating64BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating64BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating64BitUnsignedAccelerated sets the value in integerDotProductAccumulatingSaturating64BitUnsignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating64BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating64BitSignedAccelerated returns the value in integerDotProductAccumulatingSaturating64BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating64BitSignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating64BitSignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating64BitSignedAccelerated sets the value in integerDotProductAccumulatingSaturating64BitSignedAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating64BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating64BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating64BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated returns the value in integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) GetIntegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated sets the value in integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated.
func (p PhysicalDeviceShaderIntegerDotProductProperties) SetIntegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// PhysicalDeviceShaderSubgroupExtendedTypesFeatures wraps VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.
type PhysicalDeviceShaderSubgroupExtendedTypesFeatures struct {
	ptr *C.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
}

// PhysicalDeviceShaderSubgroupExtendedTypesFeaturesNil is a null pointer.
var PhysicalDeviceShaderSubgroupExtendedTypesFeaturesNil PhysicalDeviceShaderSubgroupExtendedTypesFeatures

// PhysicalDeviceShaderSubgroupExtendedTypesFeaturesSizeOf is the byte size of VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.
const PhysicalDeviceShaderSubgroupExtendedTypesFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures)

// PhysicalDeviceShaderSubgroupExtendedTypesFeaturesFromPtr converts a raw pointer to a PhysicalDeviceShaderSubgroupExtendedTypesFeatures.
func PhysicalDeviceShaderSubgroupExtendedTypesFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceShaderSubgroupExtendedTypesFeatures {
	return PhysicalDeviceShaderSubgroupExtendedTypesFeatures{ptr: (*C.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures)(ptr)}
}

// PhysicalDeviceShaderSubgroupExtendedTypesFeaturesAlloc allocates a continuous block of VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.
func PhysicalDeviceShaderSubgroupExtendedTypesFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceShaderSubgroupExtendedTypesFeatures {
	ptr := alloc.Allocate(PhysicalDeviceShaderSubgroupExtendedTypesFeaturesSizeOf * count)
	return PhysicalDeviceShaderSubgroupExtendedTypesFeatures{ptr: (*C.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceShaderSubgroupExtendedTypesFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceShaderSubgroupExtendedTypesFeatures) Offset(offset int) PhysicalDeviceShaderSubgroupExtendedTypesFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceShaderSubgroupExtendedTypesFeaturesSizeOf)
	return PhysicalDeviceShaderSubgroupExtendedTypesFeatures{ptr: (*C.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceShaderSubgroupExtendedTypesFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceShaderSubgroupExtendedTypesFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceShaderSubgroupExtendedTypesFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceShaderSubgroupExtendedTypesFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetShaderSubgroupExtendedTypes returns the value in shaderSubgroupExtendedTypes.
func (p PhysicalDeviceShaderSubgroupExtendedTypesFeatures) GetShaderSubgroupExtendedTypes() bool {
	return p.ptr.shaderSubgroupExtendedTypes != 0
}

// SetShaderSubgroupExtendedTypes sets the value in shaderSubgroupExtendedTypes.
func (p PhysicalDeviceShaderSubgroupExtendedTypesFeatures) SetShaderSubgroupExtendedTypes(value bool) {
	if value {
		p.ptr.shaderSubgroupExtendedTypes = C.VkBool32(1)
	} else {
		p.ptr.shaderSubgroupExtendedTypes = C.VkBool32(0)
	}
}

// PhysicalDeviceShaderSubgroupRotateFeatures wraps VkPhysicalDeviceShaderSubgroupRotateFeatures.
type PhysicalDeviceShaderSubgroupRotateFeatures struct {
	ptr *C.VkPhysicalDeviceShaderSubgroupRotateFeatures
}

// PhysicalDeviceShaderSubgroupRotateFeaturesNil is a null pointer.
var PhysicalDeviceShaderSubgroupRotateFeaturesNil PhysicalDeviceShaderSubgroupRotateFeatures

// PhysicalDeviceShaderSubgroupRotateFeaturesSizeOf is the byte size of VkPhysicalDeviceShaderSubgroupRotateFeatures.
const PhysicalDeviceShaderSubgroupRotateFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceShaderSubgroupRotateFeatures)

// PhysicalDeviceShaderSubgroupRotateFeaturesFromPtr converts a raw pointer to a PhysicalDeviceShaderSubgroupRotateFeatures.
func PhysicalDeviceShaderSubgroupRotateFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceShaderSubgroupRotateFeatures {
	return PhysicalDeviceShaderSubgroupRotateFeatures{ptr: (*C.VkPhysicalDeviceShaderSubgroupRotateFeatures)(ptr)}
}

// PhysicalDeviceShaderSubgroupRotateFeaturesAlloc allocates a continuous block of VkPhysicalDeviceShaderSubgroupRotateFeatures.
func PhysicalDeviceShaderSubgroupRotateFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceShaderSubgroupRotateFeatures {
	ptr := alloc.Allocate(PhysicalDeviceShaderSubgroupRotateFeaturesSizeOf * count)
	return PhysicalDeviceShaderSubgroupRotateFeatures{ptr: (*C.VkPhysicalDeviceShaderSubgroupRotateFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceShaderSubgroupRotateFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceShaderSubgroupRotateFeatures) Offset(offset int) PhysicalDeviceShaderSubgroupRotateFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceShaderSubgroupRotateFeaturesSizeOf)
	return PhysicalDeviceShaderSubgroupRotateFeatures{ptr: (*C.VkPhysicalDeviceShaderSubgroupRotateFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceShaderSubgroupRotateFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceShaderSubgroupRotateFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceShaderSubgroupRotateFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceShaderSubgroupRotateFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetShaderSubgroupRotate returns the value in shaderSubgroupRotate.
func (p PhysicalDeviceShaderSubgroupRotateFeatures) GetShaderSubgroupRotate() bool {
	return p.ptr.shaderSubgroupRotate != 0
}

// SetShaderSubgroupRotate sets the value in shaderSubgroupRotate.
func (p PhysicalDeviceShaderSubgroupRotateFeatures) SetShaderSubgroupRotate(value bool) {
	if value {
		p.ptr.shaderSubgroupRotate = C.VkBool32(1)
	} else {
		p.ptr.shaderSubgroupRotate = C.VkBool32(0)
	}
}

// GetShaderSubgroupRotateClustered returns the value in shaderSubgroupRotateClustered.
func (p PhysicalDeviceShaderSubgroupRotateFeatures) GetShaderSubgroupRotateClustered() bool {
	return p.ptr.shaderSubgroupRotateClustered != 0
}

// SetShaderSubgroupRotateClustered sets the value in shaderSubgroupRotateClustered.
func (p PhysicalDeviceShaderSubgroupRotateFeatures) SetShaderSubgroupRotateClustered(value bool) {
	if value {
		p.ptr.shaderSubgroupRotateClustered = C.VkBool32(1)
	} else {
		p.ptr.shaderSubgroupRotateClustered = C.VkBool32(0)
	}
}

// PhysicalDeviceShaderTerminateInvocationFeatures wraps VkPhysicalDeviceShaderTerminateInvocationFeatures.
type PhysicalDeviceShaderTerminateInvocationFeatures struct {
	ptr *C.VkPhysicalDeviceShaderTerminateInvocationFeatures
}

// PhysicalDeviceShaderTerminateInvocationFeaturesNil is a null pointer.
var PhysicalDeviceShaderTerminateInvocationFeaturesNil PhysicalDeviceShaderTerminateInvocationFeatures

// PhysicalDeviceShaderTerminateInvocationFeaturesSizeOf is the byte size of VkPhysicalDeviceShaderTerminateInvocationFeatures.
const PhysicalDeviceShaderTerminateInvocationFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceShaderTerminateInvocationFeatures)

// PhysicalDeviceShaderTerminateInvocationFeaturesFromPtr converts a raw pointer to a PhysicalDeviceShaderTerminateInvocationFeatures.
func PhysicalDeviceShaderTerminateInvocationFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceShaderTerminateInvocationFeatures {
	return PhysicalDeviceShaderTerminateInvocationFeatures{ptr: (*C.VkPhysicalDeviceShaderTerminateInvocationFeatures)(ptr)}
}

// PhysicalDeviceShaderTerminateInvocationFeaturesAlloc allocates a continuous block of VkPhysicalDeviceShaderTerminateInvocationFeatures.
func PhysicalDeviceShaderTerminateInvocationFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceShaderTerminateInvocationFeatures {
	ptr := alloc.Allocate(PhysicalDeviceShaderTerminateInvocationFeaturesSizeOf * count)
	return PhysicalDeviceShaderTerminateInvocationFeatures{ptr: (*C.VkPhysicalDeviceShaderTerminateInvocationFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceShaderTerminateInvocationFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceShaderTerminateInvocationFeatures) Offset(offset int) PhysicalDeviceShaderTerminateInvocationFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceShaderTerminateInvocationFeaturesSizeOf)
	return PhysicalDeviceShaderTerminateInvocationFeatures{ptr: (*C.VkPhysicalDeviceShaderTerminateInvocationFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceShaderTerminateInvocationFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceShaderTerminateInvocationFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceShaderTerminateInvocationFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceShaderTerminateInvocationFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetShaderTerminateInvocation returns the value in shaderTerminateInvocation.
func (p PhysicalDeviceShaderTerminateInvocationFeatures) GetShaderTerminateInvocation() bool {
	return p.ptr.shaderTerminateInvocation != 0
}

// SetShaderTerminateInvocation sets the value in shaderTerminateInvocation.
func (p PhysicalDeviceShaderTerminateInvocationFeatures) SetShaderTerminateInvocation(value bool) {
	if value {
		p.ptr.shaderTerminateInvocation = C.VkBool32(1)
	} else {
		p.ptr.shaderTerminateInvocation = C.VkBool32(0)
	}
}

// PhysicalDeviceSparseImageFormatInfo2 wraps VkPhysicalDeviceSparseImageFormatInfo2.
type PhysicalDeviceSparseImageFormatInfo2 struct {
	ptr *C.VkPhysicalDeviceSparseImageFormatInfo2
}

// PhysicalDeviceSparseImageFormatInfo2Nil is a null pointer.
var PhysicalDeviceSparseImageFormatInfo2Nil PhysicalDeviceSparseImageFormatInfo2

// PhysicalDeviceSparseImageFormatInfo2SizeOf is the byte size of VkPhysicalDeviceSparseImageFormatInfo2.
const PhysicalDeviceSparseImageFormatInfo2SizeOf = int(C.sizeof_VkPhysicalDeviceSparseImageFormatInfo2)

// PhysicalDeviceSparseImageFormatInfo2FromPtr converts a raw pointer to a PhysicalDeviceSparseImageFormatInfo2.
func PhysicalDeviceSparseImageFormatInfo2FromPtr(ptr unsafe.Pointer) PhysicalDeviceSparseImageFormatInfo2 {
	return PhysicalDeviceSparseImageFormatInfo2{ptr: (*C.VkPhysicalDeviceSparseImageFormatInfo2)(ptr)}
}

// PhysicalDeviceSparseImageFormatInfo2Alloc allocates a continuous block of VkPhysicalDeviceSparseImageFormatInfo2.
func PhysicalDeviceSparseImageFormatInfo2Alloc(alloc ffi.Allocator, count int) PhysicalDeviceSparseImageFormatInfo2 {
	ptr := alloc.Allocate(PhysicalDeviceSparseImageFormatInfo2SizeOf * count)
	return PhysicalDeviceSparseImageFormatInfo2{ptr: (*C.VkPhysicalDeviceSparseImageFormatInfo2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceSparseImageFormatInfo2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceSparseImageFormatInfo2) Offset(offset int) PhysicalDeviceSparseImageFormatInfo2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceSparseImageFormatInfo2SizeOf)
	return PhysicalDeviceSparseImageFormatInfo2{ptr: (*C.VkPhysicalDeviceSparseImageFormatInfo2)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceSparseImageFormatInfo2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceSparseImageFormatInfo2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceSparseImageFormatInfo2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceSparseImageFormatInfo2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFormat returns the value in format.
func (p PhysicalDeviceSparseImageFormatInfo2) GetFormat() Format {
	return Format(p.ptr.format)
}

// SetFormat sets the value in format.
func (p PhysicalDeviceSparseImageFormatInfo2) SetFormat(value Format) {
	p.ptr.format = (C.VkFormat)(value)
}

// GetType returns the value in type.
func (p PhysicalDeviceSparseImageFormatInfo2) GetType() ImageType {
	return ImageType(p.ptr._type)
}

// SetType sets the value in type.
func (p PhysicalDeviceSparseImageFormatInfo2) SetType(value ImageType) {
	p.ptr._type = (C.VkImageType)(value)
}

// GetSamples returns the value in samples.
func (p PhysicalDeviceSparseImageFormatInfo2) GetSamples() SampleCountFlags {
	return SampleCountFlags(p.ptr.samples)
}

// SetSamples sets the value in samples.
func (p PhysicalDeviceSparseImageFormatInfo2) SetSamples(value SampleCountFlags) {
	p.ptr.samples = (C.VkSampleCountFlagBits)(value)
}

// GetUsage returns the value in usage.
func (p PhysicalDeviceSparseImageFormatInfo2) GetUsage() ImageUsageFlags {
	return ImageUsageFlags(p.ptr.usage)
}

// SetUsage sets the value in usage.
func (p PhysicalDeviceSparseImageFormatInfo2) SetUsage(value ImageUsageFlags) {
	p.ptr.usage = (C.VkImageUsageFlags)(value)
}

// GetTiling returns the value in tiling.
func (p PhysicalDeviceSparseImageFormatInfo2) GetTiling() ImageTiling {
	return ImageTiling(p.ptr.tiling)
}

// SetTiling sets the value in tiling.
func (p PhysicalDeviceSparseImageFormatInfo2) SetTiling(value ImageTiling) {
	p.ptr.tiling = (C.VkImageTiling)(value)
}

// PhysicalDeviceSparseProperties wraps VkPhysicalDeviceSparseProperties.
type PhysicalDeviceSparseProperties struct {
	ptr *C.VkPhysicalDeviceSparseProperties
}

// PhysicalDeviceSparsePropertiesNil is a null pointer.
var PhysicalDeviceSparsePropertiesNil PhysicalDeviceSparseProperties

// PhysicalDeviceSparsePropertiesSizeOf is the byte size of VkPhysicalDeviceSparseProperties.
const PhysicalDeviceSparsePropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceSparseProperties)

// PhysicalDeviceSparsePropertiesFromPtr converts a raw pointer to a PhysicalDeviceSparseProperties.
func PhysicalDeviceSparsePropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceSparseProperties {
	return PhysicalDeviceSparseProperties{ptr: (*C.VkPhysicalDeviceSparseProperties)(ptr)}
}

// PhysicalDeviceSparsePropertiesAlloc allocates a continuous block of VkPhysicalDeviceSparseProperties.
func PhysicalDeviceSparsePropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceSparseProperties {
	ptr := alloc.Allocate(PhysicalDeviceSparsePropertiesSizeOf * count)
	return PhysicalDeviceSparseProperties{ptr: (*C.VkPhysicalDeviceSparseProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceSparseProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceSparseProperties) Offset(offset int) PhysicalDeviceSparseProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceSparsePropertiesSizeOf)
	return PhysicalDeviceSparseProperties{ptr: (*C.VkPhysicalDeviceSparseProperties)(ptr)}
}

// GetResidencyStandard2DBlockShape returns the value in residencyStandard2DBlockShape.
func (p PhysicalDeviceSparseProperties) GetResidencyStandard2DBlockShape() bool {
	return p.ptr.residencyStandard2DBlockShape != 0
}

// SetResidencyStandard2DBlockShape sets the value in residencyStandard2DBlockShape.
func (p PhysicalDeviceSparseProperties) SetResidencyStandard2DBlockShape(value bool) {
	if value {
		p.ptr.residencyStandard2DBlockShape = C.VkBool32(1)
	} else {
		p.ptr.residencyStandard2DBlockShape = C.VkBool32(0)
	}
}

// GetResidencyStandard2DMultisampleBlockShape returns the value in residencyStandard2DMultisampleBlockShape.
func (p PhysicalDeviceSparseProperties) GetResidencyStandard2DMultisampleBlockShape() bool {
	return p.ptr.residencyStandard2DMultisampleBlockShape != 0
}

// SetResidencyStandard2DMultisampleBlockShape sets the value in residencyStandard2DMultisampleBlockShape.
func (p PhysicalDeviceSparseProperties) SetResidencyStandard2DMultisampleBlockShape(value bool) {
	if value {
		p.ptr.residencyStandard2DMultisampleBlockShape = C.VkBool32(1)
	} else {
		p.ptr.residencyStandard2DMultisampleBlockShape = C.VkBool32(0)
	}
}

// GetResidencyStandard3DBlockShape returns the value in residencyStandard3DBlockShape.
func (p PhysicalDeviceSparseProperties) GetResidencyStandard3DBlockShape() bool {
	return p.ptr.residencyStandard3DBlockShape != 0
}

// SetResidencyStandard3DBlockShape sets the value in residencyStandard3DBlockShape.
func (p PhysicalDeviceSparseProperties) SetResidencyStandard3DBlockShape(value bool) {
	if value {
		p.ptr.residencyStandard3DBlockShape = C.VkBool32(1)
	} else {
		p.ptr.residencyStandard3DBlockShape = C.VkBool32(0)
	}
}

// GetResidencyAlignedMipSize returns the value in residencyAlignedMipSize.
func (p PhysicalDeviceSparseProperties) GetResidencyAlignedMipSize() bool {
	return p.ptr.residencyAlignedMipSize != 0
}

// SetResidencyAlignedMipSize sets the value in residencyAlignedMipSize.
func (p PhysicalDeviceSparseProperties) SetResidencyAlignedMipSize(value bool) {
	if value {
		p.ptr.residencyAlignedMipSize = C.VkBool32(1)
	} else {
		p.ptr.residencyAlignedMipSize = C.VkBool32(0)
	}
}

// GetResidencyNonResidentStrict returns the value in residencyNonResidentStrict.
func (p PhysicalDeviceSparseProperties) GetResidencyNonResidentStrict() bool {
	return p.ptr.residencyNonResidentStrict != 0
}

// SetResidencyNonResidentStrict sets the value in residencyNonResidentStrict.
func (p PhysicalDeviceSparseProperties) SetResidencyNonResidentStrict(value bool) {
	if value {
		p.ptr.residencyNonResidentStrict = C.VkBool32(1)
	} else {
		p.ptr.residencyNonResidentStrict = C.VkBool32(0)
	}
}

// PhysicalDeviceSubgroupProperties wraps VkPhysicalDeviceSubgroupProperties.
type PhysicalDeviceSubgroupProperties struct {
	ptr *C.VkPhysicalDeviceSubgroupProperties
}

// PhysicalDeviceSubgroupPropertiesNil is a null pointer.
var PhysicalDeviceSubgroupPropertiesNil PhysicalDeviceSubgroupProperties

// PhysicalDeviceSubgroupPropertiesSizeOf is the byte size of VkPhysicalDeviceSubgroupProperties.
const PhysicalDeviceSubgroupPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceSubgroupProperties)

// PhysicalDeviceSubgroupPropertiesFromPtr converts a raw pointer to a PhysicalDeviceSubgroupProperties.
func PhysicalDeviceSubgroupPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceSubgroupProperties {
	return PhysicalDeviceSubgroupProperties{ptr: (*C.VkPhysicalDeviceSubgroupProperties)(ptr)}
}

// PhysicalDeviceSubgroupPropertiesAlloc allocates a continuous block of VkPhysicalDeviceSubgroupProperties.
func PhysicalDeviceSubgroupPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceSubgroupProperties {
	ptr := alloc.Allocate(PhysicalDeviceSubgroupPropertiesSizeOf * count)
	return PhysicalDeviceSubgroupProperties{ptr: (*C.VkPhysicalDeviceSubgroupProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceSubgroupProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceSubgroupProperties) Offset(offset int) PhysicalDeviceSubgroupProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceSubgroupPropertiesSizeOf)
	return PhysicalDeviceSubgroupProperties{ptr: (*C.VkPhysicalDeviceSubgroupProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceSubgroupProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceSubgroupProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceSubgroupProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceSubgroupProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSubgroupSize returns the value in subgroupSize.
func (p PhysicalDeviceSubgroupProperties) GetSubgroupSize() uint32 {
	return uint32(p.ptr.subgroupSize)
}

// SetSubgroupSize sets the value in subgroupSize.
func (p PhysicalDeviceSubgroupProperties) SetSubgroupSize(value uint32) {
	p.ptr.subgroupSize = (C.uint32_t)(value)
}

// GetSupportedStages returns the value in supportedStages.
func (p PhysicalDeviceSubgroupProperties) GetSupportedStages() ShaderStageFlags {
	return ShaderStageFlags(p.ptr.supportedStages)
}

// SetSupportedStages sets the value in supportedStages.
func (p PhysicalDeviceSubgroupProperties) SetSupportedStages(value ShaderStageFlags) {
	p.ptr.supportedStages = (C.VkShaderStageFlags)(value)
}

// GetSupportedOperations returns the value in supportedOperations.
func (p PhysicalDeviceSubgroupProperties) GetSupportedOperations() SubgroupFeatureFlags {
	return SubgroupFeatureFlags(p.ptr.supportedOperations)
}

// SetSupportedOperations sets the value in supportedOperations.
func (p PhysicalDeviceSubgroupProperties) SetSupportedOperations(value SubgroupFeatureFlags) {
	p.ptr.supportedOperations = (C.VkSubgroupFeatureFlags)(value)
}

// GetQuadOperationsInAllStages returns the value in quadOperationsInAllStages.
func (p PhysicalDeviceSubgroupProperties) GetQuadOperationsInAllStages() bool {
	return p.ptr.quadOperationsInAllStages != 0
}

// SetQuadOperationsInAllStages sets the value in quadOperationsInAllStages.
func (p PhysicalDeviceSubgroupProperties) SetQuadOperationsInAllStages(value bool) {
	if value {
		p.ptr.quadOperationsInAllStages = C.VkBool32(1)
	} else {
		p.ptr.quadOperationsInAllStages = C.VkBool32(0)
	}
}

// PhysicalDeviceSubgroupSizeControlFeatures wraps VkPhysicalDeviceSubgroupSizeControlFeatures.
type PhysicalDeviceSubgroupSizeControlFeatures struct {
	ptr *C.VkPhysicalDeviceSubgroupSizeControlFeatures
}

// PhysicalDeviceSubgroupSizeControlFeaturesNil is a null pointer.
var PhysicalDeviceSubgroupSizeControlFeaturesNil PhysicalDeviceSubgroupSizeControlFeatures

// PhysicalDeviceSubgroupSizeControlFeaturesSizeOf is the byte size of VkPhysicalDeviceSubgroupSizeControlFeatures.
const PhysicalDeviceSubgroupSizeControlFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceSubgroupSizeControlFeatures)

// PhysicalDeviceSubgroupSizeControlFeaturesFromPtr converts a raw pointer to a PhysicalDeviceSubgroupSizeControlFeatures.
func PhysicalDeviceSubgroupSizeControlFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceSubgroupSizeControlFeatures {
	return PhysicalDeviceSubgroupSizeControlFeatures{ptr: (*C.VkPhysicalDeviceSubgroupSizeControlFeatures)(ptr)}
}

// PhysicalDeviceSubgroupSizeControlFeaturesAlloc allocates a continuous block of VkPhysicalDeviceSubgroupSizeControlFeatures.
func PhysicalDeviceSubgroupSizeControlFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceSubgroupSizeControlFeatures {
	ptr := alloc.Allocate(PhysicalDeviceSubgroupSizeControlFeaturesSizeOf * count)
	return PhysicalDeviceSubgroupSizeControlFeatures{ptr: (*C.VkPhysicalDeviceSubgroupSizeControlFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceSubgroupSizeControlFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceSubgroupSizeControlFeatures) Offset(offset int) PhysicalDeviceSubgroupSizeControlFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceSubgroupSizeControlFeaturesSizeOf)
	return PhysicalDeviceSubgroupSizeControlFeatures{ptr: (*C.VkPhysicalDeviceSubgroupSizeControlFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceSubgroupSizeControlFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceSubgroupSizeControlFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceSubgroupSizeControlFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceSubgroupSizeControlFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSubgroupSizeControl returns the value in subgroupSizeControl.
func (p PhysicalDeviceSubgroupSizeControlFeatures) GetSubgroupSizeControl() bool {
	return p.ptr.subgroupSizeControl != 0
}

// SetSubgroupSizeControl sets the value in subgroupSizeControl.
func (p PhysicalDeviceSubgroupSizeControlFeatures) SetSubgroupSizeControl(value bool) {
	if value {
		p.ptr.subgroupSizeControl = C.VkBool32(1)
	} else {
		p.ptr.subgroupSizeControl = C.VkBool32(0)
	}
}

// GetComputeFullSubgroups returns the value in computeFullSubgroups.
func (p PhysicalDeviceSubgroupSizeControlFeatures) GetComputeFullSubgroups() bool {
	return p.ptr.computeFullSubgroups != 0
}

// SetComputeFullSubgroups sets the value in computeFullSubgroups.
func (p PhysicalDeviceSubgroupSizeControlFeatures) SetComputeFullSubgroups(value bool) {
	if value {
		p.ptr.computeFullSubgroups = C.VkBool32(1)
	} else {
		p.ptr.computeFullSubgroups = C.VkBool32(0)
	}
}

// PhysicalDeviceSubgroupSizeControlProperties wraps VkPhysicalDeviceSubgroupSizeControlProperties.
type PhysicalDeviceSubgroupSizeControlProperties struct {
	ptr *C.VkPhysicalDeviceSubgroupSizeControlProperties
}

// PhysicalDeviceSubgroupSizeControlPropertiesNil is a null pointer.
var PhysicalDeviceSubgroupSizeControlPropertiesNil PhysicalDeviceSubgroupSizeControlProperties

// PhysicalDeviceSubgroupSizeControlPropertiesSizeOf is the byte size of VkPhysicalDeviceSubgroupSizeControlProperties.
const PhysicalDeviceSubgroupSizeControlPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceSubgroupSizeControlProperties)

// PhysicalDeviceSubgroupSizeControlPropertiesFromPtr converts a raw pointer to a PhysicalDeviceSubgroupSizeControlProperties.
func PhysicalDeviceSubgroupSizeControlPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceSubgroupSizeControlProperties {
	return PhysicalDeviceSubgroupSizeControlProperties{ptr: (*C.VkPhysicalDeviceSubgroupSizeControlProperties)(ptr)}
}

// PhysicalDeviceSubgroupSizeControlPropertiesAlloc allocates a continuous block of VkPhysicalDeviceSubgroupSizeControlProperties.
func PhysicalDeviceSubgroupSizeControlPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceSubgroupSizeControlProperties {
	ptr := alloc.Allocate(PhysicalDeviceSubgroupSizeControlPropertiesSizeOf * count)
	return PhysicalDeviceSubgroupSizeControlProperties{ptr: (*C.VkPhysicalDeviceSubgroupSizeControlProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceSubgroupSizeControlProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceSubgroupSizeControlProperties) Offset(offset int) PhysicalDeviceSubgroupSizeControlProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceSubgroupSizeControlPropertiesSizeOf)
	return PhysicalDeviceSubgroupSizeControlProperties{ptr: (*C.VkPhysicalDeviceSubgroupSizeControlProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceSubgroupSizeControlProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceSubgroupSizeControlProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceSubgroupSizeControlProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceSubgroupSizeControlProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMinSubgroupSize returns the value in minSubgroupSize.
func (p PhysicalDeviceSubgroupSizeControlProperties) GetMinSubgroupSize() uint32 {
	return uint32(p.ptr.minSubgroupSize)
}

// SetMinSubgroupSize sets the value in minSubgroupSize.
func (p PhysicalDeviceSubgroupSizeControlProperties) SetMinSubgroupSize(value uint32) {
	p.ptr.minSubgroupSize = (C.uint32_t)(value)
}

// GetMaxSubgroupSize returns the value in maxSubgroupSize.
func (p PhysicalDeviceSubgroupSizeControlProperties) GetMaxSubgroupSize() uint32 {
	return uint32(p.ptr.maxSubgroupSize)
}

// SetMaxSubgroupSize sets the value in maxSubgroupSize.
func (p PhysicalDeviceSubgroupSizeControlProperties) SetMaxSubgroupSize(value uint32) {
	p.ptr.maxSubgroupSize = (C.uint32_t)(value)
}

// GetMaxComputeWorkgroupSubgroups returns the value in maxComputeWorkgroupSubgroups.
func (p PhysicalDeviceSubgroupSizeControlProperties) GetMaxComputeWorkgroupSubgroups() uint32 {
	return uint32(p.ptr.maxComputeWorkgroupSubgroups)
}

// SetMaxComputeWorkgroupSubgroups sets the value in maxComputeWorkgroupSubgroups.
func (p PhysicalDeviceSubgroupSizeControlProperties) SetMaxComputeWorkgroupSubgroups(value uint32) {
	p.ptr.maxComputeWorkgroupSubgroups = (C.uint32_t)(value)
}

// GetRequiredSubgroupSizeStages returns the value in requiredSubgroupSizeStages.
func (p PhysicalDeviceSubgroupSizeControlProperties) GetRequiredSubgroupSizeStages() ShaderStageFlags {
	return ShaderStageFlags(p.ptr.requiredSubgroupSizeStages)
}

// SetRequiredSubgroupSizeStages sets the value in requiredSubgroupSizeStages.
func (p PhysicalDeviceSubgroupSizeControlProperties) SetRequiredSubgroupSizeStages(value ShaderStageFlags) {
	p.ptr.requiredSubgroupSizeStages = (C.VkShaderStageFlags)(value)
}

// PhysicalDeviceSynchronization2Features wraps VkPhysicalDeviceSynchronization2Features.
type PhysicalDeviceSynchronization2Features struct {
	ptr *C.VkPhysicalDeviceSynchronization2Features
}

// PhysicalDeviceSynchronization2FeaturesNil is a null pointer.
var PhysicalDeviceSynchronization2FeaturesNil PhysicalDeviceSynchronization2Features

// PhysicalDeviceSynchronization2FeaturesSizeOf is the byte size of VkPhysicalDeviceSynchronization2Features.
const PhysicalDeviceSynchronization2FeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceSynchronization2Features)

// PhysicalDeviceSynchronization2FeaturesFromPtr converts a raw pointer to a PhysicalDeviceSynchronization2Features.
func PhysicalDeviceSynchronization2FeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceSynchronization2Features {
	return PhysicalDeviceSynchronization2Features{ptr: (*C.VkPhysicalDeviceSynchronization2Features)(ptr)}
}

// PhysicalDeviceSynchronization2FeaturesAlloc allocates a continuous block of VkPhysicalDeviceSynchronization2Features.
func PhysicalDeviceSynchronization2FeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceSynchronization2Features {
	ptr := alloc.Allocate(PhysicalDeviceSynchronization2FeaturesSizeOf * count)
	return PhysicalDeviceSynchronization2Features{ptr: (*C.VkPhysicalDeviceSynchronization2Features)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceSynchronization2Features) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceSynchronization2Features) Offset(offset int) PhysicalDeviceSynchronization2Features {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceSynchronization2FeaturesSizeOf)
	return PhysicalDeviceSynchronization2Features{ptr: (*C.VkPhysicalDeviceSynchronization2Features)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceSynchronization2Features) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceSynchronization2Features) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceSynchronization2Features) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceSynchronization2Features) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSynchronization2 returns the value in synchronization2.
func (p PhysicalDeviceSynchronization2Features) GetSynchronization2() bool {
	return p.ptr.synchronization2 != 0
}

// SetSynchronization2 sets the value in synchronization2.
func (p PhysicalDeviceSynchronization2Features) SetSynchronization2(value bool) {
	if value {
		p.ptr.synchronization2 = C.VkBool32(1)
	} else {
		p.ptr.synchronization2 = C.VkBool32(0)
	}
}

// PhysicalDeviceTexelBufferAlignmentProperties wraps VkPhysicalDeviceTexelBufferAlignmentProperties.
type PhysicalDeviceTexelBufferAlignmentProperties struct {
	ptr *C.VkPhysicalDeviceTexelBufferAlignmentProperties
}

// PhysicalDeviceTexelBufferAlignmentPropertiesNil is a null pointer.
var PhysicalDeviceTexelBufferAlignmentPropertiesNil PhysicalDeviceTexelBufferAlignmentProperties

// PhysicalDeviceTexelBufferAlignmentPropertiesSizeOf is the byte size of VkPhysicalDeviceTexelBufferAlignmentProperties.
const PhysicalDeviceTexelBufferAlignmentPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceTexelBufferAlignmentProperties)

// PhysicalDeviceTexelBufferAlignmentPropertiesFromPtr converts a raw pointer to a PhysicalDeviceTexelBufferAlignmentProperties.
func PhysicalDeviceTexelBufferAlignmentPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceTexelBufferAlignmentProperties {
	return PhysicalDeviceTexelBufferAlignmentProperties{ptr: (*C.VkPhysicalDeviceTexelBufferAlignmentProperties)(ptr)}
}

// PhysicalDeviceTexelBufferAlignmentPropertiesAlloc allocates a continuous block of VkPhysicalDeviceTexelBufferAlignmentProperties.
func PhysicalDeviceTexelBufferAlignmentPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceTexelBufferAlignmentProperties {
	ptr := alloc.Allocate(PhysicalDeviceTexelBufferAlignmentPropertiesSizeOf * count)
	return PhysicalDeviceTexelBufferAlignmentProperties{ptr: (*C.VkPhysicalDeviceTexelBufferAlignmentProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceTexelBufferAlignmentProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceTexelBufferAlignmentProperties) Offset(offset int) PhysicalDeviceTexelBufferAlignmentProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceTexelBufferAlignmentPropertiesSizeOf)
	return PhysicalDeviceTexelBufferAlignmentProperties{ptr: (*C.VkPhysicalDeviceTexelBufferAlignmentProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceTexelBufferAlignmentProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceTexelBufferAlignmentProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceTexelBufferAlignmentProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceTexelBufferAlignmentProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetStorageTexelBufferOffsetAlignmentBytes returns the value in storageTexelBufferOffsetAlignmentBytes.
func (p PhysicalDeviceTexelBufferAlignmentProperties) GetStorageTexelBufferOffsetAlignmentBytes() DeviceSize {
	return DeviceSize(p.ptr.storageTexelBufferOffsetAlignmentBytes)
}

// SetStorageTexelBufferOffsetAlignmentBytes sets the value in storageTexelBufferOffsetAlignmentBytes.
func (p PhysicalDeviceTexelBufferAlignmentProperties) SetStorageTexelBufferOffsetAlignmentBytes(value DeviceSize) {
	p.ptr.storageTexelBufferOffsetAlignmentBytes = (C.VkDeviceSize)(value)
}

// GetStorageTexelBufferOffsetSingleTexelAlignment returns the value in storageTexelBufferOffsetSingleTexelAlignment.
func (p PhysicalDeviceTexelBufferAlignmentProperties) GetStorageTexelBufferOffsetSingleTexelAlignment() bool {
	return p.ptr.storageTexelBufferOffsetSingleTexelAlignment != 0
}

// SetStorageTexelBufferOffsetSingleTexelAlignment sets the value in storageTexelBufferOffsetSingleTexelAlignment.
func (p PhysicalDeviceTexelBufferAlignmentProperties) SetStorageTexelBufferOffsetSingleTexelAlignment(value bool) {
	if value {
		p.ptr.storageTexelBufferOffsetSingleTexelAlignment = C.VkBool32(1)
	} else {
		p.ptr.storageTexelBufferOffsetSingleTexelAlignment = C.VkBool32(0)
	}
}

// GetUniformTexelBufferOffsetAlignmentBytes returns the value in uniformTexelBufferOffsetAlignmentBytes.
func (p PhysicalDeviceTexelBufferAlignmentProperties) GetUniformTexelBufferOffsetAlignmentBytes() DeviceSize {
	return DeviceSize(p.ptr.uniformTexelBufferOffsetAlignmentBytes)
}

// SetUniformTexelBufferOffsetAlignmentBytes sets the value in uniformTexelBufferOffsetAlignmentBytes.
func (p PhysicalDeviceTexelBufferAlignmentProperties) SetUniformTexelBufferOffsetAlignmentBytes(value DeviceSize) {
	p.ptr.uniformTexelBufferOffsetAlignmentBytes = (C.VkDeviceSize)(value)
}

// GetUniformTexelBufferOffsetSingleTexelAlignment returns the value in uniformTexelBufferOffsetSingleTexelAlignment.
func (p PhysicalDeviceTexelBufferAlignmentProperties) GetUniformTexelBufferOffsetSingleTexelAlignment() bool {
	return p.ptr.uniformTexelBufferOffsetSingleTexelAlignment != 0
}

// SetUniformTexelBufferOffsetSingleTexelAlignment sets the value in uniformTexelBufferOffsetSingleTexelAlignment.
func (p PhysicalDeviceTexelBufferAlignmentProperties) SetUniformTexelBufferOffsetSingleTexelAlignment(value bool) {
	if value {
		p.ptr.uniformTexelBufferOffsetSingleTexelAlignment = C.VkBool32(1)
	} else {
		p.ptr.uniformTexelBufferOffsetSingleTexelAlignment = C.VkBool32(0)
	}
}

// PhysicalDeviceTextureCompressionASTCHDRFeatures wraps VkPhysicalDeviceTextureCompressionASTCHDRFeatures.
type PhysicalDeviceTextureCompressionASTCHDRFeatures struct {
	ptr *C.VkPhysicalDeviceTextureCompressionASTCHDRFeatures
}

// PhysicalDeviceTextureCompressionASTCHDRFeaturesNil is a null pointer.
var PhysicalDeviceTextureCompressionASTCHDRFeaturesNil PhysicalDeviceTextureCompressionASTCHDRFeatures

// PhysicalDeviceTextureCompressionASTCHDRFeaturesSizeOf is the byte size of VkPhysicalDeviceTextureCompressionASTCHDRFeatures.
const PhysicalDeviceTextureCompressionASTCHDRFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceTextureCompressionASTCHDRFeatures)

// PhysicalDeviceTextureCompressionASTCHDRFeaturesFromPtr converts a raw pointer to a PhysicalDeviceTextureCompressionASTCHDRFeatures.
func PhysicalDeviceTextureCompressionASTCHDRFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceTextureCompressionASTCHDRFeatures {
	return PhysicalDeviceTextureCompressionASTCHDRFeatures{ptr: (*C.VkPhysicalDeviceTextureCompressionASTCHDRFeatures)(ptr)}
}

// PhysicalDeviceTextureCompressionASTCHDRFeaturesAlloc allocates a continuous block of VkPhysicalDeviceTextureCompressionASTCHDRFeatures.
func PhysicalDeviceTextureCompressionASTCHDRFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceTextureCompressionASTCHDRFeatures {
	ptr := alloc.Allocate(PhysicalDeviceTextureCompressionASTCHDRFeaturesSizeOf * count)
	return PhysicalDeviceTextureCompressionASTCHDRFeatures{ptr: (*C.VkPhysicalDeviceTextureCompressionASTCHDRFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceTextureCompressionASTCHDRFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceTextureCompressionASTCHDRFeatures) Offset(offset int) PhysicalDeviceTextureCompressionASTCHDRFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceTextureCompressionASTCHDRFeaturesSizeOf)
	return PhysicalDeviceTextureCompressionASTCHDRFeatures{ptr: (*C.VkPhysicalDeviceTextureCompressionASTCHDRFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceTextureCompressionASTCHDRFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceTextureCompressionASTCHDRFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceTextureCompressionASTCHDRFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceTextureCompressionASTCHDRFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetTextureCompressionASTC_HDR returns the value in textureCompressionASTC_HDR.
func (p PhysicalDeviceTextureCompressionASTCHDRFeatures) GetTextureCompressionASTC_HDR() bool {
	return p.ptr.textureCompressionASTC_HDR != 0
}

// SetTextureCompressionASTC_HDR sets the value in textureCompressionASTC_HDR.
func (p PhysicalDeviceTextureCompressionASTCHDRFeatures) SetTextureCompressionASTC_HDR(value bool) {
	if value {
		p.ptr.textureCompressionASTC_HDR = C.VkBool32(1)
	} else {
		p.ptr.textureCompressionASTC_HDR = C.VkBool32(0)
	}
}

// PhysicalDeviceTimelineSemaphoreFeatures wraps VkPhysicalDeviceTimelineSemaphoreFeatures.
type PhysicalDeviceTimelineSemaphoreFeatures struct {
	ptr *C.VkPhysicalDeviceTimelineSemaphoreFeatures
}

// PhysicalDeviceTimelineSemaphoreFeaturesNil is a null pointer.
var PhysicalDeviceTimelineSemaphoreFeaturesNil PhysicalDeviceTimelineSemaphoreFeatures

// PhysicalDeviceTimelineSemaphoreFeaturesSizeOf is the byte size of VkPhysicalDeviceTimelineSemaphoreFeatures.
const PhysicalDeviceTimelineSemaphoreFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceTimelineSemaphoreFeatures)

// PhysicalDeviceTimelineSemaphoreFeaturesFromPtr converts a raw pointer to a PhysicalDeviceTimelineSemaphoreFeatures.
func PhysicalDeviceTimelineSemaphoreFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceTimelineSemaphoreFeatures {
	return PhysicalDeviceTimelineSemaphoreFeatures{ptr: (*C.VkPhysicalDeviceTimelineSemaphoreFeatures)(ptr)}
}

// PhysicalDeviceTimelineSemaphoreFeaturesAlloc allocates a continuous block of VkPhysicalDeviceTimelineSemaphoreFeatures.
func PhysicalDeviceTimelineSemaphoreFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceTimelineSemaphoreFeatures {
	ptr := alloc.Allocate(PhysicalDeviceTimelineSemaphoreFeaturesSizeOf * count)
	return PhysicalDeviceTimelineSemaphoreFeatures{ptr: (*C.VkPhysicalDeviceTimelineSemaphoreFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceTimelineSemaphoreFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceTimelineSemaphoreFeatures) Offset(offset int) PhysicalDeviceTimelineSemaphoreFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceTimelineSemaphoreFeaturesSizeOf)
	return PhysicalDeviceTimelineSemaphoreFeatures{ptr: (*C.VkPhysicalDeviceTimelineSemaphoreFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceTimelineSemaphoreFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceTimelineSemaphoreFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceTimelineSemaphoreFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceTimelineSemaphoreFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetTimelineSemaphore returns the value in timelineSemaphore.
func (p PhysicalDeviceTimelineSemaphoreFeatures) GetTimelineSemaphore() bool {
	return p.ptr.timelineSemaphore != 0
}

// SetTimelineSemaphore sets the value in timelineSemaphore.
func (p PhysicalDeviceTimelineSemaphoreFeatures) SetTimelineSemaphore(value bool) {
	if value {
		p.ptr.timelineSemaphore = C.VkBool32(1)
	} else {
		p.ptr.timelineSemaphore = C.VkBool32(0)
	}
}

// PhysicalDeviceTimelineSemaphoreProperties wraps VkPhysicalDeviceTimelineSemaphoreProperties.
type PhysicalDeviceTimelineSemaphoreProperties struct {
	ptr *C.VkPhysicalDeviceTimelineSemaphoreProperties
}

// PhysicalDeviceTimelineSemaphorePropertiesNil is a null pointer.
var PhysicalDeviceTimelineSemaphorePropertiesNil PhysicalDeviceTimelineSemaphoreProperties

// PhysicalDeviceTimelineSemaphorePropertiesSizeOf is the byte size of VkPhysicalDeviceTimelineSemaphoreProperties.
const PhysicalDeviceTimelineSemaphorePropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceTimelineSemaphoreProperties)

// PhysicalDeviceTimelineSemaphorePropertiesFromPtr converts a raw pointer to a PhysicalDeviceTimelineSemaphoreProperties.
func PhysicalDeviceTimelineSemaphorePropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceTimelineSemaphoreProperties {
	return PhysicalDeviceTimelineSemaphoreProperties{ptr: (*C.VkPhysicalDeviceTimelineSemaphoreProperties)(ptr)}
}

// PhysicalDeviceTimelineSemaphorePropertiesAlloc allocates a continuous block of VkPhysicalDeviceTimelineSemaphoreProperties.
func PhysicalDeviceTimelineSemaphorePropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceTimelineSemaphoreProperties {
	ptr := alloc.Allocate(PhysicalDeviceTimelineSemaphorePropertiesSizeOf * count)
	return PhysicalDeviceTimelineSemaphoreProperties{ptr: (*C.VkPhysicalDeviceTimelineSemaphoreProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceTimelineSemaphoreProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceTimelineSemaphoreProperties) Offset(offset int) PhysicalDeviceTimelineSemaphoreProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceTimelineSemaphorePropertiesSizeOf)
	return PhysicalDeviceTimelineSemaphoreProperties{ptr: (*C.VkPhysicalDeviceTimelineSemaphoreProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceTimelineSemaphoreProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceTimelineSemaphoreProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceTimelineSemaphoreProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceTimelineSemaphoreProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMaxTimelineSemaphoreValueDifference returns the value in maxTimelineSemaphoreValueDifference.
func (p PhysicalDeviceTimelineSemaphoreProperties) GetMaxTimelineSemaphoreValueDifference() uint64 {
	return uint64(p.ptr.maxTimelineSemaphoreValueDifference)
}

// SetMaxTimelineSemaphoreValueDifference sets the value in maxTimelineSemaphoreValueDifference.
func (p PhysicalDeviceTimelineSemaphoreProperties) SetMaxTimelineSemaphoreValueDifference(value uint64) {
	p.ptr.maxTimelineSemaphoreValueDifference = (C.uint64_t)(value)
}

// PhysicalDeviceToolProperties wraps VkPhysicalDeviceToolProperties.
type PhysicalDeviceToolProperties struct {
	ptr *C.VkPhysicalDeviceToolProperties
}

// PhysicalDeviceToolPropertiesNil is a null pointer.
var PhysicalDeviceToolPropertiesNil PhysicalDeviceToolProperties

// PhysicalDeviceToolPropertiesSizeOf is the byte size of VkPhysicalDeviceToolProperties.
const PhysicalDeviceToolPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceToolProperties)

// PhysicalDeviceToolPropertiesFromPtr converts a raw pointer to a PhysicalDeviceToolProperties.
func PhysicalDeviceToolPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceToolProperties {
	return PhysicalDeviceToolProperties{ptr: (*C.VkPhysicalDeviceToolProperties)(ptr)}
}

// PhysicalDeviceToolPropertiesAlloc allocates a continuous block of VkPhysicalDeviceToolProperties.
func PhysicalDeviceToolPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceToolProperties {
	ptr := alloc.Allocate(PhysicalDeviceToolPropertiesSizeOf * count)
	return PhysicalDeviceToolProperties{ptr: (*C.VkPhysicalDeviceToolProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceToolProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceToolProperties) Offset(offset int) PhysicalDeviceToolProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceToolPropertiesSizeOf)
	return PhysicalDeviceToolProperties{ptr: (*C.VkPhysicalDeviceToolProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceToolProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceToolProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceToolProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceToolProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// PhysicalDeviceToolProperties.name is unsupported: category unsupported.

// PhysicalDeviceToolProperties.version is unsupported: category unsupported.

// GetPurposes returns the value in purposes.
func (p PhysicalDeviceToolProperties) GetPurposes() ToolPurposeFlags {
	return ToolPurposeFlags(p.ptr.purposes)
}

// SetPurposes sets the value in purposes.
func (p PhysicalDeviceToolProperties) SetPurposes(value ToolPurposeFlags) {
	p.ptr.purposes = (C.VkToolPurposeFlags)(value)
}

// PhysicalDeviceToolProperties.description is unsupported: category unsupported.

// PhysicalDeviceToolProperties.layer is unsupported: category unsupported.

// PhysicalDeviceUniformBufferStandardLayoutFeatures wraps VkPhysicalDeviceUniformBufferStandardLayoutFeatures.
type PhysicalDeviceUniformBufferStandardLayoutFeatures struct {
	ptr *C.VkPhysicalDeviceUniformBufferStandardLayoutFeatures
}

// PhysicalDeviceUniformBufferStandardLayoutFeaturesNil is a null pointer.
var PhysicalDeviceUniformBufferStandardLayoutFeaturesNil PhysicalDeviceUniformBufferStandardLayoutFeatures

// PhysicalDeviceUniformBufferStandardLayoutFeaturesSizeOf is the byte size of VkPhysicalDeviceUniformBufferStandardLayoutFeatures.
const PhysicalDeviceUniformBufferStandardLayoutFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceUniformBufferStandardLayoutFeatures)

// PhysicalDeviceUniformBufferStandardLayoutFeaturesFromPtr converts a raw pointer to a PhysicalDeviceUniformBufferStandardLayoutFeatures.
func PhysicalDeviceUniformBufferStandardLayoutFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceUniformBufferStandardLayoutFeatures {
	return PhysicalDeviceUniformBufferStandardLayoutFeatures{ptr: (*C.VkPhysicalDeviceUniformBufferStandardLayoutFeatures)(ptr)}
}

// PhysicalDeviceUniformBufferStandardLayoutFeaturesAlloc allocates a continuous block of VkPhysicalDeviceUniformBufferStandardLayoutFeatures.
func PhysicalDeviceUniformBufferStandardLayoutFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceUniformBufferStandardLayoutFeatures {
	ptr := alloc.Allocate(PhysicalDeviceUniformBufferStandardLayoutFeaturesSizeOf * count)
	return PhysicalDeviceUniformBufferStandardLayoutFeatures{ptr: (*C.VkPhysicalDeviceUniformBufferStandardLayoutFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceUniformBufferStandardLayoutFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceUniformBufferStandardLayoutFeatures) Offset(offset int) PhysicalDeviceUniformBufferStandardLayoutFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceUniformBufferStandardLayoutFeaturesSizeOf)
	return PhysicalDeviceUniformBufferStandardLayoutFeatures{ptr: (*C.VkPhysicalDeviceUniformBufferStandardLayoutFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceUniformBufferStandardLayoutFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceUniformBufferStandardLayoutFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceUniformBufferStandardLayoutFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceUniformBufferStandardLayoutFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetUniformBufferStandardLayout returns the value in uniformBufferStandardLayout.
func (p PhysicalDeviceUniformBufferStandardLayoutFeatures) GetUniformBufferStandardLayout() bool {
	return p.ptr.uniformBufferStandardLayout != 0
}

// SetUniformBufferStandardLayout sets the value in uniformBufferStandardLayout.
func (p PhysicalDeviceUniformBufferStandardLayoutFeatures) SetUniformBufferStandardLayout(value bool) {
	if value {
		p.ptr.uniformBufferStandardLayout = C.VkBool32(1)
	} else {
		p.ptr.uniformBufferStandardLayout = C.VkBool32(0)
	}
}

// PhysicalDeviceVariablePointersFeatures wraps VkPhysicalDeviceVariablePointersFeatures.
type PhysicalDeviceVariablePointersFeatures struct {
	ptr *C.VkPhysicalDeviceVariablePointersFeatures
}

// PhysicalDeviceVariablePointersFeaturesNil is a null pointer.
var PhysicalDeviceVariablePointersFeaturesNil PhysicalDeviceVariablePointersFeatures

// PhysicalDeviceVariablePointersFeaturesSizeOf is the byte size of VkPhysicalDeviceVariablePointersFeatures.
const PhysicalDeviceVariablePointersFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceVariablePointersFeatures)

// PhysicalDeviceVariablePointersFeaturesFromPtr converts a raw pointer to a PhysicalDeviceVariablePointersFeatures.
func PhysicalDeviceVariablePointersFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceVariablePointersFeatures {
	return PhysicalDeviceVariablePointersFeatures{ptr: (*C.VkPhysicalDeviceVariablePointersFeatures)(ptr)}
}

// PhysicalDeviceVariablePointersFeaturesAlloc allocates a continuous block of VkPhysicalDeviceVariablePointersFeatures.
func PhysicalDeviceVariablePointersFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceVariablePointersFeatures {
	ptr := alloc.Allocate(PhysicalDeviceVariablePointersFeaturesSizeOf * count)
	return PhysicalDeviceVariablePointersFeatures{ptr: (*C.VkPhysicalDeviceVariablePointersFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceVariablePointersFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceVariablePointersFeatures) Offset(offset int) PhysicalDeviceVariablePointersFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceVariablePointersFeaturesSizeOf)
	return PhysicalDeviceVariablePointersFeatures{ptr: (*C.VkPhysicalDeviceVariablePointersFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceVariablePointersFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceVariablePointersFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceVariablePointersFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceVariablePointersFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetVariablePointersStorageBuffer returns the value in variablePointersStorageBuffer.
func (p PhysicalDeviceVariablePointersFeatures) GetVariablePointersStorageBuffer() bool {
	return p.ptr.variablePointersStorageBuffer != 0
}

// SetVariablePointersStorageBuffer sets the value in variablePointersStorageBuffer.
func (p PhysicalDeviceVariablePointersFeatures) SetVariablePointersStorageBuffer(value bool) {
	if value {
		p.ptr.variablePointersStorageBuffer = C.VkBool32(1)
	} else {
		p.ptr.variablePointersStorageBuffer = C.VkBool32(0)
	}
}

// GetVariablePointers returns the value in variablePointers.
func (p PhysicalDeviceVariablePointersFeatures) GetVariablePointers() bool {
	return p.ptr.variablePointers != 0
}

// SetVariablePointers sets the value in variablePointers.
func (p PhysicalDeviceVariablePointersFeatures) SetVariablePointers(value bool) {
	if value {
		p.ptr.variablePointers = C.VkBool32(1)
	} else {
		p.ptr.variablePointers = C.VkBool32(0)
	}
}

// PhysicalDeviceVertexAttributeDivisorFeatures wraps VkPhysicalDeviceVertexAttributeDivisorFeatures.
type PhysicalDeviceVertexAttributeDivisorFeatures struct {
	ptr *C.VkPhysicalDeviceVertexAttributeDivisorFeatures
}

// PhysicalDeviceVertexAttributeDivisorFeaturesNil is a null pointer.
var PhysicalDeviceVertexAttributeDivisorFeaturesNil PhysicalDeviceVertexAttributeDivisorFeatures

// PhysicalDeviceVertexAttributeDivisorFeaturesSizeOf is the byte size of VkPhysicalDeviceVertexAttributeDivisorFeatures.
const PhysicalDeviceVertexAttributeDivisorFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceVertexAttributeDivisorFeatures)

// PhysicalDeviceVertexAttributeDivisorFeaturesFromPtr converts a raw pointer to a PhysicalDeviceVertexAttributeDivisorFeatures.
func PhysicalDeviceVertexAttributeDivisorFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceVertexAttributeDivisorFeatures {
	return PhysicalDeviceVertexAttributeDivisorFeatures{ptr: (*C.VkPhysicalDeviceVertexAttributeDivisorFeatures)(ptr)}
}

// PhysicalDeviceVertexAttributeDivisorFeaturesAlloc allocates a continuous block of VkPhysicalDeviceVertexAttributeDivisorFeatures.
func PhysicalDeviceVertexAttributeDivisorFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceVertexAttributeDivisorFeatures {
	ptr := alloc.Allocate(PhysicalDeviceVertexAttributeDivisorFeaturesSizeOf * count)
	return PhysicalDeviceVertexAttributeDivisorFeatures{ptr: (*C.VkPhysicalDeviceVertexAttributeDivisorFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceVertexAttributeDivisorFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceVertexAttributeDivisorFeatures) Offset(offset int) PhysicalDeviceVertexAttributeDivisorFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceVertexAttributeDivisorFeaturesSizeOf)
	return PhysicalDeviceVertexAttributeDivisorFeatures{ptr: (*C.VkPhysicalDeviceVertexAttributeDivisorFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceVertexAttributeDivisorFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceVertexAttributeDivisorFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceVertexAttributeDivisorFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceVertexAttributeDivisorFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetVertexAttributeInstanceRateDivisor returns the value in vertexAttributeInstanceRateDivisor.
func (p PhysicalDeviceVertexAttributeDivisorFeatures) GetVertexAttributeInstanceRateDivisor() bool {
	return p.ptr.vertexAttributeInstanceRateDivisor != 0
}

// SetVertexAttributeInstanceRateDivisor sets the value in vertexAttributeInstanceRateDivisor.
func (p PhysicalDeviceVertexAttributeDivisorFeatures) SetVertexAttributeInstanceRateDivisor(value bool) {
	if value {
		p.ptr.vertexAttributeInstanceRateDivisor = C.VkBool32(1)
	} else {
		p.ptr.vertexAttributeInstanceRateDivisor = C.VkBool32(0)
	}
}

// GetVertexAttributeInstanceRateZeroDivisor returns the value in vertexAttributeInstanceRateZeroDivisor.
func (p PhysicalDeviceVertexAttributeDivisorFeatures) GetVertexAttributeInstanceRateZeroDivisor() bool {
	return p.ptr.vertexAttributeInstanceRateZeroDivisor != 0
}

// SetVertexAttributeInstanceRateZeroDivisor sets the value in vertexAttributeInstanceRateZeroDivisor.
func (p PhysicalDeviceVertexAttributeDivisorFeatures) SetVertexAttributeInstanceRateZeroDivisor(value bool) {
	if value {
		p.ptr.vertexAttributeInstanceRateZeroDivisor = C.VkBool32(1)
	} else {
		p.ptr.vertexAttributeInstanceRateZeroDivisor = C.VkBool32(0)
	}
}

// PhysicalDeviceVertexAttributeDivisorProperties wraps VkPhysicalDeviceVertexAttributeDivisorProperties.
type PhysicalDeviceVertexAttributeDivisorProperties struct {
	ptr *C.VkPhysicalDeviceVertexAttributeDivisorProperties
}

// PhysicalDeviceVertexAttributeDivisorPropertiesNil is a null pointer.
var PhysicalDeviceVertexAttributeDivisorPropertiesNil PhysicalDeviceVertexAttributeDivisorProperties

// PhysicalDeviceVertexAttributeDivisorPropertiesSizeOf is the byte size of VkPhysicalDeviceVertexAttributeDivisorProperties.
const PhysicalDeviceVertexAttributeDivisorPropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceVertexAttributeDivisorProperties)

// PhysicalDeviceVertexAttributeDivisorPropertiesFromPtr converts a raw pointer to a PhysicalDeviceVertexAttributeDivisorProperties.
func PhysicalDeviceVertexAttributeDivisorPropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceVertexAttributeDivisorProperties {
	return PhysicalDeviceVertexAttributeDivisorProperties{ptr: (*C.VkPhysicalDeviceVertexAttributeDivisorProperties)(ptr)}
}

// PhysicalDeviceVertexAttributeDivisorPropertiesAlloc allocates a continuous block of VkPhysicalDeviceVertexAttributeDivisorProperties.
func PhysicalDeviceVertexAttributeDivisorPropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceVertexAttributeDivisorProperties {
	ptr := alloc.Allocate(PhysicalDeviceVertexAttributeDivisorPropertiesSizeOf * count)
	return PhysicalDeviceVertexAttributeDivisorProperties{ptr: (*C.VkPhysicalDeviceVertexAttributeDivisorProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceVertexAttributeDivisorProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceVertexAttributeDivisorProperties) Offset(offset int) PhysicalDeviceVertexAttributeDivisorProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceVertexAttributeDivisorPropertiesSizeOf)
	return PhysicalDeviceVertexAttributeDivisorProperties{ptr: (*C.VkPhysicalDeviceVertexAttributeDivisorProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceVertexAttributeDivisorProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceVertexAttributeDivisorProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceVertexAttributeDivisorProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceVertexAttributeDivisorProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMaxVertexAttribDivisor returns the value in maxVertexAttribDivisor.
func (p PhysicalDeviceVertexAttributeDivisorProperties) GetMaxVertexAttribDivisor() uint32 {
	return uint32(p.ptr.maxVertexAttribDivisor)
}

// SetMaxVertexAttribDivisor sets the value in maxVertexAttribDivisor.
func (p PhysicalDeviceVertexAttributeDivisorProperties) SetMaxVertexAttribDivisor(value uint32) {
	p.ptr.maxVertexAttribDivisor = (C.uint32_t)(value)
}

// GetSupportsNonZeroFirstInstance returns the value in supportsNonZeroFirstInstance.
func (p PhysicalDeviceVertexAttributeDivisorProperties) GetSupportsNonZeroFirstInstance() bool {
	return p.ptr.supportsNonZeroFirstInstance != 0
}

// SetSupportsNonZeroFirstInstance sets the value in supportsNonZeroFirstInstance.
func (p PhysicalDeviceVertexAttributeDivisorProperties) SetSupportsNonZeroFirstInstance(value bool) {
	if value {
		p.ptr.supportsNonZeroFirstInstance = C.VkBool32(1)
	} else {
		p.ptr.supportsNonZeroFirstInstance = C.VkBool32(0)
	}
}

// PhysicalDeviceVulkan11Features wraps VkPhysicalDeviceVulkan11Features.
type PhysicalDeviceVulkan11Features struct {
	ptr *C.VkPhysicalDeviceVulkan11Features
}

// PhysicalDeviceVulkan11FeaturesNil is a null pointer.
var PhysicalDeviceVulkan11FeaturesNil PhysicalDeviceVulkan11Features

// PhysicalDeviceVulkan11FeaturesSizeOf is the byte size of VkPhysicalDeviceVulkan11Features.
const PhysicalDeviceVulkan11FeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceVulkan11Features)

// PhysicalDeviceVulkan11FeaturesFromPtr converts a raw pointer to a PhysicalDeviceVulkan11Features.
func PhysicalDeviceVulkan11FeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceVulkan11Features {
	return PhysicalDeviceVulkan11Features{ptr: (*C.VkPhysicalDeviceVulkan11Features)(ptr)}
}

// PhysicalDeviceVulkan11FeaturesAlloc allocates a continuous block of VkPhysicalDeviceVulkan11Features.
func PhysicalDeviceVulkan11FeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceVulkan11Features {
	ptr := alloc.Allocate(PhysicalDeviceVulkan11FeaturesSizeOf * count)
	return PhysicalDeviceVulkan11Features{ptr: (*C.VkPhysicalDeviceVulkan11Features)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceVulkan11Features) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceVulkan11Features) Offset(offset int) PhysicalDeviceVulkan11Features {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceVulkan11FeaturesSizeOf)
	return PhysicalDeviceVulkan11Features{ptr: (*C.VkPhysicalDeviceVulkan11Features)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceVulkan11Features) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceVulkan11Features) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceVulkan11Features) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceVulkan11Features) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetStorageBuffer16BitAccess returns the value in storageBuffer16BitAccess.
func (p PhysicalDeviceVulkan11Features) GetStorageBuffer16BitAccess() bool {
	return p.ptr.storageBuffer16BitAccess != 0
}

// SetStorageBuffer16BitAccess sets the value in storageBuffer16BitAccess.
func (p PhysicalDeviceVulkan11Features) SetStorageBuffer16BitAccess(value bool) {
	if value {
		p.ptr.storageBuffer16BitAccess = C.VkBool32(1)
	} else {
		p.ptr.storageBuffer16BitAccess = C.VkBool32(0)
	}
}

// GetUniformAndStorageBuffer16BitAccess returns the value in uniformAndStorageBuffer16BitAccess.
func (p PhysicalDeviceVulkan11Features) GetUniformAndStorageBuffer16BitAccess() bool {
	return p.ptr.uniformAndStorageBuffer16BitAccess != 0
}

// SetUniformAndStorageBuffer16BitAccess sets the value in uniformAndStorageBuffer16BitAccess.
func (p PhysicalDeviceVulkan11Features) SetUniformAndStorageBuffer16BitAccess(value bool) {
	if value {
		p.ptr.uniformAndStorageBuffer16BitAccess = C.VkBool32(1)
	} else {
		p.ptr.uniformAndStorageBuffer16BitAccess = C.VkBool32(0)
	}
}

// GetStoragePushConstant16 returns the value in storagePushConstant16.
func (p PhysicalDeviceVulkan11Features) GetStoragePushConstant16() bool {
	return p.ptr.storagePushConstant16 != 0
}

// SetStoragePushConstant16 sets the value in storagePushConstant16.
func (p PhysicalDeviceVulkan11Features) SetStoragePushConstant16(value bool) {
	if value {
		p.ptr.storagePushConstant16 = C.VkBool32(1)
	} else {
		p.ptr.storagePushConstant16 = C.VkBool32(0)
	}
}

// GetStorageInputOutput16 returns the value in storageInputOutput16.
func (p PhysicalDeviceVulkan11Features) GetStorageInputOutput16() bool {
	return p.ptr.storageInputOutput16 != 0
}

// SetStorageInputOutput16 sets the value in storageInputOutput16.
func (p PhysicalDeviceVulkan11Features) SetStorageInputOutput16(value bool) {
	if value {
		p.ptr.storageInputOutput16 = C.VkBool32(1)
	} else {
		p.ptr.storageInputOutput16 = C.VkBool32(0)
	}
}

// GetMultiview returns the value in multiview.
func (p PhysicalDeviceVulkan11Features) GetMultiview() bool {
	return p.ptr.multiview != 0
}

// SetMultiview sets the value in multiview.
func (p PhysicalDeviceVulkan11Features) SetMultiview(value bool) {
	if value {
		p.ptr.multiview = C.VkBool32(1)
	} else {
		p.ptr.multiview = C.VkBool32(0)
	}
}

// GetMultiviewGeometryShader returns the value in multiviewGeometryShader.
func (p PhysicalDeviceVulkan11Features) GetMultiviewGeometryShader() bool {
	return p.ptr.multiviewGeometryShader != 0
}

// SetMultiviewGeometryShader sets the value in multiviewGeometryShader.
func (p PhysicalDeviceVulkan11Features) SetMultiviewGeometryShader(value bool) {
	if value {
		p.ptr.multiviewGeometryShader = C.VkBool32(1)
	} else {
		p.ptr.multiviewGeometryShader = C.VkBool32(0)
	}
}

// GetMultiviewTessellationShader returns the value in multiviewTessellationShader.
func (p PhysicalDeviceVulkan11Features) GetMultiviewTessellationShader() bool {
	return p.ptr.multiviewTessellationShader != 0
}

// SetMultiviewTessellationShader sets the value in multiviewTessellationShader.
func (p PhysicalDeviceVulkan11Features) SetMultiviewTessellationShader(value bool) {
	if value {
		p.ptr.multiviewTessellationShader = C.VkBool32(1)
	} else {
		p.ptr.multiviewTessellationShader = C.VkBool32(0)
	}
}

// GetVariablePointersStorageBuffer returns the value in variablePointersStorageBuffer.
func (p PhysicalDeviceVulkan11Features) GetVariablePointersStorageBuffer() bool {
	return p.ptr.variablePointersStorageBuffer != 0
}

// SetVariablePointersStorageBuffer sets the value in variablePointersStorageBuffer.
func (p PhysicalDeviceVulkan11Features) SetVariablePointersStorageBuffer(value bool) {
	if value {
		p.ptr.variablePointersStorageBuffer = C.VkBool32(1)
	} else {
		p.ptr.variablePointersStorageBuffer = C.VkBool32(0)
	}
}

// GetVariablePointers returns the value in variablePointers.
func (p PhysicalDeviceVulkan11Features) GetVariablePointers() bool {
	return p.ptr.variablePointers != 0
}

// SetVariablePointers sets the value in variablePointers.
func (p PhysicalDeviceVulkan11Features) SetVariablePointers(value bool) {
	if value {
		p.ptr.variablePointers = C.VkBool32(1)
	} else {
		p.ptr.variablePointers = C.VkBool32(0)
	}
}

// GetProtectedMemory returns the value in protectedMemory.
func (p PhysicalDeviceVulkan11Features) GetProtectedMemory() bool {
	return p.ptr.protectedMemory != 0
}

// SetProtectedMemory sets the value in protectedMemory.
func (p PhysicalDeviceVulkan11Features) SetProtectedMemory(value bool) {
	if value {
		p.ptr.protectedMemory = C.VkBool32(1)
	} else {
		p.ptr.protectedMemory = C.VkBool32(0)
	}
}

// GetSamplerYcbcrConversion returns the value in samplerYcbcrConversion.
func (p PhysicalDeviceVulkan11Features) GetSamplerYcbcrConversion() bool {
	return p.ptr.samplerYcbcrConversion != 0
}

// SetSamplerYcbcrConversion sets the value in samplerYcbcrConversion.
func (p PhysicalDeviceVulkan11Features) SetSamplerYcbcrConversion(value bool) {
	if value {
		p.ptr.samplerYcbcrConversion = C.VkBool32(1)
	} else {
		p.ptr.samplerYcbcrConversion = C.VkBool32(0)
	}
}

// GetShaderDrawParameters returns the value in shaderDrawParameters.
func (p PhysicalDeviceVulkan11Features) GetShaderDrawParameters() bool {
	return p.ptr.shaderDrawParameters != 0
}

// SetShaderDrawParameters sets the value in shaderDrawParameters.
func (p PhysicalDeviceVulkan11Features) SetShaderDrawParameters(value bool) {
	if value {
		p.ptr.shaderDrawParameters = C.VkBool32(1)
	} else {
		p.ptr.shaderDrawParameters = C.VkBool32(0)
	}
}

// PhysicalDeviceVulkan11Properties wraps VkPhysicalDeviceVulkan11Properties.
type PhysicalDeviceVulkan11Properties struct {
	ptr *C.VkPhysicalDeviceVulkan11Properties
}

// PhysicalDeviceVulkan11PropertiesNil is a null pointer.
var PhysicalDeviceVulkan11PropertiesNil PhysicalDeviceVulkan11Properties

// PhysicalDeviceVulkan11PropertiesSizeOf is the byte size of VkPhysicalDeviceVulkan11Properties.
const PhysicalDeviceVulkan11PropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceVulkan11Properties)

// PhysicalDeviceVulkan11PropertiesFromPtr converts a raw pointer to a PhysicalDeviceVulkan11Properties.
func PhysicalDeviceVulkan11PropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceVulkan11Properties {
	return PhysicalDeviceVulkan11Properties{ptr: (*C.VkPhysicalDeviceVulkan11Properties)(ptr)}
}

// PhysicalDeviceVulkan11PropertiesAlloc allocates a continuous block of VkPhysicalDeviceVulkan11Properties.
func PhysicalDeviceVulkan11PropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceVulkan11Properties {
	ptr := alloc.Allocate(PhysicalDeviceVulkan11PropertiesSizeOf * count)
	return PhysicalDeviceVulkan11Properties{ptr: (*C.VkPhysicalDeviceVulkan11Properties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceVulkan11Properties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceVulkan11Properties) Offset(offset int) PhysicalDeviceVulkan11Properties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceVulkan11PropertiesSizeOf)
	return PhysicalDeviceVulkan11Properties{ptr: (*C.VkPhysicalDeviceVulkan11Properties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceVulkan11Properties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceVulkan11Properties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceVulkan11Properties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceVulkan11Properties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// PhysicalDeviceVulkan11Properties.deviceUUID is unsupported: category unsupported.

// PhysicalDeviceVulkan11Properties.driverUUID is unsupported: category unsupported.

// PhysicalDeviceVulkan11Properties.deviceLUID is unsupported: category unsupported.

// GetDeviceNodeMask returns the value in deviceNodeMask.
func (p PhysicalDeviceVulkan11Properties) GetDeviceNodeMask() uint32 {
	return uint32(p.ptr.deviceNodeMask)
}

// SetDeviceNodeMask sets the value in deviceNodeMask.
func (p PhysicalDeviceVulkan11Properties) SetDeviceNodeMask(value uint32) {
	p.ptr.deviceNodeMask = (C.uint32_t)(value)
}

// GetDeviceLUIDValid returns the value in deviceLUIDValid.
func (p PhysicalDeviceVulkan11Properties) GetDeviceLUIDValid() bool {
	return p.ptr.deviceLUIDValid != 0
}

// SetDeviceLUIDValid sets the value in deviceLUIDValid.
func (p PhysicalDeviceVulkan11Properties) SetDeviceLUIDValid(value bool) {
	if value {
		p.ptr.deviceLUIDValid = C.VkBool32(1)
	} else {
		p.ptr.deviceLUIDValid = C.VkBool32(0)
	}
}

// GetSubgroupSize returns the value in subgroupSize.
func (p PhysicalDeviceVulkan11Properties) GetSubgroupSize() uint32 {
	return uint32(p.ptr.subgroupSize)
}

// SetSubgroupSize sets the value in subgroupSize.
func (p PhysicalDeviceVulkan11Properties) SetSubgroupSize(value uint32) {
	p.ptr.subgroupSize = (C.uint32_t)(value)
}

// GetSubgroupSupportedStages returns the value in subgroupSupportedStages.
func (p PhysicalDeviceVulkan11Properties) GetSubgroupSupportedStages() ShaderStageFlags {
	return ShaderStageFlags(p.ptr.subgroupSupportedStages)
}

// SetSubgroupSupportedStages sets the value in subgroupSupportedStages.
func (p PhysicalDeviceVulkan11Properties) SetSubgroupSupportedStages(value ShaderStageFlags) {
	p.ptr.subgroupSupportedStages = (C.VkShaderStageFlags)(value)
}

// GetSubgroupSupportedOperations returns the value in subgroupSupportedOperations.
func (p PhysicalDeviceVulkan11Properties) GetSubgroupSupportedOperations() SubgroupFeatureFlags {
	return SubgroupFeatureFlags(p.ptr.subgroupSupportedOperations)
}

// SetSubgroupSupportedOperations sets the value in subgroupSupportedOperations.
func (p PhysicalDeviceVulkan11Properties) SetSubgroupSupportedOperations(value SubgroupFeatureFlags) {
	p.ptr.subgroupSupportedOperations = (C.VkSubgroupFeatureFlags)(value)
}

// GetSubgroupQuadOperationsInAllStages returns the value in subgroupQuadOperationsInAllStages.
func (p PhysicalDeviceVulkan11Properties) GetSubgroupQuadOperationsInAllStages() bool {
	return p.ptr.subgroupQuadOperationsInAllStages != 0
}

// SetSubgroupQuadOperationsInAllStages sets the value in subgroupQuadOperationsInAllStages.
func (p PhysicalDeviceVulkan11Properties) SetSubgroupQuadOperationsInAllStages(value bool) {
	if value {
		p.ptr.subgroupQuadOperationsInAllStages = C.VkBool32(1)
	} else {
		p.ptr.subgroupQuadOperationsInAllStages = C.VkBool32(0)
	}
}

// GetPointClippingBehavior returns the value in pointClippingBehavior.
func (p PhysicalDeviceVulkan11Properties) GetPointClippingBehavior() PointClippingBehavior {
	return PointClippingBehavior(p.ptr.pointClippingBehavior)
}

// SetPointClippingBehavior sets the value in pointClippingBehavior.
func (p PhysicalDeviceVulkan11Properties) SetPointClippingBehavior(value PointClippingBehavior) {
	p.ptr.pointClippingBehavior = (C.VkPointClippingBehavior)(value)
}

// GetMaxMultiviewViewCount returns the value in maxMultiviewViewCount.
func (p PhysicalDeviceVulkan11Properties) GetMaxMultiviewViewCount() uint32 {
	return uint32(p.ptr.maxMultiviewViewCount)
}

// SetMaxMultiviewViewCount sets the value in maxMultiviewViewCount.
func (p PhysicalDeviceVulkan11Properties) SetMaxMultiviewViewCount(value uint32) {
	p.ptr.maxMultiviewViewCount = (C.uint32_t)(value)
}

// GetMaxMultiviewInstanceIndex returns the value in maxMultiviewInstanceIndex.
func (p PhysicalDeviceVulkan11Properties) GetMaxMultiviewInstanceIndex() uint32 {
	return uint32(p.ptr.maxMultiviewInstanceIndex)
}

// SetMaxMultiviewInstanceIndex sets the value in maxMultiviewInstanceIndex.
func (p PhysicalDeviceVulkan11Properties) SetMaxMultiviewInstanceIndex(value uint32) {
	p.ptr.maxMultiviewInstanceIndex = (C.uint32_t)(value)
}

// GetProtectedNoFault returns the value in protectedNoFault.
func (p PhysicalDeviceVulkan11Properties) GetProtectedNoFault() bool {
	return p.ptr.protectedNoFault != 0
}

// SetProtectedNoFault sets the value in protectedNoFault.
func (p PhysicalDeviceVulkan11Properties) SetProtectedNoFault(value bool) {
	if value {
		p.ptr.protectedNoFault = C.VkBool32(1)
	} else {
		p.ptr.protectedNoFault = C.VkBool32(0)
	}
}

// GetMaxPerSetDescriptors returns the value in maxPerSetDescriptors.
func (p PhysicalDeviceVulkan11Properties) GetMaxPerSetDescriptors() uint32 {
	return uint32(p.ptr.maxPerSetDescriptors)
}

// SetMaxPerSetDescriptors sets the value in maxPerSetDescriptors.
func (p PhysicalDeviceVulkan11Properties) SetMaxPerSetDescriptors(value uint32) {
	p.ptr.maxPerSetDescriptors = (C.uint32_t)(value)
}

// GetMaxMemoryAllocationSize returns the value in maxMemoryAllocationSize.
func (p PhysicalDeviceVulkan11Properties) GetMaxMemoryAllocationSize() DeviceSize {
	return DeviceSize(p.ptr.maxMemoryAllocationSize)
}

// SetMaxMemoryAllocationSize sets the value in maxMemoryAllocationSize.
func (p PhysicalDeviceVulkan11Properties) SetMaxMemoryAllocationSize(value DeviceSize) {
	p.ptr.maxMemoryAllocationSize = (C.VkDeviceSize)(value)
}

// PhysicalDeviceVulkan12Features wraps VkPhysicalDeviceVulkan12Features.
type PhysicalDeviceVulkan12Features struct {
	ptr *C.VkPhysicalDeviceVulkan12Features
}

// PhysicalDeviceVulkan12FeaturesNil is a null pointer.
var PhysicalDeviceVulkan12FeaturesNil PhysicalDeviceVulkan12Features

// PhysicalDeviceVulkan12FeaturesSizeOf is the byte size of VkPhysicalDeviceVulkan12Features.
const PhysicalDeviceVulkan12FeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceVulkan12Features)

// PhysicalDeviceVulkan12FeaturesFromPtr converts a raw pointer to a PhysicalDeviceVulkan12Features.
func PhysicalDeviceVulkan12FeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceVulkan12Features {
	return PhysicalDeviceVulkan12Features{ptr: (*C.VkPhysicalDeviceVulkan12Features)(ptr)}
}

// PhysicalDeviceVulkan12FeaturesAlloc allocates a continuous block of VkPhysicalDeviceVulkan12Features.
func PhysicalDeviceVulkan12FeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceVulkan12Features {
	ptr := alloc.Allocate(PhysicalDeviceVulkan12FeaturesSizeOf * count)
	return PhysicalDeviceVulkan12Features{ptr: (*C.VkPhysicalDeviceVulkan12Features)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceVulkan12Features) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceVulkan12Features) Offset(offset int) PhysicalDeviceVulkan12Features {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceVulkan12FeaturesSizeOf)
	return PhysicalDeviceVulkan12Features{ptr: (*C.VkPhysicalDeviceVulkan12Features)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceVulkan12Features) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceVulkan12Features) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceVulkan12Features) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceVulkan12Features) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSamplerMirrorClampToEdge returns the value in samplerMirrorClampToEdge.
func (p PhysicalDeviceVulkan12Features) GetSamplerMirrorClampToEdge() bool {
	return p.ptr.samplerMirrorClampToEdge != 0
}

// SetSamplerMirrorClampToEdge sets the value in samplerMirrorClampToEdge.
func (p PhysicalDeviceVulkan12Features) SetSamplerMirrorClampToEdge(value bool) {
	if value {
		p.ptr.samplerMirrorClampToEdge = C.VkBool32(1)
	} else {
		p.ptr.samplerMirrorClampToEdge = C.VkBool32(0)
	}
}

// GetDrawIndirectCount returns the value in drawIndirectCount.
func (p PhysicalDeviceVulkan12Features) GetDrawIndirectCount() bool {
	return p.ptr.drawIndirectCount != 0
}

// SetDrawIndirectCount sets the value in drawIndirectCount.
func (p PhysicalDeviceVulkan12Features) SetDrawIndirectCount(value bool) {
	if value {
		p.ptr.drawIndirectCount = C.VkBool32(1)
	} else {
		p.ptr.drawIndirectCount = C.VkBool32(0)
	}
}

// GetStorageBuffer8BitAccess returns the value in storageBuffer8BitAccess.
func (p PhysicalDeviceVulkan12Features) GetStorageBuffer8BitAccess() bool {
	return p.ptr.storageBuffer8BitAccess != 0
}

// SetStorageBuffer8BitAccess sets the value in storageBuffer8BitAccess.
func (p PhysicalDeviceVulkan12Features) SetStorageBuffer8BitAccess(value bool) {
	if value {
		p.ptr.storageBuffer8BitAccess = C.VkBool32(1)
	} else {
		p.ptr.storageBuffer8BitAccess = C.VkBool32(0)
	}
}

// GetUniformAndStorageBuffer8BitAccess returns the value in uniformAndStorageBuffer8BitAccess.
func (p PhysicalDeviceVulkan12Features) GetUniformAndStorageBuffer8BitAccess() bool {
	return p.ptr.uniformAndStorageBuffer8BitAccess != 0
}

// SetUniformAndStorageBuffer8BitAccess sets the value in uniformAndStorageBuffer8BitAccess.
func (p PhysicalDeviceVulkan12Features) SetUniformAndStorageBuffer8BitAccess(value bool) {
	if value {
		p.ptr.uniformAndStorageBuffer8BitAccess = C.VkBool32(1)
	} else {
		p.ptr.uniformAndStorageBuffer8BitAccess = C.VkBool32(0)
	}
}

// GetStoragePushConstant8 returns the value in storagePushConstant8.
func (p PhysicalDeviceVulkan12Features) GetStoragePushConstant8() bool {
	return p.ptr.storagePushConstant8 != 0
}

// SetStoragePushConstant8 sets the value in storagePushConstant8.
func (p PhysicalDeviceVulkan12Features) SetStoragePushConstant8(value bool) {
	if value {
		p.ptr.storagePushConstant8 = C.VkBool32(1)
	} else {
		p.ptr.storagePushConstant8 = C.VkBool32(0)
	}
}

// GetShaderBufferInt64Atomics returns the value in shaderBufferInt64Atomics.
func (p PhysicalDeviceVulkan12Features) GetShaderBufferInt64Atomics() bool {
	return p.ptr.shaderBufferInt64Atomics != 0
}

// SetShaderBufferInt64Atomics sets the value in shaderBufferInt64Atomics.
func (p PhysicalDeviceVulkan12Features) SetShaderBufferInt64Atomics(value bool) {
	if value {
		p.ptr.shaderBufferInt64Atomics = C.VkBool32(1)
	} else {
		p.ptr.shaderBufferInt64Atomics = C.VkBool32(0)
	}
}

// GetShaderSharedInt64Atomics returns the value in shaderSharedInt64Atomics.
func (p PhysicalDeviceVulkan12Features) GetShaderSharedInt64Atomics() bool {
	return p.ptr.shaderSharedInt64Atomics != 0
}

// SetShaderSharedInt64Atomics sets the value in shaderSharedInt64Atomics.
func (p PhysicalDeviceVulkan12Features) SetShaderSharedInt64Atomics(value bool) {
	if value {
		p.ptr.shaderSharedInt64Atomics = C.VkBool32(1)
	} else {
		p.ptr.shaderSharedInt64Atomics = C.VkBool32(0)
	}
}

// GetShaderFloat16 returns the value in shaderFloat16.
func (p PhysicalDeviceVulkan12Features) GetShaderFloat16() bool {
	return p.ptr.shaderFloat16 != 0
}

// SetShaderFloat16 sets the value in shaderFloat16.
func (p PhysicalDeviceVulkan12Features) SetShaderFloat16(value bool) {
	if value {
		p.ptr.shaderFloat16 = C.VkBool32(1)
	} else {
		p.ptr.shaderFloat16 = C.VkBool32(0)
	}
}

// GetShaderInt8 returns the value in shaderInt8.
func (p PhysicalDeviceVulkan12Features) GetShaderInt8() bool {
	return p.ptr.shaderInt8 != 0
}

// SetShaderInt8 sets the value in shaderInt8.
func (p PhysicalDeviceVulkan12Features) SetShaderInt8(value bool) {
	if value {
		p.ptr.shaderInt8 = C.VkBool32(1)
	} else {
		p.ptr.shaderInt8 = C.VkBool32(0)
	}
}

// GetDescriptorIndexing returns the value in descriptorIndexing.
func (p PhysicalDeviceVulkan12Features) GetDescriptorIndexing() bool {
	return p.ptr.descriptorIndexing != 0
}

// SetDescriptorIndexing sets the value in descriptorIndexing.
func (p PhysicalDeviceVulkan12Features) SetDescriptorIndexing(value bool) {
	if value {
		p.ptr.descriptorIndexing = C.VkBool32(1)
	} else {
		p.ptr.descriptorIndexing = C.VkBool32(0)
	}
}

// GetShaderInputAttachmentArrayDynamicIndexing returns the value in shaderInputAttachmentArrayDynamicIndexing.
func (p PhysicalDeviceVulkan12Features) GetShaderInputAttachmentArrayDynamicIndexing() bool {
	return p.ptr.shaderInputAttachmentArrayDynamicIndexing != 0
}

// SetShaderInputAttachmentArrayDynamicIndexing sets the value in shaderInputAttachmentArrayDynamicIndexing.
func (p PhysicalDeviceVulkan12Features) SetShaderInputAttachmentArrayDynamicIndexing(value bool) {
	if value {
		p.ptr.shaderInputAttachmentArrayDynamicIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderInputAttachmentArrayDynamicIndexing = C.VkBool32(0)
	}
}

// GetShaderUniformTexelBufferArrayDynamicIndexing returns the value in shaderUniformTexelBufferArrayDynamicIndexing.
func (p PhysicalDeviceVulkan12Features) GetShaderUniformTexelBufferArrayDynamicIndexing() bool {
	return p.ptr.shaderUniformTexelBufferArrayDynamicIndexing != 0
}

// SetShaderUniformTexelBufferArrayDynamicIndexing sets the value in shaderUniformTexelBufferArrayDynamicIndexing.
func (p PhysicalDeviceVulkan12Features) SetShaderUniformTexelBufferArrayDynamicIndexing(value bool) {
	if value {
		p.ptr.shaderUniformTexelBufferArrayDynamicIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderUniformTexelBufferArrayDynamicIndexing = C.VkBool32(0)
	}
}

// GetShaderStorageTexelBufferArrayDynamicIndexing returns the value in shaderStorageTexelBufferArrayDynamicIndexing.
func (p PhysicalDeviceVulkan12Features) GetShaderStorageTexelBufferArrayDynamicIndexing() bool {
	return p.ptr.shaderStorageTexelBufferArrayDynamicIndexing != 0
}

// SetShaderStorageTexelBufferArrayDynamicIndexing sets the value in shaderStorageTexelBufferArrayDynamicIndexing.
func (p PhysicalDeviceVulkan12Features) SetShaderStorageTexelBufferArrayDynamicIndexing(value bool) {
	if value {
		p.ptr.shaderStorageTexelBufferArrayDynamicIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageTexelBufferArrayDynamicIndexing = C.VkBool32(0)
	}
}

// GetShaderUniformBufferArrayNonUniformIndexing returns the value in shaderUniformBufferArrayNonUniformIndexing.
func (p PhysicalDeviceVulkan12Features) GetShaderUniformBufferArrayNonUniformIndexing() bool {
	return p.ptr.shaderUniformBufferArrayNonUniformIndexing != 0
}

// SetShaderUniformBufferArrayNonUniformIndexing sets the value in shaderUniformBufferArrayNonUniformIndexing.
func (p PhysicalDeviceVulkan12Features) SetShaderUniformBufferArrayNonUniformIndexing(value bool) {
	if value {
		p.ptr.shaderUniformBufferArrayNonUniformIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderUniformBufferArrayNonUniformIndexing = C.VkBool32(0)
	}
}

// GetShaderSampledImageArrayNonUniformIndexing returns the value in shaderSampledImageArrayNonUniformIndexing.
func (p PhysicalDeviceVulkan12Features) GetShaderSampledImageArrayNonUniformIndexing() bool {
	return p.ptr.shaderSampledImageArrayNonUniformIndexing != 0
}

// SetShaderSampledImageArrayNonUniformIndexing sets the value in shaderSampledImageArrayNonUniformIndexing.
func (p PhysicalDeviceVulkan12Features) SetShaderSampledImageArrayNonUniformIndexing(value bool) {
	if value {
		p.ptr.shaderSampledImageArrayNonUniformIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderSampledImageArrayNonUniformIndexing = C.VkBool32(0)
	}
}

// GetShaderStorageBufferArrayNonUniformIndexing returns the value in shaderStorageBufferArrayNonUniformIndexing.
func (p PhysicalDeviceVulkan12Features) GetShaderStorageBufferArrayNonUniformIndexing() bool {
	return p.ptr.shaderStorageBufferArrayNonUniformIndexing != 0
}

// SetShaderStorageBufferArrayNonUniformIndexing sets the value in shaderStorageBufferArrayNonUniformIndexing.
func (p PhysicalDeviceVulkan12Features) SetShaderStorageBufferArrayNonUniformIndexing(value bool) {
	if value {
		p.ptr.shaderStorageBufferArrayNonUniformIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageBufferArrayNonUniformIndexing = C.VkBool32(0)
	}
}

// GetShaderStorageImageArrayNonUniformIndexing returns the value in shaderStorageImageArrayNonUniformIndexing.
func (p PhysicalDeviceVulkan12Features) GetShaderStorageImageArrayNonUniformIndexing() bool {
	return p.ptr.shaderStorageImageArrayNonUniformIndexing != 0
}

// SetShaderStorageImageArrayNonUniformIndexing sets the value in shaderStorageImageArrayNonUniformIndexing.
func (p PhysicalDeviceVulkan12Features) SetShaderStorageImageArrayNonUniformIndexing(value bool) {
	if value {
		p.ptr.shaderStorageImageArrayNonUniformIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageImageArrayNonUniformIndexing = C.VkBool32(0)
	}
}

// GetShaderInputAttachmentArrayNonUniformIndexing returns the value in shaderInputAttachmentArrayNonUniformIndexing.
func (p PhysicalDeviceVulkan12Features) GetShaderInputAttachmentArrayNonUniformIndexing() bool {
	return p.ptr.shaderInputAttachmentArrayNonUniformIndexing != 0
}

// SetShaderInputAttachmentArrayNonUniformIndexing sets the value in shaderInputAttachmentArrayNonUniformIndexing.
func (p PhysicalDeviceVulkan12Features) SetShaderInputAttachmentArrayNonUniformIndexing(value bool) {
	if value {
		p.ptr.shaderInputAttachmentArrayNonUniformIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderInputAttachmentArrayNonUniformIndexing = C.VkBool32(0)
	}
}

// GetShaderUniformTexelBufferArrayNonUniformIndexing returns the value in shaderUniformTexelBufferArrayNonUniformIndexing.
func (p PhysicalDeviceVulkan12Features) GetShaderUniformTexelBufferArrayNonUniformIndexing() bool {
	return p.ptr.shaderUniformTexelBufferArrayNonUniformIndexing != 0
}

// SetShaderUniformTexelBufferArrayNonUniformIndexing sets the value in shaderUniformTexelBufferArrayNonUniformIndexing.
func (p PhysicalDeviceVulkan12Features) SetShaderUniformTexelBufferArrayNonUniformIndexing(value bool) {
	if value {
		p.ptr.shaderUniformTexelBufferArrayNonUniformIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderUniformTexelBufferArrayNonUniformIndexing = C.VkBool32(0)
	}
}

// GetShaderStorageTexelBufferArrayNonUniformIndexing returns the value in shaderStorageTexelBufferArrayNonUniformIndexing.
func (p PhysicalDeviceVulkan12Features) GetShaderStorageTexelBufferArrayNonUniformIndexing() bool {
	return p.ptr.shaderStorageTexelBufferArrayNonUniformIndexing != 0
}

// SetShaderStorageTexelBufferArrayNonUniformIndexing sets the value in shaderStorageTexelBufferArrayNonUniformIndexing.
func (p PhysicalDeviceVulkan12Features) SetShaderStorageTexelBufferArrayNonUniformIndexing(value bool) {
	if value {
		p.ptr.shaderStorageTexelBufferArrayNonUniformIndexing = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageTexelBufferArrayNonUniformIndexing = C.VkBool32(0)
	}
}

// GetDescriptorBindingUniformBufferUpdateAfterBind returns the value in descriptorBindingUniformBufferUpdateAfterBind.
func (p PhysicalDeviceVulkan12Features) GetDescriptorBindingUniformBufferUpdateAfterBind() bool {
	return p.ptr.descriptorBindingUniformBufferUpdateAfterBind != 0
}

// SetDescriptorBindingUniformBufferUpdateAfterBind sets the value in descriptorBindingUniformBufferUpdateAfterBind.
func (p PhysicalDeviceVulkan12Features) SetDescriptorBindingUniformBufferUpdateAfterBind(value bool) {
	if value {
		p.ptr.descriptorBindingUniformBufferUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingUniformBufferUpdateAfterBind = C.VkBool32(0)
	}
}

// GetDescriptorBindingSampledImageUpdateAfterBind returns the value in descriptorBindingSampledImageUpdateAfterBind.
func (p PhysicalDeviceVulkan12Features) GetDescriptorBindingSampledImageUpdateAfterBind() bool {
	return p.ptr.descriptorBindingSampledImageUpdateAfterBind != 0
}

// SetDescriptorBindingSampledImageUpdateAfterBind sets the value in descriptorBindingSampledImageUpdateAfterBind.
func (p PhysicalDeviceVulkan12Features) SetDescriptorBindingSampledImageUpdateAfterBind(value bool) {
	if value {
		p.ptr.descriptorBindingSampledImageUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingSampledImageUpdateAfterBind = C.VkBool32(0)
	}
}

// GetDescriptorBindingStorageImageUpdateAfterBind returns the value in descriptorBindingStorageImageUpdateAfterBind.
func (p PhysicalDeviceVulkan12Features) GetDescriptorBindingStorageImageUpdateAfterBind() bool {
	return p.ptr.descriptorBindingStorageImageUpdateAfterBind != 0
}

// SetDescriptorBindingStorageImageUpdateAfterBind sets the value in descriptorBindingStorageImageUpdateAfterBind.
func (p PhysicalDeviceVulkan12Features) SetDescriptorBindingStorageImageUpdateAfterBind(value bool) {
	if value {
		p.ptr.descriptorBindingStorageImageUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingStorageImageUpdateAfterBind = C.VkBool32(0)
	}
}

// GetDescriptorBindingStorageBufferUpdateAfterBind returns the value in descriptorBindingStorageBufferUpdateAfterBind.
func (p PhysicalDeviceVulkan12Features) GetDescriptorBindingStorageBufferUpdateAfterBind() bool {
	return p.ptr.descriptorBindingStorageBufferUpdateAfterBind != 0
}

// SetDescriptorBindingStorageBufferUpdateAfterBind sets the value in descriptorBindingStorageBufferUpdateAfterBind.
func (p PhysicalDeviceVulkan12Features) SetDescriptorBindingStorageBufferUpdateAfterBind(value bool) {
	if value {
		p.ptr.descriptorBindingStorageBufferUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingStorageBufferUpdateAfterBind = C.VkBool32(0)
	}
}

// GetDescriptorBindingUniformTexelBufferUpdateAfterBind returns the value in descriptorBindingUniformTexelBufferUpdateAfterBind.
func (p PhysicalDeviceVulkan12Features) GetDescriptorBindingUniformTexelBufferUpdateAfterBind() bool {
	return p.ptr.descriptorBindingUniformTexelBufferUpdateAfterBind != 0
}

// SetDescriptorBindingUniformTexelBufferUpdateAfterBind sets the value in descriptorBindingUniformTexelBufferUpdateAfterBind.
func (p PhysicalDeviceVulkan12Features) SetDescriptorBindingUniformTexelBufferUpdateAfterBind(value bool) {
	if value {
		p.ptr.descriptorBindingUniformTexelBufferUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingUniformTexelBufferUpdateAfterBind = C.VkBool32(0)
	}
}

// GetDescriptorBindingStorageTexelBufferUpdateAfterBind returns the value in descriptorBindingStorageTexelBufferUpdateAfterBind.
func (p PhysicalDeviceVulkan12Features) GetDescriptorBindingStorageTexelBufferUpdateAfterBind() bool {
	return p.ptr.descriptorBindingStorageTexelBufferUpdateAfterBind != 0
}

// SetDescriptorBindingStorageTexelBufferUpdateAfterBind sets the value in descriptorBindingStorageTexelBufferUpdateAfterBind.
func (p PhysicalDeviceVulkan12Features) SetDescriptorBindingStorageTexelBufferUpdateAfterBind(value bool) {
	if value {
		p.ptr.descriptorBindingStorageTexelBufferUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingStorageTexelBufferUpdateAfterBind = C.VkBool32(0)
	}
}

// GetDescriptorBindingUpdateUnusedWhilePending returns the value in descriptorBindingUpdateUnusedWhilePending.
func (p PhysicalDeviceVulkan12Features) GetDescriptorBindingUpdateUnusedWhilePending() bool {
	return p.ptr.descriptorBindingUpdateUnusedWhilePending != 0
}

// SetDescriptorBindingUpdateUnusedWhilePending sets the value in descriptorBindingUpdateUnusedWhilePending.
func (p PhysicalDeviceVulkan12Features) SetDescriptorBindingUpdateUnusedWhilePending(value bool) {
	if value {
		p.ptr.descriptorBindingUpdateUnusedWhilePending = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingUpdateUnusedWhilePending = C.VkBool32(0)
	}
}

// GetDescriptorBindingPartiallyBound returns the value in descriptorBindingPartiallyBound.
func (p PhysicalDeviceVulkan12Features) GetDescriptorBindingPartiallyBound() bool {
	return p.ptr.descriptorBindingPartiallyBound != 0
}

// SetDescriptorBindingPartiallyBound sets the value in descriptorBindingPartiallyBound.
func (p PhysicalDeviceVulkan12Features) SetDescriptorBindingPartiallyBound(value bool) {
	if value {
		p.ptr.descriptorBindingPartiallyBound = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingPartiallyBound = C.VkBool32(0)
	}
}

// GetDescriptorBindingVariableDescriptorCount returns the value in descriptorBindingVariableDescriptorCount.
func (p PhysicalDeviceVulkan12Features) GetDescriptorBindingVariableDescriptorCount() bool {
	return p.ptr.descriptorBindingVariableDescriptorCount != 0
}

// SetDescriptorBindingVariableDescriptorCount sets the value in descriptorBindingVariableDescriptorCount.
func (p PhysicalDeviceVulkan12Features) SetDescriptorBindingVariableDescriptorCount(value bool) {
	if value {
		p.ptr.descriptorBindingVariableDescriptorCount = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingVariableDescriptorCount = C.VkBool32(0)
	}
}

// GetRuntimeDescriptorArray returns the value in runtimeDescriptorArray.
func (p PhysicalDeviceVulkan12Features) GetRuntimeDescriptorArray() bool {
	return p.ptr.runtimeDescriptorArray != 0
}

// SetRuntimeDescriptorArray sets the value in runtimeDescriptorArray.
func (p PhysicalDeviceVulkan12Features) SetRuntimeDescriptorArray(value bool) {
	if value {
		p.ptr.runtimeDescriptorArray = C.VkBool32(1)
	} else {
		p.ptr.runtimeDescriptorArray = C.VkBool32(0)
	}
}

// GetSamplerFilterMinmax returns the value in samplerFilterMinmax.
func (p PhysicalDeviceVulkan12Features) GetSamplerFilterMinmax() bool {
	return p.ptr.samplerFilterMinmax != 0
}

// SetSamplerFilterMinmax sets the value in samplerFilterMinmax.
func (p PhysicalDeviceVulkan12Features) SetSamplerFilterMinmax(value bool) {
	if value {
		p.ptr.samplerFilterMinmax = C.VkBool32(1)
	} else {
		p.ptr.samplerFilterMinmax = C.VkBool32(0)
	}
}

// GetScalarBlockLayout returns the value in scalarBlockLayout.
func (p PhysicalDeviceVulkan12Features) GetScalarBlockLayout() bool {
	return p.ptr.scalarBlockLayout != 0
}

// SetScalarBlockLayout sets the value in scalarBlockLayout.
func (p PhysicalDeviceVulkan12Features) SetScalarBlockLayout(value bool) {
	if value {
		p.ptr.scalarBlockLayout = C.VkBool32(1)
	} else {
		p.ptr.scalarBlockLayout = C.VkBool32(0)
	}
}

// GetImagelessFramebuffer returns the value in imagelessFramebuffer.
func (p PhysicalDeviceVulkan12Features) GetImagelessFramebuffer() bool {
	return p.ptr.imagelessFramebuffer != 0
}

// SetImagelessFramebuffer sets the value in imagelessFramebuffer.
func (p PhysicalDeviceVulkan12Features) SetImagelessFramebuffer(value bool) {
	if value {
		p.ptr.imagelessFramebuffer = C.VkBool32(1)
	} else {
		p.ptr.imagelessFramebuffer = C.VkBool32(0)
	}
}

// GetUniformBufferStandardLayout returns the value in uniformBufferStandardLayout.
func (p PhysicalDeviceVulkan12Features) GetUniformBufferStandardLayout() bool {
	return p.ptr.uniformBufferStandardLayout != 0
}

// SetUniformBufferStandardLayout sets the value in uniformBufferStandardLayout.
func (p PhysicalDeviceVulkan12Features) SetUniformBufferStandardLayout(value bool) {
	if value {
		p.ptr.uniformBufferStandardLayout = C.VkBool32(1)
	} else {
		p.ptr.uniformBufferStandardLayout = C.VkBool32(0)
	}
}

// GetShaderSubgroupExtendedTypes returns the value in shaderSubgroupExtendedTypes.
func (p PhysicalDeviceVulkan12Features) GetShaderSubgroupExtendedTypes() bool {
	return p.ptr.shaderSubgroupExtendedTypes != 0
}

// SetShaderSubgroupExtendedTypes sets the value in shaderSubgroupExtendedTypes.
func (p PhysicalDeviceVulkan12Features) SetShaderSubgroupExtendedTypes(value bool) {
	if value {
		p.ptr.shaderSubgroupExtendedTypes = C.VkBool32(1)
	} else {
		p.ptr.shaderSubgroupExtendedTypes = C.VkBool32(0)
	}
}

// GetSeparateDepthStencilLayouts returns the value in separateDepthStencilLayouts.
func (p PhysicalDeviceVulkan12Features) GetSeparateDepthStencilLayouts() bool {
	return p.ptr.separateDepthStencilLayouts != 0
}

// SetSeparateDepthStencilLayouts sets the value in separateDepthStencilLayouts.
func (p PhysicalDeviceVulkan12Features) SetSeparateDepthStencilLayouts(value bool) {
	if value {
		p.ptr.separateDepthStencilLayouts = C.VkBool32(1)
	} else {
		p.ptr.separateDepthStencilLayouts = C.VkBool32(0)
	}
}

// GetHostQueryReset returns the value in hostQueryReset.
func (p PhysicalDeviceVulkan12Features) GetHostQueryReset() bool {
	return p.ptr.hostQueryReset != 0
}

// SetHostQueryReset sets the value in hostQueryReset.
func (p PhysicalDeviceVulkan12Features) SetHostQueryReset(value bool) {
	if value {
		p.ptr.hostQueryReset = C.VkBool32(1)
	} else {
		p.ptr.hostQueryReset = C.VkBool32(0)
	}
}

// GetTimelineSemaphore returns the value in timelineSemaphore.
func (p PhysicalDeviceVulkan12Features) GetTimelineSemaphore() bool {
	return p.ptr.timelineSemaphore != 0
}

// SetTimelineSemaphore sets the value in timelineSemaphore.
func (p PhysicalDeviceVulkan12Features) SetTimelineSemaphore(value bool) {
	if value {
		p.ptr.timelineSemaphore = C.VkBool32(1)
	} else {
		p.ptr.timelineSemaphore = C.VkBool32(0)
	}
}

// GetBufferDeviceAddress returns the value in bufferDeviceAddress.
func (p PhysicalDeviceVulkan12Features) GetBufferDeviceAddress() bool {
	return p.ptr.bufferDeviceAddress != 0
}

// SetBufferDeviceAddress sets the value in bufferDeviceAddress.
func (p PhysicalDeviceVulkan12Features) SetBufferDeviceAddress(value bool) {
	if value {
		p.ptr.bufferDeviceAddress = C.VkBool32(1)
	} else {
		p.ptr.bufferDeviceAddress = C.VkBool32(0)
	}
}

// GetBufferDeviceAddressCaptureReplay returns the value in bufferDeviceAddressCaptureReplay.
func (p PhysicalDeviceVulkan12Features) GetBufferDeviceAddressCaptureReplay() bool {
	return p.ptr.bufferDeviceAddressCaptureReplay != 0
}

// SetBufferDeviceAddressCaptureReplay sets the value in bufferDeviceAddressCaptureReplay.
func (p PhysicalDeviceVulkan12Features) SetBufferDeviceAddressCaptureReplay(value bool) {
	if value {
		p.ptr.bufferDeviceAddressCaptureReplay = C.VkBool32(1)
	} else {
		p.ptr.bufferDeviceAddressCaptureReplay = C.VkBool32(0)
	}
}

// GetBufferDeviceAddressMultiDevice returns the value in bufferDeviceAddressMultiDevice.
func (p PhysicalDeviceVulkan12Features) GetBufferDeviceAddressMultiDevice() bool {
	return p.ptr.bufferDeviceAddressMultiDevice != 0
}

// SetBufferDeviceAddressMultiDevice sets the value in bufferDeviceAddressMultiDevice.
func (p PhysicalDeviceVulkan12Features) SetBufferDeviceAddressMultiDevice(value bool) {
	if value {
		p.ptr.bufferDeviceAddressMultiDevice = C.VkBool32(1)
	} else {
		p.ptr.bufferDeviceAddressMultiDevice = C.VkBool32(0)
	}
}

// GetVulkanMemoryModel returns the value in vulkanMemoryModel.
func (p PhysicalDeviceVulkan12Features) GetVulkanMemoryModel() bool {
	return p.ptr.vulkanMemoryModel != 0
}

// SetVulkanMemoryModel sets the value in vulkanMemoryModel.
func (p PhysicalDeviceVulkan12Features) SetVulkanMemoryModel(value bool) {
	if value {
		p.ptr.vulkanMemoryModel = C.VkBool32(1)
	} else {
		p.ptr.vulkanMemoryModel = C.VkBool32(0)
	}
}

// GetVulkanMemoryModelDeviceScope returns the value in vulkanMemoryModelDeviceScope.
func (p PhysicalDeviceVulkan12Features) GetVulkanMemoryModelDeviceScope() bool {
	return p.ptr.vulkanMemoryModelDeviceScope != 0
}

// SetVulkanMemoryModelDeviceScope sets the value in vulkanMemoryModelDeviceScope.
func (p PhysicalDeviceVulkan12Features) SetVulkanMemoryModelDeviceScope(value bool) {
	if value {
		p.ptr.vulkanMemoryModelDeviceScope = C.VkBool32(1)
	} else {
		p.ptr.vulkanMemoryModelDeviceScope = C.VkBool32(0)
	}
}

// GetVulkanMemoryModelAvailabilityVisibilityChains returns the value in vulkanMemoryModelAvailabilityVisibilityChains.
func (p PhysicalDeviceVulkan12Features) GetVulkanMemoryModelAvailabilityVisibilityChains() bool {
	return p.ptr.vulkanMemoryModelAvailabilityVisibilityChains != 0
}

// SetVulkanMemoryModelAvailabilityVisibilityChains sets the value in vulkanMemoryModelAvailabilityVisibilityChains.
func (p PhysicalDeviceVulkan12Features) SetVulkanMemoryModelAvailabilityVisibilityChains(value bool) {
	if value {
		p.ptr.vulkanMemoryModelAvailabilityVisibilityChains = C.VkBool32(1)
	} else {
		p.ptr.vulkanMemoryModelAvailabilityVisibilityChains = C.VkBool32(0)
	}
}

// GetShaderOutputViewportIndex returns the value in shaderOutputViewportIndex.
func (p PhysicalDeviceVulkan12Features) GetShaderOutputViewportIndex() bool {
	return p.ptr.shaderOutputViewportIndex != 0
}

// SetShaderOutputViewportIndex sets the value in shaderOutputViewportIndex.
func (p PhysicalDeviceVulkan12Features) SetShaderOutputViewportIndex(value bool) {
	if value {
		p.ptr.shaderOutputViewportIndex = C.VkBool32(1)
	} else {
		p.ptr.shaderOutputViewportIndex = C.VkBool32(0)
	}
}

// GetShaderOutputLayer returns the value in shaderOutputLayer.
func (p PhysicalDeviceVulkan12Features) GetShaderOutputLayer() bool {
	return p.ptr.shaderOutputLayer != 0
}

// SetShaderOutputLayer sets the value in shaderOutputLayer.
func (p PhysicalDeviceVulkan12Features) SetShaderOutputLayer(value bool) {
	if value {
		p.ptr.shaderOutputLayer = C.VkBool32(1)
	} else {
		p.ptr.shaderOutputLayer = C.VkBool32(0)
	}
}

// GetSubgroupBroadcastDynamicId returns the value in subgroupBroadcastDynamicId.
func (p PhysicalDeviceVulkan12Features) GetSubgroupBroadcastDynamicId() bool {
	return p.ptr.subgroupBroadcastDynamicId != 0
}

// SetSubgroupBroadcastDynamicId sets the value in subgroupBroadcastDynamicId.
func (p PhysicalDeviceVulkan12Features) SetSubgroupBroadcastDynamicId(value bool) {
	if value {
		p.ptr.subgroupBroadcastDynamicId = C.VkBool32(1)
	} else {
		p.ptr.subgroupBroadcastDynamicId = C.VkBool32(0)
	}
}

// PhysicalDeviceVulkan12Properties wraps VkPhysicalDeviceVulkan12Properties.
type PhysicalDeviceVulkan12Properties struct {
	ptr *C.VkPhysicalDeviceVulkan12Properties
}

// PhysicalDeviceVulkan12PropertiesNil is a null pointer.
var PhysicalDeviceVulkan12PropertiesNil PhysicalDeviceVulkan12Properties

// PhysicalDeviceVulkan12PropertiesSizeOf is the byte size of VkPhysicalDeviceVulkan12Properties.
const PhysicalDeviceVulkan12PropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceVulkan12Properties)

// PhysicalDeviceVulkan12PropertiesFromPtr converts a raw pointer to a PhysicalDeviceVulkan12Properties.
func PhysicalDeviceVulkan12PropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceVulkan12Properties {
	return PhysicalDeviceVulkan12Properties{ptr: (*C.VkPhysicalDeviceVulkan12Properties)(ptr)}
}

// PhysicalDeviceVulkan12PropertiesAlloc allocates a continuous block of VkPhysicalDeviceVulkan12Properties.
func PhysicalDeviceVulkan12PropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceVulkan12Properties {
	ptr := alloc.Allocate(PhysicalDeviceVulkan12PropertiesSizeOf * count)
	return PhysicalDeviceVulkan12Properties{ptr: (*C.VkPhysicalDeviceVulkan12Properties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceVulkan12Properties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceVulkan12Properties) Offset(offset int) PhysicalDeviceVulkan12Properties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceVulkan12PropertiesSizeOf)
	return PhysicalDeviceVulkan12Properties{ptr: (*C.VkPhysicalDeviceVulkan12Properties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceVulkan12Properties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceVulkan12Properties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceVulkan12Properties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceVulkan12Properties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDriverID returns the value in driverID.
func (p PhysicalDeviceVulkan12Properties) GetDriverID() DriverId {
	return DriverId(p.ptr.driverID)
}

// SetDriverID sets the value in driverID.
func (p PhysicalDeviceVulkan12Properties) SetDriverID(value DriverId) {
	p.ptr.driverID = (C.VkDriverId)(value)
}

// PhysicalDeviceVulkan12Properties.driverName is unsupported: category unsupported.

// PhysicalDeviceVulkan12Properties.driverInfo is unsupported: category unsupported.

// RefConformanceVersion returns pointer to the conformanceVersion field.
func (p PhysicalDeviceVulkan12Properties) RefConformanceVersion() ConformanceVersion {
	return ConformanceVersion{ptr: (*C.VkConformanceVersion)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkPhysicalDeviceVulkan12Properties_conformanceVersion)))}
}

// GetDenormBehaviorIndependence returns the value in denormBehaviorIndependence.
func (p PhysicalDeviceVulkan12Properties) GetDenormBehaviorIndependence() ShaderFloatControlsIndependence {
	return ShaderFloatControlsIndependence(p.ptr.denormBehaviorIndependence)
}

// SetDenormBehaviorIndependence sets the value in denormBehaviorIndependence.
func (p PhysicalDeviceVulkan12Properties) SetDenormBehaviorIndependence(value ShaderFloatControlsIndependence) {
	p.ptr.denormBehaviorIndependence = (C.VkShaderFloatControlsIndependence)(value)
}

// GetRoundingModeIndependence returns the value in roundingModeIndependence.
func (p PhysicalDeviceVulkan12Properties) GetRoundingModeIndependence() ShaderFloatControlsIndependence {
	return ShaderFloatControlsIndependence(p.ptr.roundingModeIndependence)
}

// SetRoundingModeIndependence sets the value in roundingModeIndependence.
func (p PhysicalDeviceVulkan12Properties) SetRoundingModeIndependence(value ShaderFloatControlsIndependence) {
	p.ptr.roundingModeIndependence = (C.VkShaderFloatControlsIndependence)(value)
}

// GetShaderSignedZeroInfNanPreserveFloat16 returns the value in shaderSignedZeroInfNanPreserveFloat16.
func (p PhysicalDeviceVulkan12Properties) GetShaderSignedZeroInfNanPreserveFloat16() bool {
	return p.ptr.shaderSignedZeroInfNanPreserveFloat16 != 0
}

// SetShaderSignedZeroInfNanPreserveFloat16 sets the value in shaderSignedZeroInfNanPreserveFloat16.
func (p PhysicalDeviceVulkan12Properties) SetShaderSignedZeroInfNanPreserveFloat16(value bool) {
	if value {
		p.ptr.shaderSignedZeroInfNanPreserveFloat16 = C.VkBool32(1)
	} else {
		p.ptr.shaderSignedZeroInfNanPreserveFloat16 = C.VkBool32(0)
	}
}

// GetShaderSignedZeroInfNanPreserveFloat32 returns the value in shaderSignedZeroInfNanPreserveFloat32.
func (p PhysicalDeviceVulkan12Properties) GetShaderSignedZeroInfNanPreserveFloat32() bool {
	return p.ptr.shaderSignedZeroInfNanPreserveFloat32 != 0
}

// SetShaderSignedZeroInfNanPreserveFloat32 sets the value in shaderSignedZeroInfNanPreserveFloat32.
func (p PhysicalDeviceVulkan12Properties) SetShaderSignedZeroInfNanPreserveFloat32(value bool) {
	if value {
		p.ptr.shaderSignedZeroInfNanPreserveFloat32 = C.VkBool32(1)
	} else {
		p.ptr.shaderSignedZeroInfNanPreserveFloat32 = C.VkBool32(0)
	}
}

// GetShaderSignedZeroInfNanPreserveFloat64 returns the value in shaderSignedZeroInfNanPreserveFloat64.
func (p PhysicalDeviceVulkan12Properties) GetShaderSignedZeroInfNanPreserveFloat64() bool {
	return p.ptr.shaderSignedZeroInfNanPreserveFloat64 != 0
}

// SetShaderSignedZeroInfNanPreserveFloat64 sets the value in shaderSignedZeroInfNanPreserveFloat64.
func (p PhysicalDeviceVulkan12Properties) SetShaderSignedZeroInfNanPreserveFloat64(value bool) {
	if value {
		p.ptr.shaderSignedZeroInfNanPreserveFloat64 = C.VkBool32(1)
	} else {
		p.ptr.shaderSignedZeroInfNanPreserveFloat64 = C.VkBool32(0)
	}
}

// GetShaderDenormPreserveFloat16 returns the value in shaderDenormPreserveFloat16.
func (p PhysicalDeviceVulkan12Properties) GetShaderDenormPreserveFloat16() bool {
	return p.ptr.shaderDenormPreserveFloat16 != 0
}

// SetShaderDenormPreserveFloat16 sets the value in shaderDenormPreserveFloat16.
func (p PhysicalDeviceVulkan12Properties) SetShaderDenormPreserveFloat16(value bool) {
	if value {
		p.ptr.shaderDenormPreserveFloat16 = C.VkBool32(1)
	} else {
		p.ptr.shaderDenormPreserveFloat16 = C.VkBool32(0)
	}
}

// GetShaderDenormPreserveFloat32 returns the value in shaderDenormPreserveFloat32.
func (p PhysicalDeviceVulkan12Properties) GetShaderDenormPreserveFloat32() bool {
	return p.ptr.shaderDenormPreserveFloat32 != 0
}

// SetShaderDenormPreserveFloat32 sets the value in shaderDenormPreserveFloat32.
func (p PhysicalDeviceVulkan12Properties) SetShaderDenormPreserveFloat32(value bool) {
	if value {
		p.ptr.shaderDenormPreserveFloat32 = C.VkBool32(1)
	} else {
		p.ptr.shaderDenormPreserveFloat32 = C.VkBool32(0)
	}
}

// GetShaderDenormPreserveFloat64 returns the value in shaderDenormPreserveFloat64.
func (p PhysicalDeviceVulkan12Properties) GetShaderDenormPreserveFloat64() bool {
	return p.ptr.shaderDenormPreserveFloat64 != 0
}

// SetShaderDenormPreserveFloat64 sets the value in shaderDenormPreserveFloat64.
func (p PhysicalDeviceVulkan12Properties) SetShaderDenormPreserveFloat64(value bool) {
	if value {
		p.ptr.shaderDenormPreserveFloat64 = C.VkBool32(1)
	} else {
		p.ptr.shaderDenormPreserveFloat64 = C.VkBool32(0)
	}
}

// GetShaderDenormFlushToZeroFloat16 returns the value in shaderDenormFlushToZeroFloat16.
func (p PhysicalDeviceVulkan12Properties) GetShaderDenormFlushToZeroFloat16() bool {
	return p.ptr.shaderDenormFlushToZeroFloat16 != 0
}

// SetShaderDenormFlushToZeroFloat16 sets the value in shaderDenormFlushToZeroFloat16.
func (p PhysicalDeviceVulkan12Properties) SetShaderDenormFlushToZeroFloat16(value bool) {
	if value {
		p.ptr.shaderDenormFlushToZeroFloat16 = C.VkBool32(1)
	} else {
		p.ptr.shaderDenormFlushToZeroFloat16 = C.VkBool32(0)
	}
}

// GetShaderDenormFlushToZeroFloat32 returns the value in shaderDenormFlushToZeroFloat32.
func (p PhysicalDeviceVulkan12Properties) GetShaderDenormFlushToZeroFloat32() bool {
	return p.ptr.shaderDenormFlushToZeroFloat32 != 0
}

// SetShaderDenormFlushToZeroFloat32 sets the value in shaderDenormFlushToZeroFloat32.
func (p PhysicalDeviceVulkan12Properties) SetShaderDenormFlushToZeroFloat32(value bool) {
	if value {
		p.ptr.shaderDenormFlushToZeroFloat32 = C.VkBool32(1)
	} else {
		p.ptr.shaderDenormFlushToZeroFloat32 = C.VkBool32(0)
	}
}

// GetShaderDenormFlushToZeroFloat64 returns the value in shaderDenormFlushToZeroFloat64.
func (p PhysicalDeviceVulkan12Properties) GetShaderDenormFlushToZeroFloat64() bool {
	return p.ptr.shaderDenormFlushToZeroFloat64 != 0
}

// SetShaderDenormFlushToZeroFloat64 sets the value in shaderDenormFlushToZeroFloat64.
func (p PhysicalDeviceVulkan12Properties) SetShaderDenormFlushToZeroFloat64(value bool) {
	if value {
		p.ptr.shaderDenormFlushToZeroFloat64 = C.VkBool32(1)
	} else {
		p.ptr.shaderDenormFlushToZeroFloat64 = C.VkBool32(0)
	}
}

// GetShaderRoundingModeRTEFloat16 returns the value in shaderRoundingModeRTEFloat16.
func (p PhysicalDeviceVulkan12Properties) GetShaderRoundingModeRTEFloat16() bool {
	return p.ptr.shaderRoundingModeRTEFloat16 != 0
}

// SetShaderRoundingModeRTEFloat16 sets the value in shaderRoundingModeRTEFloat16.
func (p PhysicalDeviceVulkan12Properties) SetShaderRoundingModeRTEFloat16(value bool) {
	if value {
		p.ptr.shaderRoundingModeRTEFloat16 = C.VkBool32(1)
	} else {
		p.ptr.shaderRoundingModeRTEFloat16 = C.VkBool32(0)
	}
}

// GetShaderRoundingModeRTEFloat32 returns the value in shaderRoundingModeRTEFloat32.
func (p PhysicalDeviceVulkan12Properties) GetShaderRoundingModeRTEFloat32() bool {
	return p.ptr.shaderRoundingModeRTEFloat32 != 0
}

// SetShaderRoundingModeRTEFloat32 sets the value in shaderRoundingModeRTEFloat32.
func (p PhysicalDeviceVulkan12Properties) SetShaderRoundingModeRTEFloat32(value bool) {
	if value {
		p.ptr.shaderRoundingModeRTEFloat32 = C.VkBool32(1)
	} else {
		p.ptr.shaderRoundingModeRTEFloat32 = C.VkBool32(0)
	}
}

// GetShaderRoundingModeRTEFloat64 returns the value in shaderRoundingModeRTEFloat64.
func (p PhysicalDeviceVulkan12Properties) GetShaderRoundingModeRTEFloat64() bool {
	return p.ptr.shaderRoundingModeRTEFloat64 != 0
}

// SetShaderRoundingModeRTEFloat64 sets the value in shaderRoundingModeRTEFloat64.
func (p PhysicalDeviceVulkan12Properties) SetShaderRoundingModeRTEFloat64(value bool) {
	if value {
		p.ptr.shaderRoundingModeRTEFloat64 = C.VkBool32(1)
	} else {
		p.ptr.shaderRoundingModeRTEFloat64 = C.VkBool32(0)
	}
}

// GetShaderRoundingModeRTZFloat16 returns the value in shaderRoundingModeRTZFloat16.
func (p PhysicalDeviceVulkan12Properties) GetShaderRoundingModeRTZFloat16() bool {
	return p.ptr.shaderRoundingModeRTZFloat16 != 0
}

// SetShaderRoundingModeRTZFloat16 sets the value in shaderRoundingModeRTZFloat16.
func (p PhysicalDeviceVulkan12Properties) SetShaderRoundingModeRTZFloat16(value bool) {
	if value {
		p.ptr.shaderRoundingModeRTZFloat16 = C.VkBool32(1)
	} else {
		p.ptr.shaderRoundingModeRTZFloat16 = C.VkBool32(0)
	}
}

// GetShaderRoundingModeRTZFloat32 returns the value in shaderRoundingModeRTZFloat32.
func (p PhysicalDeviceVulkan12Properties) GetShaderRoundingModeRTZFloat32() bool {
	return p.ptr.shaderRoundingModeRTZFloat32 != 0
}

// SetShaderRoundingModeRTZFloat32 sets the value in shaderRoundingModeRTZFloat32.
func (p PhysicalDeviceVulkan12Properties) SetShaderRoundingModeRTZFloat32(value bool) {
	if value {
		p.ptr.shaderRoundingModeRTZFloat32 = C.VkBool32(1)
	} else {
		p.ptr.shaderRoundingModeRTZFloat32 = C.VkBool32(0)
	}
}

// GetShaderRoundingModeRTZFloat64 returns the value in shaderRoundingModeRTZFloat64.
func (p PhysicalDeviceVulkan12Properties) GetShaderRoundingModeRTZFloat64() bool {
	return p.ptr.shaderRoundingModeRTZFloat64 != 0
}

// SetShaderRoundingModeRTZFloat64 sets the value in shaderRoundingModeRTZFloat64.
func (p PhysicalDeviceVulkan12Properties) SetShaderRoundingModeRTZFloat64(value bool) {
	if value {
		p.ptr.shaderRoundingModeRTZFloat64 = C.VkBool32(1)
	} else {
		p.ptr.shaderRoundingModeRTZFloat64 = C.VkBool32(0)
	}
}

// GetMaxUpdateAfterBindDescriptorsInAllPools returns the value in maxUpdateAfterBindDescriptorsInAllPools.
func (p PhysicalDeviceVulkan12Properties) GetMaxUpdateAfterBindDescriptorsInAllPools() uint32 {
	return uint32(p.ptr.maxUpdateAfterBindDescriptorsInAllPools)
}

// SetMaxUpdateAfterBindDescriptorsInAllPools sets the value in maxUpdateAfterBindDescriptorsInAllPools.
func (p PhysicalDeviceVulkan12Properties) SetMaxUpdateAfterBindDescriptorsInAllPools(value uint32) {
	p.ptr.maxUpdateAfterBindDescriptorsInAllPools = (C.uint32_t)(value)
}

// GetShaderUniformBufferArrayNonUniformIndexingNative returns the value in shaderUniformBufferArrayNonUniformIndexingNative.
func (p PhysicalDeviceVulkan12Properties) GetShaderUniformBufferArrayNonUniformIndexingNative() bool {
	return p.ptr.shaderUniformBufferArrayNonUniformIndexingNative != 0
}

// SetShaderUniformBufferArrayNonUniformIndexingNative sets the value in shaderUniformBufferArrayNonUniformIndexingNative.
func (p PhysicalDeviceVulkan12Properties) SetShaderUniformBufferArrayNonUniformIndexingNative(value bool) {
	if value {
		p.ptr.shaderUniformBufferArrayNonUniformIndexingNative = C.VkBool32(1)
	} else {
		p.ptr.shaderUniformBufferArrayNonUniformIndexingNative = C.VkBool32(0)
	}
}

// GetShaderSampledImageArrayNonUniformIndexingNative returns the value in shaderSampledImageArrayNonUniformIndexingNative.
func (p PhysicalDeviceVulkan12Properties) GetShaderSampledImageArrayNonUniformIndexingNative() bool {
	return p.ptr.shaderSampledImageArrayNonUniformIndexingNative != 0
}

// SetShaderSampledImageArrayNonUniformIndexingNative sets the value in shaderSampledImageArrayNonUniformIndexingNative.
func (p PhysicalDeviceVulkan12Properties) SetShaderSampledImageArrayNonUniformIndexingNative(value bool) {
	if value {
		p.ptr.shaderSampledImageArrayNonUniformIndexingNative = C.VkBool32(1)
	} else {
		p.ptr.shaderSampledImageArrayNonUniformIndexingNative = C.VkBool32(0)
	}
}

// GetShaderStorageBufferArrayNonUniformIndexingNative returns the value in shaderStorageBufferArrayNonUniformIndexingNative.
func (p PhysicalDeviceVulkan12Properties) GetShaderStorageBufferArrayNonUniformIndexingNative() bool {
	return p.ptr.shaderStorageBufferArrayNonUniformIndexingNative != 0
}

// SetShaderStorageBufferArrayNonUniformIndexingNative sets the value in shaderStorageBufferArrayNonUniformIndexingNative.
func (p PhysicalDeviceVulkan12Properties) SetShaderStorageBufferArrayNonUniformIndexingNative(value bool) {
	if value {
		p.ptr.shaderStorageBufferArrayNonUniformIndexingNative = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageBufferArrayNonUniformIndexingNative = C.VkBool32(0)
	}
}

// GetShaderStorageImageArrayNonUniformIndexingNative returns the value in shaderStorageImageArrayNonUniformIndexingNative.
func (p PhysicalDeviceVulkan12Properties) GetShaderStorageImageArrayNonUniformIndexingNative() bool {
	return p.ptr.shaderStorageImageArrayNonUniformIndexingNative != 0
}

// SetShaderStorageImageArrayNonUniformIndexingNative sets the value in shaderStorageImageArrayNonUniformIndexingNative.
func (p PhysicalDeviceVulkan12Properties) SetShaderStorageImageArrayNonUniformIndexingNative(value bool) {
	if value {
		p.ptr.shaderStorageImageArrayNonUniformIndexingNative = C.VkBool32(1)
	} else {
		p.ptr.shaderStorageImageArrayNonUniformIndexingNative = C.VkBool32(0)
	}
}

// GetShaderInputAttachmentArrayNonUniformIndexingNative returns the value in shaderInputAttachmentArrayNonUniformIndexingNative.
func (p PhysicalDeviceVulkan12Properties) GetShaderInputAttachmentArrayNonUniformIndexingNative() bool {
	return p.ptr.shaderInputAttachmentArrayNonUniformIndexingNative != 0
}

// SetShaderInputAttachmentArrayNonUniformIndexingNative sets the value in shaderInputAttachmentArrayNonUniformIndexingNative.
func (p PhysicalDeviceVulkan12Properties) SetShaderInputAttachmentArrayNonUniformIndexingNative(value bool) {
	if value {
		p.ptr.shaderInputAttachmentArrayNonUniformIndexingNative = C.VkBool32(1)
	} else {
		p.ptr.shaderInputAttachmentArrayNonUniformIndexingNative = C.VkBool32(0)
	}
}

// GetRobustBufferAccessUpdateAfterBind returns the value in robustBufferAccessUpdateAfterBind.
func (p PhysicalDeviceVulkan12Properties) GetRobustBufferAccessUpdateAfterBind() bool {
	return p.ptr.robustBufferAccessUpdateAfterBind != 0
}

// SetRobustBufferAccessUpdateAfterBind sets the value in robustBufferAccessUpdateAfterBind.
func (p PhysicalDeviceVulkan12Properties) SetRobustBufferAccessUpdateAfterBind(value bool) {
	if value {
		p.ptr.robustBufferAccessUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.robustBufferAccessUpdateAfterBind = C.VkBool32(0)
	}
}

// GetQuadDivergentImplicitLod returns the value in quadDivergentImplicitLod.
func (p PhysicalDeviceVulkan12Properties) GetQuadDivergentImplicitLod() bool {
	return p.ptr.quadDivergentImplicitLod != 0
}

// SetQuadDivergentImplicitLod sets the value in quadDivergentImplicitLod.
func (p PhysicalDeviceVulkan12Properties) SetQuadDivergentImplicitLod(value bool) {
	if value {
		p.ptr.quadDivergentImplicitLod = C.VkBool32(1)
	} else {
		p.ptr.quadDivergentImplicitLod = C.VkBool32(0)
	}
}

// GetMaxPerStageDescriptorUpdateAfterBindSamplers returns the value in maxPerStageDescriptorUpdateAfterBindSamplers.
func (p PhysicalDeviceVulkan12Properties) GetMaxPerStageDescriptorUpdateAfterBindSamplers() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUpdateAfterBindSamplers)
}

// SetMaxPerStageDescriptorUpdateAfterBindSamplers sets the value in maxPerStageDescriptorUpdateAfterBindSamplers.
func (p PhysicalDeviceVulkan12Properties) SetMaxPerStageDescriptorUpdateAfterBindSamplers(value uint32) {
	p.ptr.maxPerStageDescriptorUpdateAfterBindSamplers = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorUpdateAfterBindUniformBuffers returns the value in maxPerStageDescriptorUpdateAfterBindUniformBuffers.
func (p PhysicalDeviceVulkan12Properties) GetMaxPerStageDescriptorUpdateAfterBindUniformBuffers() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUpdateAfterBindUniformBuffers)
}

// SetMaxPerStageDescriptorUpdateAfterBindUniformBuffers sets the value in maxPerStageDescriptorUpdateAfterBindUniformBuffers.
func (p PhysicalDeviceVulkan12Properties) SetMaxPerStageDescriptorUpdateAfterBindUniformBuffers(value uint32) {
	p.ptr.maxPerStageDescriptorUpdateAfterBindUniformBuffers = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorUpdateAfterBindStorageBuffers returns the value in maxPerStageDescriptorUpdateAfterBindStorageBuffers.
func (p PhysicalDeviceVulkan12Properties) GetMaxPerStageDescriptorUpdateAfterBindStorageBuffers() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUpdateAfterBindStorageBuffers)
}

// SetMaxPerStageDescriptorUpdateAfterBindStorageBuffers sets the value in maxPerStageDescriptorUpdateAfterBindStorageBuffers.
func (p PhysicalDeviceVulkan12Properties) SetMaxPerStageDescriptorUpdateAfterBindStorageBuffers(value uint32) {
	p.ptr.maxPerStageDescriptorUpdateAfterBindStorageBuffers = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorUpdateAfterBindSampledImages returns the value in maxPerStageDescriptorUpdateAfterBindSampledImages.
func (p PhysicalDeviceVulkan12Properties) GetMaxPerStageDescriptorUpdateAfterBindSampledImages() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUpdateAfterBindSampledImages)
}

// SetMaxPerStageDescriptorUpdateAfterBindSampledImages sets the value in maxPerStageDescriptorUpdateAfterBindSampledImages.
func (p PhysicalDeviceVulkan12Properties) SetMaxPerStageDescriptorUpdateAfterBindSampledImages(value uint32) {
	p.ptr.maxPerStageDescriptorUpdateAfterBindSampledImages = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorUpdateAfterBindStorageImages returns the value in maxPerStageDescriptorUpdateAfterBindStorageImages.
func (p PhysicalDeviceVulkan12Properties) GetMaxPerStageDescriptorUpdateAfterBindStorageImages() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUpdateAfterBindStorageImages)
}

// SetMaxPerStageDescriptorUpdateAfterBindStorageImages sets the value in maxPerStageDescriptorUpdateAfterBindStorageImages.
func (p PhysicalDeviceVulkan12Properties) SetMaxPerStageDescriptorUpdateAfterBindStorageImages(value uint32) {
	p.ptr.maxPerStageDescriptorUpdateAfterBindStorageImages = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorUpdateAfterBindInputAttachments returns the value in maxPerStageDescriptorUpdateAfterBindInputAttachments.
func (p PhysicalDeviceVulkan12Properties) GetMaxPerStageDescriptorUpdateAfterBindInputAttachments() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUpdateAfterBindInputAttachments)
}

// SetMaxPerStageDescriptorUpdateAfterBindInputAttachments sets the value in maxPerStageDescriptorUpdateAfterBindInputAttachments.
func (p PhysicalDeviceVulkan12Properties) SetMaxPerStageDescriptorUpdateAfterBindInputAttachments(value uint32) {
	p.ptr.maxPerStageDescriptorUpdateAfterBindInputAttachments = (C.uint32_t)(value)
}

// GetMaxPerStageUpdateAfterBindResources returns the value in maxPerStageUpdateAfterBindResources.
func (p PhysicalDeviceVulkan12Properties) GetMaxPerStageUpdateAfterBindResources() uint32 {
	return uint32(p.ptr.maxPerStageUpdateAfterBindResources)
}

// SetMaxPerStageUpdateAfterBindResources sets the value in maxPerStageUpdateAfterBindResources.
func (p PhysicalDeviceVulkan12Properties) SetMaxPerStageUpdateAfterBindResources(value uint32) {
	p.ptr.maxPerStageUpdateAfterBindResources = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindSamplers returns the value in maxDescriptorSetUpdateAfterBindSamplers.
func (p PhysicalDeviceVulkan12Properties) GetMaxDescriptorSetUpdateAfterBindSamplers() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindSamplers)
}

// SetMaxDescriptorSetUpdateAfterBindSamplers sets the value in maxDescriptorSetUpdateAfterBindSamplers.
func (p PhysicalDeviceVulkan12Properties) SetMaxDescriptorSetUpdateAfterBindSamplers(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindSamplers = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindUniformBuffers returns the value in maxDescriptorSetUpdateAfterBindUniformBuffers.
func (p PhysicalDeviceVulkan12Properties) GetMaxDescriptorSetUpdateAfterBindUniformBuffers() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindUniformBuffers)
}

// SetMaxDescriptorSetUpdateAfterBindUniformBuffers sets the value in maxDescriptorSetUpdateAfterBindUniformBuffers.
func (p PhysicalDeviceVulkan12Properties) SetMaxDescriptorSetUpdateAfterBindUniformBuffers(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindUniformBuffers = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindUniformBuffersDynamic returns the value in maxDescriptorSetUpdateAfterBindUniformBuffersDynamic.
func (p PhysicalDeviceVulkan12Properties) GetMaxDescriptorSetUpdateAfterBindUniformBuffersDynamic() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)
}

// SetMaxDescriptorSetUpdateAfterBindUniformBuffersDynamic sets the value in maxDescriptorSetUpdateAfterBindUniformBuffersDynamic.
func (p PhysicalDeviceVulkan12Properties) SetMaxDescriptorSetUpdateAfterBindUniformBuffersDynamic(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindStorageBuffers returns the value in maxDescriptorSetUpdateAfterBindStorageBuffers.
func (p PhysicalDeviceVulkan12Properties) GetMaxDescriptorSetUpdateAfterBindStorageBuffers() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindStorageBuffers)
}

// SetMaxDescriptorSetUpdateAfterBindStorageBuffers sets the value in maxDescriptorSetUpdateAfterBindStorageBuffers.
func (p PhysicalDeviceVulkan12Properties) SetMaxDescriptorSetUpdateAfterBindStorageBuffers(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindStorageBuffers = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindStorageBuffersDynamic returns the value in maxDescriptorSetUpdateAfterBindStorageBuffersDynamic.
func (p PhysicalDeviceVulkan12Properties) GetMaxDescriptorSetUpdateAfterBindStorageBuffersDynamic() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)
}

// SetMaxDescriptorSetUpdateAfterBindStorageBuffersDynamic sets the value in maxDescriptorSetUpdateAfterBindStorageBuffersDynamic.
func (p PhysicalDeviceVulkan12Properties) SetMaxDescriptorSetUpdateAfterBindStorageBuffersDynamic(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindSampledImages returns the value in maxDescriptorSetUpdateAfterBindSampledImages.
func (p PhysicalDeviceVulkan12Properties) GetMaxDescriptorSetUpdateAfterBindSampledImages() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindSampledImages)
}

// SetMaxDescriptorSetUpdateAfterBindSampledImages sets the value in maxDescriptorSetUpdateAfterBindSampledImages.
func (p PhysicalDeviceVulkan12Properties) SetMaxDescriptorSetUpdateAfterBindSampledImages(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindSampledImages = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindStorageImages returns the value in maxDescriptorSetUpdateAfterBindStorageImages.
func (p PhysicalDeviceVulkan12Properties) GetMaxDescriptorSetUpdateAfterBindStorageImages() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindStorageImages)
}

// SetMaxDescriptorSetUpdateAfterBindStorageImages sets the value in maxDescriptorSetUpdateAfterBindStorageImages.
func (p PhysicalDeviceVulkan12Properties) SetMaxDescriptorSetUpdateAfterBindStorageImages(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindStorageImages = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindInputAttachments returns the value in maxDescriptorSetUpdateAfterBindInputAttachments.
func (p PhysicalDeviceVulkan12Properties) GetMaxDescriptorSetUpdateAfterBindInputAttachments() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindInputAttachments)
}

// SetMaxDescriptorSetUpdateAfterBindInputAttachments sets the value in maxDescriptorSetUpdateAfterBindInputAttachments.
func (p PhysicalDeviceVulkan12Properties) SetMaxDescriptorSetUpdateAfterBindInputAttachments(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindInputAttachments = (C.uint32_t)(value)
}

// GetSupportedDepthResolveModes returns the value in supportedDepthResolveModes.
func (p PhysicalDeviceVulkan12Properties) GetSupportedDepthResolveModes() ResolveModeFlags {
	return ResolveModeFlags(p.ptr.supportedDepthResolveModes)
}

// SetSupportedDepthResolveModes sets the value in supportedDepthResolveModes.
func (p PhysicalDeviceVulkan12Properties) SetSupportedDepthResolveModes(value ResolveModeFlags) {
	p.ptr.supportedDepthResolveModes = (C.VkResolveModeFlags)(value)
}

// GetSupportedStencilResolveModes returns the value in supportedStencilResolveModes.
func (p PhysicalDeviceVulkan12Properties) GetSupportedStencilResolveModes() ResolveModeFlags {
	return ResolveModeFlags(p.ptr.supportedStencilResolveModes)
}

// SetSupportedStencilResolveModes sets the value in supportedStencilResolveModes.
func (p PhysicalDeviceVulkan12Properties) SetSupportedStencilResolveModes(value ResolveModeFlags) {
	p.ptr.supportedStencilResolveModes = (C.VkResolveModeFlags)(value)
}

// GetIndependentResolveNone returns the value in independentResolveNone.
func (p PhysicalDeviceVulkan12Properties) GetIndependentResolveNone() bool {
	return p.ptr.independentResolveNone != 0
}

// SetIndependentResolveNone sets the value in independentResolveNone.
func (p PhysicalDeviceVulkan12Properties) SetIndependentResolveNone(value bool) {
	if value {
		p.ptr.independentResolveNone = C.VkBool32(1)
	} else {
		p.ptr.independentResolveNone = C.VkBool32(0)
	}
}

// GetIndependentResolve returns the value in independentResolve.
func (p PhysicalDeviceVulkan12Properties) GetIndependentResolve() bool {
	return p.ptr.independentResolve != 0
}

// SetIndependentResolve sets the value in independentResolve.
func (p PhysicalDeviceVulkan12Properties) SetIndependentResolve(value bool) {
	if value {
		p.ptr.independentResolve = C.VkBool32(1)
	} else {
		p.ptr.independentResolve = C.VkBool32(0)
	}
}

// GetFilterMinmaxSingleComponentFormats returns the value in filterMinmaxSingleComponentFormats.
func (p PhysicalDeviceVulkan12Properties) GetFilterMinmaxSingleComponentFormats() bool {
	return p.ptr.filterMinmaxSingleComponentFormats != 0
}

// SetFilterMinmaxSingleComponentFormats sets the value in filterMinmaxSingleComponentFormats.
func (p PhysicalDeviceVulkan12Properties) SetFilterMinmaxSingleComponentFormats(value bool) {
	if value {
		p.ptr.filterMinmaxSingleComponentFormats = C.VkBool32(1)
	} else {
		p.ptr.filterMinmaxSingleComponentFormats = C.VkBool32(0)
	}
}

// GetFilterMinmaxImageComponentMapping returns the value in filterMinmaxImageComponentMapping.
func (p PhysicalDeviceVulkan12Properties) GetFilterMinmaxImageComponentMapping() bool {
	return p.ptr.filterMinmaxImageComponentMapping != 0
}

// SetFilterMinmaxImageComponentMapping sets the value in filterMinmaxImageComponentMapping.
func (p PhysicalDeviceVulkan12Properties) SetFilterMinmaxImageComponentMapping(value bool) {
	if value {
		p.ptr.filterMinmaxImageComponentMapping = C.VkBool32(1)
	} else {
		p.ptr.filterMinmaxImageComponentMapping = C.VkBool32(0)
	}
}

// GetMaxTimelineSemaphoreValueDifference returns the value in maxTimelineSemaphoreValueDifference.
func (p PhysicalDeviceVulkan12Properties) GetMaxTimelineSemaphoreValueDifference() uint64 {
	return uint64(p.ptr.maxTimelineSemaphoreValueDifference)
}

// SetMaxTimelineSemaphoreValueDifference sets the value in maxTimelineSemaphoreValueDifference.
func (p PhysicalDeviceVulkan12Properties) SetMaxTimelineSemaphoreValueDifference(value uint64) {
	p.ptr.maxTimelineSemaphoreValueDifference = (C.uint64_t)(value)
}

// GetFramebufferIntegerColorSampleCounts returns the value in framebufferIntegerColorSampleCounts.
func (p PhysicalDeviceVulkan12Properties) GetFramebufferIntegerColorSampleCounts() SampleCountFlags {
	return SampleCountFlags(p.ptr.framebufferIntegerColorSampleCounts)
}

// SetFramebufferIntegerColorSampleCounts sets the value in framebufferIntegerColorSampleCounts.
func (p PhysicalDeviceVulkan12Properties) SetFramebufferIntegerColorSampleCounts(value SampleCountFlags) {
	p.ptr.framebufferIntegerColorSampleCounts = (C.VkSampleCountFlags)(value)
}

// PhysicalDeviceVulkan13Features wraps VkPhysicalDeviceVulkan13Features.
type PhysicalDeviceVulkan13Features struct {
	ptr *C.VkPhysicalDeviceVulkan13Features
}

// PhysicalDeviceVulkan13FeaturesNil is a null pointer.
var PhysicalDeviceVulkan13FeaturesNil PhysicalDeviceVulkan13Features

// PhysicalDeviceVulkan13FeaturesSizeOf is the byte size of VkPhysicalDeviceVulkan13Features.
const PhysicalDeviceVulkan13FeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceVulkan13Features)

// PhysicalDeviceVulkan13FeaturesFromPtr converts a raw pointer to a PhysicalDeviceVulkan13Features.
func PhysicalDeviceVulkan13FeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceVulkan13Features {
	return PhysicalDeviceVulkan13Features{ptr: (*C.VkPhysicalDeviceVulkan13Features)(ptr)}
}

// PhysicalDeviceVulkan13FeaturesAlloc allocates a continuous block of VkPhysicalDeviceVulkan13Features.
func PhysicalDeviceVulkan13FeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceVulkan13Features {
	ptr := alloc.Allocate(PhysicalDeviceVulkan13FeaturesSizeOf * count)
	return PhysicalDeviceVulkan13Features{ptr: (*C.VkPhysicalDeviceVulkan13Features)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceVulkan13Features) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceVulkan13Features) Offset(offset int) PhysicalDeviceVulkan13Features {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceVulkan13FeaturesSizeOf)
	return PhysicalDeviceVulkan13Features{ptr: (*C.VkPhysicalDeviceVulkan13Features)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceVulkan13Features) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceVulkan13Features) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceVulkan13Features) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceVulkan13Features) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetRobustImageAccess returns the value in robustImageAccess.
func (p PhysicalDeviceVulkan13Features) GetRobustImageAccess() bool {
	return p.ptr.robustImageAccess != 0
}

// SetRobustImageAccess sets the value in robustImageAccess.
func (p PhysicalDeviceVulkan13Features) SetRobustImageAccess(value bool) {
	if value {
		p.ptr.robustImageAccess = C.VkBool32(1)
	} else {
		p.ptr.robustImageAccess = C.VkBool32(0)
	}
}

// GetInlineUniformBlock returns the value in inlineUniformBlock.
func (p PhysicalDeviceVulkan13Features) GetInlineUniformBlock() bool {
	return p.ptr.inlineUniformBlock != 0
}

// SetInlineUniformBlock sets the value in inlineUniformBlock.
func (p PhysicalDeviceVulkan13Features) SetInlineUniformBlock(value bool) {
	if value {
		p.ptr.inlineUniformBlock = C.VkBool32(1)
	} else {
		p.ptr.inlineUniformBlock = C.VkBool32(0)
	}
}

// GetDescriptorBindingInlineUniformBlockUpdateAfterBind returns the value in descriptorBindingInlineUniformBlockUpdateAfterBind.
func (p PhysicalDeviceVulkan13Features) GetDescriptorBindingInlineUniformBlockUpdateAfterBind() bool {
	return p.ptr.descriptorBindingInlineUniformBlockUpdateAfterBind != 0
}

// SetDescriptorBindingInlineUniformBlockUpdateAfterBind sets the value in descriptorBindingInlineUniformBlockUpdateAfterBind.
func (p PhysicalDeviceVulkan13Features) SetDescriptorBindingInlineUniformBlockUpdateAfterBind(value bool) {
	if value {
		p.ptr.descriptorBindingInlineUniformBlockUpdateAfterBind = C.VkBool32(1)
	} else {
		p.ptr.descriptorBindingInlineUniformBlockUpdateAfterBind = C.VkBool32(0)
	}
}

// GetPipelineCreationCacheControl returns the value in pipelineCreationCacheControl.
func (p PhysicalDeviceVulkan13Features) GetPipelineCreationCacheControl() bool {
	return p.ptr.pipelineCreationCacheControl != 0
}

// SetPipelineCreationCacheControl sets the value in pipelineCreationCacheControl.
func (p PhysicalDeviceVulkan13Features) SetPipelineCreationCacheControl(value bool) {
	if value {
		p.ptr.pipelineCreationCacheControl = C.VkBool32(1)
	} else {
		p.ptr.pipelineCreationCacheControl = C.VkBool32(0)
	}
}

// GetPrivateData returns the value in privateData.
func (p PhysicalDeviceVulkan13Features) GetPrivateData() bool {
	return p.ptr.privateData != 0
}

// SetPrivateData sets the value in privateData.
func (p PhysicalDeviceVulkan13Features) SetPrivateData(value bool) {
	if value {
		p.ptr.privateData = C.VkBool32(1)
	} else {
		p.ptr.privateData = C.VkBool32(0)
	}
}

// GetShaderDemoteToHelperInvocation returns the value in shaderDemoteToHelperInvocation.
func (p PhysicalDeviceVulkan13Features) GetShaderDemoteToHelperInvocation() bool {
	return p.ptr.shaderDemoteToHelperInvocation != 0
}

// SetShaderDemoteToHelperInvocation sets the value in shaderDemoteToHelperInvocation.
func (p PhysicalDeviceVulkan13Features) SetShaderDemoteToHelperInvocation(value bool) {
	if value {
		p.ptr.shaderDemoteToHelperInvocation = C.VkBool32(1)
	} else {
		p.ptr.shaderDemoteToHelperInvocation = C.VkBool32(0)
	}
}

// GetShaderTerminateInvocation returns the value in shaderTerminateInvocation.
func (p PhysicalDeviceVulkan13Features) GetShaderTerminateInvocation() bool {
	return p.ptr.shaderTerminateInvocation != 0
}

// SetShaderTerminateInvocation sets the value in shaderTerminateInvocation.
func (p PhysicalDeviceVulkan13Features) SetShaderTerminateInvocation(value bool) {
	if value {
		p.ptr.shaderTerminateInvocation = C.VkBool32(1)
	} else {
		p.ptr.shaderTerminateInvocation = C.VkBool32(0)
	}
}

// GetSubgroupSizeControl returns the value in subgroupSizeControl.
func (p PhysicalDeviceVulkan13Features) GetSubgroupSizeControl() bool {
	return p.ptr.subgroupSizeControl != 0
}

// SetSubgroupSizeControl sets the value in subgroupSizeControl.
func (p PhysicalDeviceVulkan13Features) SetSubgroupSizeControl(value bool) {
	if value {
		p.ptr.subgroupSizeControl = C.VkBool32(1)
	} else {
		p.ptr.subgroupSizeControl = C.VkBool32(0)
	}
}

// GetComputeFullSubgroups returns the value in computeFullSubgroups.
func (p PhysicalDeviceVulkan13Features) GetComputeFullSubgroups() bool {
	return p.ptr.computeFullSubgroups != 0
}

// SetComputeFullSubgroups sets the value in computeFullSubgroups.
func (p PhysicalDeviceVulkan13Features) SetComputeFullSubgroups(value bool) {
	if value {
		p.ptr.computeFullSubgroups = C.VkBool32(1)
	} else {
		p.ptr.computeFullSubgroups = C.VkBool32(0)
	}
}

// GetSynchronization2 returns the value in synchronization2.
func (p PhysicalDeviceVulkan13Features) GetSynchronization2() bool {
	return p.ptr.synchronization2 != 0
}

// SetSynchronization2 sets the value in synchronization2.
func (p PhysicalDeviceVulkan13Features) SetSynchronization2(value bool) {
	if value {
		p.ptr.synchronization2 = C.VkBool32(1)
	} else {
		p.ptr.synchronization2 = C.VkBool32(0)
	}
}

// GetTextureCompressionASTC_HDR returns the value in textureCompressionASTC_HDR.
func (p PhysicalDeviceVulkan13Features) GetTextureCompressionASTC_HDR() bool {
	return p.ptr.textureCompressionASTC_HDR != 0
}

// SetTextureCompressionASTC_HDR sets the value in textureCompressionASTC_HDR.
func (p PhysicalDeviceVulkan13Features) SetTextureCompressionASTC_HDR(value bool) {
	if value {
		p.ptr.textureCompressionASTC_HDR = C.VkBool32(1)
	} else {
		p.ptr.textureCompressionASTC_HDR = C.VkBool32(0)
	}
}

// GetShaderZeroInitializeWorkgroupMemory returns the value in shaderZeroInitializeWorkgroupMemory.
func (p PhysicalDeviceVulkan13Features) GetShaderZeroInitializeWorkgroupMemory() bool {
	return p.ptr.shaderZeroInitializeWorkgroupMemory != 0
}

// SetShaderZeroInitializeWorkgroupMemory sets the value in shaderZeroInitializeWorkgroupMemory.
func (p PhysicalDeviceVulkan13Features) SetShaderZeroInitializeWorkgroupMemory(value bool) {
	if value {
		p.ptr.shaderZeroInitializeWorkgroupMemory = C.VkBool32(1)
	} else {
		p.ptr.shaderZeroInitializeWorkgroupMemory = C.VkBool32(0)
	}
}

// GetDynamicRendering returns the value in dynamicRendering.
func (p PhysicalDeviceVulkan13Features) GetDynamicRendering() bool {
	return p.ptr.dynamicRendering != 0
}

// SetDynamicRendering sets the value in dynamicRendering.
func (p PhysicalDeviceVulkan13Features) SetDynamicRendering(value bool) {
	if value {
		p.ptr.dynamicRendering = C.VkBool32(1)
	} else {
		p.ptr.dynamicRendering = C.VkBool32(0)
	}
}

// GetShaderIntegerDotProduct returns the value in shaderIntegerDotProduct.
func (p PhysicalDeviceVulkan13Features) GetShaderIntegerDotProduct() bool {
	return p.ptr.shaderIntegerDotProduct != 0
}

// SetShaderIntegerDotProduct sets the value in shaderIntegerDotProduct.
func (p PhysicalDeviceVulkan13Features) SetShaderIntegerDotProduct(value bool) {
	if value {
		p.ptr.shaderIntegerDotProduct = C.VkBool32(1)
	} else {
		p.ptr.shaderIntegerDotProduct = C.VkBool32(0)
	}
}

// GetMaintenance4 returns the value in maintenance4.
func (p PhysicalDeviceVulkan13Features) GetMaintenance4() bool {
	return p.ptr.maintenance4 != 0
}

// SetMaintenance4 sets the value in maintenance4.
func (p PhysicalDeviceVulkan13Features) SetMaintenance4(value bool) {
	if value {
		p.ptr.maintenance4 = C.VkBool32(1)
	} else {
		p.ptr.maintenance4 = C.VkBool32(0)
	}
}

// PhysicalDeviceVulkan13Properties wraps VkPhysicalDeviceVulkan13Properties.
type PhysicalDeviceVulkan13Properties struct {
	ptr *C.VkPhysicalDeviceVulkan13Properties
}

// PhysicalDeviceVulkan13PropertiesNil is a null pointer.
var PhysicalDeviceVulkan13PropertiesNil PhysicalDeviceVulkan13Properties

// PhysicalDeviceVulkan13PropertiesSizeOf is the byte size of VkPhysicalDeviceVulkan13Properties.
const PhysicalDeviceVulkan13PropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceVulkan13Properties)

// PhysicalDeviceVulkan13PropertiesFromPtr converts a raw pointer to a PhysicalDeviceVulkan13Properties.
func PhysicalDeviceVulkan13PropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceVulkan13Properties {
	return PhysicalDeviceVulkan13Properties{ptr: (*C.VkPhysicalDeviceVulkan13Properties)(ptr)}
}

// PhysicalDeviceVulkan13PropertiesAlloc allocates a continuous block of VkPhysicalDeviceVulkan13Properties.
func PhysicalDeviceVulkan13PropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceVulkan13Properties {
	ptr := alloc.Allocate(PhysicalDeviceVulkan13PropertiesSizeOf * count)
	return PhysicalDeviceVulkan13Properties{ptr: (*C.VkPhysicalDeviceVulkan13Properties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceVulkan13Properties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceVulkan13Properties) Offset(offset int) PhysicalDeviceVulkan13Properties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceVulkan13PropertiesSizeOf)
	return PhysicalDeviceVulkan13Properties{ptr: (*C.VkPhysicalDeviceVulkan13Properties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceVulkan13Properties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceVulkan13Properties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceVulkan13Properties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceVulkan13Properties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetMinSubgroupSize returns the value in minSubgroupSize.
func (p PhysicalDeviceVulkan13Properties) GetMinSubgroupSize() uint32 {
	return uint32(p.ptr.minSubgroupSize)
}

// SetMinSubgroupSize sets the value in minSubgroupSize.
func (p PhysicalDeviceVulkan13Properties) SetMinSubgroupSize(value uint32) {
	p.ptr.minSubgroupSize = (C.uint32_t)(value)
}

// GetMaxSubgroupSize returns the value in maxSubgroupSize.
func (p PhysicalDeviceVulkan13Properties) GetMaxSubgroupSize() uint32 {
	return uint32(p.ptr.maxSubgroupSize)
}

// SetMaxSubgroupSize sets the value in maxSubgroupSize.
func (p PhysicalDeviceVulkan13Properties) SetMaxSubgroupSize(value uint32) {
	p.ptr.maxSubgroupSize = (C.uint32_t)(value)
}

// GetMaxComputeWorkgroupSubgroups returns the value in maxComputeWorkgroupSubgroups.
func (p PhysicalDeviceVulkan13Properties) GetMaxComputeWorkgroupSubgroups() uint32 {
	return uint32(p.ptr.maxComputeWorkgroupSubgroups)
}

// SetMaxComputeWorkgroupSubgroups sets the value in maxComputeWorkgroupSubgroups.
func (p PhysicalDeviceVulkan13Properties) SetMaxComputeWorkgroupSubgroups(value uint32) {
	p.ptr.maxComputeWorkgroupSubgroups = (C.uint32_t)(value)
}

// GetRequiredSubgroupSizeStages returns the value in requiredSubgroupSizeStages.
func (p PhysicalDeviceVulkan13Properties) GetRequiredSubgroupSizeStages() ShaderStageFlags {
	return ShaderStageFlags(p.ptr.requiredSubgroupSizeStages)
}

// SetRequiredSubgroupSizeStages sets the value in requiredSubgroupSizeStages.
func (p PhysicalDeviceVulkan13Properties) SetRequiredSubgroupSizeStages(value ShaderStageFlags) {
	p.ptr.requiredSubgroupSizeStages = (C.VkShaderStageFlags)(value)
}

// GetMaxInlineUniformBlockSize returns the value in maxInlineUniformBlockSize.
func (p PhysicalDeviceVulkan13Properties) GetMaxInlineUniformBlockSize() uint32 {
	return uint32(p.ptr.maxInlineUniformBlockSize)
}

// SetMaxInlineUniformBlockSize sets the value in maxInlineUniformBlockSize.
func (p PhysicalDeviceVulkan13Properties) SetMaxInlineUniformBlockSize(value uint32) {
	p.ptr.maxInlineUniformBlockSize = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorInlineUniformBlocks returns the value in maxPerStageDescriptorInlineUniformBlocks.
func (p PhysicalDeviceVulkan13Properties) GetMaxPerStageDescriptorInlineUniformBlocks() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorInlineUniformBlocks)
}

// SetMaxPerStageDescriptorInlineUniformBlocks sets the value in maxPerStageDescriptorInlineUniformBlocks.
func (p PhysicalDeviceVulkan13Properties) SetMaxPerStageDescriptorInlineUniformBlocks(value uint32) {
	p.ptr.maxPerStageDescriptorInlineUniformBlocks = (C.uint32_t)(value)
}

// GetMaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks returns the value in maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks.
func (p PhysicalDeviceVulkan13Properties) GetMaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks() uint32 {
	return uint32(p.ptr.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)
}

// SetMaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks sets the value in maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks.
func (p PhysicalDeviceVulkan13Properties) SetMaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks(value uint32) {
	p.ptr.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = (C.uint32_t)(value)
}

// GetMaxDescriptorSetInlineUniformBlocks returns the value in maxDescriptorSetInlineUniformBlocks.
func (p PhysicalDeviceVulkan13Properties) GetMaxDescriptorSetInlineUniformBlocks() uint32 {
	return uint32(p.ptr.maxDescriptorSetInlineUniformBlocks)
}

// SetMaxDescriptorSetInlineUniformBlocks sets the value in maxDescriptorSetInlineUniformBlocks.
func (p PhysicalDeviceVulkan13Properties) SetMaxDescriptorSetInlineUniformBlocks(value uint32) {
	p.ptr.maxDescriptorSetInlineUniformBlocks = (C.uint32_t)(value)
}

// GetMaxDescriptorSetUpdateAfterBindInlineUniformBlocks returns the value in maxDescriptorSetUpdateAfterBindInlineUniformBlocks.
func (p PhysicalDeviceVulkan13Properties) GetMaxDescriptorSetUpdateAfterBindInlineUniformBlocks() uint32 {
	return uint32(p.ptr.maxDescriptorSetUpdateAfterBindInlineUniformBlocks)
}

// SetMaxDescriptorSetUpdateAfterBindInlineUniformBlocks sets the value in maxDescriptorSetUpdateAfterBindInlineUniformBlocks.
func (p PhysicalDeviceVulkan13Properties) SetMaxDescriptorSetUpdateAfterBindInlineUniformBlocks(value uint32) {
	p.ptr.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = (C.uint32_t)(value)
}

// GetMaxInlineUniformTotalSize returns the value in maxInlineUniformTotalSize.
func (p PhysicalDeviceVulkan13Properties) GetMaxInlineUniformTotalSize() uint32 {
	return uint32(p.ptr.maxInlineUniformTotalSize)
}

// SetMaxInlineUniformTotalSize sets the value in maxInlineUniformTotalSize.
func (p PhysicalDeviceVulkan13Properties) SetMaxInlineUniformTotalSize(value uint32) {
	p.ptr.maxInlineUniformTotalSize = (C.uint32_t)(value)
}

// GetIntegerDotProduct8BitUnsignedAccelerated returns the value in integerDotProduct8BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct8BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProduct8BitUnsignedAccelerated != 0
}

// SetIntegerDotProduct8BitUnsignedAccelerated sets the value in integerDotProduct8BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct8BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct8BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct8BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct8BitSignedAccelerated returns the value in integerDotProduct8BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct8BitSignedAccelerated() bool {
	return p.ptr.integerDotProduct8BitSignedAccelerated != 0
}

// SetIntegerDotProduct8BitSignedAccelerated sets the value in integerDotProduct8BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct8BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct8BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct8BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct8BitMixedSignednessAccelerated returns the value in integerDotProduct8BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct8BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProduct8BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProduct8BitMixedSignednessAccelerated sets the value in integerDotProduct8BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct8BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct8BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct8BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct4x8BitPackedUnsignedAccelerated returns the value in integerDotProduct4x8BitPackedUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct4x8BitPackedUnsignedAccelerated() bool {
	return p.ptr.integerDotProduct4x8BitPackedUnsignedAccelerated != 0
}

// SetIntegerDotProduct4x8BitPackedUnsignedAccelerated sets the value in integerDotProduct4x8BitPackedUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct4x8BitPackedUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct4x8BitPackedUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct4x8BitPackedUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct4x8BitPackedSignedAccelerated returns the value in integerDotProduct4x8BitPackedSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct4x8BitPackedSignedAccelerated() bool {
	return p.ptr.integerDotProduct4x8BitPackedSignedAccelerated != 0
}

// SetIntegerDotProduct4x8BitPackedSignedAccelerated sets the value in integerDotProduct4x8BitPackedSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct4x8BitPackedSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct4x8BitPackedSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct4x8BitPackedSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct4x8BitPackedMixedSignednessAccelerated returns the value in integerDotProduct4x8BitPackedMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct4x8BitPackedMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProduct4x8BitPackedMixedSignednessAccelerated != 0
}

// SetIntegerDotProduct4x8BitPackedMixedSignednessAccelerated sets the value in integerDotProduct4x8BitPackedMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct4x8BitPackedMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct4x8BitPackedMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct4x8BitPackedMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct16BitUnsignedAccelerated returns the value in integerDotProduct16BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct16BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProduct16BitUnsignedAccelerated != 0
}

// SetIntegerDotProduct16BitUnsignedAccelerated sets the value in integerDotProduct16BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct16BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct16BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct16BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct16BitSignedAccelerated returns the value in integerDotProduct16BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct16BitSignedAccelerated() bool {
	return p.ptr.integerDotProduct16BitSignedAccelerated != 0
}

// SetIntegerDotProduct16BitSignedAccelerated sets the value in integerDotProduct16BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct16BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct16BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct16BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct16BitMixedSignednessAccelerated returns the value in integerDotProduct16BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct16BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProduct16BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProduct16BitMixedSignednessAccelerated sets the value in integerDotProduct16BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct16BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct16BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct16BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct32BitUnsignedAccelerated returns the value in integerDotProduct32BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct32BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProduct32BitUnsignedAccelerated != 0
}

// SetIntegerDotProduct32BitUnsignedAccelerated sets the value in integerDotProduct32BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct32BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct32BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct32BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct32BitSignedAccelerated returns the value in integerDotProduct32BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct32BitSignedAccelerated() bool {
	return p.ptr.integerDotProduct32BitSignedAccelerated != 0
}

// SetIntegerDotProduct32BitSignedAccelerated sets the value in integerDotProduct32BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct32BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct32BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct32BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct32BitMixedSignednessAccelerated returns the value in integerDotProduct32BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct32BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProduct32BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProduct32BitMixedSignednessAccelerated sets the value in integerDotProduct32BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct32BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct32BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct32BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct64BitUnsignedAccelerated returns the value in integerDotProduct64BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct64BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProduct64BitUnsignedAccelerated != 0
}

// SetIntegerDotProduct64BitUnsignedAccelerated sets the value in integerDotProduct64BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct64BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct64BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct64BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct64BitSignedAccelerated returns the value in integerDotProduct64BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct64BitSignedAccelerated() bool {
	return p.ptr.integerDotProduct64BitSignedAccelerated != 0
}

// SetIntegerDotProduct64BitSignedAccelerated sets the value in integerDotProduct64BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct64BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct64BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct64BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProduct64BitMixedSignednessAccelerated returns the value in integerDotProduct64BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProduct64BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProduct64BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProduct64BitMixedSignednessAccelerated sets the value in integerDotProduct64BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProduct64BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProduct64BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProduct64BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating8BitUnsignedAccelerated returns the value in integerDotProductAccumulatingSaturating8BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating8BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating8BitUnsignedAccelerated sets the value in integerDotProductAccumulatingSaturating8BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating8BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating8BitSignedAccelerated returns the value in integerDotProductAccumulatingSaturating8BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating8BitSignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating8BitSignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating8BitSignedAccelerated sets the value in integerDotProductAccumulatingSaturating8BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating8BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating8BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating8BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated returns the value in integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated sets the value in integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated returns the value in integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated sets the value in integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated returns the value in integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated sets the value in integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated returns the value in integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated sets the value in integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating16BitUnsignedAccelerated returns the value in integerDotProductAccumulatingSaturating16BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating16BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating16BitUnsignedAccelerated sets the value in integerDotProductAccumulatingSaturating16BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating16BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating16BitSignedAccelerated returns the value in integerDotProductAccumulatingSaturating16BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating16BitSignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating16BitSignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating16BitSignedAccelerated sets the value in integerDotProductAccumulatingSaturating16BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating16BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating16BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating16BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated returns the value in integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated sets the value in integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating32BitUnsignedAccelerated returns the value in integerDotProductAccumulatingSaturating32BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating32BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating32BitUnsignedAccelerated sets the value in integerDotProductAccumulatingSaturating32BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating32BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating32BitSignedAccelerated returns the value in integerDotProductAccumulatingSaturating32BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating32BitSignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating32BitSignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating32BitSignedAccelerated sets the value in integerDotProductAccumulatingSaturating32BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating32BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating32BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating32BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated returns the value in integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated sets the value in integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating64BitUnsignedAccelerated returns the value in integerDotProductAccumulatingSaturating64BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating64BitUnsignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating64BitUnsignedAccelerated sets the value in integerDotProductAccumulatingSaturating64BitUnsignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating64BitUnsignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating64BitSignedAccelerated returns the value in integerDotProductAccumulatingSaturating64BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating64BitSignedAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating64BitSignedAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating64BitSignedAccelerated sets the value in integerDotProductAccumulatingSaturating64BitSignedAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating64BitSignedAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating64BitSignedAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating64BitSignedAccelerated = C.VkBool32(0)
	}
}

// GetIntegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated returns the value in integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) GetIntegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated() bool {
	return p.ptr.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated != 0
}

// SetIntegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated sets the value in integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated.
func (p PhysicalDeviceVulkan13Properties) SetIntegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated(value bool) {
	if value {
		p.ptr.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = C.VkBool32(1)
	} else {
		p.ptr.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = C.VkBool32(0)
	}
}

// GetStorageTexelBufferOffsetAlignmentBytes returns the value in storageTexelBufferOffsetAlignmentBytes.
func (p PhysicalDeviceVulkan13Properties) GetStorageTexelBufferOffsetAlignmentBytes() DeviceSize {
	return DeviceSize(p.ptr.storageTexelBufferOffsetAlignmentBytes)
}

// SetStorageTexelBufferOffsetAlignmentBytes sets the value in storageTexelBufferOffsetAlignmentBytes.
func (p PhysicalDeviceVulkan13Properties) SetStorageTexelBufferOffsetAlignmentBytes(value DeviceSize) {
	p.ptr.storageTexelBufferOffsetAlignmentBytes = (C.VkDeviceSize)(value)
}

// GetStorageTexelBufferOffsetSingleTexelAlignment returns the value in storageTexelBufferOffsetSingleTexelAlignment.
func (p PhysicalDeviceVulkan13Properties) GetStorageTexelBufferOffsetSingleTexelAlignment() bool {
	return p.ptr.storageTexelBufferOffsetSingleTexelAlignment != 0
}

// SetStorageTexelBufferOffsetSingleTexelAlignment sets the value in storageTexelBufferOffsetSingleTexelAlignment.
func (p PhysicalDeviceVulkan13Properties) SetStorageTexelBufferOffsetSingleTexelAlignment(value bool) {
	if value {
		p.ptr.storageTexelBufferOffsetSingleTexelAlignment = C.VkBool32(1)
	} else {
		p.ptr.storageTexelBufferOffsetSingleTexelAlignment = C.VkBool32(0)
	}
}

// GetUniformTexelBufferOffsetAlignmentBytes returns the value in uniformTexelBufferOffsetAlignmentBytes.
func (p PhysicalDeviceVulkan13Properties) GetUniformTexelBufferOffsetAlignmentBytes() DeviceSize {
	return DeviceSize(p.ptr.uniformTexelBufferOffsetAlignmentBytes)
}

// SetUniformTexelBufferOffsetAlignmentBytes sets the value in uniformTexelBufferOffsetAlignmentBytes.
func (p PhysicalDeviceVulkan13Properties) SetUniformTexelBufferOffsetAlignmentBytes(value DeviceSize) {
	p.ptr.uniformTexelBufferOffsetAlignmentBytes = (C.VkDeviceSize)(value)
}

// GetUniformTexelBufferOffsetSingleTexelAlignment returns the value in uniformTexelBufferOffsetSingleTexelAlignment.
func (p PhysicalDeviceVulkan13Properties) GetUniformTexelBufferOffsetSingleTexelAlignment() bool {
	return p.ptr.uniformTexelBufferOffsetSingleTexelAlignment != 0
}

// SetUniformTexelBufferOffsetSingleTexelAlignment sets the value in uniformTexelBufferOffsetSingleTexelAlignment.
func (p PhysicalDeviceVulkan13Properties) SetUniformTexelBufferOffsetSingleTexelAlignment(value bool) {
	if value {
		p.ptr.uniformTexelBufferOffsetSingleTexelAlignment = C.VkBool32(1)
	} else {
		p.ptr.uniformTexelBufferOffsetSingleTexelAlignment = C.VkBool32(0)
	}
}

// GetMaxBufferSize returns the value in maxBufferSize.
func (p PhysicalDeviceVulkan13Properties) GetMaxBufferSize() DeviceSize {
	return DeviceSize(p.ptr.maxBufferSize)
}

// SetMaxBufferSize sets the value in maxBufferSize.
func (p PhysicalDeviceVulkan13Properties) SetMaxBufferSize(value DeviceSize) {
	p.ptr.maxBufferSize = (C.VkDeviceSize)(value)
}

// PhysicalDeviceVulkan14Features wraps VkPhysicalDeviceVulkan14Features.
type PhysicalDeviceVulkan14Features struct {
	ptr *C.VkPhysicalDeviceVulkan14Features
}

// PhysicalDeviceVulkan14FeaturesNil is a null pointer.
var PhysicalDeviceVulkan14FeaturesNil PhysicalDeviceVulkan14Features

// PhysicalDeviceVulkan14FeaturesSizeOf is the byte size of VkPhysicalDeviceVulkan14Features.
const PhysicalDeviceVulkan14FeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceVulkan14Features)

// PhysicalDeviceVulkan14FeaturesFromPtr converts a raw pointer to a PhysicalDeviceVulkan14Features.
func PhysicalDeviceVulkan14FeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceVulkan14Features {
	return PhysicalDeviceVulkan14Features{ptr: (*C.VkPhysicalDeviceVulkan14Features)(ptr)}
}

// PhysicalDeviceVulkan14FeaturesAlloc allocates a continuous block of VkPhysicalDeviceVulkan14Features.
func PhysicalDeviceVulkan14FeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceVulkan14Features {
	ptr := alloc.Allocate(PhysicalDeviceVulkan14FeaturesSizeOf * count)
	return PhysicalDeviceVulkan14Features{ptr: (*C.VkPhysicalDeviceVulkan14Features)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceVulkan14Features) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceVulkan14Features) Offset(offset int) PhysicalDeviceVulkan14Features {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceVulkan14FeaturesSizeOf)
	return PhysicalDeviceVulkan14Features{ptr: (*C.VkPhysicalDeviceVulkan14Features)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceVulkan14Features) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceVulkan14Features) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceVulkan14Features) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceVulkan14Features) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetGlobalPriorityQuery returns the value in globalPriorityQuery.
func (p PhysicalDeviceVulkan14Features) GetGlobalPriorityQuery() bool {
	return p.ptr.globalPriorityQuery != 0
}

// SetGlobalPriorityQuery sets the value in globalPriorityQuery.
func (p PhysicalDeviceVulkan14Features) SetGlobalPriorityQuery(value bool) {
	if value {
		p.ptr.globalPriorityQuery = C.VkBool32(1)
	} else {
		p.ptr.globalPriorityQuery = C.VkBool32(0)
	}
}

// GetShaderSubgroupRotate returns the value in shaderSubgroupRotate.
func (p PhysicalDeviceVulkan14Features) GetShaderSubgroupRotate() bool {
	return p.ptr.shaderSubgroupRotate != 0
}

// SetShaderSubgroupRotate sets the value in shaderSubgroupRotate.
func (p PhysicalDeviceVulkan14Features) SetShaderSubgroupRotate(value bool) {
	if value {
		p.ptr.shaderSubgroupRotate = C.VkBool32(1)
	} else {
		p.ptr.shaderSubgroupRotate = C.VkBool32(0)
	}
}

// GetShaderSubgroupRotateClustered returns the value in shaderSubgroupRotateClustered.
func (p PhysicalDeviceVulkan14Features) GetShaderSubgroupRotateClustered() bool {
	return p.ptr.shaderSubgroupRotateClustered != 0
}

// SetShaderSubgroupRotateClustered sets the value in shaderSubgroupRotateClustered.
func (p PhysicalDeviceVulkan14Features) SetShaderSubgroupRotateClustered(value bool) {
	if value {
		p.ptr.shaderSubgroupRotateClustered = C.VkBool32(1)
	} else {
		p.ptr.shaderSubgroupRotateClustered = C.VkBool32(0)
	}
}

// GetShaderFloatControls2 returns the value in shaderFloatControls2.
func (p PhysicalDeviceVulkan14Features) GetShaderFloatControls2() bool {
	return p.ptr.shaderFloatControls2 != 0
}

// SetShaderFloatControls2 sets the value in shaderFloatControls2.
func (p PhysicalDeviceVulkan14Features) SetShaderFloatControls2(value bool) {
	if value {
		p.ptr.shaderFloatControls2 = C.VkBool32(1)
	} else {
		p.ptr.shaderFloatControls2 = C.VkBool32(0)
	}
}

// GetShaderExpectAssume returns the value in shaderExpectAssume.
func (p PhysicalDeviceVulkan14Features) GetShaderExpectAssume() bool {
	return p.ptr.shaderExpectAssume != 0
}

// SetShaderExpectAssume sets the value in shaderExpectAssume.
func (p PhysicalDeviceVulkan14Features) SetShaderExpectAssume(value bool) {
	if value {
		p.ptr.shaderExpectAssume = C.VkBool32(1)
	} else {
		p.ptr.shaderExpectAssume = C.VkBool32(0)
	}
}

// GetRectangularLines returns the value in rectangularLines.
func (p PhysicalDeviceVulkan14Features) GetRectangularLines() bool {
	return p.ptr.rectangularLines != 0
}

// SetRectangularLines sets the value in rectangularLines.
func (p PhysicalDeviceVulkan14Features) SetRectangularLines(value bool) {
	if value {
		p.ptr.rectangularLines = C.VkBool32(1)
	} else {
		p.ptr.rectangularLines = C.VkBool32(0)
	}
}

// GetBresenhamLines returns the value in bresenhamLines.
func (p PhysicalDeviceVulkan14Features) GetBresenhamLines() bool {
	return p.ptr.bresenhamLines != 0
}

// SetBresenhamLines sets the value in bresenhamLines.
func (p PhysicalDeviceVulkan14Features) SetBresenhamLines(value bool) {
	if value {
		p.ptr.bresenhamLines = C.VkBool32(1)
	} else {
		p.ptr.bresenhamLines = C.VkBool32(0)
	}
}

// GetSmoothLines returns the value in smoothLines.
func (p PhysicalDeviceVulkan14Features) GetSmoothLines() bool {
	return p.ptr.smoothLines != 0
}

// SetSmoothLines sets the value in smoothLines.
func (p PhysicalDeviceVulkan14Features) SetSmoothLines(value bool) {
	if value {
		p.ptr.smoothLines = C.VkBool32(1)
	} else {
		p.ptr.smoothLines = C.VkBool32(0)
	}
}

// GetStippledRectangularLines returns the value in stippledRectangularLines.
func (p PhysicalDeviceVulkan14Features) GetStippledRectangularLines() bool {
	return p.ptr.stippledRectangularLines != 0
}

// SetStippledRectangularLines sets the value in stippledRectangularLines.
func (p PhysicalDeviceVulkan14Features) SetStippledRectangularLines(value bool) {
	if value {
		p.ptr.stippledRectangularLines = C.VkBool32(1)
	} else {
		p.ptr.stippledRectangularLines = C.VkBool32(0)
	}
}

// GetStippledBresenhamLines returns the value in stippledBresenhamLines.
func (p PhysicalDeviceVulkan14Features) GetStippledBresenhamLines() bool {
	return p.ptr.stippledBresenhamLines != 0
}

// SetStippledBresenhamLines sets the value in stippledBresenhamLines.
func (p PhysicalDeviceVulkan14Features) SetStippledBresenhamLines(value bool) {
	if value {
		p.ptr.stippledBresenhamLines = C.VkBool32(1)
	} else {
		p.ptr.stippledBresenhamLines = C.VkBool32(0)
	}
}

// GetStippledSmoothLines returns the value in stippledSmoothLines.
func (p PhysicalDeviceVulkan14Features) GetStippledSmoothLines() bool {
	return p.ptr.stippledSmoothLines != 0
}

// SetStippledSmoothLines sets the value in stippledSmoothLines.
func (p PhysicalDeviceVulkan14Features) SetStippledSmoothLines(value bool) {
	if value {
		p.ptr.stippledSmoothLines = C.VkBool32(1)
	} else {
		p.ptr.stippledSmoothLines = C.VkBool32(0)
	}
}

// GetVertexAttributeInstanceRateDivisor returns the value in vertexAttributeInstanceRateDivisor.
func (p PhysicalDeviceVulkan14Features) GetVertexAttributeInstanceRateDivisor() bool {
	return p.ptr.vertexAttributeInstanceRateDivisor != 0
}

// SetVertexAttributeInstanceRateDivisor sets the value in vertexAttributeInstanceRateDivisor.
func (p PhysicalDeviceVulkan14Features) SetVertexAttributeInstanceRateDivisor(value bool) {
	if value {
		p.ptr.vertexAttributeInstanceRateDivisor = C.VkBool32(1)
	} else {
		p.ptr.vertexAttributeInstanceRateDivisor = C.VkBool32(0)
	}
}

// GetVertexAttributeInstanceRateZeroDivisor returns the value in vertexAttributeInstanceRateZeroDivisor.
func (p PhysicalDeviceVulkan14Features) GetVertexAttributeInstanceRateZeroDivisor() bool {
	return p.ptr.vertexAttributeInstanceRateZeroDivisor != 0
}

// SetVertexAttributeInstanceRateZeroDivisor sets the value in vertexAttributeInstanceRateZeroDivisor.
func (p PhysicalDeviceVulkan14Features) SetVertexAttributeInstanceRateZeroDivisor(value bool) {
	if value {
		p.ptr.vertexAttributeInstanceRateZeroDivisor = C.VkBool32(1)
	} else {
		p.ptr.vertexAttributeInstanceRateZeroDivisor = C.VkBool32(0)
	}
}

// GetIndexTypeUint8 returns the value in indexTypeUint8.
func (p PhysicalDeviceVulkan14Features) GetIndexTypeUint8() bool {
	return p.ptr.indexTypeUint8 != 0
}

// SetIndexTypeUint8 sets the value in indexTypeUint8.
func (p PhysicalDeviceVulkan14Features) SetIndexTypeUint8(value bool) {
	if value {
		p.ptr.indexTypeUint8 = C.VkBool32(1)
	} else {
		p.ptr.indexTypeUint8 = C.VkBool32(0)
	}
}

// GetDynamicRenderingLocalRead returns the value in dynamicRenderingLocalRead.
func (p PhysicalDeviceVulkan14Features) GetDynamicRenderingLocalRead() bool {
	return p.ptr.dynamicRenderingLocalRead != 0
}

// SetDynamicRenderingLocalRead sets the value in dynamicRenderingLocalRead.
func (p PhysicalDeviceVulkan14Features) SetDynamicRenderingLocalRead(value bool) {
	if value {
		p.ptr.dynamicRenderingLocalRead = C.VkBool32(1)
	} else {
		p.ptr.dynamicRenderingLocalRead = C.VkBool32(0)
	}
}

// GetMaintenance5 returns the value in maintenance5.
func (p PhysicalDeviceVulkan14Features) GetMaintenance5() bool {
	return p.ptr.maintenance5 != 0
}

// SetMaintenance5 sets the value in maintenance5.
func (p PhysicalDeviceVulkan14Features) SetMaintenance5(value bool) {
	if value {
		p.ptr.maintenance5 = C.VkBool32(1)
	} else {
		p.ptr.maintenance5 = C.VkBool32(0)
	}
}

// GetMaintenance6 returns the value in maintenance6.
func (p PhysicalDeviceVulkan14Features) GetMaintenance6() bool {
	return p.ptr.maintenance6 != 0
}

// SetMaintenance6 sets the value in maintenance6.
func (p PhysicalDeviceVulkan14Features) SetMaintenance6(value bool) {
	if value {
		p.ptr.maintenance6 = C.VkBool32(1)
	} else {
		p.ptr.maintenance6 = C.VkBool32(0)
	}
}

// GetPipelineProtectedAccess returns the value in pipelineProtectedAccess.
func (p PhysicalDeviceVulkan14Features) GetPipelineProtectedAccess() bool {
	return p.ptr.pipelineProtectedAccess != 0
}

// SetPipelineProtectedAccess sets the value in pipelineProtectedAccess.
func (p PhysicalDeviceVulkan14Features) SetPipelineProtectedAccess(value bool) {
	if value {
		p.ptr.pipelineProtectedAccess = C.VkBool32(1)
	} else {
		p.ptr.pipelineProtectedAccess = C.VkBool32(0)
	}
}

// GetPipelineRobustness returns the value in pipelineRobustness.
func (p PhysicalDeviceVulkan14Features) GetPipelineRobustness() bool {
	return p.ptr.pipelineRobustness != 0
}

// SetPipelineRobustness sets the value in pipelineRobustness.
func (p PhysicalDeviceVulkan14Features) SetPipelineRobustness(value bool) {
	if value {
		p.ptr.pipelineRobustness = C.VkBool32(1)
	} else {
		p.ptr.pipelineRobustness = C.VkBool32(0)
	}
}

// GetHostImageCopy returns the value in hostImageCopy.
func (p PhysicalDeviceVulkan14Features) GetHostImageCopy() bool {
	return p.ptr.hostImageCopy != 0
}

// SetHostImageCopy sets the value in hostImageCopy.
func (p PhysicalDeviceVulkan14Features) SetHostImageCopy(value bool) {
	if value {
		p.ptr.hostImageCopy = C.VkBool32(1)
	} else {
		p.ptr.hostImageCopy = C.VkBool32(0)
	}
}

// GetPushDescriptor returns the value in pushDescriptor.
func (p PhysicalDeviceVulkan14Features) GetPushDescriptor() bool {
	return p.ptr.pushDescriptor != 0
}

// SetPushDescriptor sets the value in pushDescriptor.
func (p PhysicalDeviceVulkan14Features) SetPushDescriptor(value bool) {
	if value {
		p.ptr.pushDescriptor = C.VkBool32(1)
	} else {
		p.ptr.pushDescriptor = C.VkBool32(0)
	}
}

// PhysicalDeviceVulkan14Properties wraps VkPhysicalDeviceVulkan14Properties.
type PhysicalDeviceVulkan14Properties struct {
	ptr *C.VkPhysicalDeviceVulkan14Properties
}

// PhysicalDeviceVulkan14PropertiesNil is a null pointer.
var PhysicalDeviceVulkan14PropertiesNil PhysicalDeviceVulkan14Properties

// PhysicalDeviceVulkan14PropertiesSizeOf is the byte size of VkPhysicalDeviceVulkan14Properties.
const PhysicalDeviceVulkan14PropertiesSizeOf = int(C.sizeof_VkPhysicalDeviceVulkan14Properties)

// PhysicalDeviceVulkan14PropertiesFromPtr converts a raw pointer to a PhysicalDeviceVulkan14Properties.
func PhysicalDeviceVulkan14PropertiesFromPtr(ptr unsafe.Pointer) PhysicalDeviceVulkan14Properties {
	return PhysicalDeviceVulkan14Properties{ptr: (*C.VkPhysicalDeviceVulkan14Properties)(ptr)}
}

// PhysicalDeviceVulkan14PropertiesAlloc allocates a continuous block of VkPhysicalDeviceVulkan14Properties.
func PhysicalDeviceVulkan14PropertiesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceVulkan14Properties {
	ptr := alloc.Allocate(PhysicalDeviceVulkan14PropertiesSizeOf * count)
	return PhysicalDeviceVulkan14Properties{ptr: (*C.VkPhysicalDeviceVulkan14Properties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceVulkan14Properties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceVulkan14Properties) Offset(offset int) PhysicalDeviceVulkan14Properties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceVulkan14PropertiesSizeOf)
	return PhysicalDeviceVulkan14Properties{ptr: (*C.VkPhysicalDeviceVulkan14Properties)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceVulkan14Properties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceVulkan14Properties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceVulkan14Properties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceVulkan14Properties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetLineSubPixelPrecisionBits returns the value in lineSubPixelPrecisionBits.
func (p PhysicalDeviceVulkan14Properties) GetLineSubPixelPrecisionBits() uint32 {
	return uint32(p.ptr.lineSubPixelPrecisionBits)
}

// SetLineSubPixelPrecisionBits sets the value in lineSubPixelPrecisionBits.
func (p PhysicalDeviceVulkan14Properties) SetLineSubPixelPrecisionBits(value uint32) {
	p.ptr.lineSubPixelPrecisionBits = (C.uint32_t)(value)
}

// GetMaxVertexAttribDivisor returns the value in maxVertexAttribDivisor.
func (p PhysicalDeviceVulkan14Properties) GetMaxVertexAttribDivisor() uint32 {
	return uint32(p.ptr.maxVertexAttribDivisor)
}

// SetMaxVertexAttribDivisor sets the value in maxVertexAttribDivisor.
func (p PhysicalDeviceVulkan14Properties) SetMaxVertexAttribDivisor(value uint32) {
	p.ptr.maxVertexAttribDivisor = (C.uint32_t)(value)
}

// GetSupportsNonZeroFirstInstance returns the value in supportsNonZeroFirstInstance.
func (p PhysicalDeviceVulkan14Properties) GetSupportsNonZeroFirstInstance() bool {
	return p.ptr.supportsNonZeroFirstInstance != 0
}

// SetSupportsNonZeroFirstInstance sets the value in supportsNonZeroFirstInstance.
func (p PhysicalDeviceVulkan14Properties) SetSupportsNonZeroFirstInstance(value bool) {
	if value {
		p.ptr.supportsNonZeroFirstInstance = C.VkBool32(1)
	} else {
		p.ptr.supportsNonZeroFirstInstance = C.VkBool32(0)
	}
}

// GetMaxPushDescriptors returns the value in maxPushDescriptors.
func (p PhysicalDeviceVulkan14Properties) GetMaxPushDescriptors() uint32 {
	return uint32(p.ptr.maxPushDescriptors)
}

// SetMaxPushDescriptors sets the value in maxPushDescriptors.
func (p PhysicalDeviceVulkan14Properties) SetMaxPushDescriptors(value uint32) {
	p.ptr.maxPushDescriptors = (C.uint32_t)(value)
}

// GetDynamicRenderingLocalReadDepthStencilAttachments returns the value in dynamicRenderingLocalReadDepthStencilAttachments.
func (p PhysicalDeviceVulkan14Properties) GetDynamicRenderingLocalReadDepthStencilAttachments() bool {
	return p.ptr.dynamicRenderingLocalReadDepthStencilAttachments != 0
}

// SetDynamicRenderingLocalReadDepthStencilAttachments sets the value in dynamicRenderingLocalReadDepthStencilAttachments.
func (p PhysicalDeviceVulkan14Properties) SetDynamicRenderingLocalReadDepthStencilAttachments(value bool) {
	if value {
		p.ptr.dynamicRenderingLocalReadDepthStencilAttachments = C.VkBool32(1)
	} else {
		p.ptr.dynamicRenderingLocalReadDepthStencilAttachments = C.VkBool32(0)
	}
}

// GetDynamicRenderingLocalReadMultisampledAttachments returns the value in dynamicRenderingLocalReadMultisampledAttachments.
func (p PhysicalDeviceVulkan14Properties) GetDynamicRenderingLocalReadMultisampledAttachments() bool {
	return p.ptr.dynamicRenderingLocalReadMultisampledAttachments != 0
}

// SetDynamicRenderingLocalReadMultisampledAttachments sets the value in dynamicRenderingLocalReadMultisampledAttachments.
func (p PhysicalDeviceVulkan14Properties) SetDynamicRenderingLocalReadMultisampledAttachments(value bool) {
	if value {
		p.ptr.dynamicRenderingLocalReadMultisampledAttachments = C.VkBool32(1)
	} else {
		p.ptr.dynamicRenderingLocalReadMultisampledAttachments = C.VkBool32(0)
	}
}

// GetEarlyFragmentMultisampleCoverageAfterSampleCounting returns the value in earlyFragmentMultisampleCoverageAfterSampleCounting.
func (p PhysicalDeviceVulkan14Properties) GetEarlyFragmentMultisampleCoverageAfterSampleCounting() bool {
	return p.ptr.earlyFragmentMultisampleCoverageAfterSampleCounting != 0
}

// SetEarlyFragmentMultisampleCoverageAfterSampleCounting sets the value in earlyFragmentMultisampleCoverageAfterSampleCounting.
func (p PhysicalDeviceVulkan14Properties) SetEarlyFragmentMultisampleCoverageAfterSampleCounting(value bool) {
	if value {
		p.ptr.earlyFragmentMultisampleCoverageAfterSampleCounting = C.VkBool32(1)
	} else {
		p.ptr.earlyFragmentMultisampleCoverageAfterSampleCounting = C.VkBool32(0)
	}
}

// GetEarlyFragmentSampleMaskTestBeforeSampleCounting returns the value in earlyFragmentSampleMaskTestBeforeSampleCounting.
func (p PhysicalDeviceVulkan14Properties) GetEarlyFragmentSampleMaskTestBeforeSampleCounting() bool {
	return p.ptr.earlyFragmentSampleMaskTestBeforeSampleCounting != 0
}

// SetEarlyFragmentSampleMaskTestBeforeSampleCounting sets the value in earlyFragmentSampleMaskTestBeforeSampleCounting.
func (p PhysicalDeviceVulkan14Properties) SetEarlyFragmentSampleMaskTestBeforeSampleCounting(value bool) {
	if value {
		p.ptr.earlyFragmentSampleMaskTestBeforeSampleCounting = C.VkBool32(1)
	} else {
		p.ptr.earlyFragmentSampleMaskTestBeforeSampleCounting = C.VkBool32(0)
	}
}

// GetDepthStencilSwizzleOneSupport returns the value in depthStencilSwizzleOneSupport.
func (p PhysicalDeviceVulkan14Properties) GetDepthStencilSwizzleOneSupport() bool {
	return p.ptr.depthStencilSwizzleOneSupport != 0
}

// SetDepthStencilSwizzleOneSupport sets the value in depthStencilSwizzleOneSupport.
func (p PhysicalDeviceVulkan14Properties) SetDepthStencilSwizzleOneSupport(value bool) {
	if value {
		p.ptr.depthStencilSwizzleOneSupport = C.VkBool32(1)
	} else {
		p.ptr.depthStencilSwizzleOneSupport = C.VkBool32(0)
	}
}

// GetPolygonModePointSize returns the value in polygonModePointSize.
func (p PhysicalDeviceVulkan14Properties) GetPolygonModePointSize() bool {
	return p.ptr.polygonModePointSize != 0
}

// SetPolygonModePointSize sets the value in polygonModePointSize.
func (p PhysicalDeviceVulkan14Properties) SetPolygonModePointSize(value bool) {
	if value {
		p.ptr.polygonModePointSize = C.VkBool32(1)
	} else {
		p.ptr.polygonModePointSize = C.VkBool32(0)
	}
}

// GetNonStrictSinglePixelWideLinesUseParallelogram returns the value in nonStrictSinglePixelWideLinesUseParallelogram.
func (p PhysicalDeviceVulkan14Properties) GetNonStrictSinglePixelWideLinesUseParallelogram() bool {
	return p.ptr.nonStrictSinglePixelWideLinesUseParallelogram != 0
}

// SetNonStrictSinglePixelWideLinesUseParallelogram sets the value in nonStrictSinglePixelWideLinesUseParallelogram.
func (p PhysicalDeviceVulkan14Properties) SetNonStrictSinglePixelWideLinesUseParallelogram(value bool) {
	if value {
		p.ptr.nonStrictSinglePixelWideLinesUseParallelogram = C.VkBool32(1)
	} else {
		p.ptr.nonStrictSinglePixelWideLinesUseParallelogram = C.VkBool32(0)
	}
}

// GetNonStrictWideLinesUseParallelogram returns the value in nonStrictWideLinesUseParallelogram.
func (p PhysicalDeviceVulkan14Properties) GetNonStrictWideLinesUseParallelogram() bool {
	return p.ptr.nonStrictWideLinesUseParallelogram != 0
}

// SetNonStrictWideLinesUseParallelogram sets the value in nonStrictWideLinesUseParallelogram.
func (p PhysicalDeviceVulkan14Properties) SetNonStrictWideLinesUseParallelogram(value bool) {
	if value {
		p.ptr.nonStrictWideLinesUseParallelogram = C.VkBool32(1)
	} else {
		p.ptr.nonStrictWideLinesUseParallelogram = C.VkBool32(0)
	}
}

// GetBlockTexelViewCompatibleMultipleLayers returns the value in blockTexelViewCompatibleMultipleLayers.
func (p PhysicalDeviceVulkan14Properties) GetBlockTexelViewCompatibleMultipleLayers() bool {
	return p.ptr.blockTexelViewCompatibleMultipleLayers != 0
}

// SetBlockTexelViewCompatibleMultipleLayers sets the value in blockTexelViewCompatibleMultipleLayers.
func (p PhysicalDeviceVulkan14Properties) SetBlockTexelViewCompatibleMultipleLayers(value bool) {
	if value {
		p.ptr.blockTexelViewCompatibleMultipleLayers = C.VkBool32(1)
	} else {
		p.ptr.blockTexelViewCompatibleMultipleLayers = C.VkBool32(0)
	}
}

// GetMaxCombinedImageSamplerDescriptorCount returns the value in maxCombinedImageSamplerDescriptorCount.
func (p PhysicalDeviceVulkan14Properties) GetMaxCombinedImageSamplerDescriptorCount() uint32 {
	return uint32(p.ptr.maxCombinedImageSamplerDescriptorCount)
}

// SetMaxCombinedImageSamplerDescriptorCount sets the value in maxCombinedImageSamplerDescriptorCount.
func (p PhysicalDeviceVulkan14Properties) SetMaxCombinedImageSamplerDescriptorCount(value uint32) {
	p.ptr.maxCombinedImageSamplerDescriptorCount = (C.uint32_t)(value)
}

// GetFragmentShadingRateClampCombinerInputs returns the value in fragmentShadingRateClampCombinerInputs.
func (p PhysicalDeviceVulkan14Properties) GetFragmentShadingRateClampCombinerInputs() bool {
	return p.ptr.fragmentShadingRateClampCombinerInputs != 0
}

// SetFragmentShadingRateClampCombinerInputs sets the value in fragmentShadingRateClampCombinerInputs.
func (p PhysicalDeviceVulkan14Properties) SetFragmentShadingRateClampCombinerInputs(value bool) {
	if value {
		p.ptr.fragmentShadingRateClampCombinerInputs = C.VkBool32(1)
	} else {
		p.ptr.fragmentShadingRateClampCombinerInputs = C.VkBool32(0)
	}
}

// GetDefaultRobustnessStorageBuffers returns the value in defaultRobustnessStorageBuffers.
func (p PhysicalDeviceVulkan14Properties) GetDefaultRobustnessStorageBuffers() PipelineRobustnessBufferBehavior {
	return PipelineRobustnessBufferBehavior(p.ptr.defaultRobustnessStorageBuffers)
}

// SetDefaultRobustnessStorageBuffers sets the value in defaultRobustnessStorageBuffers.
func (p PhysicalDeviceVulkan14Properties) SetDefaultRobustnessStorageBuffers(value PipelineRobustnessBufferBehavior) {
	p.ptr.defaultRobustnessStorageBuffers = (C.VkPipelineRobustnessBufferBehavior)(value)
}

// GetDefaultRobustnessUniformBuffers returns the value in defaultRobustnessUniformBuffers.
func (p PhysicalDeviceVulkan14Properties) GetDefaultRobustnessUniformBuffers() PipelineRobustnessBufferBehavior {
	return PipelineRobustnessBufferBehavior(p.ptr.defaultRobustnessUniformBuffers)
}

// SetDefaultRobustnessUniformBuffers sets the value in defaultRobustnessUniformBuffers.
func (p PhysicalDeviceVulkan14Properties) SetDefaultRobustnessUniformBuffers(value PipelineRobustnessBufferBehavior) {
	p.ptr.defaultRobustnessUniformBuffers = (C.VkPipelineRobustnessBufferBehavior)(value)
}

// GetDefaultRobustnessVertexInputs returns the value in defaultRobustnessVertexInputs.
func (p PhysicalDeviceVulkan14Properties) GetDefaultRobustnessVertexInputs() PipelineRobustnessBufferBehavior {
	return PipelineRobustnessBufferBehavior(p.ptr.defaultRobustnessVertexInputs)
}

// SetDefaultRobustnessVertexInputs sets the value in defaultRobustnessVertexInputs.
func (p PhysicalDeviceVulkan14Properties) SetDefaultRobustnessVertexInputs(value PipelineRobustnessBufferBehavior) {
	p.ptr.defaultRobustnessVertexInputs = (C.VkPipelineRobustnessBufferBehavior)(value)
}

// GetDefaultRobustnessImages returns the value in defaultRobustnessImages.
func (p PhysicalDeviceVulkan14Properties) GetDefaultRobustnessImages() PipelineRobustnessImageBehavior {
	return PipelineRobustnessImageBehavior(p.ptr.defaultRobustnessImages)
}

// SetDefaultRobustnessImages sets the value in defaultRobustnessImages.
func (p PhysicalDeviceVulkan14Properties) SetDefaultRobustnessImages(value PipelineRobustnessImageBehavior) {
	p.ptr.defaultRobustnessImages = (C.VkPipelineRobustnessImageBehavior)(value)
}

// GetCopySrcLayoutCount returns the value in copySrcLayoutCount.
func (p PhysicalDeviceVulkan14Properties) GetCopySrcLayoutCount() uint32 {
	return uint32(p.ptr.copySrcLayoutCount)
}

// SetCopySrcLayoutCount sets the value in copySrcLayoutCount.
func (p PhysicalDeviceVulkan14Properties) SetCopySrcLayoutCount(value uint32) {
	p.ptr.copySrcLayoutCount = (C.uint32_t)(value)
}

// GetPCopySrcLayouts returns the value in pCopySrcLayouts.
func (p PhysicalDeviceVulkan14Properties) GetPCopySrcLayouts() ffi.Ref[ImageLayout] {
	return ffi.RefFromPtr[ImageLayout](unsafe.Pointer(p.ptr.pCopySrcLayouts))
}

// SetPCopySrcLayouts sets the value in pCopySrcLayouts.
func (p PhysicalDeviceVulkan14Properties) SetPCopySrcLayouts(value ffi.Ref[ImageLayout]) {
	p.ptr.pCopySrcLayouts = (*C.VkImageLayout)(value.Raw())
}

// GetCopyDstLayoutCount returns the value in copyDstLayoutCount.
func (p PhysicalDeviceVulkan14Properties) GetCopyDstLayoutCount() uint32 {
	return uint32(p.ptr.copyDstLayoutCount)
}

// SetCopyDstLayoutCount sets the value in copyDstLayoutCount.
func (p PhysicalDeviceVulkan14Properties) SetCopyDstLayoutCount(value uint32) {
	p.ptr.copyDstLayoutCount = (C.uint32_t)(value)
}

// GetPCopyDstLayouts returns the value in pCopyDstLayouts.
func (p PhysicalDeviceVulkan14Properties) GetPCopyDstLayouts() ffi.Ref[ImageLayout] {
	return ffi.RefFromPtr[ImageLayout](unsafe.Pointer(p.ptr.pCopyDstLayouts))
}

// SetPCopyDstLayouts sets the value in pCopyDstLayouts.
func (p PhysicalDeviceVulkan14Properties) SetPCopyDstLayouts(value ffi.Ref[ImageLayout]) {
	p.ptr.pCopyDstLayouts = (*C.VkImageLayout)(value.Raw())
}

// PhysicalDeviceVulkan14Properties.optimalTilingLayoutUUID is unsupported: category unsupported.

// GetIdenticalMemoryTypeRequirements returns the value in identicalMemoryTypeRequirements.
func (p PhysicalDeviceVulkan14Properties) GetIdenticalMemoryTypeRequirements() bool {
	return p.ptr.identicalMemoryTypeRequirements != 0
}

// SetIdenticalMemoryTypeRequirements sets the value in identicalMemoryTypeRequirements.
func (p PhysicalDeviceVulkan14Properties) SetIdenticalMemoryTypeRequirements(value bool) {
	if value {
		p.ptr.identicalMemoryTypeRequirements = C.VkBool32(1)
	} else {
		p.ptr.identicalMemoryTypeRequirements = C.VkBool32(0)
	}
}

// PhysicalDeviceVulkanMemoryModelFeatures wraps VkPhysicalDeviceVulkanMemoryModelFeatures.
type PhysicalDeviceVulkanMemoryModelFeatures struct {
	ptr *C.VkPhysicalDeviceVulkanMemoryModelFeatures
}

// PhysicalDeviceVulkanMemoryModelFeaturesNil is a null pointer.
var PhysicalDeviceVulkanMemoryModelFeaturesNil PhysicalDeviceVulkanMemoryModelFeatures

// PhysicalDeviceVulkanMemoryModelFeaturesSizeOf is the byte size of VkPhysicalDeviceVulkanMemoryModelFeatures.
const PhysicalDeviceVulkanMemoryModelFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceVulkanMemoryModelFeatures)

// PhysicalDeviceVulkanMemoryModelFeaturesFromPtr converts a raw pointer to a PhysicalDeviceVulkanMemoryModelFeatures.
func PhysicalDeviceVulkanMemoryModelFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceVulkanMemoryModelFeatures {
	return PhysicalDeviceVulkanMemoryModelFeatures{ptr: (*C.VkPhysicalDeviceVulkanMemoryModelFeatures)(ptr)}
}

// PhysicalDeviceVulkanMemoryModelFeaturesAlloc allocates a continuous block of VkPhysicalDeviceVulkanMemoryModelFeatures.
func PhysicalDeviceVulkanMemoryModelFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceVulkanMemoryModelFeatures {
	ptr := alloc.Allocate(PhysicalDeviceVulkanMemoryModelFeaturesSizeOf * count)
	return PhysicalDeviceVulkanMemoryModelFeatures{ptr: (*C.VkPhysicalDeviceVulkanMemoryModelFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceVulkanMemoryModelFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceVulkanMemoryModelFeatures) Offset(offset int) PhysicalDeviceVulkanMemoryModelFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceVulkanMemoryModelFeaturesSizeOf)
	return PhysicalDeviceVulkanMemoryModelFeatures{ptr: (*C.VkPhysicalDeviceVulkanMemoryModelFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceVulkanMemoryModelFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceVulkanMemoryModelFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceVulkanMemoryModelFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceVulkanMemoryModelFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetVulkanMemoryModel returns the value in vulkanMemoryModel.
func (p PhysicalDeviceVulkanMemoryModelFeatures) GetVulkanMemoryModel() bool {
	return p.ptr.vulkanMemoryModel != 0
}

// SetVulkanMemoryModel sets the value in vulkanMemoryModel.
func (p PhysicalDeviceVulkanMemoryModelFeatures) SetVulkanMemoryModel(value bool) {
	if value {
		p.ptr.vulkanMemoryModel = C.VkBool32(1)
	} else {
		p.ptr.vulkanMemoryModel = C.VkBool32(0)
	}
}

// GetVulkanMemoryModelDeviceScope returns the value in vulkanMemoryModelDeviceScope.
func (p PhysicalDeviceVulkanMemoryModelFeatures) GetVulkanMemoryModelDeviceScope() bool {
	return p.ptr.vulkanMemoryModelDeviceScope != 0
}

// SetVulkanMemoryModelDeviceScope sets the value in vulkanMemoryModelDeviceScope.
func (p PhysicalDeviceVulkanMemoryModelFeatures) SetVulkanMemoryModelDeviceScope(value bool) {
	if value {
		p.ptr.vulkanMemoryModelDeviceScope = C.VkBool32(1)
	} else {
		p.ptr.vulkanMemoryModelDeviceScope = C.VkBool32(0)
	}
}

// GetVulkanMemoryModelAvailabilityVisibilityChains returns the value in vulkanMemoryModelAvailabilityVisibilityChains.
func (p PhysicalDeviceVulkanMemoryModelFeatures) GetVulkanMemoryModelAvailabilityVisibilityChains() bool {
	return p.ptr.vulkanMemoryModelAvailabilityVisibilityChains != 0
}

// SetVulkanMemoryModelAvailabilityVisibilityChains sets the value in vulkanMemoryModelAvailabilityVisibilityChains.
func (p PhysicalDeviceVulkanMemoryModelFeatures) SetVulkanMemoryModelAvailabilityVisibilityChains(value bool) {
	if value {
		p.ptr.vulkanMemoryModelAvailabilityVisibilityChains = C.VkBool32(1)
	} else {
		p.ptr.vulkanMemoryModelAvailabilityVisibilityChains = C.VkBool32(0)
	}
}

// PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures wraps VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.
type PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures struct {
	ptr *C.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
}

// PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesNil is a null pointer.
var PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesNil PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures

// PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesSizeOf is the byte size of VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.
const PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesSizeOf = int(C.sizeof_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures)

// PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesFromPtr converts a raw pointer to a PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.
func PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesFromPtr(ptr unsafe.Pointer) PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
	return PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures{ptr: (*C.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures)(ptr)}
}

// PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesAlloc allocates a continuous block of VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.
func PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesAlloc(alloc ffi.Allocator, count int) PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
	ptr := alloc.Allocate(PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesSizeOf * count)
	return PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures{ptr: (*C.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) Offset(offset int) PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesSizeOf)
	return PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures{ptr: (*C.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures)(ptr)}
}

// GetSType returns the value in sType.
func (p PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetShaderZeroInitializeWorkgroupMemory returns the value in shaderZeroInitializeWorkgroupMemory.
func (p PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) GetShaderZeroInitializeWorkgroupMemory() bool {
	return p.ptr.shaderZeroInitializeWorkgroupMemory != 0
}

// SetShaderZeroInitializeWorkgroupMemory sets the value in shaderZeroInitializeWorkgroupMemory.
func (p PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) SetShaderZeroInitializeWorkgroupMemory(value bool) {
	if value {
		p.ptr.shaderZeroInitializeWorkgroupMemory = C.VkBool32(1)
	} else {
		p.ptr.shaderZeroInitializeWorkgroupMemory = C.VkBool32(0)
	}
}

// PipelineCacheCreateInfo wraps VkPipelineCacheCreateInfo.
type PipelineCacheCreateInfo struct {
	ptr *C.VkPipelineCacheCreateInfo
}

// PipelineCacheCreateInfoNil is a null pointer.
var PipelineCacheCreateInfoNil PipelineCacheCreateInfo

// PipelineCacheCreateInfoSizeOf is the byte size of VkPipelineCacheCreateInfo.
const PipelineCacheCreateInfoSizeOf = int(C.sizeof_VkPipelineCacheCreateInfo)

// PipelineCacheCreateInfoFromPtr converts a raw pointer to a PipelineCacheCreateInfo.
func PipelineCacheCreateInfoFromPtr(ptr unsafe.Pointer) PipelineCacheCreateInfo {
	return PipelineCacheCreateInfo{ptr: (*C.VkPipelineCacheCreateInfo)(ptr)}
}

// PipelineCacheCreateInfoAlloc allocates a continuous block of VkPipelineCacheCreateInfo.
func PipelineCacheCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineCacheCreateInfo {
	ptr := alloc.Allocate(PipelineCacheCreateInfoSizeOf * count)
	return PipelineCacheCreateInfo{ptr: (*C.VkPipelineCacheCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineCacheCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineCacheCreateInfo) Offset(offset int) PipelineCacheCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineCacheCreateInfoSizeOf)
	return PipelineCacheCreateInfo{ptr: (*C.VkPipelineCacheCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineCacheCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineCacheCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineCacheCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineCacheCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PipelineCacheCreateInfo) GetFlags() PipelineCacheCreateFlags {
	return PipelineCacheCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PipelineCacheCreateInfo) SetFlags(value PipelineCacheCreateFlags) {
	p.ptr.flags = (C.VkPipelineCacheCreateFlags)(value)
}

// GetInitialDataSize returns the value in initialDataSize.
func (p PipelineCacheCreateInfo) GetInitialDataSize() uintptr {
	return uintptr(p.ptr.initialDataSize)
}

// SetInitialDataSize sets the value in initialDataSize.
func (p PipelineCacheCreateInfo) SetInitialDataSize(value uintptr) {
	p.ptr.initialDataSize = (C.size_t)(value)
}

// GetPInitialData returns the value in pInitialData.
func (p PipelineCacheCreateInfo) GetPInitialData() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pInitialData)
}

// SetPInitialData sets the value in pInitialData.
func (p PipelineCacheCreateInfo) SetPInitialData(value unsafe.Pointer) {
	p.ptr.pInitialData = value
}

// PipelineCacheHeaderVersionOne wraps VkPipelineCacheHeaderVersionOne.
type PipelineCacheHeaderVersionOne struct {
	ptr *C.VkPipelineCacheHeaderVersionOne
}

// PipelineCacheHeaderVersionOneNil is a null pointer.
var PipelineCacheHeaderVersionOneNil PipelineCacheHeaderVersionOne

// PipelineCacheHeaderVersionOneSizeOf is the byte size of VkPipelineCacheHeaderVersionOne.
const PipelineCacheHeaderVersionOneSizeOf = int(C.sizeof_VkPipelineCacheHeaderVersionOne)

// PipelineCacheHeaderVersionOneFromPtr converts a raw pointer to a PipelineCacheHeaderVersionOne.
func PipelineCacheHeaderVersionOneFromPtr(ptr unsafe.Pointer) PipelineCacheHeaderVersionOne {
	return PipelineCacheHeaderVersionOne{ptr: (*C.VkPipelineCacheHeaderVersionOne)(ptr)}
}

// PipelineCacheHeaderVersionOneAlloc allocates a continuous block of VkPipelineCacheHeaderVersionOne.
func PipelineCacheHeaderVersionOneAlloc(alloc ffi.Allocator, count int) PipelineCacheHeaderVersionOne {
	ptr := alloc.Allocate(PipelineCacheHeaderVersionOneSizeOf * count)
	return PipelineCacheHeaderVersionOne{ptr: (*C.VkPipelineCacheHeaderVersionOne)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineCacheHeaderVersionOne) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineCacheHeaderVersionOne) Offset(offset int) PipelineCacheHeaderVersionOne {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineCacheHeaderVersionOneSizeOf)
	return PipelineCacheHeaderVersionOne{ptr: (*C.VkPipelineCacheHeaderVersionOne)(ptr)}
}

// GetHeaderSize returns the value in headerSize.
func (p PipelineCacheHeaderVersionOne) GetHeaderSize() uint32 {
	return uint32(p.ptr.headerSize)
}

// SetHeaderSize sets the value in headerSize.
func (p PipelineCacheHeaderVersionOne) SetHeaderSize(value uint32) {
	p.ptr.headerSize = (C.uint32_t)(value)
}

// GetHeaderVersion returns the value in headerVersion.
func (p PipelineCacheHeaderVersionOne) GetHeaderVersion() PipelineCacheHeaderVersion {
	return PipelineCacheHeaderVersion(p.ptr.headerVersion)
}

// SetHeaderVersion sets the value in headerVersion.
func (p PipelineCacheHeaderVersionOne) SetHeaderVersion(value PipelineCacheHeaderVersion) {
	p.ptr.headerVersion = (C.VkPipelineCacheHeaderVersion)(value)
}

// GetVendorID returns the value in vendorID.
func (p PipelineCacheHeaderVersionOne) GetVendorID() uint32 {
	return uint32(p.ptr.vendorID)
}

// SetVendorID sets the value in vendorID.
func (p PipelineCacheHeaderVersionOne) SetVendorID(value uint32) {
	p.ptr.vendorID = (C.uint32_t)(value)
}

// GetDeviceID returns the value in deviceID.
func (p PipelineCacheHeaderVersionOne) GetDeviceID() uint32 {
	return uint32(p.ptr.deviceID)
}

// SetDeviceID sets the value in deviceID.
func (p PipelineCacheHeaderVersionOne) SetDeviceID(value uint32) {
	p.ptr.deviceID = (C.uint32_t)(value)
}

// PipelineCacheHeaderVersionOne.pipelineCacheUUID is unsupported: category unsupported.

// PipelineColorBlendAttachmentState wraps VkPipelineColorBlendAttachmentState.
type PipelineColorBlendAttachmentState struct {
	ptr *C.VkPipelineColorBlendAttachmentState
}

// PipelineColorBlendAttachmentStateNil is a null pointer.
var PipelineColorBlendAttachmentStateNil PipelineColorBlendAttachmentState

// PipelineColorBlendAttachmentStateSizeOf is the byte size of VkPipelineColorBlendAttachmentState.
const PipelineColorBlendAttachmentStateSizeOf = int(C.sizeof_VkPipelineColorBlendAttachmentState)

// PipelineColorBlendAttachmentStateFromPtr converts a raw pointer to a PipelineColorBlendAttachmentState.
func PipelineColorBlendAttachmentStateFromPtr(ptr unsafe.Pointer) PipelineColorBlendAttachmentState {
	return PipelineColorBlendAttachmentState{ptr: (*C.VkPipelineColorBlendAttachmentState)(ptr)}
}

// PipelineColorBlendAttachmentStateAlloc allocates a continuous block of VkPipelineColorBlendAttachmentState.
func PipelineColorBlendAttachmentStateAlloc(alloc ffi.Allocator, count int) PipelineColorBlendAttachmentState {
	ptr := alloc.Allocate(PipelineColorBlendAttachmentStateSizeOf * count)
	return PipelineColorBlendAttachmentState{ptr: (*C.VkPipelineColorBlendAttachmentState)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineColorBlendAttachmentState) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineColorBlendAttachmentState) Offset(offset int) PipelineColorBlendAttachmentState {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineColorBlendAttachmentStateSizeOf)
	return PipelineColorBlendAttachmentState{ptr: (*C.VkPipelineColorBlendAttachmentState)(ptr)}
}

// GetBlendEnable returns the value in blendEnable.
func (p PipelineColorBlendAttachmentState) GetBlendEnable() bool {
	return p.ptr.blendEnable != 0
}

// SetBlendEnable sets the value in blendEnable.
func (p PipelineColorBlendAttachmentState) SetBlendEnable(value bool) {
	if value {
		p.ptr.blendEnable = C.VkBool32(1)
	} else {
		p.ptr.blendEnable = C.VkBool32(0)
	}
}

// GetSrcColorBlendFactor returns the value in srcColorBlendFactor.
func (p PipelineColorBlendAttachmentState) GetSrcColorBlendFactor() BlendFactor {
	return BlendFactor(p.ptr.srcColorBlendFactor)
}

// SetSrcColorBlendFactor sets the value in srcColorBlendFactor.
func (p PipelineColorBlendAttachmentState) SetSrcColorBlendFactor(value BlendFactor) {
	p.ptr.srcColorBlendFactor = (C.VkBlendFactor)(value)
}

// GetDstColorBlendFactor returns the value in dstColorBlendFactor.
func (p PipelineColorBlendAttachmentState) GetDstColorBlendFactor() BlendFactor {
	return BlendFactor(p.ptr.dstColorBlendFactor)
}

// SetDstColorBlendFactor sets the value in dstColorBlendFactor.
func (p PipelineColorBlendAttachmentState) SetDstColorBlendFactor(value BlendFactor) {
	p.ptr.dstColorBlendFactor = (C.VkBlendFactor)(value)
}

// GetColorBlendOp returns the value in colorBlendOp.
func (p PipelineColorBlendAttachmentState) GetColorBlendOp() BlendOp {
	return BlendOp(p.ptr.colorBlendOp)
}

// SetColorBlendOp sets the value in colorBlendOp.
func (p PipelineColorBlendAttachmentState) SetColorBlendOp(value BlendOp) {
	p.ptr.colorBlendOp = (C.VkBlendOp)(value)
}

// GetSrcAlphaBlendFactor returns the value in srcAlphaBlendFactor.
func (p PipelineColorBlendAttachmentState) GetSrcAlphaBlendFactor() BlendFactor {
	return BlendFactor(p.ptr.srcAlphaBlendFactor)
}

// SetSrcAlphaBlendFactor sets the value in srcAlphaBlendFactor.
func (p PipelineColorBlendAttachmentState) SetSrcAlphaBlendFactor(value BlendFactor) {
	p.ptr.srcAlphaBlendFactor = (C.VkBlendFactor)(value)
}

// GetDstAlphaBlendFactor returns the value in dstAlphaBlendFactor.
func (p PipelineColorBlendAttachmentState) GetDstAlphaBlendFactor() BlendFactor {
	return BlendFactor(p.ptr.dstAlphaBlendFactor)
}

// SetDstAlphaBlendFactor sets the value in dstAlphaBlendFactor.
func (p PipelineColorBlendAttachmentState) SetDstAlphaBlendFactor(value BlendFactor) {
	p.ptr.dstAlphaBlendFactor = (C.VkBlendFactor)(value)
}

// GetAlphaBlendOp returns the value in alphaBlendOp.
func (p PipelineColorBlendAttachmentState) GetAlphaBlendOp() BlendOp {
	return BlendOp(p.ptr.alphaBlendOp)
}

// SetAlphaBlendOp sets the value in alphaBlendOp.
func (p PipelineColorBlendAttachmentState) SetAlphaBlendOp(value BlendOp) {
	p.ptr.alphaBlendOp = (C.VkBlendOp)(value)
}

// GetColorWriteMask returns the value in colorWriteMask.
func (p PipelineColorBlendAttachmentState) GetColorWriteMask() ColorComponentFlags {
	return ColorComponentFlags(p.ptr.colorWriteMask)
}

// SetColorWriteMask sets the value in colorWriteMask.
func (p PipelineColorBlendAttachmentState) SetColorWriteMask(value ColorComponentFlags) {
	p.ptr.colorWriteMask = (C.VkColorComponentFlags)(value)
}

// PipelineColorBlendStateCreateInfo wraps VkPipelineColorBlendStateCreateInfo.
type PipelineColorBlendStateCreateInfo struct {
	ptr *C.VkPipelineColorBlendStateCreateInfo
}

// PipelineColorBlendStateCreateInfoNil is a null pointer.
var PipelineColorBlendStateCreateInfoNil PipelineColorBlendStateCreateInfo

// PipelineColorBlendStateCreateInfoSizeOf is the byte size of VkPipelineColorBlendStateCreateInfo.
const PipelineColorBlendStateCreateInfoSizeOf = int(C.sizeof_VkPipelineColorBlendStateCreateInfo)

// PipelineColorBlendStateCreateInfoFromPtr converts a raw pointer to a PipelineColorBlendStateCreateInfo.
func PipelineColorBlendStateCreateInfoFromPtr(ptr unsafe.Pointer) PipelineColorBlendStateCreateInfo {
	return PipelineColorBlendStateCreateInfo{ptr: (*C.VkPipelineColorBlendStateCreateInfo)(ptr)}
}

// PipelineColorBlendStateCreateInfoAlloc allocates a continuous block of VkPipelineColorBlendStateCreateInfo.
func PipelineColorBlendStateCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineColorBlendStateCreateInfo {
	ptr := alloc.Allocate(PipelineColorBlendStateCreateInfoSizeOf * count)
	return PipelineColorBlendStateCreateInfo{ptr: (*C.VkPipelineColorBlendStateCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineColorBlendStateCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineColorBlendStateCreateInfo) Offset(offset int) PipelineColorBlendStateCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineColorBlendStateCreateInfoSizeOf)
	return PipelineColorBlendStateCreateInfo{ptr: (*C.VkPipelineColorBlendStateCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineColorBlendStateCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineColorBlendStateCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineColorBlendStateCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineColorBlendStateCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PipelineColorBlendStateCreateInfo) GetFlags() PipelineColorBlendStateCreateFlags {
	return PipelineColorBlendStateCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PipelineColorBlendStateCreateInfo) SetFlags(value PipelineColorBlendStateCreateFlags) {
	p.ptr.flags = (C.VkPipelineColorBlendStateCreateFlags)(value)
}

// GetLogicOpEnable returns the value in logicOpEnable.
func (p PipelineColorBlendStateCreateInfo) GetLogicOpEnable() bool {
	return p.ptr.logicOpEnable != 0
}

// SetLogicOpEnable sets the value in logicOpEnable.
func (p PipelineColorBlendStateCreateInfo) SetLogicOpEnable(value bool) {
	if value {
		p.ptr.logicOpEnable = C.VkBool32(1)
	} else {
		p.ptr.logicOpEnable = C.VkBool32(0)
	}
}

// GetLogicOp returns the value in logicOp.
func (p PipelineColorBlendStateCreateInfo) GetLogicOp() LogicOp {
	return LogicOp(p.ptr.logicOp)
}

// SetLogicOp sets the value in logicOp.
func (p PipelineColorBlendStateCreateInfo) SetLogicOp(value LogicOp) {
	p.ptr.logicOp = (C.VkLogicOp)(value)
}

// GetAttachmentCount returns the value in attachmentCount.
func (p PipelineColorBlendStateCreateInfo) GetAttachmentCount() uint32 {
	return uint32(p.ptr.attachmentCount)
}

// SetAttachmentCount sets the value in attachmentCount.
func (p PipelineColorBlendStateCreateInfo) SetAttachmentCount(value uint32) {
	p.ptr.attachmentCount = (C.uint32_t)(value)
}

// GetPAttachments returns the value in pAttachments.
func (p PipelineColorBlendStateCreateInfo) GetPAttachments() PipelineColorBlendAttachmentState {
	return PipelineColorBlendAttachmentState{ptr: p.ptr.pAttachments}
}

// SetPAttachments sets the value in pAttachments.
func (p PipelineColorBlendStateCreateInfo) SetPAttachments(value PipelineColorBlendAttachmentState) {
	p.ptr.pAttachments = value.ptr
}

// PipelineColorBlendStateCreateInfo.blendConstants is unsupported: category unsupported.

// PipelineCreateFlags2CreateInfo wraps VkPipelineCreateFlags2CreateInfo.
type PipelineCreateFlags2CreateInfo struct {
	ptr *C.VkPipelineCreateFlags2CreateInfo
}

// PipelineCreateFlags2CreateInfoNil is a null pointer.
var PipelineCreateFlags2CreateInfoNil PipelineCreateFlags2CreateInfo

// PipelineCreateFlags2CreateInfoSizeOf is the byte size of VkPipelineCreateFlags2CreateInfo.
const PipelineCreateFlags2CreateInfoSizeOf = int(C.sizeof_VkPipelineCreateFlags2CreateInfo)

// PipelineCreateFlags2CreateInfoFromPtr converts a raw pointer to a PipelineCreateFlags2CreateInfo.
func PipelineCreateFlags2CreateInfoFromPtr(ptr unsafe.Pointer) PipelineCreateFlags2CreateInfo {
	return PipelineCreateFlags2CreateInfo{ptr: (*C.VkPipelineCreateFlags2CreateInfo)(ptr)}
}

// PipelineCreateFlags2CreateInfoAlloc allocates a continuous block of VkPipelineCreateFlags2CreateInfo.
func PipelineCreateFlags2CreateInfoAlloc(alloc ffi.Allocator, count int) PipelineCreateFlags2CreateInfo {
	ptr := alloc.Allocate(PipelineCreateFlags2CreateInfoSizeOf * count)
	return PipelineCreateFlags2CreateInfo{ptr: (*C.VkPipelineCreateFlags2CreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineCreateFlags2CreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineCreateFlags2CreateInfo) Offset(offset int) PipelineCreateFlags2CreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineCreateFlags2CreateInfoSizeOf)
	return PipelineCreateFlags2CreateInfo{ptr: (*C.VkPipelineCreateFlags2CreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineCreateFlags2CreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineCreateFlags2CreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineCreateFlags2CreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineCreateFlags2CreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PipelineCreateFlags2CreateInfo) GetFlags() PipelineCreateFlags2 {
	return PipelineCreateFlags2(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PipelineCreateFlags2CreateInfo) SetFlags(value PipelineCreateFlags2) {
	p.ptr.flags = (C.VkPipelineCreateFlags2)(value)
}

// PipelineCreationFeedback wraps VkPipelineCreationFeedback.
type PipelineCreationFeedback struct {
	ptr *C.VkPipelineCreationFeedback
}

// PipelineCreationFeedbackNil is a null pointer.
var PipelineCreationFeedbackNil PipelineCreationFeedback

// PipelineCreationFeedbackSizeOf is the byte size of VkPipelineCreationFeedback.
const PipelineCreationFeedbackSizeOf = int(C.sizeof_VkPipelineCreationFeedback)

// PipelineCreationFeedbackFromPtr converts a raw pointer to a PipelineCreationFeedback.
func PipelineCreationFeedbackFromPtr(ptr unsafe.Pointer) PipelineCreationFeedback {
	return PipelineCreationFeedback{ptr: (*C.VkPipelineCreationFeedback)(ptr)}
}

// PipelineCreationFeedbackAlloc allocates a continuous block of VkPipelineCreationFeedback.
func PipelineCreationFeedbackAlloc(alloc ffi.Allocator, count int) PipelineCreationFeedback {
	ptr := alloc.Allocate(PipelineCreationFeedbackSizeOf * count)
	return PipelineCreationFeedback{ptr: (*C.VkPipelineCreationFeedback)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineCreationFeedback) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineCreationFeedback) Offset(offset int) PipelineCreationFeedback {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineCreationFeedbackSizeOf)
	return PipelineCreationFeedback{ptr: (*C.VkPipelineCreationFeedback)(ptr)}
}

// GetFlags returns the value in flags.
func (p PipelineCreationFeedback) GetFlags() PipelineCreationFeedbackFlags {
	return PipelineCreationFeedbackFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PipelineCreationFeedback) SetFlags(value PipelineCreationFeedbackFlags) {
	p.ptr.flags = (C.VkPipelineCreationFeedbackFlags)(value)
}

// GetDuration returns the value in duration.
func (p PipelineCreationFeedback) GetDuration() uint64 {
	return uint64(p.ptr.duration)
}

// SetDuration sets the value in duration.
func (p PipelineCreationFeedback) SetDuration(value uint64) {
	p.ptr.duration = (C.uint64_t)(value)
}

// PipelineCreationFeedbackCreateInfo wraps VkPipelineCreationFeedbackCreateInfo.
type PipelineCreationFeedbackCreateInfo struct {
	ptr *C.VkPipelineCreationFeedbackCreateInfo
}

// PipelineCreationFeedbackCreateInfoNil is a null pointer.
var PipelineCreationFeedbackCreateInfoNil PipelineCreationFeedbackCreateInfo

// PipelineCreationFeedbackCreateInfoSizeOf is the byte size of VkPipelineCreationFeedbackCreateInfo.
const PipelineCreationFeedbackCreateInfoSizeOf = int(C.sizeof_VkPipelineCreationFeedbackCreateInfo)

// PipelineCreationFeedbackCreateInfoFromPtr converts a raw pointer to a PipelineCreationFeedbackCreateInfo.
func PipelineCreationFeedbackCreateInfoFromPtr(ptr unsafe.Pointer) PipelineCreationFeedbackCreateInfo {
	return PipelineCreationFeedbackCreateInfo{ptr: (*C.VkPipelineCreationFeedbackCreateInfo)(ptr)}
}

// PipelineCreationFeedbackCreateInfoAlloc allocates a continuous block of VkPipelineCreationFeedbackCreateInfo.
func PipelineCreationFeedbackCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineCreationFeedbackCreateInfo {
	ptr := alloc.Allocate(PipelineCreationFeedbackCreateInfoSizeOf * count)
	return PipelineCreationFeedbackCreateInfo{ptr: (*C.VkPipelineCreationFeedbackCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineCreationFeedbackCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineCreationFeedbackCreateInfo) Offset(offset int) PipelineCreationFeedbackCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineCreationFeedbackCreateInfoSizeOf)
	return PipelineCreationFeedbackCreateInfo{ptr: (*C.VkPipelineCreationFeedbackCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineCreationFeedbackCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineCreationFeedbackCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineCreationFeedbackCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineCreationFeedbackCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPPipelineCreationFeedback returns the value in pPipelineCreationFeedback.
func (p PipelineCreationFeedbackCreateInfo) GetPPipelineCreationFeedback() PipelineCreationFeedback {
	return PipelineCreationFeedback{ptr: p.ptr.pPipelineCreationFeedback}
}

// SetPPipelineCreationFeedback sets the value in pPipelineCreationFeedback.
func (p PipelineCreationFeedbackCreateInfo) SetPPipelineCreationFeedback(value PipelineCreationFeedback) {
	p.ptr.pPipelineCreationFeedback = value.ptr
}

// GetPipelineStageCreationFeedbackCount returns the value in pipelineStageCreationFeedbackCount.
func (p PipelineCreationFeedbackCreateInfo) GetPipelineStageCreationFeedbackCount() uint32 {
	return uint32(p.ptr.pipelineStageCreationFeedbackCount)
}

// SetPipelineStageCreationFeedbackCount sets the value in pipelineStageCreationFeedbackCount.
func (p PipelineCreationFeedbackCreateInfo) SetPipelineStageCreationFeedbackCount(value uint32) {
	p.ptr.pipelineStageCreationFeedbackCount = (C.uint32_t)(value)
}

// GetPPipelineStageCreationFeedbacks returns the value in pPipelineStageCreationFeedbacks.
func (p PipelineCreationFeedbackCreateInfo) GetPPipelineStageCreationFeedbacks() PipelineCreationFeedback {
	return PipelineCreationFeedback{ptr: p.ptr.pPipelineStageCreationFeedbacks}
}

// SetPPipelineStageCreationFeedbacks sets the value in pPipelineStageCreationFeedbacks.
func (p PipelineCreationFeedbackCreateInfo) SetPPipelineStageCreationFeedbacks(value PipelineCreationFeedback) {
	p.ptr.pPipelineStageCreationFeedbacks = value.ptr
}

// PipelineDepthStencilStateCreateInfo wraps VkPipelineDepthStencilStateCreateInfo.
type PipelineDepthStencilStateCreateInfo struct {
	ptr *C.VkPipelineDepthStencilStateCreateInfo
}

// PipelineDepthStencilStateCreateInfoNil is a null pointer.
var PipelineDepthStencilStateCreateInfoNil PipelineDepthStencilStateCreateInfo

// PipelineDepthStencilStateCreateInfoSizeOf is the byte size of VkPipelineDepthStencilStateCreateInfo.
const PipelineDepthStencilStateCreateInfoSizeOf = int(C.sizeof_VkPipelineDepthStencilStateCreateInfo)

// PipelineDepthStencilStateCreateInfoFromPtr converts a raw pointer to a PipelineDepthStencilStateCreateInfo.
func PipelineDepthStencilStateCreateInfoFromPtr(ptr unsafe.Pointer) PipelineDepthStencilStateCreateInfo {
	return PipelineDepthStencilStateCreateInfo{ptr: (*C.VkPipelineDepthStencilStateCreateInfo)(ptr)}
}

// PipelineDepthStencilStateCreateInfoAlloc allocates a continuous block of VkPipelineDepthStencilStateCreateInfo.
func PipelineDepthStencilStateCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineDepthStencilStateCreateInfo {
	ptr := alloc.Allocate(PipelineDepthStencilStateCreateInfoSizeOf * count)
	return PipelineDepthStencilStateCreateInfo{ptr: (*C.VkPipelineDepthStencilStateCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineDepthStencilStateCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineDepthStencilStateCreateInfo) Offset(offset int) PipelineDepthStencilStateCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineDepthStencilStateCreateInfoSizeOf)
	return PipelineDepthStencilStateCreateInfo{ptr: (*C.VkPipelineDepthStencilStateCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineDepthStencilStateCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineDepthStencilStateCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineDepthStencilStateCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineDepthStencilStateCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PipelineDepthStencilStateCreateInfo) GetFlags() PipelineDepthStencilStateCreateFlags {
	return PipelineDepthStencilStateCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PipelineDepthStencilStateCreateInfo) SetFlags(value PipelineDepthStencilStateCreateFlags) {
	p.ptr.flags = (C.VkPipelineDepthStencilStateCreateFlags)(value)
}

// GetDepthTestEnable returns the value in depthTestEnable.
func (p PipelineDepthStencilStateCreateInfo) GetDepthTestEnable() bool {
	return p.ptr.depthTestEnable != 0
}

// SetDepthTestEnable sets the value in depthTestEnable.
func (p PipelineDepthStencilStateCreateInfo) SetDepthTestEnable(value bool) {
	if value {
		p.ptr.depthTestEnable = C.VkBool32(1)
	} else {
		p.ptr.depthTestEnable = C.VkBool32(0)
	}
}

// GetDepthWriteEnable returns the value in depthWriteEnable.
func (p PipelineDepthStencilStateCreateInfo) GetDepthWriteEnable() bool {
	return p.ptr.depthWriteEnable != 0
}

// SetDepthWriteEnable sets the value in depthWriteEnable.
func (p PipelineDepthStencilStateCreateInfo) SetDepthWriteEnable(value bool) {
	if value {
		p.ptr.depthWriteEnable = C.VkBool32(1)
	} else {
		p.ptr.depthWriteEnable = C.VkBool32(0)
	}
}

// GetDepthCompareOp returns the value in depthCompareOp.
func (p PipelineDepthStencilStateCreateInfo) GetDepthCompareOp() CompareOp {
	return CompareOp(p.ptr.depthCompareOp)
}

// SetDepthCompareOp sets the value in depthCompareOp.
func (p PipelineDepthStencilStateCreateInfo) SetDepthCompareOp(value CompareOp) {
	p.ptr.depthCompareOp = (C.VkCompareOp)(value)
}

// GetDepthBoundsTestEnable returns the value in depthBoundsTestEnable.
func (p PipelineDepthStencilStateCreateInfo) GetDepthBoundsTestEnable() bool {
	return p.ptr.depthBoundsTestEnable != 0
}

// SetDepthBoundsTestEnable sets the value in depthBoundsTestEnable.
func (p PipelineDepthStencilStateCreateInfo) SetDepthBoundsTestEnable(value bool) {
	if value {
		p.ptr.depthBoundsTestEnable = C.VkBool32(1)
	} else {
		p.ptr.depthBoundsTestEnable = C.VkBool32(0)
	}
}

// GetStencilTestEnable returns the value in stencilTestEnable.
func (p PipelineDepthStencilStateCreateInfo) GetStencilTestEnable() bool {
	return p.ptr.stencilTestEnable != 0
}

// SetStencilTestEnable sets the value in stencilTestEnable.
func (p PipelineDepthStencilStateCreateInfo) SetStencilTestEnable(value bool) {
	if value {
		p.ptr.stencilTestEnable = C.VkBool32(1)
	} else {
		p.ptr.stencilTestEnable = C.VkBool32(0)
	}
}

// RefFront returns pointer to the front field.
func (p PipelineDepthStencilStateCreateInfo) RefFront() StencilOpState {
	return StencilOpState{ptr: (*C.VkStencilOpState)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkPipelineDepthStencilStateCreateInfo_front)))}
}

// RefBack returns pointer to the back field.
func (p PipelineDepthStencilStateCreateInfo) RefBack() StencilOpState {
	return StencilOpState{ptr: (*C.VkStencilOpState)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkPipelineDepthStencilStateCreateInfo_back)))}
}

// GetMinDepthBounds returns the value in minDepthBounds.
func (p PipelineDepthStencilStateCreateInfo) GetMinDepthBounds() float32 {
	return float32(p.ptr.minDepthBounds)
}

// SetMinDepthBounds sets the value in minDepthBounds.
func (p PipelineDepthStencilStateCreateInfo) SetMinDepthBounds(value float32) {
	p.ptr.minDepthBounds = (C.float)(value)
}

// GetMaxDepthBounds returns the value in maxDepthBounds.
func (p PipelineDepthStencilStateCreateInfo) GetMaxDepthBounds() float32 {
	return float32(p.ptr.maxDepthBounds)
}

// SetMaxDepthBounds sets the value in maxDepthBounds.
func (p PipelineDepthStencilStateCreateInfo) SetMaxDepthBounds(value float32) {
	p.ptr.maxDepthBounds = (C.float)(value)
}

// PipelineDynamicStateCreateInfo wraps VkPipelineDynamicStateCreateInfo.
type PipelineDynamicStateCreateInfo struct {
	ptr *C.VkPipelineDynamicStateCreateInfo
}

// PipelineDynamicStateCreateInfoNil is a null pointer.
var PipelineDynamicStateCreateInfoNil PipelineDynamicStateCreateInfo

// PipelineDynamicStateCreateInfoSizeOf is the byte size of VkPipelineDynamicStateCreateInfo.
const PipelineDynamicStateCreateInfoSizeOf = int(C.sizeof_VkPipelineDynamicStateCreateInfo)

// PipelineDynamicStateCreateInfoFromPtr converts a raw pointer to a PipelineDynamicStateCreateInfo.
func PipelineDynamicStateCreateInfoFromPtr(ptr unsafe.Pointer) PipelineDynamicStateCreateInfo {
	return PipelineDynamicStateCreateInfo{ptr: (*C.VkPipelineDynamicStateCreateInfo)(ptr)}
}

// PipelineDynamicStateCreateInfoAlloc allocates a continuous block of VkPipelineDynamicStateCreateInfo.
func PipelineDynamicStateCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineDynamicStateCreateInfo {
	ptr := alloc.Allocate(PipelineDynamicStateCreateInfoSizeOf * count)
	return PipelineDynamicStateCreateInfo{ptr: (*C.VkPipelineDynamicStateCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineDynamicStateCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineDynamicStateCreateInfo) Offset(offset int) PipelineDynamicStateCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineDynamicStateCreateInfoSizeOf)
	return PipelineDynamicStateCreateInfo{ptr: (*C.VkPipelineDynamicStateCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineDynamicStateCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineDynamicStateCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineDynamicStateCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineDynamicStateCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PipelineDynamicStateCreateInfo) GetFlags() PipelineDynamicStateCreateFlags {
	return PipelineDynamicStateCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PipelineDynamicStateCreateInfo) SetFlags(value PipelineDynamicStateCreateFlags) {
	p.ptr.flags = (C.VkPipelineDynamicStateCreateFlags)(value)
}

// GetDynamicStateCount returns the value in dynamicStateCount.
func (p PipelineDynamicStateCreateInfo) GetDynamicStateCount() uint32 {
	return uint32(p.ptr.dynamicStateCount)
}

// SetDynamicStateCount sets the value in dynamicStateCount.
func (p PipelineDynamicStateCreateInfo) SetDynamicStateCount(value uint32) {
	p.ptr.dynamicStateCount = (C.uint32_t)(value)
}

// GetPDynamicStates returns the value in pDynamicStates.
func (p PipelineDynamicStateCreateInfo) GetPDynamicStates() ffi.Ref[DynamicState] {
	return ffi.RefFromPtr[DynamicState](unsafe.Pointer(p.ptr.pDynamicStates))
}

// SetPDynamicStates sets the value in pDynamicStates.
func (p PipelineDynamicStateCreateInfo) SetPDynamicStates(value ffi.Ref[DynamicState]) {
	p.ptr.pDynamicStates = (*C.VkDynamicState)(value.Raw())
}

// PipelineInputAssemblyStateCreateInfo wraps VkPipelineInputAssemblyStateCreateInfo.
type PipelineInputAssemblyStateCreateInfo struct {
	ptr *C.VkPipelineInputAssemblyStateCreateInfo
}

// PipelineInputAssemblyStateCreateInfoNil is a null pointer.
var PipelineInputAssemblyStateCreateInfoNil PipelineInputAssemblyStateCreateInfo

// PipelineInputAssemblyStateCreateInfoSizeOf is the byte size of VkPipelineInputAssemblyStateCreateInfo.
const PipelineInputAssemblyStateCreateInfoSizeOf = int(C.sizeof_VkPipelineInputAssemblyStateCreateInfo)

// PipelineInputAssemblyStateCreateInfoFromPtr converts a raw pointer to a PipelineInputAssemblyStateCreateInfo.
func PipelineInputAssemblyStateCreateInfoFromPtr(ptr unsafe.Pointer) PipelineInputAssemblyStateCreateInfo {
	return PipelineInputAssemblyStateCreateInfo{ptr: (*C.VkPipelineInputAssemblyStateCreateInfo)(ptr)}
}

// PipelineInputAssemblyStateCreateInfoAlloc allocates a continuous block of VkPipelineInputAssemblyStateCreateInfo.
func PipelineInputAssemblyStateCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineInputAssemblyStateCreateInfo {
	ptr := alloc.Allocate(PipelineInputAssemblyStateCreateInfoSizeOf * count)
	return PipelineInputAssemblyStateCreateInfo{ptr: (*C.VkPipelineInputAssemblyStateCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineInputAssemblyStateCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineInputAssemblyStateCreateInfo) Offset(offset int) PipelineInputAssemblyStateCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineInputAssemblyStateCreateInfoSizeOf)
	return PipelineInputAssemblyStateCreateInfo{ptr: (*C.VkPipelineInputAssemblyStateCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineInputAssemblyStateCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineInputAssemblyStateCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineInputAssemblyStateCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineInputAssemblyStateCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PipelineInputAssemblyStateCreateInfo) GetFlags() PipelineInputAssemblyStateCreateFlags {
	return PipelineInputAssemblyStateCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PipelineInputAssemblyStateCreateInfo) SetFlags(value PipelineInputAssemblyStateCreateFlags) {
	p.ptr.flags = (C.VkPipelineInputAssemblyStateCreateFlags)(value)
}

// GetTopology returns the value in topology.
func (p PipelineInputAssemblyStateCreateInfo) GetTopology() PrimitiveTopology {
	return PrimitiveTopology(p.ptr.topology)
}

// SetTopology sets the value in topology.
func (p PipelineInputAssemblyStateCreateInfo) SetTopology(value PrimitiveTopology) {
	p.ptr.topology = (C.VkPrimitiveTopology)(value)
}

// GetPrimitiveRestartEnable returns the value in primitiveRestartEnable.
func (p PipelineInputAssemblyStateCreateInfo) GetPrimitiveRestartEnable() bool {
	return p.ptr.primitiveRestartEnable != 0
}

// SetPrimitiveRestartEnable sets the value in primitiveRestartEnable.
func (p PipelineInputAssemblyStateCreateInfo) SetPrimitiveRestartEnable(value bool) {
	if value {
		p.ptr.primitiveRestartEnable = C.VkBool32(1)
	} else {
		p.ptr.primitiveRestartEnable = C.VkBool32(0)
	}
}

// PipelineLayoutCreateInfo wraps VkPipelineLayoutCreateInfo.
type PipelineLayoutCreateInfo struct {
	ptr *C.VkPipelineLayoutCreateInfo
}

// PipelineLayoutCreateInfoNil is a null pointer.
var PipelineLayoutCreateInfoNil PipelineLayoutCreateInfo

// PipelineLayoutCreateInfoSizeOf is the byte size of VkPipelineLayoutCreateInfo.
const PipelineLayoutCreateInfoSizeOf = int(C.sizeof_VkPipelineLayoutCreateInfo)

// PipelineLayoutCreateInfoFromPtr converts a raw pointer to a PipelineLayoutCreateInfo.
func PipelineLayoutCreateInfoFromPtr(ptr unsafe.Pointer) PipelineLayoutCreateInfo {
	return PipelineLayoutCreateInfo{ptr: (*C.VkPipelineLayoutCreateInfo)(ptr)}
}

// PipelineLayoutCreateInfoAlloc allocates a continuous block of VkPipelineLayoutCreateInfo.
func PipelineLayoutCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineLayoutCreateInfo {
	ptr := alloc.Allocate(PipelineLayoutCreateInfoSizeOf * count)
	return PipelineLayoutCreateInfo{ptr: (*C.VkPipelineLayoutCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineLayoutCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineLayoutCreateInfo) Offset(offset int) PipelineLayoutCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineLayoutCreateInfoSizeOf)
	return PipelineLayoutCreateInfo{ptr: (*C.VkPipelineLayoutCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineLayoutCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineLayoutCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineLayoutCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineLayoutCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PipelineLayoutCreateInfo) GetFlags() PipelineLayoutCreateFlags {
	return PipelineLayoutCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PipelineLayoutCreateInfo) SetFlags(value PipelineLayoutCreateFlags) {
	p.ptr.flags = (C.VkPipelineLayoutCreateFlags)(value)
}

// GetSetLayoutCount returns the value in setLayoutCount.
func (p PipelineLayoutCreateInfo) GetSetLayoutCount() uint32 {
	return uint32(p.ptr.setLayoutCount)
}

// SetSetLayoutCount sets the value in setLayoutCount.
func (p PipelineLayoutCreateInfo) SetSetLayoutCount(value uint32) {
	p.ptr.setLayoutCount = (C.uint32_t)(value)
}

// GetPSetLayouts returns the value in pSetLayouts.
func (p PipelineLayoutCreateInfo) GetPSetLayouts() ffi.Ref[DescriptorSetLayout] {
	return ffi.RefFromPtr[DescriptorSetLayout](unsafe.Pointer(p.ptr.pSetLayouts))
}

// SetPSetLayouts sets the value in pSetLayouts.
func (p PipelineLayoutCreateInfo) SetPSetLayouts(value ffi.Ref[DescriptorSetLayout]) {
	p.ptr.pSetLayouts = (*C.VkDescriptorSetLayout)(value.Raw())
}

// GetPushConstantRangeCount returns the value in pushConstantRangeCount.
func (p PipelineLayoutCreateInfo) GetPushConstantRangeCount() uint32 {
	return uint32(p.ptr.pushConstantRangeCount)
}

// SetPushConstantRangeCount sets the value in pushConstantRangeCount.
func (p PipelineLayoutCreateInfo) SetPushConstantRangeCount(value uint32) {
	p.ptr.pushConstantRangeCount = (C.uint32_t)(value)
}

// GetPPushConstantRanges returns the value in pPushConstantRanges.
func (p PipelineLayoutCreateInfo) GetPPushConstantRanges() PushConstantRange {
	return PushConstantRange{ptr: p.ptr.pPushConstantRanges}
}

// SetPPushConstantRanges sets the value in pPushConstantRanges.
func (p PipelineLayoutCreateInfo) SetPPushConstantRanges(value PushConstantRange) {
	p.ptr.pPushConstantRanges = value.ptr
}

// PipelineMultisampleStateCreateInfo wraps VkPipelineMultisampleStateCreateInfo.
type PipelineMultisampleStateCreateInfo struct {
	ptr *C.VkPipelineMultisampleStateCreateInfo
}

// PipelineMultisampleStateCreateInfoNil is a null pointer.
var PipelineMultisampleStateCreateInfoNil PipelineMultisampleStateCreateInfo

// PipelineMultisampleStateCreateInfoSizeOf is the byte size of VkPipelineMultisampleStateCreateInfo.
const PipelineMultisampleStateCreateInfoSizeOf = int(C.sizeof_VkPipelineMultisampleStateCreateInfo)

// PipelineMultisampleStateCreateInfoFromPtr converts a raw pointer to a PipelineMultisampleStateCreateInfo.
func PipelineMultisampleStateCreateInfoFromPtr(ptr unsafe.Pointer) PipelineMultisampleStateCreateInfo {
	return PipelineMultisampleStateCreateInfo{ptr: (*C.VkPipelineMultisampleStateCreateInfo)(ptr)}
}

// PipelineMultisampleStateCreateInfoAlloc allocates a continuous block of VkPipelineMultisampleStateCreateInfo.
func PipelineMultisampleStateCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineMultisampleStateCreateInfo {
	ptr := alloc.Allocate(PipelineMultisampleStateCreateInfoSizeOf * count)
	return PipelineMultisampleStateCreateInfo{ptr: (*C.VkPipelineMultisampleStateCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineMultisampleStateCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineMultisampleStateCreateInfo) Offset(offset int) PipelineMultisampleStateCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineMultisampleStateCreateInfoSizeOf)
	return PipelineMultisampleStateCreateInfo{ptr: (*C.VkPipelineMultisampleStateCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineMultisampleStateCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineMultisampleStateCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineMultisampleStateCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineMultisampleStateCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PipelineMultisampleStateCreateInfo) GetFlags() PipelineMultisampleStateCreateFlags {
	return PipelineMultisampleStateCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PipelineMultisampleStateCreateInfo) SetFlags(value PipelineMultisampleStateCreateFlags) {
	p.ptr.flags = (C.VkPipelineMultisampleStateCreateFlags)(value)
}

// GetRasterizationSamples returns the value in rasterizationSamples.
func (p PipelineMultisampleStateCreateInfo) GetRasterizationSamples() SampleCountFlags {
	return SampleCountFlags(p.ptr.rasterizationSamples)
}

// SetRasterizationSamples sets the value in rasterizationSamples.
func (p PipelineMultisampleStateCreateInfo) SetRasterizationSamples(value SampleCountFlags) {
	p.ptr.rasterizationSamples = (C.VkSampleCountFlagBits)(value)
}

// GetSampleShadingEnable returns the value in sampleShadingEnable.
func (p PipelineMultisampleStateCreateInfo) GetSampleShadingEnable() bool {
	return p.ptr.sampleShadingEnable != 0
}

// SetSampleShadingEnable sets the value in sampleShadingEnable.
func (p PipelineMultisampleStateCreateInfo) SetSampleShadingEnable(value bool) {
	if value {
		p.ptr.sampleShadingEnable = C.VkBool32(1)
	} else {
		p.ptr.sampleShadingEnable = C.VkBool32(0)
	}
}

// GetMinSampleShading returns the value in minSampleShading.
func (p PipelineMultisampleStateCreateInfo) GetMinSampleShading() float32 {
	return float32(p.ptr.minSampleShading)
}

// SetMinSampleShading sets the value in minSampleShading.
func (p PipelineMultisampleStateCreateInfo) SetMinSampleShading(value float32) {
	p.ptr.minSampleShading = (C.float)(value)
}

// GetPSampleMask returns the value in pSampleMask.
func (p PipelineMultisampleStateCreateInfo) GetPSampleMask() ffi.Ref[SampleMask] {
	return ffi.RefFromPtr[SampleMask](unsafe.Pointer(p.ptr.pSampleMask))
}

// SetPSampleMask sets the value in pSampleMask.
func (p PipelineMultisampleStateCreateInfo) SetPSampleMask(value ffi.Ref[SampleMask]) {
	p.ptr.pSampleMask = (*C.VkSampleMask)(value.Raw())
}

// GetAlphaToCoverageEnable returns the value in alphaToCoverageEnable.
func (p PipelineMultisampleStateCreateInfo) GetAlphaToCoverageEnable() bool {
	return p.ptr.alphaToCoverageEnable != 0
}

// SetAlphaToCoverageEnable sets the value in alphaToCoverageEnable.
func (p PipelineMultisampleStateCreateInfo) SetAlphaToCoverageEnable(value bool) {
	if value {
		p.ptr.alphaToCoverageEnable = C.VkBool32(1)
	} else {
		p.ptr.alphaToCoverageEnable = C.VkBool32(0)
	}
}

// GetAlphaToOneEnable returns the value in alphaToOneEnable.
func (p PipelineMultisampleStateCreateInfo) GetAlphaToOneEnable() bool {
	return p.ptr.alphaToOneEnable != 0
}

// SetAlphaToOneEnable sets the value in alphaToOneEnable.
func (p PipelineMultisampleStateCreateInfo) SetAlphaToOneEnable(value bool) {
	if value {
		p.ptr.alphaToOneEnable = C.VkBool32(1)
	} else {
		p.ptr.alphaToOneEnable = C.VkBool32(0)
	}
}

// PipelineRasterizationLineStateCreateInfo wraps VkPipelineRasterizationLineStateCreateInfo.
type PipelineRasterizationLineStateCreateInfo struct {
	ptr *C.VkPipelineRasterizationLineStateCreateInfo
}

// PipelineRasterizationLineStateCreateInfoNil is a null pointer.
var PipelineRasterizationLineStateCreateInfoNil PipelineRasterizationLineStateCreateInfo

// PipelineRasterizationLineStateCreateInfoSizeOf is the byte size of VkPipelineRasterizationLineStateCreateInfo.
const PipelineRasterizationLineStateCreateInfoSizeOf = int(C.sizeof_VkPipelineRasterizationLineStateCreateInfo)

// PipelineRasterizationLineStateCreateInfoFromPtr converts a raw pointer to a PipelineRasterizationLineStateCreateInfo.
func PipelineRasterizationLineStateCreateInfoFromPtr(ptr unsafe.Pointer) PipelineRasterizationLineStateCreateInfo {
	return PipelineRasterizationLineStateCreateInfo{ptr: (*C.VkPipelineRasterizationLineStateCreateInfo)(ptr)}
}

// PipelineRasterizationLineStateCreateInfoAlloc allocates a continuous block of VkPipelineRasterizationLineStateCreateInfo.
func PipelineRasterizationLineStateCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineRasterizationLineStateCreateInfo {
	ptr := alloc.Allocate(PipelineRasterizationLineStateCreateInfoSizeOf * count)
	return PipelineRasterizationLineStateCreateInfo{ptr: (*C.VkPipelineRasterizationLineStateCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineRasterizationLineStateCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineRasterizationLineStateCreateInfo) Offset(offset int) PipelineRasterizationLineStateCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineRasterizationLineStateCreateInfoSizeOf)
	return PipelineRasterizationLineStateCreateInfo{ptr: (*C.VkPipelineRasterizationLineStateCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineRasterizationLineStateCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineRasterizationLineStateCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineRasterizationLineStateCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineRasterizationLineStateCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetLineRasterizationMode returns the value in lineRasterizationMode.
func (p PipelineRasterizationLineStateCreateInfo) GetLineRasterizationMode() LineRasterizationMode {
	return LineRasterizationMode(p.ptr.lineRasterizationMode)
}

// SetLineRasterizationMode sets the value in lineRasterizationMode.
func (p PipelineRasterizationLineStateCreateInfo) SetLineRasterizationMode(value LineRasterizationMode) {
	p.ptr.lineRasterizationMode = (C.VkLineRasterizationMode)(value)
}

// GetStippledLineEnable returns the value in stippledLineEnable.
func (p PipelineRasterizationLineStateCreateInfo) GetStippledLineEnable() bool {
	return p.ptr.stippledLineEnable != 0
}

// SetStippledLineEnable sets the value in stippledLineEnable.
func (p PipelineRasterizationLineStateCreateInfo) SetStippledLineEnable(value bool) {
	if value {
		p.ptr.stippledLineEnable = C.VkBool32(1)
	} else {
		p.ptr.stippledLineEnable = C.VkBool32(0)
	}
}

// GetLineStippleFactor returns the value in lineStippleFactor.
func (p PipelineRasterizationLineStateCreateInfo) GetLineStippleFactor() uint32 {
	return uint32(p.ptr.lineStippleFactor)
}

// SetLineStippleFactor sets the value in lineStippleFactor.
func (p PipelineRasterizationLineStateCreateInfo) SetLineStippleFactor(value uint32) {
	p.ptr.lineStippleFactor = (C.uint32_t)(value)
}

// GetLineStipplePattern returns the value in lineStipplePattern.
func (p PipelineRasterizationLineStateCreateInfo) GetLineStipplePattern() uint16 {
	return uint16(p.ptr.lineStipplePattern)
}

// SetLineStipplePattern sets the value in lineStipplePattern.
func (p PipelineRasterizationLineStateCreateInfo) SetLineStipplePattern(value uint16) {
	p.ptr.lineStipplePattern = (C.uint16_t)(value)
}

// PipelineRasterizationStateCreateInfo wraps VkPipelineRasterizationStateCreateInfo.
type PipelineRasterizationStateCreateInfo struct {
	ptr *C.VkPipelineRasterizationStateCreateInfo
}

// PipelineRasterizationStateCreateInfoNil is a null pointer.
var PipelineRasterizationStateCreateInfoNil PipelineRasterizationStateCreateInfo

// PipelineRasterizationStateCreateInfoSizeOf is the byte size of VkPipelineRasterizationStateCreateInfo.
const PipelineRasterizationStateCreateInfoSizeOf = int(C.sizeof_VkPipelineRasterizationStateCreateInfo)

// PipelineRasterizationStateCreateInfoFromPtr converts a raw pointer to a PipelineRasterizationStateCreateInfo.
func PipelineRasterizationStateCreateInfoFromPtr(ptr unsafe.Pointer) PipelineRasterizationStateCreateInfo {
	return PipelineRasterizationStateCreateInfo{ptr: (*C.VkPipelineRasterizationStateCreateInfo)(ptr)}
}

// PipelineRasterizationStateCreateInfoAlloc allocates a continuous block of VkPipelineRasterizationStateCreateInfo.
func PipelineRasterizationStateCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineRasterizationStateCreateInfo {
	ptr := alloc.Allocate(PipelineRasterizationStateCreateInfoSizeOf * count)
	return PipelineRasterizationStateCreateInfo{ptr: (*C.VkPipelineRasterizationStateCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineRasterizationStateCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineRasterizationStateCreateInfo) Offset(offset int) PipelineRasterizationStateCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineRasterizationStateCreateInfoSizeOf)
	return PipelineRasterizationStateCreateInfo{ptr: (*C.VkPipelineRasterizationStateCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineRasterizationStateCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineRasterizationStateCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineRasterizationStateCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineRasterizationStateCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PipelineRasterizationStateCreateInfo) GetFlags() PipelineRasterizationStateCreateFlags {
	return PipelineRasterizationStateCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PipelineRasterizationStateCreateInfo) SetFlags(value PipelineRasterizationStateCreateFlags) {
	p.ptr.flags = (C.VkPipelineRasterizationStateCreateFlags)(value)
}

// GetDepthClampEnable returns the value in depthClampEnable.
func (p PipelineRasterizationStateCreateInfo) GetDepthClampEnable() bool {
	return p.ptr.depthClampEnable != 0
}

// SetDepthClampEnable sets the value in depthClampEnable.
func (p PipelineRasterizationStateCreateInfo) SetDepthClampEnable(value bool) {
	if value {
		p.ptr.depthClampEnable = C.VkBool32(1)
	} else {
		p.ptr.depthClampEnable = C.VkBool32(0)
	}
}

// GetRasterizerDiscardEnable returns the value in rasterizerDiscardEnable.
func (p PipelineRasterizationStateCreateInfo) GetRasterizerDiscardEnable() bool {
	return p.ptr.rasterizerDiscardEnable != 0
}

// SetRasterizerDiscardEnable sets the value in rasterizerDiscardEnable.
func (p PipelineRasterizationStateCreateInfo) SetRasterizerDiscardEnable(value bool) {
	if value {
		p.ptr.rasterizerDiscardEnable = C.VkBool32(1)
	} else {
		p.ptr.rasterizerDiscardEnable = C.VkBool32(0)
	}
}

// GetPolygonMode returns the value in polygonMode.
func (p PipelineRasterizationStateCreateInfo) GetPolygonMode() PolygonMode {
	return PolygonMode(p.ptr.polygonMode)
}

// SetPolygonMode sets the value in polygonMode.
func (p PipelineRasterizationStateCreateInfo) SetPolygonMode(value PolygonMode) {
	p.ptr.polygonMode = (C.VkPolygonMode)(value)
}

// GetCullMode returns the value in cullMode.
func (p PipelineRasterizationStateCreateInfo) GetCullMode() CullModeFlags {
	return CullModeFlags(p.ptr.cullMode)
}

// SetCullMode sets the value in cullMode.
func (p PipelineRasterizationStateCreateInfo) SetCullMode(value CullModeFlags) {
	p.ptr.cullMode = (C.VkCullModeFlags)(value)
}

// GetFrontFace returns the value in frontFace.
func (p PipelineRasterizationStateCreateInfo) GetFrontFace() FrontFace {
	return FrontFace(p.ptr.frontFace)
}

// SetFrontFace sets the value in frontFace.
func (p PipelineRasterizationStateCreateInfo) SetFrontFace(value FrontFace) {
	p.ptr.frontFace = (C.VkFrontFace)(value)
}

// GetDepthBiasEnable returns the value in depthBiasEnable.
func (p PipelineRasterizationStateCreateInfo) GetDepthBiasEnable() bool {
	return p.ptr.depthBiasEnable != 0
}

// SetDepthBiasEnable sets the value in depthBiasEnable.
func (p PipelineRasterizationStateCreateInfo) SetDepthBiasEnable(value bool) {
	if value {
		p.ptr.depthBiasEnable = C.VkBool32(1)
	} else {
		p.ptr.depthBiasEnable = C.VkBool32(0)
	}
}

// GetDepthBiasConstantFactor returns the value in depthBiasConstantFactor.
func (p PipelineRasterizationStateCreateInfo) GetDepthBiasConstantFactor() float32 {
	return float32(p.ptr.depthBiasConstantFactor)
}

// SetDepthBiasConstantFactor sets the value in depthBiasConstantFactor.
func (p PipelineRasterizationStateCreateInfo) SetDepthBiasConstantFactor(value float32) {
	p.ptr.depthBiasConstantFactor = (C.float)(value)
}

// GetDepthBiasClamp returns the value in depthBiasClamp.
func (p PipelineRasterizationStateCreateInfo) GetDepthBiasClamp() float32 {
	return float32(p.ptr.depthBiasClamp)
}

// SetDepthBiasClamp sets the value in depthBiasClamp.
func (p PipelineRasterizationStateCreateInfo) SetDepthBiasClamp(value float32) {
	p.ptr.depthBiasClamp = (C.float)(value)
}

// GetDepthBiasSlopeFactor returns the value in depthBiasSlopeFactor.
func (p PipelineRasterizationStateCreateInfo) GetDepthBiasSlopeFactor() float32 {
	return float32(p.ptr.depthBiasSlopeFactor)
}

// SetDepthBiasSlopeFactor sets the value in depthBiasSlopeFactor.
func (p PipelineRasterizationStateCreateInfo) SetDepthBiasSlopeFactor(value float32) {
	p.ptr.depthBiasSlopeFactor = (C.float)(value)
}

// GetLineWidth returns the value in lineWidth.
func (p PipelineRasterizationStateCreateInfo) GetLineWidth() float32 {
	return float32(p.ptr.lineWidth)
}

// SetLineWidth sets the value in lineWidth.
func (p PipelineRasterizationStateCreateInfo) SetLineWidth(value float32) {
	p.ptr.lineWidth = (C.float)(value)
}

// PipelineRenderingCreateInfo wraps VkPipelineRenderingCreateInfo.
type PipelineRenderingCreateInfo struct {
	ptr *C.VkPipelineRenderingCreateInfo
}

// PipelineRenderingCreateInfoNil is a null pointer.
var PipelineRenderingCreateInfoNil PipelineRenderingCreateInfo

// PipelineRenderingCreateInfoSizeOf is the byte size of VkPipelineRenderingCreateInfo.
const PipelineRenderingCreateInfoSizeOf = int(C.sizeof_VkPipelineRenderingCreateInfo)

// PipelineRenderingCreateInfoFromPtr converts a raw pointer to a PipelineRenderingCreateInfo.
func PipelineRenderingCreateInfoFromPtr(ptr unsafe.Pointer) PipelineRenderingCreateInfo {
	return PipelineRenderingCreateInfo{ptr: (*C.VkPipelineRenderingCreateInfo)(ptr)}
}

// PipelineRenderingCreateInfoAlloc allocates a continuous block of VkPipelineRenderingCreateInfo.
func PipelineRenderingCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineRenderingCreateInfo {
	ptr := alloc.Allocate(PipelineRenderingCreateInfoSizeOf * count)
	return PipelineRenderingCreateInfo{ptr: (*C.VkPipelineRenderingCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineRenderingCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineRenderingCreateInfo) Offset(offset int) PipelineRenderingCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineRenderingCreateInfoSizeOf)
	return PipelineRenderingCreateInfo{ptr: (*C.VkPipelineRenderingCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineRenderingCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineRenderingCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineRenderingCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineRenderingCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetViewMask returns the value in viewMask.
func (p PipelineRenderingCreateInfo) GetViewMask() uint32 {
	return uint32(p.ptr.viewMask)
}

// SetViewMask sets the value in viewMask.
func (p PipelineRenderingCreateInfo) SetViewMask(value uint32) {
	p.ptr.viewMask = (C.uint32_t)(value)
}

// GetColorAttachmentCount returns the value in colorAttachmentCount.
func (p PipelineRenderingCreateInfo) GetColorAttachmentCount() uint32 {
	return uint32(p.ptr.colorAttachmentCount)
}

// SetColorAttachmentCount sets the value in colorAttachmentCount.
func (p PipelineRenderingCreateInfo) SetColorAttachmentCount(value uint32) {
	p.ptr.colorAttachmentCount = (C.uint32_t)(value)
}

// GetPColorAttachmentFormats returns the value in pColorAttachmentFormats.
func (p PipelineRenderingCreateInfo) GetPColorAttachmentFormats() ffi.Ref[Format] {
	return ffi.RefFromPtr[Format](unsafe.Pointer(p.ptr.pColorAttachmentFormats))
}

// SetPColorAttachmentFormats sets the value in pColorAttachmentFormats.
func (p PipelineRenderingCreateInfo) SetPColorAttachmentFormats(value ffi.Ref[Format]) {
	p.ptr.pColorAttachmentFormats = (*C.VkFormat)(value.Raw())
}

// GetDepthAttachmentFormat returns the value in depthAttachmentFormat.
func (p PipelineRenderingCreateInfo) GetDepthAttachmentFormat() Format {
	return Format(p.ptr.depthAttachmentFormat)
}

// SetDepthAttachmentFormat sets the value in depthAttachmentFormat.
func (p PipelineRenderingCreateInfo) SetDepthAttachmentFormat(value Format) {
	p.ptr.depthAttachmentFormat = (C.VkFormat)(value)
}

// GetStencilAttachmentFormat returns the value in stencilAttachmentFormat.
func (p PipelineRenderingCreateInfo) GetStencilAttachmentFormat() Format {
	return Format(p.ptr.stencilAttachmentFormat)
}

// SetStencilAttachmentFormat sets the value in stencilAttachmentFormat.
func (p PipelineRenderingCreateInfo) SetStencilAttachmentFormat(value Format) {
	p.ptr.stencilAttachmentFormat = (C.VkFormat)(value)
}

// PipelineRobustnessCreateInfo wraps VkPipelineRobustnessCreateInfo.
type PipelineRobustnessCreateInfo struct {
	ptr *C.VkPipelineRobustnessCreateInfo
}

// PipelineRobustnessCreateInfoNil is a null pointer.
var PipelineRobustnessCreateInfoNil PipelineRobustnessCreateInfo

// PipelineRobustnessCreateInfoSizeOf is the byte size of VkPipelineRobustnessCreateInfo.
const PipelineRobustnessCreateInfoSizeOf = int(C.sizeof_VkPipelineRobustnessCreateInfo)

// PipelineRobustnessCreateInfoFromPtr converts a raw pointer to a PipelineRobustnessCreateInfo.
func PipelineRobustnessCreateInfoFromPtr(ptr unsafe.Pointer) PipelineRobustnessCreateInfo {
	return PipelineRobustnessCreateInfo{ptr: (*C.VkPipelineRobustnessCreateInfo)(ptr)}
}

// PipelineRobustnessCreateInfoAlloc allocates a continuous block of VkPipelineRobustnessCreateInfo.
func PipelineRobustnessCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineRobustnessCreateInfo {
	ptr := alloc.Allocate(PipelineRobustnessCreateInfoSizeOf * count)
	return PipelineRobustnessCreateInfo{ptr: (*C.VkPipelineRobustnessCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineRobustnessCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineRobustnessCreateInfo) Offset(offset int) PipelineRobustnessCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineRobustnessCreateInfoSizeOf)
	return PipelineRobustnessCreateInfo{ptr: (*C.VkPipelineRobustnessCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineRobustnessCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineRobustnessCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineRobustnessCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineRobustnessCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetStorageBuffers returns the value in storageBuffers.
func (p PipelineRobustnessCreateInfo) GetStorageBuffers() PipelineRobustnessBufferBehavior {
	return PipelineRobustnessBufferBehavior(p.ptr.storageBuffers)
}

// SetStorageBuffers sets the value in storageBuffers.
func (p PipelineRobustnessCreateInfo) SetStorageBuffers(value PipelineRobustnessBufferBehavior) {
	p.ptr.storageBuffers = (C.VkPipelineRobustnessBufferBehavior)(value)
}

// GetUniformBuffers returns the value in uniformBuffers.
func (p PipelineRobustnessCreateInfo) GetUniformBuffers() PipelineRobustnessBufferBehavior {
	return PipelineRobustnessBufferBehavior(p.ptr.uniformBuffers)
}

// SetUniformBuffers sets the value in uniformBuffers.
func (p PipelineRobustnessCreateInfo) SetUniformBuffers(value PipelineRobustnessBufferBehavior) {
	p.ptr.uniformBuffers = (C.VkPipelineRobustnessBufferBehavior)(value)
}

// GetVertexInputs returns the value in vertexInputs.
func (p PipelineRobustnessCreateInfo) GetVertexInputs() PipelineRobustnessBufferBehavior {
	return PipelineRobustnessBufferBehavior(p.ptr.vertexInputs)
}

// SetVertexInputs sets the value in vertexInputs.
func (p PipelineRobustnessCreateInfo) SetVertexInputs(value PipelineRobustnessBufferBehavior) {
	p.ptr.vertexInputs = (C.VkPipelineRobustnessBufferBehavior)(value)
}

// GetImages returns the value in images.
func (p PipelineRobustnessCreateInfo) GetImages() PipelineRobustnessImageBehavior {
	return PipelineRobustnessImageBehavior(p.ptr.images)
}

// SetImages sets the value in images.
func (p PipelineRobustnessCreateInfo) SetImages(value PipelineRobustnessImageBehavior) {
	p.ptr.images = (C.VkPipelineRobustnessImageBehavior)(value)
}

// PipelineShaderStageCreateInfo wraps VkPipelineShaderStageCreateInfo.
type PipelineShaderStageCreateInfo struct {
	ptr *C.VkPipelineShaderStageCreateInfo
}

// PipelineShaderStageCreateInfoNil is a null pointer.
var PipelineShaderStageCreateInfoNil PipelineShaderStageCreateInfo

// PipelineShaderStageCreateInfoSizeOf is the byte size of VkPipelineShaderStageCreateInfo.
const PipelineShaderStageCreateInfoSizeOf = int(C.sizeof_VkPipelineShaderStageCreateInfo)

// PipelineShaderStageCreateInfoFromPtr converts a raw pointer to a PipelineShaderStageCreateInfo.
func PipelineShaderStageCreateInfoFromPtr(ptr unsafe.Pointer) PipelineShaderStageCreateInfo {
	return PipelineShaderStageCreateInfo{ptr: (*C.VkPipelineShaderStageCreateInfo)(ptr)}
}

// PipelineShaderStageCreateInfoAlloc allocates a continuous block of VkPipelineShaderStageCreateInfo.
func PipelineShaderStageCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineShaderStageCreateInfo {
	ptr := alloc.Allocate(PipelineShaderStageCreateInfoSizeOf * count)
	return PipelineShaderStageCreateInfo{ptr: (*C.VkPipelineShaderStageCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineShaderStageCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineShaderStageCreateInfo) Offset(offset int) PipelineShaderStageCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineShaderStageCreateInfoSizeOf)
	return PipelineShaderStageCreateInfo{ptr: (*C.VkPipelineShaderStageCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineShaderStageCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineShaderStageCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineShaderStageCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineShaderStageCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PipelineShaderStageCreateInfo) GetFlags() PipelineShaderStageCreateFlags {
	return PipelineShaderStageCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PipelineShaderStageCreateInfo) SetFlags(value PipelineShaderStageCreateFlags) {
	p.ptr.flags = (C.VkPipelineShaderStageCreateFlags)(value)
}

// GetStage returns the value in stage.
func (p PipelineShaderStageCreateInfo) GetStage() ShaderStageFlags {
	return ShaderStageFlags(p.ptr.stage)
}

// SetStage sets the value in stage.
func (p PipelineShaderStageCreateInfo) SetStage(value ShaderStageFlags) {
	p.ptr.stage = (C.VkShaderStageFlagBits)(value)
}

// GetModule returns the value in module.
func (p PipelineShaderStageCreateInfo) GetModule() ShaderModule {
	return ShaderModule(p.ptr.module)
}

// SetModule sets the value in module.
func (p PipelineShaderStageCreateInfo) SetModule(value ShaderModule) {
	p.ptr.module = (C.VkShaderModule)(value)
}

// GetPName returns the value in pName.
func (p PipelineShaderStageCreateInfo) GetPName() ffi.CString {
	return ffi.CStringFromPtr((unsafe.Pointer)(p.ptr.pName))
}

// SetPName sets the value in pName.
func (p PipelineShaderStageCreateInfo) SetPName(value ffi.CString) {
	p.ptr.pName = (*C.char)(value.Raw())
}

// GetPSpecializationInfo returns the value in pSpecializationInfo.
func (p PipelineShaderStageCreateInfo) GetPSpecializationInfo() SpecializationInfo {
	return SpecializationInfo{ptr: p.ptr.pSpecializationInfo}
}

// SetPSpecializationInfo sets the value in pSpecializationInfo.
func (p PipelineShaderStageCreateInfo) SetPSpecializationInfo(value SpecializationInfo) {
	p.ptr.pSpecializationInfo = value.ptr
}

// PipelineShaderStageRequiredSubgroupSizeCreateInfo wraps VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.
type PipelineShaderStageRequiredSubgroupSizeCreateInfo struct {
	ptr *C.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo
}

// PipelineShaderStageRequiredSubgroupSizeCreateInfoNil is a null pointer.
var PipelineShaderStageRequiredSubgroupSizeCreateInfoNil PipelineShaderStageRequiredSubgroupSizeCreateInfo

// PipelineShaderStageRequiredSubgroupSizeCreateInfoSizeOf is the byte size of VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.
const PipelineShaderStageRequiredSubgroupSizeCreateInfoSizeOf = int(C.sizeof_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo)

// PipelineShaderStageRequiredSubgroupSizeCreateInfoFromPtr converts a raw pointer to a PipelineShaderStageRequiredSubgroupSizeCreateInfo.
func PipelineShaderStageRequiredSubgroupSizeCreateInfoFromPtr(ptr unsafe.Pointer) PipelineShaderStageRequiredSubgroupSizeCreateInfo {
	return PipelineShaderStageRequiredSubgroupSizeCreateInfo{ptr: (*C.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo)(ptr)}
}

// PipelineShaderStageRequiredSubgroupSizeCreateInfoAlloc allocates a continuous block of VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.
func PipelineShaderStageRequiredSubgroupSizeCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineShaderStageRequiredSubgroupSizeCreateInfo {
	ptr := alloc.Allocate(PipelineShaderStageRequiredSubgroupSizeCreateInfoSizeOf * count)
	return PipelineShaderStageRequiredSubgroupSizeCreateInfo{ptr: (*C.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineShaderStageRequiredSubgroupSizeCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineShaderStageRequiredSubgroupSizeCreateInfo) Offset(offset int) PipelineShaderStageRequiredSubgroupSizeCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineShaderStageRequiredSubgroupSizeCreateInfoSizeOf)
	return PipelineShaderStageRequiredSubgroupSizeCreateInfo{ptr: (*C.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineShaderStageRequiredSubgroupSizeCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineShaderStageRequiredSubgroupSizeCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineShaderStageRequiredSubgroupSizeCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineShaderStageRequiredSubgroupSizeCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetRequiredSubgroupSize returns the value in requiredSubgroupSize.
func (p PipelineShaderStageRequiredSubgroupSizeCreateInfo) GetRequiredSubgroupSize() uint32 {
	return uint32(p.ptr.requiredSubgroupSize)
}

// SetRequiredSubgroupSize sets the value in requiredSubgroupSize.
func (p PipelineShaderStageRequiredSubgroupSizeCreateInfo) SetRequiredSubgroupSize(value uint32) {
	p.ptr.requiredSubgroupSize = (C.uint32_t)(value)
}

// PipelineTessellationDomainOriginStateCreateInfo wraps VkPipelineTessellationDomainOriginStateCreateInfo.
type PipelineTessellationDomainOriginStateCreateInfo struct {
	ptr *C.VkPipelineTessellationDomainOriginStateCreateInfo
}

// PipelineTessellationDomainOriginStateCreateInfoNil is a null pointer.
var PipelineTessellationDomainOriginStateCreateInfoNil PipelineTessellationDomainOriginStateCreateInfo

// PipelineTessellationDomainOriginStateCreateInfoSizeOf is the byte size of VkPipelineTessellationDomainOriginStateCreateInfo.
const PipelineTessellationDomainOriginStateCreateInfoSizeOf = int(C.sizeof_VkPipelineTessellationDomainOriginStateCreateInfo)

// PipelineTessellationDomainOriginStateCreateInfoFromPtr converts a raw pointer to a PipelineTessellationDomainOriginStateCreateInfo.
func PipelineTessellationDomainOriginStateCreateInfoFromPtr(ptr unsafe.Pointer) PipelineTessellationDomainOriginStateCreateInfo {
	return PipelineTessellationDomainOriginStateCreateInfo{ptr: (*C.VkPipelineTessellationDomainOriginStateCreateInfo)(ptr)}
}

// PipelineTessellationDomainOriginStateCreateInfoAlloc allocates a continuous block of VkPipelineTessellationDomainOriginStateCreateInfo.
func PipelineTessellationDomainOriginStateCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineTessellationDomainOriginStateCreateInfo {
	ptr := alloc.Allocate(PipelineTessellationDomainOriginStateCreateInfoSizeOf * count)
	return PipelineTessellationDomainOriginStateCreateInfo{ptr: (*C.VkPipelineTessellationDomainOriginStateCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineTessellationDomainOriginStateCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineTessellationDomainOriginStateCreateInfo) Offset(offset int) PipelineTessellationDomainOriginStateCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineTessellationDomainOriginStateCreateInfoSizeOf)
	return PipelineTessellationDomainOriginStateCreateInfo{ptr: (*C.VkPipelineTessellationDomainOriginStateCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineTessellationDomainOriginStateCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineTessellationDomainOriginStateCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineTessellationDomainOriginStateCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineTessellationDomainOriginStateCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDomainOrigin returns the value in domainOrigin.
func (p PipelineTessellationDomainOriginStateCreateInfo) GetDomainOrigin() TessellationDomainOrigin {
	return TessellationDomainOrigin(p.ptr.domainOrigin)
}

// SetDomainOrigin sets the value in domainOrigin.
func (p PipelineTessellationDomainOriginStateCreateInfo) SetDomainOrigin(value TessellationDomainOrigin) {
	p.ptr.domainOrigin = (C.VkTessellationDomainOrigin)(value)
}

// PipelineTessellationStateCreateInfo wraps VkPipelineTessellationStateCreateInfo.
type PipelineTessellationStateCreateInfo struct {
	ptr *C.VkPipelineTessellationStateCreateInfo
}

// PipelineTessellationStateCreateInfoNil is a null pointer.
var PipelineTessellationStateCreateInfoNil PipelineTessellationStateCreateInfo

// PipelineTessellationStateCreateInfoSizeOf is the byte size of VkPipelineTessellationStateCreateInfo.
const PipelineTessellationStateCreateInfoSizeOf = int(C.sizeof_VkPipelineTessellationStateCreateInfo)

// PipelineTessellationStateCreateInfoFromPtr converts a raw pointer to a PipelineTessellationStateCreateInfo.
func PipelineTessellationStateCreateInfoFromPtr(ptr unsafe.Pointer) PipelineTessellationStateCreateInfo {
	return PipelineTessellationStateCreateInfo{ptr: (*C.VkPipelineTessellationStateCreateInfo)(ptr)}
}

// PipelineTessellationStateCreateInfoAlloc allocates a continuous block of VkPipelineTessellationStateCreateInfo.
func PipelineTessellationStateCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineTessellationStateCreateInfo {
	ptr := alloc.Allocate(PipelineTessellationStateCreateInfoSizeOf * count)
	return PipelineTessellationStateCreateInfo{ptr: (*C.VkPipelineTessellationStateCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineTessellationStateCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineTessellationStateCreateInfo) Offset(offset int) PipelineTessellationStateCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineTessellationStateCreateInfoSizeOf)
	return PipelineTessellationStateCreateInfo{ptr: (*C.VkPipelineTessellationStateCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineTessellationStateCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineTessellationStateCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineTessellationStateCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineTessellationStateCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PipelineTessellationStateCreateInfo) GetFlags() PipelineTessellationStateCreateFlags {
	return PipelineTessellationStateCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PipelineTessellationStateCreateInfo) SetFlags(value PipelineTessellationStateCreateFlags) {
	p.ptr.flags = (C.VkPipelineTessellationStateCreateFlags)(value)
}

// GetPatchControlPoints returns the value in patchControlPoints.
func (p PipelineTessellationStateCreateInfo) GetPatchControlPoints() uint32 {
	return uint32(p.ptr.patchControlPoints)
}

// SetPatchControlPoints sets the value in patchControlPoints.
func (p PipelineTessellationStateCreateInfo) SetPatchControlPoints(value uint32) {
	p.ptr.patchControlPoints = (C.uint32_t)(value)
}

// PipelineVertexInputDivisorStateCreateInfo wraps VkPipelineVertexInputDivisorStateCreateInfo.
type PipelineVertexInputDivisorStateCreateInfo struct {
	ptr *C.VkPipelineVertexInputDivisorStateCreateInfo
}

// PipelineVertexInputDivisorStateCreateInfoNil is a null pointer.
var PipelineVertexInputDivisorStateCreateInfoNil PipelineVertexInputDivisorStateCreateInfo

// PipelineVertexInputDivisorStateCreateInfoSizeOf is the byte size of VkPipelineVertexInputDivisorStateCreateInfo.
const PipelineVertexInputDivisorStateCreateInfoSizeOf = int(C.sizeof_VkPipelineVertexInputDivisorStateCreateInfo)

// PipelineVertexInputDivisorStateCreateInfoFromPtr converts a raw pointer to a PipelineVertexInputDivisorStateCreateInfo.
func PipelineVertexInputDivisorStateCreateInfoFromPtr(ptr unsafe.Pointer) PipelineVertexInputDivisorStateCreateInfo {
	return PipelineVertexInputDivisorStateCreateInfo{ptr: (*C.VkPipelineVertexInputDivisorStateCreateInfo)(ptr)}
}

// PipelineVertexInputDivisorStateCreateInfoAlloc allocates a continuous block of VkPipelineVertexInputDivisorStateCreateInfo.
func PipelineVertexInputDivisorStateCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineVertexInputDivisorStateCreateInfo {
	ptr := alloc.Allocate(PipelineVertexInputDivisorStateCreateInfoSizeOf * count)
	return PipelineVertexInputDivisorStateCreateInfo{ptr: (*C.VkPipelineVertexInputDivisorStateCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineVertexInputDivisorStateCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineVertexInputDivisorStateCreateInfo) Offset(offset int) PipelineVertexInputDivisorStateCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineVertexInputDivisorStateCreateInfoSizeOf)
	return PipelineVertexInputDivisorStateCreateInfo{ptr: (*C.VkPipelineVertexInputDivisorStateCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineVertexInputDivisorStateCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineVertexInputDivisorStateCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineVertexInputDivisorStateCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineVertexInputDivisorStateCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetVertexBindingDivisorCount returns the value in vertexBindingDivisorCount.
func (p PipelineVertexInputDivisorStateCreateInfo) GetVertexBindingDivisorCount() uint32 {
	return uint32(p.ptr.vertexBindingDivisorCount)
}

// SetVertexBindingDivisorCount sets the value in vertexBindingDivisorCount.
func (p PipelineVertexInputDivisorStateCreateInfo) SetVertexBindingDivisorCount(value uint32) {
	p.ptr.vertexBindingDivisorCount = (C.uint32_t)(value)
}

// GetPVertexBindingDivisors returns the value in pVertexBindingDivisors.
func (p PipelineVertexInputDivisorStateCreateInfo) GetPVertexBindingDivisors() VertexInputBindingDivisorDescription {
	return VertexInputBindingDivisorDescription{ptr: p.ptr.pVertexBindingDivisors}
}

// SetPVertexBindingDivisors sets the value in pVertexBindingDivisors.
func (p PipelineVertexInputDivisorStateCreateInfo) SetPVertexBindingDivisors(value VertexInputBindingDivisorDescription) {
	p.ptr.pVertexBindingDivisors = value.ptr
}

// PipelineVertexInputStateCreateInfo wraps VkPipelineVertexInputStateCreateInfo.
type PipelineVertexInputStateCreateInfo struct {
	ptr *C.VkPipelineVertexInputStateCreateInfo
}

// PipelineVertexInputStateCreateInfoNil is a null pointer.
var PipelineVertexInputStateCreateInfoNil PipelineVertexInputStateCreateInfo

// PipelineVertexInputStateCreateInfoSizeOf is the byte size of VkPipelineVertexInputStateCreateInfo.
const PipelineVertexInputStateCreateInfoSizeOf = int(C.sizeof_VkPipelineVertexInputStateCreateInfo)

// PipelineVertexInputStateCreateInfoFromPtr converts a raw pointer to a PipelineVertexInputStateCreateInfo.
func PipelineVertexInputStateCreateInfoFromPtr(ptr unsafe.Pointer) PipelineVertexInputStateCreateInfo {
	return PipelineVertexInputStateCreateInfo{ptr: (*C.VkPipelineVertexInputStateCreateInfo)(ptr)}
}

// PipelineVertexInputStateCreateInfoAlloc allocates a continuous block of VkPipelineVertexInputStateCreateInfo.
func PipelineVertexInputStateCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineVertexInputStateCreateInfo {
	ptr := alloc.Allocate(PipelineVertexInputStateCreateInfoSizeOf * count)
	return PipelineVertexInputStateCreateInfo{ptr: (*C.VkPipelineVertexInputStateCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineVertexInputStateCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineVertexInputStateCreateInfo) Offset(offset int) PipelineVertexInputStateCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineVertexInputStateCreateInfoSizeOf)
	return PipelineVertexInputStateCreateInfo{ptr: (*C.VkPipelineVertexInputStateCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineVertexInputStateCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineVertexInputStateCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineVertexInputStateCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineVertexInputStateCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PipelineVertexInputStateCreateInfo) GetFlags() PipelineVertexInputStateCreateFlags {
	return PipelineVertexInputStateCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PipelineVertexInputStateCreateInfo) SetFlags(value PipelineVertexInputStateCreateFlags) {
	p.ptr.flags = (C.VkPipelineVertexInputStateCreateFlags)(value)
}

// GetVertexBindingDescriptionCount returns the value in vertexBindingDescriptionCount.
func (p PipelineVertexInputStateCreateInfo) GetVertexBindingDescriptionCount() uint32 {
	return uint32(p.ptr.vertexBindingDescriptionCount)
}

// SetVertexBindingDescriptionCount sets the value in vertexBindingDescriptionCount.
func (p PipelineVertexInputStateCreateInfo) SetVertexBindingDescriptionCount(value uint32) {
	p.ptr.vertexBindingDescriptionCount = (C.uint32_t)(value)
}

// GetPVertexBindingDescriptions returns the value in pVertexBindingDescriptions.
func (p PipelineVertexInputStateCreateInfo) GetPVertexBindingDescriptions() VertexInputBindingDescription {
	return VertexInputBindingDescription{ptr: p.ptr.pVertexBindingDescriptions}
}

// SetPVertexBindingDescriptions sets the value in pVertexBindingDescriptions.
func (p PipelineVertexInputStateCreateInfo) SetPVertexBindingDescriptions(value VertexInputBindingDescription) {
	p.ptr.pVertexBindingDescriptions = value.ptr
}

// GetVertexAttributeDescriptionCount returns the value in vertexAttributeDescriptionCount.
func (p PipelineVertexInputStateCreateInfo) GetVertexAttributeDescriptionCount() uint32 {
	return uint32(p.ptr.vertexAttributeDescriptionCount)
}

// SetVertexAttributeDescriptionCount sets the value in vertexAttributeDescriptionCount.
func (p PipelineVertexInputStateCreateInfo) SetVertexAttributeDescriptionCount(value uint32) {
	p.ptr.vertexAttributeDescriptionCount = (C.uint32_t)(value)
}

// GetPVertexAttributeDescriptions returns the value in pVertexAttributeDescriptions.
func (p PipelineVertexInputStateCreateInfo) GetPVertexAttributeDescriptions() VertexInputAttributeDescription {
	return VertexInputAttributeDescription{ptr: p.ptr.pVertexAttributeDescriptions}
}

// SetPVertexAttributeDescriptions sets the value in pVertexAttributeDescriptions.
func (p PipelineVertexInputStateCreateInfo) SetPVertexAttributeDescriptions(value VertexInputAttributeDescription) {
	p.ptr.pVertexAttributeDescriptions = value.ptr
}

// PipelineViewportStateCreateInfo wraps VkPipelineViewportStateCreateInfo.
type PipelineViewportStateCreateInfo struct {
	ptr *C.VkPipelineViewportStateCreateInfo
}

// PipelineViewportStateCreateInfoNil is a null pointer.
var PipelineViewportStateCreateInfoNil PipelineViewportStateCreateInfo

// PipelineViewportStateCreateInfoSizeOf is the byte size of VkPipelineViewportStateCreateInfo.
const PipelineViewportStateCreateInfoSizeOf = int(C.sizeof_VkPipelineViewportStateCreateInfo)

// PipelineViewportStateCreateInfoFromPtr converts a raw pointer to a PipelineViewportStateCreateInfo.
func PipelineViewportStateCreateInfoFromPtr(ptr unsafe.Pointer) PipelineViewportStateCreateInfo {
	return PipelineViewportStateCreateInfo{ptr: (*C.VkPipelineViewportStateCreateInfo)(ptr)}
}

// PipelineViewportStateCreateInfoAlloc allocates a continuous block of VkPipelineViewportStateCreateInfo.
func PipelineViewportStateCreateInfoAlloc(alloc ffi.Allocator, count int) PipelineViewportStateCreateInfo {
	ptr := alloc.Allocate(PipelineViewportStateCreateInfoSizeOf * count)
	return PipelineViewportStateCreateInfo{ptr: (*C.VkPipelineViewportStateCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PipelineViewportStateCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PipelineViewportStateCreateInfo) Offset(offset int) PipelineViewportStateCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PipelineViewportStateCreateInfoSizeOf)
	return PipelineViewportStateCreateInfo{ptr: (*C.VkPipelineViewportStateCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PipelineViewportStateCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PipelineViewportStateCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PipelineViewportStateCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PipelineViewportStateCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PipelineViewportStateCreateInfo) GetFlags() PipelineViewportStateCreateFlags {
	return PipelineViewportStateCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PipelineViewportStateCreateInfo) SetFlags(value PipelineViewportStateCreateFlags) {
	p.ptr.flags = (C.VkPipelineViewportStateCreateFlags)(value)
}

// GetViewportCount returns the value in viewportCount.
func (p PipelineViewportStateCreateInfo) GetViewportCount() uint32 {
	return uint32(p.ptr.viewportCount)
}

// SetViewportCount sets the value in viewportCount.
func (p PipelineViewportStateCreateInfo) SetViewportCount(value uint32) {
	p.ptr.viewportCount = (C.uint32_t)(value)
}

// GetPViewports returns the value in pViewports.
func (p PipelineViewportStateCreateInfo) GetPViewports() Viewport {
	return Viewport{ptr: p.ptr.pViewports}
}

// SetPViewports sets the value in pViewports.
func (p PipelineViewportStateCreateInfo) SetPViewports(value Viewport) {
	p.ptr.pViewports = value.ptr
}

// GetScissorCount returns the value in scissorCount.
func (p PipelineViewportStateCreateInfo) GetScissorCount() uint32 {
	return uint32(p.ptr.scissorCount)
}

// SetScissorCount sets the value in scissorCount.
func (p PipelineViewportStateCreateInfo) SetScissorCount(value uint32) {
	p.ptr.scissorCount = (C.uint32_t)(value)
}

// GetPScissors returns the value in pScissors.
func (p PipelineViewportStateCreateInfo) GetPScissors() Rect2D {
	return Rect2D{ptr: p.ptr.pScissors}
}

// SetPScissors sets the value in pScissors.
func (p PipelineViewportStateCreateInfo) SetPScissors(value Rect2D) {
	p.ptr.pScissors = value.ptr
}

// PrivateDataSlotCreateInfo wraps VkPrivateDataSlotCreateInfo.
type PrivateDataSlotCreateInfo struct {
	ptr *C.VkPrivateDataSlotCreateInfo
}

// PrivateDataSlotCreateInfoNil is a null pointer.
var PrivateDataSlotCreateInfoNil PrivateDataSlotCreateInfo

// PrivateDataSlotCreateInfoSizeOf is the byte size of VkPrivateDataSlotCreateInfo.
const PrivateDataSlotCreateInfoSizeOf = int(C.sizeof_VkPrivateDataSlotCreateInfo)

// PrivateDataSlotCreateInfoFromPtr converts a raw pointer to a PrivateDataSlotCreateInfo.
func PrivateDataSlotCreateInfoFromPtr(ptr unsafe.Pointer) PrivateDataSlotCreateInfo {
	return PrivateDataSlotCreateInfo{ptr: (*C.VkPrivateDataSlotCreateInfo)(ptr)}
}

// PrivateDataSlotCreateInfoAlloc allocates a continuous block of VkPrivateDataSlotCreateInfo.
func PrivateDataSlotCreateInfoAlloc(alloc ffi.Allocator, count int) PrivateDataSlotCreateInfo {
	ptr := alloc.Allocate(PrivateDataSlotCreateInfoSizeOf * count)
	return PrivateDataSlotCreateInfo{ptr: (*C.VkPrivateDataSlotCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PrivateDataSlotCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PrivateDataSlotCreateInfo) Offset(offset int) PrivateDataSlotCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PrivateDataSlotCreateInfoSizeOf)
	return PrivateDataSlotCreateInfo{ptr: (*C.VkPrivateDataSlotCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PrivateDataSlotCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PrivateDataSlotCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PrivateDataSlotCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PrivateDataSlotCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p PrivateDataSlotCreateInfo) GetFlags() PrivateDataSlotCreateFlags {
	return PrivateDataSlotCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p PrivateDataSlotCreateInfo) SetFlags(value PrivateDataSlotCreateFlags) {
	p.ptr.flags = (C.VkPrivateDataSlotCreateFlags)(value)
}

// ProtectedSubmitInfo wraps VkProtectedSubmitInfo.
type ProtectedSubmitInfo struct {
	ptr *C.VkProtectedSubmitInfo
}

// ProtectedSubmitInfoNil is a null pointer.
var ProtectedSubmitInfoNil ProtectedSubmitInfo

// ProtectedSubmitInfoSizeOf is the byte size of VkProtectedSubmitInfo.
const ProtectedSubmitInfoSizeOf = int(C.sizeof_VkProtectedSubmitInfo)

// ProtectedSubmitInfoFromPtr converts a raw pointer to a ProtectedSubmitInfo.
func ProtectedSubmitInfoFromPtr(ptr unsafe.Pointer) ProtectedSubmitInfo {
	return ProtectedSubmitInfo{ptr: (*C.VkProtectedSubmitInfo)(ptr)}
}

// ProtectedSubmitInfoAlloc allocates a continuous block of VkProtectedSubmitInfo.
func ProtectedSubmitInfoAlloc(alloc ffi.Allocator, count int) ProtectedSubmitInfo {
	ptr := alloc.Allocate(ProtectedSubmitInfoSizeOf * count)
	return ProtectedSubmitInfo{ptr: (*C.VkProtectedSubmitInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ProtectedSubmitInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ProtectedSubmitInfo) Offset(offset int) ProtectedSubmitInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ProtectedSubmitInfoSizeOf)
	return ProtectedSubmitInfo{ptr: (*C.VkProtectedSubmitInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ProtectedSubmitInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ProtectedSubmitInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ProtectedSubmitInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ProtectedSubmitInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetProtectedSubmit returns the value in protectedSubmit.
func (p ProtectedSubmitInfo) GetProtectedSubmit() bool {
	return p.ptr.protectedSubmit != 0
}

// SetProtectedSubmit sets the value in protectedSubmit.
func (p ProtectedSubmitInfo) SetProtectedSubmit(value bool) {
	if value {
		p.ptr.protectedSubmit = C.VkBool32(1)
	} else {
		p.ptr.protectedSubmit = C.VkBool32(0)
	}
}

// PushConstantRange wraps VkPushConstantRange.
type PushConstantRange struct {
	ptr *C.VkPushConstantRange
}

// PushConstantRangeNil is a null pointer.
var PushConstantRangeNil PushConstantRange

// PushConstantRangeSizeOf is the byte size of VkPushConstantRange.
const PushConstantRangeSizeOf = int(C.sizeof_VkPushConstantRange)

// PushConstantRangeFromPtr converts a raw pointer to a PushConstantRange.
func PushConstantRangeFromPtr(ptr unsafe.Pointer) PushConstantRange {
	return PushConstantRange{ptr: (*C.VkPushConstantRange)(ptr)}
}

// PushConstantRangeAlloc allocates a continuous block of VkPushConstantRange.
func PushConstantRangeAlloc(alloc ffi.Allocator, count int) PushConstantRange {
	ptr := alloc.Allocate(PushConstantRangeSizeOf * count)
	return PushConstantRange{ptr: (*C.VkPushConstantRange)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PushConstantRange) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PushConstantRange) Offset(offset int) PushConstantRange {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PushConstantRangeSizeOf)
	return PushConstantRange{ptr: (*C.VkPushConstantRange)(ptr)}
}

// GetStageFlags returns the value in stageFlags.
func (p PushConstantRange) GetStageFlags() ShaderStageFlags {
	return ShaderStageFlags(p.ptr.stageFlags)
}

// SetStageFlags sets the value in stageFlags.
func (p PushConstantRange) SetStageFlags(value ShaderStageFlags) {
	p.ptr.stageFlags = (C.VkShaderStageFlags)(value)
}

// GetOffset returns the value in offset.
func (p PushConstantRange) GetOffset() uint32 {
	return uint32(p.ptr.offset)
}

// SetOffset sets the value in offset.
func (p PushConstantRange) SetOffset(value uint32) {
	p.ptr.offset = (C.uint32_t)(value)
}

// GetSize returns the value in size.
func (p PushConstantRange) GetSize() uint32 {
	return uint32(p.ptr.size)
}

// SetSize sets the value in size.
func (p PushConstantRange) SetSize(value uint32) {
	p.ptr.size = (C.uint32_t)(value)
}

// PushConstantsInfo wraps VkPushConstantsInfo.
type PushConstantsInfo struct {
	ptr *C.VkPushConstantsInfo
}

// PushConstantsInfoNil is a null pointer.
var PushConstantsInfoNil PushConstantsInfo

// PushConstantsInfoSizeOf is the byte size of VkPushConstantsInfo.
const PushConstantsInfoSizeOf = int(C.sizeof_VkPushConstantsInfo)

// PushConstantsInfoFromPtr converts a raw pointer to a PushConstantsInfo.
func PushConstantsInfoFromPtr(ptr unsafe.Pointer) PushConstantsInfo {
	return PushConstantsInfo{ptr: (*C.VkPushConstantsInfo)(ptr)}
}

// PushConstantsInfoAlloc allocates a continuous block of VkPushConstantsInfo.
func PushConstantsInfoAlloc(alloc ffi.Allocator, count int) PushConstantsInfo {
	ptr := alloc.Allocate(PushConstantsInfoSizeOf * count)
	return PushConstantsInfo{ptr: (*C.VkPushConstantsInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PushConstantsInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PushConstantsInfo) Offset(offset int) PushConstantsInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PushConstantsInfoSizeOf)
	return PushConstantsInfo{ptr: (*C.VkPushConstantsInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PushConstantsInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PushConstantsInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PushConstantsInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PushConstantsInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetLayout returns the value in layout.
func (p PushConstantsInfo) GetLayout() PipelineLayout {
	return PipelineLayout(p.ptr.layout)
}

// SetLayout sets the value in layout.
func (p PushConstantsInfo) SetLayout(value PipelineLayout) {
	p.ptr.layout = (C.VkPipelineLayout)(value)
}

// GetStageFlags returns the value in stageFlags.
func (p PushConstantsInfo) GetStageFlags() ShaderStageFlags {
	return ShaderStageFlags(p.ptr.stageFlags)
}

// SetStageFlags sets the value in stageFlags.
func (p PushConstantsInfo) SetStageFlags(value ShaderStageFlags) {
	p.ptr.stageFlags = (C.VkShaderStageFlags)(value)
}

// GetOffset returns the value in offset.
func (p PushConstantsInfo) GetOffset() uint32 {
	return uint32(p.ptr.offset)
}

// SetOffset sets the value in offset.
func (p PushConstantsInfo) SetOffset(value uint32) {
	p.ptr.offset = (C.uint32_t)(value)
}

// GetSize returns the value in size.
func (p PushConstantsInfo) GetSize() uint32 {
	return uint32(p.ptr.size)
}

// SetSize sets the value in size.
func (p PushConstantsInfo) SetSize(value uint32) {
	p.ptr.size = (C.uint32_t)(value)
}

// GetPValues returns the value in pValues.
func (p PushConstantsInfo) GetPValues() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pValues)
}

// SetPValues sets the value in pValues.
func (p PushConstantsInfo) SetPValues(value unsafe.Pointer) {
	p.ptr.pValues = value
}

// PushDescriptorSetInfo wraps VkPushDescriptorSetInfo.
type PushDescriptorSetInfo struct {
	ptr *C.VkPushDescriptorSetInfo
}

// PushDescriptorSetInfoNil is a null pointer.
var PushDescriptorSetInfoNil PushDescriptorSetInfo

// PushDescriptorSetInfoSizeOf is the byte size of VkPushDescriptorSetInfo.
const PushDescriptorSetInfoSizeOf = int(C.sizeof_VkPushDescriptorSetInfo)

// PushDescriptorSetInfoFromPtr converts a raw pointer to a PushDescriptorSetInfo.
func PushDescriptorSetInfoFromPtr(ptr unsafe.Pointer) PushDescriptorSetInfo {
	return PushDescriptorSetInfo{ptr: (*C.VkPushDescriptorSetInfo)(ptr)}
}

// PushDescriptorSetInfoAlloc allocates a continuous block of VkPushDescriptorSetInfo.
func PushDescriptorSetInfoAlloc(alloc ffi.Allocator, count int) PushDescriptorSetInfo {
	ptr := alloc.Allocate(PushDescriptorSetInfoSizeOf * count)
	return PushDescriptorSetInfo{ptr: (*C.VkPushDescriptorSetInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PushDescriptorSetInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PushDescriptorSetInfo) Offset(offset int) PushDescriptorSetInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PushDescriptorSetInfoSizeOf)
	return PushDescriptorSetInfo{ptr: (*C.VkPushDescriptorSetInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PushDescriptorSetInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PushDescriptorSetInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PushDescriptorSetInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PushDescriptorSetInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetStageFlags returns the value in stageFlags.
func (p PushDescriptorSetInfo) GetStageFlags() ShaderStageFlags {
	return ShaderStageFlags(p.ptr.stageFlags)
}

// SetStageFlags sets the value in stageFlags.
func (p PushDescriptorSetInfo) SetStageFlags(value ShaderStageFlags) {
	p.ptr.stageFlags = (C.VkShaderStageFlags)(value)
}

// GetLayout returns the value in layout.
func (p PushDescriptorSetInfo) GetLayout() PipelineLayout {
	return PipelineLayout(p.ptr.layout)
}

// SetLayout sets the value in layout.
func (p PushDescriptorSetInfo) SetLayout(value PipelineLayout) {
	p.ptr.layout = (C.VkPipelineLayout)(value)
}

// GetSet returns the value in set.
func (p PushDescriptorSetInfo) GetSet() uint32 {
	return uint32(p.ptr.set)
}

// SetSet sets the value in set.
func (p PushDescriptorSetInfo) SetSet(value uint32) {
	p.ptr.set = (C.uint32_t)(value)
}

// GetDescriptorWriteCount returns the value in descriptorWriteCount.
func (p PushDescriptorSetInfo) GetDescriptorWriteCount() uint32 {
	return uint32(p.ptr.descriptorWriteCount)
}

// SetDescriptorWriteCount sets the value in descriptorWriteCount.
func (p PushDescriptorSetInfo) SetDescriptorWriteCount(value uint32) {
	p.ptr.descriptorWriteCount = (C.uint32_t)(value)
}

// GetPDescriptorWrites returns the value in pDescriptorWrites.
func (p PushDescriptorSetInfo) GetPDescriptorWrites() WriteDescriptorSet {
	return WriteDescriptorSet{ptr: p.ptr.pDescriptorWrites}
}

// SetPDescriptorWrites sets the value in pDescriptorWrites.
func (p PushDescriptorSetInfo) SetPDescriptorWrites(value WriteDescriptorSet) {
	p.ptr.pDescriptorWrites = value.ptr
}

// PushDescriptorSetWithTemplateInfo wraps VkPushDescriptorSetWithTemplateInfo.
type PushDescriptorSetWithTemplateInfo struct {
	ptr *C.VkPushDescriptorSetWithTemplateInfo
}

// PushDescriptorSetWithTemplateInfoNil is a null pointer.
var PushDescriptorSetWithTemplateInfoNil PushDescriptorSetWithTemplateInfo

// PushDescriptorSetWithTemplateInfoSizeOf is the byte size of VkPushDescriptorSetWithTemplateInfo.
const PushDescriptorSetWithTemplateInfoSizeOf = int(C.sizeof_VkPushDescriptorSetWithTemplateInfo)

// PushDescriptorSetWithTemplateInfoFromPtr converts a raw pointer to a PushDescriptorSetWithTemplateInfo.
func PushDescriptorSetWithTemplateInfoFromPtr(ptr unsafe.Pointer) PushDescriptorSetWithTemplateInfo {
	return PushDescriptorSetWithTemplateInfo{ptr: (*C.VkPushDescriptorSetWithTemplateInfo)(ptr)}
}

// PushDescriptorSetWithTemplateInfoAlloc allocates a continuous block of VkPushDescriptorSetWithTemplateInfo.
func PushDescriptorSetWithTemplateInfoAlloc(alloc ffi.Allocator, count int) PushDescriptorSetWithTemplateInfo {
	ptr := alloc.Allocate(PushDescriptorSetWithTemplateInfoSizeOf * count)
	return PushDescriptorSetWithTemplateInfo{ptr: (*C.VkPushDescriptorSetWithTemplateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p PushDescriptorSetWithTemplateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p PushDescriptorSetWithTemplateInfo) Offset(offset int) PushDescriptorSetWithTemplateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*PushDescriptorSetWithTemplateInfoSizeOf)
	return PushDescriptorSetWithTemplateInfo{ptr: (*C.VkPushDescriptorSetWithTemplateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p PushDescriptorSetWithTemplateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p PushDescriptorSetWithTemplateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p PushDescriptorSetWithTemplateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p PushDescriptorSetWithTemplateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDescriptorUpdateTemplate returns the value in descriptorUpdateTemplate.
func (p PushDescriptorSetWithTemplateInfo) GetDescriptorUpdateTemplate() DescriptorUpdateTemplate {
	return DescriptorUpdateTemplate(p.ptr.descriptorUpdateTemplate)
}

// SetDescriptorUpdateTemplate sets the value in descriptorUpdateTemplate.
func (p PushDescriptorSetWithTemplateInfo) SetDescriptorUpdateTemplate(value DescriptorUpdateTemplate) {
	p.ptr.descriptorUpdateTemplate = (C.VkDescriptorUpdateTemplate)(value)
}

// GetLayout returns the value in layout.
func (p PushDescriptorSetWithTemplateInfo) GetLayout() PipelineLayout {
	return PipelineLayout(p.ptr.layout)
}

// SetLayout sets the value in layout.
func (p PushDescriptorSetWithTemplateInfo) SetLayout(value PipelineLayout) {
	p.ptr.layout = (C.VkPipelineLayout)(value)
}

// GetSet returns the value in set.
func (p PushDescriptorSetWithTemplateInfo) GetSet() uint32 {
	return uint32(p.ptr.set)
}

// SetSet sets the value in set.
func (p PushDescriptorSetWithTemplateInfo) SetSet(value uint32) {
	p.ptr.set = (C.uint32_t)(value)
}

// GetPData returns the value in pData.
func (p PushDescriptorSetWithTemplateInfo) GetPData() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pData)
}

// SetPData sets the value in pData.
func (p PushDescriptorSetWithTemplateInfo) SetPData(value unsafe.Pointer) {
	p.ptr.pData = value
}

// QueryPoolCreateInfo wraps VkQueryPoolCreateInfo.
type QueryPoolCreateInfo struct {
	ptr *C.VkQueryPoolCreateInfo
}

// QueryPoolCreateInfoNil is a null pointer.
var QueryPoolCreateInfoNil QueryPoolCreateInfo

// QueryPoolCreateInfoSizeOf is the byte size of VkQueryPoolCreateInfo.
const QueryPoolCreateInfoSizeOf = int(C.sizeof_VkQueryPoolCreateInfo)

// QueryPoolCreateInfoFromPtr converts a raw pointer to a QueryPoolCreateInfo.
func QueryPoolCreateInfoFromPtr(ptr unsafe.Pointer) QueryPoolCreateInfo {
	return QueryPoolCreateInfo{ptr: (*C.VkQueryPoolCreateInfo)(ptr)}
}

// QueryPoolCreateInfoAlloc allocates a continuous block of VkQueryPoolCreateInfo.
func QueryPoolCreateInfoAlloc(alloc ffi.Allocator, count int) QueryPoolCreateInfo {
	ptr := alloc.Allocate(QueryPoolCreateInfoSizeOf * count)
	return QueryPoolCreateInfo{ptr: (*C.VkQueryPoolCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p QueryPoolCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p QueryPoolCreateInfo) Offset(offset int) QueryPoolCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*QueryPoolCreateInfoSizeOf)
	return QueryPoolCreateInfo{ptr: (*C.VkQueryPoolCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p QueryPoolCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p QueryPoolCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p QueryPoolCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p QueryPoolCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p QueryPoolCreateInfo) GetFlags() QueryPoolCreateFlags {
	return QueryPoolCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p QueryPoolCreateInfo) SetFlags(value QueryPoolCreateFlags) {
	p.ptr.flags = (C.VkQueryPoolCreateFlags)(value)
}

// GetQueryType returns the value in queryType.
func (p QueryPoolCreateInfo) GetQueryType() QueryType {
	return QueryType(p.ptr.queryType)
}

// SetQueryType sets the value in queryType.
func (p QueryPoolCreateInfo) SetQueryType(value QueryType) {
	p.ptr.queryType = (C.VkQueryType)(value)
}

// GetQueryCount returns the value in queryCount.
func (p QueryPoolCreateInfo) GetQueryCount() uint32 {
	return uint32(p.ptr.queryCount)
}

// SetQueryCount sets the value in queryCount.
func (p QueryPoolCreateInfo) SetQueryCount(value uint32) {
	p.ptr.queryCount = (C.uint32_t)(value)
}

// GetPipelineStatistics returns the value in pipelineStatistics.
func (p QueryPoolCreateInfo) GetPipelineStatistics() QueryPipelineStatisticFlags {
	return QueryPipelineStatisticFlags(p.ptr.pipelineStatistics)
}

// SetPipelineStatistics sets the value in pipelineStatistics.
func (p QueryPoolCreateInfo) SetPipelineStatistics(value QueryPipelineStatisticFlags) {
	p.ptr.pipelineStatistics = (C.VkQueryPipelineStatisticFlags)(value)
}

// QueueFamilyGlobalPriorityProperties wraps VkQueueFamilyGlobalPriorityProperties.
type QueueFamilyGlobalPriorityProperties struct {
	ptr *C.VkQueueFamilyGlobalPriorityProperties
}

// QueueFamilyGlobalPriorityPropertiesNil is a null pointer.
var QueueFamilyGlobalPriorityPropertiesNil QueueFamilyGlobalPriorityProperties

// QueueFamilyGlobalPriorityPropertiesSizeOf is the byte size of VkQueueFamilyGlobalPriorityProperties.
const QueueFamilyGlobalPriorityPropertiesSizeOf = int(C.sizeof_VkQueueFamilyGlobalPriorityProperties)

// QueueFamilyGlobalPriorityPropertiesFromPtr converts a raw pointer to a QueueFamilyGlobalPriorityProperties.
func QueueFamilyGlobalPriorityPropertiesFromPtr(ptr unsafe.Pointer) QueueFamilyGlobalPriorityProperties {
	return QueueFamilyGlobalPriorityProperties{ptr: (*C.VkQueueFamilyGlobalPriorityProperties)(ptr)}
}

// QueueFamilyGlobalPriorityPropertiesAlloc allocates a continuous block of VkQueueFamilyGlobalPriorityProperties.
func QueueFamilyGlobalPriorityPropertiesAlloc(alloc ffi.Allocator, count int) QueueFamilyGlobalPriorityProperties {
	ptr := alloc.Allocate(QueueFamilyGlobalPriorityPropertiesSizeOf * count)
	return QueueFamilyGlobalPriorityProperties{ptr: (*C.VkQueueFamilyGlobalPriorityProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p QueueFamilyGlobalPriorityProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p QueueFamilyGlobalPriorityProperties) Offset(offset int) QueueFamilyGlobalPriorityProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*QueueFamilyGlobalPriorityPropertiesSizeOf)
	return QueueFamilyGlobalPriorityProperties{ptr: (*C.VkQueueFamilyGlobalPriorityProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p QueueFamilyGlobalPriorityProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p QueueFamilyGlobalPriorityProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p QueueFamilyGlobalPriorityProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p QueueFamilyGlobalPriorityProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetPriorityCount returns the value in priorityCount.
func (p QueueFamilyGlobalPriorityProperties) GetPriorityCount() uint32 {
	return uint32(p.ptr.priorityCount)
}

// SetPriorityCount sets the value in priorityCount.
func (p QueueFamilyGlobalPriorityProperties) SetPriorityCount(value uint32) {
	p.ptr.priorityCount = (C.uint32_t)(value)
}

// QueueFamilyGlobalPriorityProperties.priorities is unsupported: category unsupported.

// QueueFamilyProperties wraps VkQueueFamilyProperties.
type QueueFamilyProperties struct {
	ptr *C.VkQueueFamilyProperties
}

// QueueFamilyPropertiesNil is a null pointer.
var QueueFamilyPropertiesNil QueueFamilyProperties

// QueueFamilyPropertiesSizeOf is the byte size of VkQueueFamilyProperties.
const QueueFamilyPropertiesSizeOf = int(C.sizeof_VkQueueFamilyProperties)

// QueueFamilyPropertiesFromPtr converts a raw pointer to a QueueFamilyProperties.
func QueueFamilyPropertiesFromPtr(ptr unsafe.Pointer) QueueFamilyProperties {
	return QueueFamilyProperties{ptr: (*C.VkQueueFamilyProperties)(ptr)}
}

// QueueFamilyPropertiesAlloc allocates a continuous block of VkQueueFamilyProperties.
func QueueFamilyPropertiesAlloc(alloc ffi.Allocator, count int) QueueFamilyProperties {
	ptr := alloc.Allocate(QueueFamilyPropertiesSizeOf * count)
	return QueueFamilyProperties{ptr: (*C.VkQueueFamilyProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p QueueFamilyProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p QueueFamilyProperties) Offset(offset int) QueueFamilyProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*QueueFamilyPropertiesSizeOf)
	return QueueFamilyProperties{ptr: (*C.VkQueueFamilyProperties)(ptr)}
}

// GetQueueFlags returns the value in queueFlags.
func (p QueueFamilyProperties) GetQueueFlags() QueueFlags {
	return QueueFlags(p.ptr.queueFlags)
}

// SetQueueFlags sets the value in queueFlags.
func (p QueueFamilyProperties) SetQueueFlags(value QueueFlags) {
	p.ptr.queueFlags = (C.VkQueueFlags)(value)
}

// GetQueueCount returns the value in queueCount.
func (p QueueFamilyProperties) GetQueueCount() uint32 {
	return uint32(p.ptr.queueCount)
}

// SetQueueCount sets the value in queueCount.
func (p QueueFamilyProperties) SetQueueCount(value uint32) {
	p.ptr.queueCount = (C.uint32_t)(value)
}

// GetTimestampValidBits returns the value in timestampValidBits.
func (p QueueFamilyProperties) GetTimestampValidBits() uint32 {
	return uint32(p.ptr.timestampValidBits)
}

// SetTimestampValidBits sets the value in timestampValidBits.
func (p QueueFamilyProperties) SetTimestampValidBits(value uint32) {
	p.ptr.timestampValidBits = (C.uint32_t)(value)
}

// RefMinImageTransferGranularity returns pointer to the minImageTransferGranularity field.
func (p QueueFamilyProperties) RefMinImageTransferGranularity() Extent3D {
	return Extent3D{ptr: (*C.VkExtent3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkQueueFamilyProperties_minImageTransferGranularity)))}
}

// QueueFamilyProperties2 wraps VkQueueFamilyProperties2.
type QueueFamilyProperties2 struct {
	ptr *C.VkQueueFamilyProperties2
}

// QueueFamilyProperties2Nil is a null pointer.
var QueueFamilyProperties2Nil QueueFamilyProperties2

// QueueFamilyProperties2SizeOf is the byte size of VkQueueFamilyProperties2.
const QueueFamilyProperties2SizeOf = int(C.sizeof_VkQueueFamilyProperties2)

// QueueFamilyProperties2FromPtr converts a raw pointer to a QueueFamilyProperties2.
func QueueFamilyProperties2FromPtr(ptr unsafe.Pointer) QueueFamilyProperties2 {
	return QueueFamilyProperties2{ptr: (*C.VkQueueFamilyProperties2)(ptr)}
}

// QueueFamilyProperties2Alloc allocates a continuous block of VkQueueFamilyProperties2.
func QueueFamilyProperties2Alloc(alloc ffi.Allocator, count int) QueueFamilyProperties2 {
	ptr := alloc.Allocate(QueueFamilyProperties2SizeOf * count)
	return QueueFamilyProperties2{ptr: (*C.VkQueueFamilyProperties2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p QueueFamilyProperties2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p QueueFamilyProperties2) Offset(offset int) QueueFamilyProperties2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*QueueFamilyProperties2SizeOf)
	return QueueFamilyProperties2{ptr: (*C.VkQueueFamilyProperties2)(ptr)}
}

// GetSType returns the value in sType.
func (p QueueFamilyProperties2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p QueueFamilyProperties2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p QueueFamilyProperties2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p QueueFamilyProperties2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefQueueFamilyProperties returns pointer to the queueFamilyProperties field.
func (p QueueFamilyProperties2) RefQueueFamilyProperties() QueueFamilyProperties {
	return QueueFamilyProperties{ptr: (*C.VkQueueFamilyProperties)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkQueueFamilyProperties2_queueFamilyProperties)))}
}

// Rect2D wraps VkRect2D.
type Rect2D struct {
	ptr *C.VkRect2D
}

// Rect2DNil is a null pointer.
var Rect2DNil Rect2D

// Rect2DSizeOf is the byte size of VkRect2D.
const Rect2DSizeOf = int(C.sizeof_VkRect2D)

// Rect2DFromPtr converts a raw pointer to a Rect2D.
func Rect2DFromPtr(ptr unsafe.Pointer) Rect2D {
	return Rect2D{ptr: (*C.VkRect2D)(ptr)}
}

// Rect2DAlloc allocates a continuous block of VkRect2D.
func Rect2DAlloc(alloc ffi.Allocator, count int) Rect2D {
	ptr := alloc.Allocate(Rect2DSizeOf * count)
	return Rect2D{ptr: (*C.VkRect2D)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p Rect2D) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p Rect2D) Offset(offset int) Rect2D {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*Rect2DSizeOf)
	return Rect2D{ptr: (*C.VkRect2D)(ptr)}
}

// RefOffset returns pointer to the offset field.
func (p Rect2D) RefOffset() Offset2D {
	return Offset2D{ptr: (*C.VkOffset2D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkRect2D_offset)))}
}

// RefExtent returns pointer to the extent field.
func (p Rect2D) RefExtent() Extent2D {
	return Extent2D{ptr: (*C.VkExtent2D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkRect2D_extent)))}
}

// RenderPassAttachmentBeginInfo wraps VkRenderPassAttachmentBeginInfo.
type RenderPassAttachmentBeginInfo struct {
	ptr *C.VkRenderPassAttachmentBeginInfo
}

// RenderPassAttachmentBeginInfoNil is a null pointer.
var RenderPassAttachmentBeginInfoNil RenderPassAttachmentBeginInfo

// RenderPassAttachmentBeginInfoSizeOf is the byte size of VkRenderPassAttachmentBeginInfo.
const RenderPassAttachmentBeginInfoSizeOf = int(C.sizeof_VkRenderPassAttachmentBeginInfo)

// RenderPassAttachmentBeginInfoFromPtr converts a raw pointer to a RenderPassAttachmentBeginInfo.
func RenderPassAttachmentBeginInfoFromPtr(ptr unsafe.Pointer) RenderPassAttachmentBeginInfo {
	return RenderPassAttachmentBeginInfo{ptr: (*C.VkRenderPassAttachmentBeginInfo)(ptr)}
}

// RenderPassAttachmentBeginInfoAlloc allocates a continuous block of VkRenderPassAttachmentBeginInfo.
func RenderPassAttachmentBeginInfoAlloc(alloc ffi.Allocator, count int) RenderPassAttachmentBeginInfo {
	ptr := alloc.Allocate(RenderPassAttachmentBeginInfoSizeOf * count)
	return RenderPassAttachmentBeginInfo{ptr: (*C.VkRenderPassAttachmentBeginInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p RenderPassAttachmentBeginInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p RenderPassAttachmentBeginInfo) Offset(offset int) RenderPassAttachmentBeginInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*RenderPassAttachmentBeginInfoSizeOf)
	return RenderPassAttachmentBeginInfo{ptr: (*C.VkRenderPassAttachmentBeginInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p RenderPassAttachmentBeginInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p RenderPassAttachmentBeginInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p RenderPassAttachmentBeginInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p RenderPassAttachmentBeginInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetAttachmentCount returns the value in attachmentCount.
func (p RenderPassAttachmentBeginInfo) GetAttachmentCount() uint32 {
	return uint32(p.ptr.attachmentCount)
}

// SetAttachmentCount sets the value in attachmentCount.
func (p RenderPassAttachmentBeginInfo) SetAttachmentCount(value uint32) {
	p.ptr.attachmentCount = (C.uint32_t)(value)
}

// GetPAttachments returns the value in pAttachments.
func (p RenderPassAttachmentBeginInfo) GetPAttachments() ffi.Ref[ImageView] {
	return ffi.RefFromPtr[ImageView](unsafe.Pointer(p.ptr.pAttachments))
}

// SetPAttachments sets the value in pAttachments.
func (p RenderPassAttachmentBeginInfo) SetPAttachments(value ffi.Ref[ImageView]) {
	p.ptr.pAttachments = (*C.VkImageView)(value.Raw())
}

// RenderPassBeginInfo wraps VkRenderPassBeginInfo.
type RenderPassBeginInfo struct {
	ptr *C.VkRenderPassBeginInfo
}

// RenderPassBeginInfoNil is a null pointer.
var RenderPassBeginInfoNil RenderPassBeginInfo

// RenderPassBeginInfoSizeOf is the byte size of VkRenderPassBeginInfo.
const RenderPassBeginInfoSizeOf = int(C.sizeof_VkRenderPassBeginInfo)

// RenderPassBeginInfoFromPtr converts a raw pointer to a RenderPassBeginInfo.
func RenderPassBeginInfoFromPtr(ptr unsafe.Pointer) RenderPassBeginInfo {
	return RenderPassBeginInfo{ptr: (*C.VkRenderPassBeginInfo)(ptr)}
}

// RenderPassBeginInfoAlloc allocates a continuous block of VkRenderPassBeginInfo.
func RenderPassBeginInfoAlloc(alloc ffi.Allocator, count int) RenderPassBeginInfo {
	ptr := alloc.Allocate(RenderPassBeginInfoSizeOf * count)
	return RenderPassBeginInfo{ptr: (*C.VkRenderPassBeginInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p RenderPassBeginInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p RenderPassBeginInfo) Offset(offset int) RenderPassBeginInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*RenderPassBeginInfoSizeOf)
	return RenderPassBeginInfo{ptr: (*C.VkRenderPassBeginInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p RenderPassBeginInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p RenderPassBeginInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p RenderPassBeginInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p RenderPassBeginInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetRenderPass returns the value in renderPass.
func (p RenderPassBeginInfo) GetRenderPass() RenderPass {
	return RenderPass(p.ptr.renderPass)
}

// SetRenderPass sets the value in renderPass.
func (p RenderPassBeginInfo) SetRenderPass(value RenderPass) {
	p.ptr.renderPass = (C.VkRenderPass)(value)
}

// GetFramebuffer returns the value in framebuffer.
func (p RenderPassBeginInfo) GetFramebuffer() Framebuffer {
	return Framebuffer(p.ptr.framebuffer)
}

// SetFramebuffer sets the value in framebuffer.
func (p RenderPassBeginInfo) SetFramebuffer(value Framebuffer) {
	p.ptr.framebuffer = (C.VkFramebuffer)(value)
}

// RefRenderArea returns pointer to the renderArea field.
func (p RenderPassBeginInfo) RefRenderArea() Rect2D {
	return Rect2D{ptr: (*C.VkRect2D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkRenderPassBeginInfo_renderArea)))}
}

// GetClearValueCount returns the value in clearValueCount.
func (p RenderPassBeginInfo) GetClearValueCount() uint32 {
	return uint32(p.ptr.clearValueCount)
}

// SetClearValueCount sets the value in clearValueCount.
func (p RenderPassBeginInfo) SetClearValueCount(value uint32) {
	p.ptr.clearValueCount = (C.uint32_t)(value)
}

// RenderPassBeginInfo.pClearValues is unsupported: category pointer -> ??.

// RenderPassCreateInfo wraps VkRenderPassCreateInfo.
type RenderPassCreateInfo struct {
	ptr *C.VkRenderPassCreateInfo
}

// RenderPassCreateInfoNil is a null pointer.
var RenderPassCreateInfoNil RenderPassCreateInfo

// RenderPassCreateInfoSizeOf is the byte size of VkRenderPassCreateInfo.
const RenderPassCreateInfoSizeOf = int(C.sizeof_VkRenderPassCreateInfo)

// RenderPassCreateInfoFromPtr converts a raw pointer to a RenderPassCreateInfo.
func RenderPassCreateInfoFromPtr(ptr unsafe.Pointer) RenderPassCreateInfo {
	return RenderPassCreateInfo{ptr: (*C.VkRenderPassCreateInfo)(ptr)}
}

// RenderPassCreateInfoAlloc allocates a continuous block of VkRenderPassCreateInfo.
func RenderPassCreateInfoAlloc(alloc ffi.Allocator, count int) RenderPassCreateInfo {
	ptr := alloc.Allocate(RenderPassCreateInfoSizeOf * count)
	return RenderPassCreateInfo{ptr: (*C.VkRenderPassCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p RenderPassCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p RenderPassCreateInfo) Offset(offset int) RenderPassCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*RenderPassCreateInfoSizeOf)
	return RenderPassCreateInfo{ptr: (*C.VkRenderPassCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p RenderPassCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p RenderPassCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p RenderPassCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p RenderPassCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p RenderPassCreateInfo) GetFlags() RenderPassCreateFlags {
	return RenderPassCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p RenderPassCreateInfo) SetFlags(value RenderPassCreateFlags) {
	p.ptr.flags = (C.VkRenderPassCreateFlags)(value)
}

// GetAttachmentCount returns the value in attachmentCount.
func (p RenderPassCreateInfo) GetAttachmentCount() uint32 {
	return uint32(p.ptr.attachmentCount)
}

// SetAttachmentCount sets the value in attachmentCount.
func (p RenderPassCreateInfo) SetAttachmentCount(value uint32) {
	p.ptr.attachmentCount = (C.uint32_t)(value)
}

// GetPAttachments returns the value in pAttachments.
func (p RenderPassCreateInfo) GetPAttachments() AttachmentDescription {
	return AttachmentDescription{ptr: p.ptr.pAttachments}
}

// SetPAttachments sets the value in pAttachments.
func (p RenderPassCreateInfo) SetPAttachments(value AttachmentDescription) {
	p.ptr.pAttachments = value.ptr
}

// GetSubpassCount returns the value in subpassCount.
func (p RenderPassCreateInfo) GetSubpassCount() uint32 {
	return uint32(p.ptr.subpassCount)
}

// SetSubpassCount sets the value in subpassCount.
func (p RenderPassCreateInfo) SetSubpassCount(value uint32) {
	p.ptr.subpassCount = (C.uint32_t)(value)
}

// GetPSubpasses returns the value in pSubpasses.
func (p RenderPassCreateInfo) GetPSubpasses() SubpassDescription {
	return SubpassDescription{ptr: p.ptr.pSubpasses}
}

// SetPSubpasses sets the value in pSubpasses.
func (p RenderPassCreateInfo) SetPSubpasses(value SubpassDescription) {
	p.ptr.pSubpasses = value.ptr
}

// GetDependencyCount returns the value in dependencyCount.
func (p RenderPassCreateInfo) GetDependencyCount() uint32 {
	return uint32(p.ptr.dependencyCount)
}

// SetDependencyCount sets the value in dependencyCount.
func (p RenderPassCreateInfo) SetDependencyCount(value uint32) {
	p.ptr.dependencyCount = (C.uint32_t)(value)
}

// GetPDependencies returns the value in pDependencies.
func (p RenderPassCreateInfo) GetPDependencies() SubpassDependency {
	return SubpassDependency{ptr: p.ptr.pDependencies}
}

// SetPDependencies sets the value in pDependencies.
func (p RenderPassCreateInfo) SetPDependencies(value SubpassDependency) {
	p.ptr.pDependencies = value.ptr
}

// RenderPassCreateInfo2 wraps VkRenderPassCreateInfo2.
type RenderPassCreateInfo2 struct {
	ptr *C.VkRenderPassCreateInfo2
}

// RenderPassCreateInfo2Nil is a null pointer.
var RenderPassCreateInfo2Nil RenderPassCreateInfo2

// RenderPassCreateInfo2SizeOf is the byte size of VkRenderPassCreateInfo2.
const RenderPassCreateInfo2SizeOf = int(C.sizeof_VkRenderPassCreateInfo2)

// RenderPassCreateInfo2FromPtr converts a raw pointer to a RenderPassCreateInfo2.
func RenderPassCreateInfo2FromPtr(ptr unsafe.Pointer) RenderPassCreateInfo2 {
	return RenderPassCreateInfo2{ptr: (*C.VkRenderPassCreateInfo2)(ptr)}
}

// RenderPassCreateInfo2Alloc allocates a continuous block of VkRenderPassCreateInfo2.
func RenderPassCreateInfo2Alloc(alloc ffi.Allocator, count int) RenderPassCreateInfo2 {
	ptr := alloc.Allocate(RenderPassCreateInfo2SizeOf * count)
	return RenderPassCreateInfo2{ptr: (*C.VkRenderPassCreateInfo2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p RenderPassCreateInfo2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p RenderPassCreateInfo2) Offset(offset int) RenderPassCreateInfo2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*RenderPassCreateInfo2SizeOf)
	return RenderPassCreateInfo2{ptr: (*C.VkRenderPassCreateInfo2)(ptr)}
}

// GetSType returns the value in sType.
func (p RenderPassCreateInfo2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p RenderPassCreateInfo2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p RenderPassCreateInfo2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p RenderPassCreateInfo2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p RenderPassCreateInfo2) GetFlags() RenderPassCreateFlags {
	return RenderPassCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p RenderPassCreateInfo2) SetFlags(value RenderPassCreateFlags) {
	p.ptr.flags = (C.VkRenderPassCreateFlags)(value)
}

// GetAttachmentCount returns the value in attachmentCount.
func (p RenderPassCreateInfo2) GetAttachmentCount() uint32 {
	return uint32(p.ptr.attachmentCount)
}

// SetAttachmentCount sets the value in attachmentCount.
func (p RenderPassCreateInfo2) SetAttachmentCount(value uint32) {
	p.ptr.attachmentCount = (C.uint32_t)(value)
}

// GetPAttachments returns the value in pAttachments.
func (p RenderPassCreateInfo2) GetPAttachments() AttachmentDescription2 {
	return AttachmentDescription2{ptr: p.ptr.pAttachments}
}

// SetPAttachments sets the value in pAttachments.
func (p RenderPassCreateInfo2) SetPAttachments(value AttachmentDescription2) {
	p.ptr.pAttachments = value.ptr
}

// GetSubpassCount returns the value in subpassCount.
func (p RenderPassCreateInfo2) GetSubpassCount() uint32 {
	return uint32(p.ptr.subpassCount)
}

// SetSubpassCount sets the value in subpassCount.
func (p RenderPassCreateInfo2) SetSubpassCount(value uint32) {
	p.ptr.subpassCount = (C.uint32_t)(value)
}

// GetPSubpasses returns the value in pSubpasses.
func (p RenderPassCreateInfo2) GetPSubpasses() SubpassDescription2 {
	return SubpassDescription2{ptr: p.ptr.pSubpasses}
}

// SetPSubpasses sets the value in pSubpasses.
func (p RenderPassCreateInfo2) SetPSubpasses(value SubpassDescription2) {
	p.ptr.pSubpasses = value.ptr
}

// GetDependencyCount returns the value in dependencyCount.
func (p RenderPassCreateInfo2) GetDependencyCount() uint32 {
	return uint32(p.ptr.dependencyCount)
}

// SetDependencyCount sets the value in dependencyCount.
func (p RenderPassCreateInfo2) SetDependencyCount(value uint32) {
	p.ptr.dependencyCount = (C.uint32_t)(value)
}

// GetPDependencies returns the value in pDependencies.
func (p RenderPassCreateInfo2) GetPDependencies() SubpassDependency2 {
	return SubpassDependency2{ptr: p.ptr.pDependencies}
}

// SetPDependencies sets the value in pDependencies.
func (p RenderPassCreateInfo2) SetPDependencies(value SubpassDependency2) {
	p.ptr.pDependencies = value.ptr
}

// GetCorrelatedViewMaskCount returns the value in correlatedViewMaskCount.
func (p RenderPassCreateInfo2) GetCorrelatedViewMaskCount() uint32 {
	return uint32(p.ptr.correlatedViewMaskCount)
}

// SetCorrelatedViewMaskCount sets the value in correlatedViewMaskCount.
func (p RenderPassCreateInfo2) SetCorrelatedViewMaskCount(value uint32) {
	p.ptr.correlatedViewMaskCount = (C.uint32_t)(value)
}

// GetPCorrelatedViewMasks returns the value in pCorrelatedViewMasks.
func (p RenderPassCreateInfo2) GetPCorrelatedViewMasks() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pCorrelatedViewMasks))
}

// SetPCorrelatedViewMasks sets the value in pCorrelatedViewMasks.
func (p RenderPassCreateInfo2) SetPCorrelatedViewMasks(value ffi.Ref[uint32]) {
	p.ptr.pCorrelatedViewMasks = (*C.uint32_t)(value.Raw())
}

// RenderPassInputAttachmentAspectCreateInfo wraps VkRenderPassInputAttachmentAspectCreateInfo.
type RenderPassInputAttachmentAspectCreateInfo struct {
	ptr *C.VkRenderPassInputAttachmentAspectCreateInfo
}

// RenderPassInputAttachmentAspectCreateInfoNil is a null pointer.
var RenderPassInputAttachmentAspectCreateInfoNil RenderPassInputAttachmentAspectCreateInfo

// RenderPassInputAttachmentAspectCreateInfoSizeOf is the byte size of VkRenderPassInputAttachmentAspectCreateInfo.
const RenderPassInputAttachmentAspectCreateInfoSizeOf = int(C.sizeof_VkRenderPassInputAttachmentAspectCreateInfo)

// RenderPassInputAttachmentAspectCreateInfoFromPtr converts a raw pointer to a RenderPassInputAttachmentAspectCreateInfo.
func RenderPassInputAttachmentAspectCreateInfoFromPtr(ptr unsafe.Pointer) RenderPassInputAttachmentAspectCreateInfo {
	return RenderPassInputAttachmentAspectCreateInfo{ptr: (*C.VkRenderPassInputAttachmentAspectCreateInfo)(ptr)}
}

// RenderPassInputAttachmentAspectCreateInfoAlloc allocates a continuous block of VkRenderPassInputAttachmentAspectCreateInfo.
func RenderPassInputAttachmentAspectCreateInfoAlloc(alloc ffi.Allocator, count int) RenderPassInputAttachmentAspectCreateInfo {
	ptr := alloc.Allocate(RenderPassInputAttachmentAspectCreateInfoSizeOf * count)
	return RenderPassInputAttachmentAspectCreateInfo{ptr: (*C.VkRenderPassInputAttachmentAspectCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p RenderPassInputAttachmentAspectCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p RenderPassInputAttachmentAspectCreateInfo) Offset(offset int) RenderPassInputAttachmentAspectCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*RenderPassInputAttachmentAspectCreateInfoSizeOf)
	return RenderPassInputAttachmentAspectCreateInfo{ptr: (*C.VkRenderPassInputAttachmentAspectCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p RenderPassInputAttachmentAspectCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p RenderPassInputAttachmentAspectCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p RenderPassInputAttachmentAspectCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p RenderPassInputAttachmentAspectCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetAspectReferenceCount returns the value in aspectReferenceCount.
func (p RenderPassInputAttachmentAspectCreateInfo) GetAspectReferenceCount() uint32 {
	return uint32(p.ptr.aspectReferenceCount)
}

// SetAspectReferenceCount sets the value in aspectReferenceCount.
func (p RenderPassInputAttachmentAspectCreateInfo) SetAspectReferenceCount(value uint32) {
	p.ptr.aspectReferenceCount = (C.uint32_t)(value)
}

// GetPAspectReferences returns the value in pAspectReferences.
func (p RenderPassInputAttachmentAspectCreateInfo) GetPAspectReferences() InputAttachmentAspectReference {
	return InputAttachmentAspectReference{ptr: p.ptr.pAspectReferences}
}

// SetPAspectReferences sets the value in pAspectReferences.
func (p RenderPassInputAttachmentAspectCreateInfo) SetPAspectReferences(value InputAttachmentAspectReference) {
	p.ptr.pAspectReferences = value.ptr
}

// RenderPassMultiviewCreateInfo wraps VkRenderPassMultiviewCreateInfo.
type RenderPassMultiviewCreateInfo struct {
	ptr *C.VkRenderPassMultiviewCreateInfo
}

// RenderPassMultiviewCreateInfoNil is a null pointer.
var RenderPassMultiviewCreateInfoNil RenderPassMultiviewCreateInfo

// RenderPassMultiviewCreateInfoSizeOf is the byte size of VkRenderPassMultiviewCreateInfo.
const RenderPassMultiviewCreateInfoSizeOf = int(C.sizeof_VkRenderPassMultiviewCreateInfo)

// RenderPassMultiviewCreateInfoFromPtr converts a raw pointer to a RenderPassMultiviewCreateInfo.
func RenderPassMultiviewCreateInfoFromPtr(ptr unsafe.Pointer) RenderPassMultiviewCreateInfo {
	return RenderPassMultiviewCreateInfo{ptr: (*C.VkRenderPassMultiviewCreateInfo)(ptr)}
}

// RenderPassMultiviewCreateInfoAlloc allocates a continuous block of VkRenderPassMultiviewCreateInfo.
func RenderPassMultiviewCreateInfoAlloc(alloc ffi.Allocator, count int) RenderPassMultiviewCreateInfo {
	ptr := alloc.Allocate(RenderPassMultiviewCreateInfoSizeOf * count)
	return RenderPassMultiviewCreateInfo{ptr: (*C.VkRenderPassMultiviewCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p RenderPassMultiviewCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p RenderPassMultiviewCreateInfo) Offset(offset int) RenderPassMultiviewCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*RenderPassMultiviewCreateInfoSizeOf)
	return RenderPassMultiviewCreateInfo{ptr: (*C.VkRenderPassMultiviewCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p RenderPassMultiviewCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p RenderPassMultiviewCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p RenderPassMultiviewCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p RenderPassMultiviewCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSubpassCount returns the value in subpassCount.
func (p RenderPassMultiviewCreateInfo) GetSubpassCount() uint32 {
	return uint32(p.ptr.subpassCount)
}

// SetSubpassCount sets the value in subpassCount.
func (p RenderPassMultiviewCreateInfo) SetSubpassCount(value uint32) {
	p.ptr.subpassCount = (C.uint32_t)(value)
}

// GetPViewMasks returns the value in pViewMasks.
func (p RenderPassMultiviewCreateInfo) GetPViewMasks() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pViewMasks))
}

// SetPViewMasks sets the value in pViewMasks.
func (p RenderPassMultiviewCreateInfo) SetPViewMasks(value ffi.Ref[uint32]) {
	p.ptr.pViewMasks = (*C.uint32_t)(value.Raw())
}

// GetDependencyCount returns the value in dependencyCount.
func (p RenderPassMultiviewCreateInfo) GetDependencyCount() uint32 {
	return uint32(p.ptr.dependencyCount)
}

// SetDependencyCount sets the value in dependencyCount.
func (p RenderPassMultiviewCreateInfo) SetDependencyCount(value uint32) {
	p.ptr.dependencyCount = (C.uint32_t)(value)
}

// GetPViewOffsets returns the value in pViewOffsets.
func (p RenderPassMultiviewCreateInfo) GetPViewOffsets() ffi.Ref[int32] {
	return ffi.RefFromPtr[int32](unsafe.Pointer(p.ptr.pViewOffsets))
}

// SetPViewOffsets sets the value in pViewOffsets.
func (p RenderPassMultiviewCreateInfo) SetPViewOffsets(value ffi.Ref[int32]) {
	p.ptr.pViewOffsets = (*C.int32_t)(value.Raw())
}

// GetCorrelationMaskCount returns the value in correlationMaskCount.
func (p RenderPassMultiviewCreateInfo) GetCorrelationMaskCount() uint32 {
	return uint32(p.ptr.correlationMaskCount)
}

// SetCorrelationMaskCount sets the value in correlationMaskCount.
func (p RenderPassMultiviewCreateInfo) SetCorrelationMaskCount(value uint32) {
	p.ptr.correlationMaskCount = (C.uint32_t)(value)
}

// GetPCorrelationMasks returns the value in pCorrelationMasks.
func (p RenderPassMultiviewCreateInfo) GetPCorrelationMasks() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pCorrelationMasks))
}

// SetPCorrelationMasks sets the value in pCorrelationMasks.
func (p RenderPassMultiviewCreateInfo) SetPCorrelationMasks(value ffi.Ref[uint32]) {
	p.ptr.pCorrelationMasks = (*C.uint32_t)(value.Raw())
}

// RenderingAreaInfo wraps VkRenderingAreaInfo.
type RenderingAreaInfo struct {
	ptr *C.VkRenderingAreaInfo
}

// RenderingAreaInfoNil is a null pointer.
var RenderingAreaInfoNil RenderingAreaInfo

// RenderingAreaInfoSizeOf is the byte size of VkRenderingAreaInfo.
const RenderingAreaInfoSizeOf = int(C.sizeof_VkRenderingAreaInfo)

// RenderingAreaInfoFromPtr converts a raw pointer to a RenderingAreaInfo.
func RenderingAreaInfoFromPtr(ptr unsafe.Pointer) RenderingAreaInfo {
	return RenderingAreaInfo{ptr: (*C.VkRenderingAreaInfo)(ptr)}
}

// RenderingAreaInfoAlloc allocates a continuous block of VkRenderingAreaInfo.
func RenderingAreaInfoAlloc(alloc ffi.Allocator, count int) RenderingAreaInfo {
	ptr := alloc.Allocate(RenderingAreaInfoSizeOf * count)
	return RenderingAreaInfo{ptr: (*C.VkRenderingAreaInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p RenderingAreaInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p RenderingAreaInfo) Offset(offset int) RenderingAreaInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*RenderingAreaInfoSizeOf)
	return RenderingAreaInfo{ptr: (*C.VkRenderingAreaInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p RenderingAreaInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p RenderingAreaInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p RenderingAreaInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p RenderingAreaInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetViewMask returns the value in viewMask.
func (p RenderingAreaInfo) GetViewMask() uint32 {
	return uint32(p.ptr.viewMask)
}

// SetViewMask sets the value in viewMask.
func (p RenderingAreaInfo) SetViewMask(value uint32) {
	p.ptr.viewMask = (C.uint32_t)(value)
}

// GetColorAttachmentCount returns the value in colorAttachmentCount.
func (p RenderingAreaInfo) GetColorAttachmentCount() uint32 {
	return uint32(p.ptr.colorAttachmentCount)
}

// SetColorAttachmentCount sets the value in colorAttachmentCount.
func (p RenderingAreaInfo) SetColorAttachmentCount(value uint32) {
	p.ptr.colorAttachmentCount = (C.uint32_t)(value)
}

// GetPColorAttachmentFormats returns the value in pColorAttachmentFormats.
func (p RenderingAreaInfo) GetPColorAttachmentFormats() ffi.Ref[Format] {
	return ffi.RefFromPtr[Format](unsafe.Pointer(p.ptr.pColorAttachmentFormats))
}

// SetPColorAttachmentFormats sets the value in pColorAttachmentFormats.
func (p RenderingAreaInfo) SetPColorAttachmentFormats(value ffi.Ref[Format]) {
	p.ptr.pColorAttachmentFormats = (*C.VkFormat)(value.Raw())
}

// GetDepthAttachmentFormat returns the value in depthAttachmentFormat.
func (p RenderingAreaInfo) GetDepthAttachmentFormat() Format {
	return Format(p.ptr.depthAttachmentFormat)
}

// SetDepthAttachmentFormat sets the value in depthAttachmentFormat.
func (p RenderingAreaInfo) SetDepthAttachmentFormat(value Format) {
	p.ptr.depthAttachmentFormat = (C.VkFormat)(value)
}

// GetStencilAttachmentFormat returns the value in stencilAttachmentFormat.
func (p RenderingAreaInfo) GetStencilAttachmentFormat() Format {
	return Format(p.ptr.stencilAttachmentFormat)
}

// SetStencilAttachmentFormat sets the value in stencilAttachmentFormat.
func (p RenderingAreaInfo) SetStencilAttachmentFormat(value Format) {
	p.ptr.stencilAttachmentFormat = (C.VkFormat)(value)
}

// RenderingAttachmentInfo wraps VkRenderingAttachmentInfo.
type RenderingAttachmentInfo struct {
	ptr *C.VkRenderingAttachmentInfo
}

// RenderingAttachmentInfoNil is a null pointer.
var RenderingAttachmentInfoNil RenderingAttachmentInfo

// RenderingAttachmentInfoSizeOf is the byte size of VkRenderingAttachmentInfo.
const RenderingAttachmentInfoSizeOf = int(C.sizeof_VkRenderingAttachmentInfo)

// RenderingAttachmentInfoFromPtr converts a raw pointer to a RenderingAttachmentInfo.
func RenderingAttachmentInfoFromPtr(ptr unsafe.Pointer) RenderingAttachmentInfo {
	return RenderingAttachmentInfo{ptr: (*C.VkRenderingAttachmentInfo)(ptr)}
}

// RenderingAttachmentInfoAlloc allocates a continuous block of VkRenderingAttachmentInfo.
func RenderingAttachmentInfoAlloc(alloc ffi.Allocator, count int) RenderingAttachmentInfo {
	ptr := alloc.Allocate(RenderingAttachmentInfoSizeOf * count)
	return RenderingAttachmentInfo{ptr: (*C.VkRenderingAttachmentInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p RenderingAttachmentInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p RenderingAttachmentInfo) Offset(offset int) RenderingAttachmentInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*RenderingAttachmentInfoSizeOf)
	return RenderingAttachmentInfo{ptr: (*C.VkRenderingAttachmentInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p RenderingAttachmentInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p RenderingAttachmentInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p RenderingAttachmentInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p RenderingAttachmentInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetImageView returns the value in imageView.
func (p RenderingAttachmentInfo) GetImageView() ImageView {
	return ImageView(p.ptr.imageView)
}

// SetImageView sets the value in imageView.
func (p RenderingAttachmentInfo) SetImageView(value ImageView) {
	p.ptr.imageView = (C.VkImageView)(value)
}

// GetImageLayout returns the value in imageLayout.
func (p RenderingAttachmentInfo) GetImageLayout() ImageLayout {
	return ImageLayout(p.ptr.imageLayout)
}

// SetImageLayout sets the value in imageLayout.
func (p RenderingAttachmentInfo) SetImageLayout(value ImageLayout) {
	p.ptr.imageLayout = (C.VkImageLayout)(value)
}

// GetResolveMode returns the value in resolveMode.
func (p RenderingAttachmentInfo) GetResolveMode() ResolveModeFlags {
	return ResolveModeFlags(p.ptr.resolveMode)
}

// SetResolveMode sets the value in resolveMode.
func (p RenderingAttachmentInfo) SetResolveMode(value ResolveModeFlags) {
	p.ptr.resolveMode = (C.VkResolveModeFlagBits)(value)
}

// GetResolveImageView returns the value in resolveImageView.
func (p RenderingAttachmentInfo) GetResolveImageView() ImageView {
	return ImageView(p.ptr.resolveImageView)
}

// SetResolveImageView sets the value in resolveImageView.
func (p RenderingAttachmentInfo) SetResolveImageView(value ImageView) {
	p.ptr.resolveImageView = (C.VkImageView)(value)
}

// GetResolveImageLayout returns the value in resolveImageLayout.
func (p RenderingAttachmentInfo) GetResolveImageLayout() ImageLayout {
	return ImageLayout(p.ptr.resolveImageLayout)
}

// SetResolveImageLayout sets the value in resolveImageLayout.
func (p RenderingAttachmentInfo) SetResolveImageLayout(value ImageLayout) {
	p.ptr.resolveImageLayout = (C.VkImageLayout)(value)
}

// GetLoadOp returns the value in loadOp.
func (p RenderingAttachmentInfo) GetLoadOp() AttachmentLoadOp {
	return AttachmentLoadOp(p.ptr.loadOp)
}

// SetLoadOp sets the value in loadOp.
func (p RenderingAttachmentInfo) SetLoadOp(value AttachmentLoadOp) {
	p.ptr.loadOp = (C.VkAttachmentLoadOp)(value)
}

// GetStoreOp returns the value in storeOp.
func (p RenderingAttachmentInfo) GetStoreOp() AttachmentStoreOp {
	return AttachmentStoreOp(p.ptr.storeOp)
}

// SetStoreOp sets the value in storeOp.
func (p RenderingAttachmentInfo) SetStoreOp(value AttachmentStoreOp) {
	p.ptr.storeOp = (C.VkAttachmentStoreOp)(value)
}

// RenderingAttachmentInfo.clearValue is unsupported: unknown type VkClearValue.

// RenderingAttachmentLocationInfo wraps VkRenderingAttachmentLocationInfo.
type RenderingAttachmentLocationInfo struct {
	ptr *C.VkRenderingAttachmentLocationInfo
}

// RenderingAttachmentLocationInfoNil is a null pointer.
var RenderingAttachmentLocationInfoNil RenderingAttachmentLocationInfo

// RenderingAttachmentLocationInfoSizeOf is the byte size of VkRenderingAttachmentLocationInfo.
const RenderingAttachmentLocationInfoSizeOf = int(C.sizeof_VkRenderingAttachmentLocationInfo)

// RenderingAttachmentLocationInfoFromPtr converts a raw pointer to a RenderingAttachmentLocationInfo.
func RenderingAttachmentLocationInfoFromPtr(ptr unsafe.Pointer) RenderingAttachmentLocationInfo {
	return RenderingAttachmentLocationInfo{ptr: (*C.VkRenderingAttachmentLocationInfo)(ptr)}
}

// RenderingAttachmentLocationInfoAlloc allocates a continuous block of VkRenderingAttachmentLocationInfo.
func RenderingAttachmentLocationInfoAlloc(alloc ffi.Allocator, count int) RenderingAttachmentLocationInfo {
	ptr := alloc.Allocate(RenderingAttachmentLocationInfoSizeOf * count)
	return RenderingAttachmentLocationInfo{ptr: (*C.VkRenderingAttachmentLocationInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p RenderingAttachmentLocationInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p RenderingAttachmentLocationInfo) Offset(offset int) RenderingAttachmentLocationInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*RenderingAttachmentLocationInfoSizeOf)
	return RenderingAttachmentLocationInfo{ptr: (*C.VkRenderingAttachmentLocationInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p RenderingAttachmentLocationInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p RenderingAttachmentLocationInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p RenderingAttachmentLocationInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p RenderingAttachmentLocationInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetColorAttachmentCount returns the value in colorAttachmentCount.
func (p RenderingAttachmentLocationInfo) GetColorAttachmentCount() uint32 {
	return uint32(p.ptr.colorAttachmentCount)
}

// SetColorAttachmentCount sets the value in colorAttachmentCount.
func (p RenderingAttachmentLocationInfo) SetColorAttachmentCount(value uint32) {
	p.ptr.colorAttachmentCount = (C.uint32_t)(value)
}

// GetPColorAttachmentLocations returns the value in pColorAttachmentLocations.
func (p RenderingAttachmentLocationInfo) GetPColorAttachmentLocations() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pColorAttachmentLocations))
}

// SetPColorAttachmentLocations sets the value in pColorAttachmentLocations.
func (p RenderingAttachmentLocationInfo) SetPColorAttachmentLocations(value ffi.Ref[uint32]) {
	p.ptr.pColorAttachmentLocations = (*C.uint32_t)(value.Raw())
}

// RenderingInfo wraps VkRenderingInfo.
type RenderingInfo struct {
	ptr *C.VkRenderingInfo
}

// RenderingInfoNil is a null pointer.
var RenderingInfoNil RenderingInfo

// RenderingInfoSizeOf is the byte size of VkRenderingInfo.
const RenderingInfoSizeOf = int(C.sizeof_VkRenderingInfo)

// RenderingInfoFromPtr converts a raw pointer to a RenderingInfo.
func RenderingInfoFromPtr(ptr unsafe.Pointer) RenderingInfo {
	return RenderingInfo{ptr: (*C.VkRenderingInfo)(ptr)}
}

// RenderingInfoAlloc allocates a continuous block of VkRenderingInfo.
func RenderingInfoAlloc(alloc ffi.Allocator, count int) RenderingInfo {
	ptr := alloc.Allocate(RenderingInfoSizeOf * count)
	return RenderingInfo{ptr: (*C.VkRenderingInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p RenderingInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p RenderingInfo) Offset(offset int) RenderingInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*RenderingInfoSizeOf)
	return RenderingInfo{ptr: (*C.VkRenderingInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p RenderingInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p RenderingInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p RenderingInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p RenderingInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p RenderingInfo) GetFlags() RenderingFlags {
	return RenderingFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p RenderingInfo) SetFlags(value RenderingFlags) {
	p.ptr.flags = (C.VkRenderingFlags)(value)
}

// RefRenderArea returns pointer to the renderArea field.
func (p RenderingInfo) RefRenderArea() Rect2D {
	return Rect2D{ptr: (*C.VkRect2D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkRenderingInfo_renderArea)))}
}

// GetLayerCount returns the value in layerCount.
func (p RenderingInfo) GetLayerCount() uint32 {
	return uint32(p.ptr.layerCount)
}

// SetLayerCount sets the value in layerCount.
func (p RenderingInfo) SetLayerCount(value uint32) {
	p.ptr.layerCount = (C.uint32_t)(value)
}

// GetViewMask returns the value in viewMask.
func (p RenderingInfo) GetViewMask() uint32 {
	return uint32(p.ptr.viewMask)
}

// SetViewMask sets the value in viewMask.
func (p RenderingInfo) SetViewMask(value uint32) {
	p.ptr.viewMask = (C.uint32_t)(value)
}

// GetColorAttachmentCount returns the value in colorAttachmentCount.
func (p RenderingInfo) GetColorAttachmentCount() uint32 {
	return uint32(p.ptr.colorAttachmentCount)
}

// SetColorAttachmentCount sets the value in colorAttachmentCount.
func (p RenderingInfo) SetColorAttachmentCount(value uint32) {
	p.ptr.colorAttachmentCount = (C.uint32_t)(value)
}

// GetPColorAttachments returns the value in pColorAttachments.
func (p RenderingInfo) GetPColorAttachments() RenderingAttachmentInfo {
	return RenderingAttachmentInfo{ptr: p.ptr.pColorAttachments}
}

// SetPColorAttachments sets the value in pColorAttachments.
func (p RenderingInfo) SetPColorAttachments(value RenderingAttachmentInfo) {
	p.ptr.pColorAttachments = value.ptr
}

// GetPDepthAttachment returns the value in pDepthAttachment.
func (p RenderingInfo) GetPDepthAttachment() RenderingAttachmentInfo {
	return RenderingAttachmentInfo{ptr: p.ptr.pDepthAttachment}
}

// SetPDepthAttachment sets the value in pDepthAttachment.
func (p RenderingInfo) SetPDepthAttachment(value RenderingAttachmentInfo) {
	p.ptr.pDepthAttachment = value.ptr
}

// GetPStencilAttachment returns the value in pStencilAttachment.
func (p RenderingInfo) GetPStencilAttachment() RenderingAttachmentInfo {
	return RenderingAttachmentInfo{ptr: p.ptr.pStencilAttachment}
}

// SetPStencilAttachment sets the value in pStencilAttachment.
func (p RenderingInfo) SetPStencilAttachment(value RenderingAttachmentInfo) {
	p.ptr.pStencilAttachment = value.ptr
}

// RenderingInputAttachmentIndexInfo wraps VkRenderingInputAttachmentIndexInfo.
type RenderingInputAttachmentIndexInfo struct {
	ptr *C.VkRenderingInputAttachmentIndexInfo
}

// RenderingInputAttachmentIndexInfoNil is a null pointer.
var RenderingInputAttachmentIndexInfoNil RenderingInputAttachmentIndexInfo

// RenderingInputAttachmentIndexInfoSizeOf is the byte size of VkRenderingInputAttachmentIndexInfo.
const RenderingInputAttachmentIndexInfoSizeOf = int(C.sizeof_VkRenderingInputAttachmentIndexInfo)

// RenderingInputAttachmentIndexInfoFromPtr converts a raw pointer to a RenderingInputAttachmentIndexInfo.
func RenderingInputAttachmentIndexInfoFromPtr(ptr unsafe.Pointer) RenderingInputAttachmentIndexInfo {
	return RenderingInputAttachmentIndexInfo{ptr: (*C.VkRenderingInputAttachmentIndexInfo)(ptr)}
}

// RenderingInputAttachmentIndexInfoAlloc allocates a continuous block of VkRenderingInputAttachmentIndexInfo.
func RenderingInputAttachmentIndexInfoAlloc(alloc ffi.Allocator, count int) RenderingInputAttachmentIndexInfo {
	ptr := alloc.Allocate(RenderingInputAttachmentIndexInfoSizeOf * count)
	return RenderingInputAttachmentIndexInfo{ptr: (*C.VkRenderingInputAttachmentIndexInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p RenderingInputAttachmentIndexInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p RenderingInputAttachmentIndexInfo) Offset(offset int) RenderingInputAttachmentIndexInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*RenderingInputAttachmentIndexInfoSizeOf)
	return RenderingInputAttachmentIndexInfo{ptr: (*C.VkRenderingInputAttachmentIndexInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p RenderingInputAttachmentIndexInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p RenderingInputAttachmentIndexInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p RenderingInputAttachmentIndexInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p RenderingInputAttachmentIndexInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetColorAttachmentCount returns the value in colorAttachmentCount.
func (p RenderingInputAttachmentIndexInfo) GetColorAttachmentCount() uint32 {
	return uint32(p.ptr.colorAttachmentCount)
}

// SetColorAttachmentCount sets the value in colorAttachmentCount.
func (p RenderingInputAttachmentIndexInfo) SetColorAttachmentCount(value uint32) {
	p.ptr.colorAttachmentCount = (C.uint32_t)(value)
}

// GetPColorAttachmentInputIndices returns the value in pColorAttachmentInputIndices.
func (p RenderingInputAttachmentIndexInfo) GetPColorAttachmentInputIndices() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pColorAttachmentInputIndices))
}

// SetPColorAttachmentInputIndices sets the value in pColorAttachmentInputIndices.
func (p RenderingInputAttachmentIndexInfo) SetPColorAttachmentInputIndices(value ffi.Ref[uint32]) {
	p.ptr.pColorAttachmentInputIndices = (*C.uint32_t)(value.Raw())
}

// GetPDepthInputAttachmentIndex returns the value in pDepthInputAttachmentIndex.
func (p RenderingInputAttachmentIndexInfo) GetPDepthInputAttachmentIndex() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pDepthInputAttachmentIndex))
}

// SetPDepthInputAttachmentIndex sets the value in pDepthInputAttachmentIndex.
func (p RenderingInputAttachmentIndexInfo) SetPDepthInputAttachmentIndex(value ffi.Ref[uint32]) {
	p.ptr.pDepthInputAttachmentIndex = (*C.uint32_t)(value.Raw())
}

// GetPStencilInputAttachmentIndex returns the value in pStencilInputAttachmentIndex.
func (p RenderingInputAttachmentIndexInfo) GetPStencilInputAttachmentIndex() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pStencilInputAttachmentIndex))
}

// SetPStencilInputAttachmentIndex sets the value in pStencilInputAttachmentIndex.
func (p RenderingInputAttachmentIndexInfo) SetPStencilInputAttachmentIndex(value ffi.Ref[uint32]) {
	p.ptr.pStencilInputAttachmentIndex = (*C.uint32_t)(value.Raw())
}

// ResolveImageInfo2 wraps VkResolveImageInfo2.
type ResolveImageInfo2 struct {
	ptr *C.VkResolveImageInfo2
}

// ResolveImageInfo2Nil is a null pointer.
var ResolveImageInfo2Nil ResolveImageInfo2

// ResolveImageInfo2SizeOf is the byte size of VkResolveImageInfo2.
const ResolveImageInfo2SizeOf = int(C.sizeof_VkResolveImageInfo2)

// ResolveImageInfo2FromPtr converts a raw pointer to a ResolveImageInfo2.
func ResolveImageInfo2FromPtr(ptr unsafe.Pointer) ResolveImageInfo2 {
	return ResolveImageInfo2{ptr: (*C.VkResolveImageInfo2)(ptr)}
}

// ResolveImageInfo2Alloc allocates a continuous block of VkResolveImageInfo2.
func ResolveImageInfo2Alloc(alloc ffi.Allocator, count int) ResolveImageInfo2 {
	ptr := alloc.Allocate(ResolveImageInfo2SizeOf * count)
	return ResolveImageInfo2{ptr: (*C.VkResolveImageInfo2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ResolveImageInfo2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ResolveImageInfo2) Offset(offset int) ResolveImageInfo2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ResolveImageInfo2SizeOf)
	return ResolveImageInfo2{ptr: (*C.VkResolveImageInfo2)(ptr)}
}

// GetSType returns the value in sType.
func (p ResolveImageInfo2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ResolveImageInfo2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ResolveImageInfo2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ResolveImageInfo2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcImage returns the value in srcImage.
func (p ResolveImageInfo2) GetSrcImage() Image {
	return Image(p.ptr.srcImage)
}

// SetSrcImage sets the value in srcImage.
func (p ResolveImageInfo2) SetSrcImage(value Image) {
	p.ptr.srcImage = (C.VkImage)(value)
}

// GetSrcImageLayout returns the value in srcImageLayout.
func (p ResolveImageInfo2) GetSrcImageLayout() ImageLayout {
	return ImageLayout(p.ptr.srcImageLayout)
}

// SetSrcImageLayout sets the value in srcImageLayout.
func (p ResolveImageInfo2) SetSrcImageLayout(value ImageLayout) {
	p.ptr.srcImageLayout = (C.VkImageLayout)(value)
}

// GetDstImage returns the value in dstImage.
func (p ResolveImageInfo2) GetDstImage() Image {
	return Image(p.ptr.dstImage)
}

// SetDstImage sets the value in dstImage.
func (p ResolveImageInfo2) SetDstImage(value Image) {
	p.ptr.dstImage = (C.VkImage)(value)
}

// GetDstImageLayout returns the value in dstImageLayout.
func (p ResolveImageInfo2) GetDstImageLayout() ImageLayout {
	return ImageLayout(p.ptr.dstImageLayout)
}

// SetDstImageLayout sets the value in dstImageLayout.
func (p ResolveImageInfo2) SetDstImageLayout(value ImageLayout) {
	p.ptr.dstImageLayout = (C.VkImageLayout)(value)
}

// GetRegionCount returns the value in regionCount.
func (p ResolveImageInfo2) GetRegionCount() uint32 {
	return uint32(p.ptr.regionCount)
}

// SetRegionCount sets the value in regionCount.
func (p ResolveImageInfo2) SetRegionCount(value uint32) {
	p.ptr.regionCount = (C.uint32_t)(value)
}

// GetPRegions returns the value in pRegions.
func (p ResolveImageInfo2) GetPRegions() ImageResolve2 {
	return ImageResolve2{ptr: p.ptr.pRegions}
}

// SetPRegions sets the value in pRegions.
func (p ResolveImageInfo2) SetPRegions(value ImageResolve2) {
	p.ptr.pRegions = value.ptr
}

// SamplerCreateInfo wraps VkSamplerCreateInfo.
type SamplerCreateInfo struct {
	ptr *C.VkSamplerCreateInfo
}

// SamplerCreateInfoNil is a null pointer.
var SamplerCreateInfoNil SamplerCreateInfo

// SamplerCreateInfoSizeOf is the byte size of VkSamplerCreateInfo.
const SamplerCreateInfoSizeOf = int(C.sizeof_VkSamplerCreateInfo)

// SamplerCreateInfoFromPtr converts a raw pointer to a SamplerCreateInfo.
func SamplerCreateInfoFromPtr(ptr unsafe.Pointer) SamplerCreateInfo {
	return SamplerCreateInfo{ptr: (*C.VkSamplerCreateInfo)(ptr)}
}

// SamplerCreateInfoAlloc allocates a continuous block of VkSamplerCreateInfo.
func SamplerCreateInfoAlloc(alloc ffi.Allocator, count int) SamplerCreateInfo {
	ptr := alloc.Allocate(SamplerCreateInfoSizeOf * count)
	return SamplerCreateInfo{ptr: (*C.VkSamplerCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SamplerCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SamplerCreateInfo) Offset(offset int) SamplerCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SamplerCreateInfoSizeOf)
	return SamplerCreateInfo{ptr: (*C.VkSamplerCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p SamplerCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SamplerCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SamplerCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SamplerCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p SamplerCreateInfo) GetFlags() SamplerCreateFlags {
	return SamplerCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p SamplerCreateInfo) SetFlags(value SamplerCreateFlags) {
	p.ptr.flags = (C.VkSamplerCreateFlags)(value)
}

// GetMagFilter returns the value in magFilter.
func (p SamplerCreateInfo) GetMagFilter() Filter {
	return Filter(p.ptr.magFilter)
}

// SetMagFilter sets the value in magFilter.
func (p SamplerCreateInfo) SetMagFilter(value Filter) {
	p.ptr.magFilter = (C.VkFilter)(value)
}

// GetMinFilter returns the value in minFilter.
func (p SamplerCreateInfo) GetMinFilter() Filter {
	return Filter(p.ptr.minFilter)
}

// SetMinFilter sets the value in minFilter.
func (p SamplerCreateInfo) SetMinFilter(value Filter) {
	p.ptr.minFilter = (C.VkFilter)(value)
}

// GetMipmapMode returns the value in mipmapMode.
func (p SamplerCreateInfo) GetMipmapMode() SamplerMipmapMode {
	return SamplerMipmapMode(p.ptr.mipmapMode)
}

// SetMipmapMode sets the value in mipmapMode.
func (p SamplerCreateInfo) SetMipmapMode(value SamplerMipmapMode) {
	p.ptr.mipmapMode = (C.VkSamplerMipmapMode)(value)
}

// GetAddressModeU returns the value in addressModeU.
func (p SamplerCreateInfo) GetAddressModeU() SamplerAddressMode {
	return SamplerAddressMode(p.ptr.addressModeU)
}

// SetAddressModeU sets the value in addressModeU.
func (p SamplerCreateInfo) SetAddressModeU(value SamplerAddressMode) {
	p.ptr.addressModeU = (C.VkSamplerAddressMode)(value)
}

// GetAddressModeV returns the value in addressModeV.
func (p SamplerCreateInfo) GetAddressModeV() SamplerAddressMode {
	return SamplerAddressMode(p.ptr.addressModeV)
}

// SetAddressModeV sets the value in addressModeV.
func (p SamplerCreateInfo) SetAddressModeV(value SamplerAddressMode) {
	p.ptr.addressModeV = (C.VkSamplerAddressMode)(value)
}

// GetAddressModeW returns the value in addressModeW.
func (p SamplerCreateInfo) GetAddressModeW() SamplerAddressMode {
	return SamplerAddressMode(p.ptr.addressModeW)
}

// SetAddressModeW sets the value in addressModeW.
func (p SamplerCreateInfo) SetAddressModeW(value SamplerAddressMode) {
	p.ptr.addressModeW = (C.VkSamplerAddressMode)(value)
}

// GetMipLodBias returns the value in mipLodBias.
func (p SamplerCreateInfo) GetMipLodBias() float32 {
	return float32(p.ptr.mipLodBias)
}

// SetMipLodBias sets the value in mipLodBias.
func (p SamplerCreateInfo) SetMipLodBias(value float32) {
	p.ptr.mipLodBias = (C.float)(value)
}

// GetAnisotropyEnable returns the value in anisotropyEnable.
func (p SamplerCreateInfo) GetAnisotropyEnable() bool {
	return p.ptr.anisotropyEnable != 0
}

// SetAnisotropyEnable sets the value in anisotropyEnable.
func (p SamplerCreateInfo) SetAnisotropyEnable(value bool) {
	if value {
		p.ptr.anisotropyEnable = C.VkBool32(1)
	} else {
		p.ptr.anisotropyEnable = C.VkBool32(0)
	}
}

// GetMaxAnisotropy returns the value in maxAnisotropy.
func (p SamplerCreateInfo) GetMaxAnisotropy() float32 {
	return float32(p.ptr.maxAnisotropy)
}

// SetMaxAnisotropy sets the value in maxAnisotropy.
func (p SamplerCreateInfo) SetMaxAnisotropy(value float32) {
	p.ptr.maxAnisotropy = (C.float)(value)
}

// GetCompareEnable returns the value in compareEnable.
func (p SamplerCreateInfo) GetCompareEnable() bool {
	return p.ptr.compareEnable != 0
}

// SetCompareEnable sets the value in compareEnable.
func (p SamplerCreateInfo) SetCompareEnable(value bool) {
	if value {
		p.ptr.compareEnable = C.VkBool32(1)
	} else {
		p.ptr.compareEnable = C.VkBool32(0)
	}
}

// GetCompareOp returns the value in compareOp.
func (p SamplerCreateInfo) GetCompareOp() CompareOp {
	return CompareOp(p.ptr.compareOp)
}

// SetCompareOp sets the value in compareOp.
func (p SamplerCreateInfo) SetCompareOp(value CompareOp) {
	p.ptr.compareOp = (C.VkCompareOp)(value)
}

// GetMinLod returns the value in minLod.
func (p SamplerCreateInfo) GetMinLod() float32 {
	return float32(p.ptr.minLod)
}

// SetMinLod sets the value in minLod.
func (p SamplerCreateInfo) SetMinLod(value float32) {
	p.ptr.minLod = (C.float)(value)
}

// GetMaxLod returns the value in maxLod.
func (p SamplerCreateInfo) GetMaxLod() float32 {
	return float32(p.ptr.maxLod)
}

// SetMaxLod sets the value in maxLod.
func (p SamplerCreateInfo) SetMaxLod(value float32) {
	p.ptr.maxLod = (C.float)(value)
}

// GetBorderColor returns the value in borderColor.
func (p SamplerCreateInfo) GetBorderColor() BorderColor {
	return BorderColor(p.ptr.borderColor)
}

// SetBorderColor sets the value in borderColor.
func (p SamplerCreateInfo) SetBorderColor(value BorderColor) {
	p.ptr.borderColor = (C.VkBorderColor)(value)
}

// GetUnnormalizedCoordinates returns the value in unnormalizedCoordinates.
func (p SamplerCreateInfo) GetUnnormalizedCoordinates() bool {
	return p.ptr.unnormalizedCoordinates != 0
}

// SetUnnormalizedCoordinates sets the value in unnormalizedCoordinates.
func (p SamplerCreateInfo) SetUnnormalizedCoordinates(value bool) {
	if value {
		p.ptr.unnormalizedCoordinates = C.VkBool32(1)
	} else {
		p.ptr.unnormalizedCoordinates = C.VkBool32(0)
	}
}

// SamplerReductionModeCreateInfo wraps VkSamplerReductionModeCreateInfo.
type SamplerReductionModeCreateInfo struct {
	ptr *C.VkSamplerReductionModeCreateInfo
}

// SamplerReductionModeCreateInfoNil is a null pointer.
var SamplerReductionModeCreateInfoNil SamplerReductionModeCreateInfo

// SamplerReductionModeCreateInfoSizeOf is the byte size of VkSamplerReductionModeCreateInfo.
const SamplerReductionModeCreateInfoSizeOf = int(C.sizeof_VkSamplerReductionModeCreateInfo)

// SamplerReductionModeCreateInfoFromPtr converts a raw pointer to a SamplerReductionModeCreateInfo.
func SamplerReductionModeCreateInfoFromPtr(ptr unsafe.Pointer) SamplerReductionModeCreateInfo {
	return SamplerReductionModeCreateInfo{ptr: (*C.VkSamplerReductionModeCreateInfo)(ptr)}
}

// SamplerReductionModeCreateInfoAlloc allocates a continuous block of VkSamplerReductionModeCreateInfo.
func SamplerReductionModeCreateInfoAlloc(alloc ffi.Allocator, count int) SamplerReductionModeCreateInfo {
	ptr := alloc.Allocate(SamplerReductionModeCreateInfoSizeOf * count)
	return SamplerReductionModeCreateInfo{ptr: (*C.VkSamplerReductionModeCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SamplerReductionModeCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SamplerReductionModeCreateInfo) Offset(offset int) SamplerReductionModeCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SamplerReductionModeCreateInfoSizeOf)
	return SamplerReductionModeCreateInfo{ptr: (*C.VkSamplerReductionModeCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p SamplerReductionModeCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SamplerReductionModeCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SamplerReductionModeCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SamplerReductionModeCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetReductionMode returns the value in reductionMode.
func (p SamplerReductionModeCreateInfo) GetReductionMode() SamplerReductionMode {
	return SamplerReductionMode(p.ptr.reductionMode)
}

// SetReductionMode sets the value in reductionMode.
func (p SamplerReductionModeCreateInfo) SetReductionMode(value SamplerReductionMode) {
	p.ptr.reductionMode = (C.VkSamplerReductionMode)(value)
}

// SamplerYcbcrConversionCreateInfo wraps VkSamplerYcbcrConversionCreateInfo.
type SamplerYcbcrConversionCreateInfo struct {
	ptr *C.VkSamplerYcbcrConversionCreateInfo
}

// SamplerYcbcrConversionCreateInfoNil is a null pointer.
var SamplerYcbcrConversionCreateInfoNil SamplerYcbcrConversionCreateInfo

// SamplerYcbcrConversionCreateInfoSizeOf is the byte size of VkSamplerYcbcrConversionCreateInfo.
const SamplerYcbcrConversionCreateInfoSizeOf = int(C.sizeof_VkSamplerYcbcrConversionCreateInfo)

// SamplerYcbcrConversionCreateInfoFromPtr converts a raw pointer to a SamplerYcbcrConversionCreateInfo.
func SamplerYcbcrConversionCreateInfoFromPtr(ptr unsafe.Pointer) SamplerYcbcrConversionCreateInfo {
	return SamplerYcbcrConversionCreateInfo{ptr: (*C.VkSamplerYcbcrConversionCreateInfo)(ptr)}
}

// SamplerYcbcrConversionCreateInfoAlloc allocates a continuous block of VkSamplerYcbcrConversionCreateInfo.
func SamplerYcbcrConversionCreateInfoAlloc(alloc ffi.Allocator, count int) SamplerYcbcrConversionCreateInfo {
	ptr := alloc.Allocate(SamplerYcbcrConversionCreateInfoSizeOf * count)
	return SamplerYcbcrConversionCreateInfo{ptr: (*C.VkSamplerYcbcrConversionCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SamplerYcbcrConversionCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SamplerYcbcrConversionCreateInfo) Offset(offset int) SamplerYcbcrConversionCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SamplerYcbcrConversionCreateInfoSizeOf)
	return SamplerYcbcrConversionCreateInfo{ptr: (*C.VkSamplerYcbcrConversionCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p SamplerYcbcrConversionCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SamplerYcbcrConversionCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SamplerYcbcrConversionCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SamplerYcbcrConversionCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFormat returns the value in format.
func (p SamplerYcbcrConversionCreateInfo) GetFormat() Format {
	return Format(p.ptr.format)
}

// SetFormat sets the value in format.
func (p SamplerYcbcrConversionCreateInfo) SetFormat(value Format) {
	p.ptr.format = (C.VkFormat)(value)
}

// GetYcbcrModel returns the value in ycbcrModel.
func (p SamplerYcbcrConversionCreateInfo) GetYcbcrModel() SamplerYcbcrModelConversion {
	return SamplerYcbcrModelConversion(p.ptr.ycbcrModel)
}

// SetYcbcrModel sets the value in ycbcrModel.
func (p SamplerYcbcrConversionCreateInfo) SetYcbcrModel(value SamplerYcbcrModelConversion) {
	p.ptr.ycbcrModel = (C.VkSamplerYcbcrModelConversion)(value)
}

// GetYcbcrRange returns the value in ycbcrRange.
func (p SamplerYcbcrConversionCreateInfo) GetYcbcrRange() SamplerYcbcrRange {
	return SamplerYcbcrRange(p.ptr.ycbcrRange)
}

// SetYcbcrRange sets the value in ycbcrRange.
func (p SamplerYcbcrConversionCreateInfo) SetYcbcrRange(value SamplerYcbcrRange) {
	p.ptr.ycbcrRange = (C.VkSamplerYcbcrRange)(value)
}

// RefComponents returns pointer to the components field.
func (p SamplerYcbcrConversionCreateInfo) RefComponents() ComponentMapping {
	return ComponentMapping{ptr: (*C.VkComponentMapping)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkSamplerYcbcrConversionCreateInfo_components)))}
}

// GetXChromaOffset returns the value in xChromaOffset.
func (p SamplerYcbcrConversionCreateInfo) GetXChromaOffset() ChromaLocation {
	return ChromaLocation(p.ptr.xChromaOffset)
}

// SetXChromaOffset sets the value in xChromaOffset.
func (p SamplerYcbcrConversionCreateInfo) SetXChromaOffset(value ChromaLocation) {
	p.ptr.xChromaOffset = (C.VkChromaLocation)(value)
}

// GetYChromaOffset returns the value in yChromaOffset.
func (p SamplerYcbcrConversionCreateInfo) GetYChromaOffset() ChromaLocation {
	return ChromaLocation(p.ptr.yChromaOffset)
}

// SetYChromaOffset sets the value in yChromaOffset.
func (p SamplerYcbcrConversionCreateInfo) SetYChromaOffset(value ChromaLocation) {
	p.ptr.yChromaOffset = (C.VkChromaLocation)(value)
}

// GetChromaFilter returns the value in chromaFilter.
func (p SamplerYcbcrConversionCreateInfo) GetChromaFilter() Filter {
	return Filter(p.ptr.chromaFilter)
}

// SetChromaFilter sets the value in chromaFilter.
func (p SamplerYcbcrConversionCreateInfo) SetChromaFilter(value Filter) {
	p.ptr.chromaFilter = (C.VkFilter)(value)
}

// GetForceExplicitReconstruction returns the value in forceExplicitReconstruction.
func (p SamplerYcbcrConversionCreateInfo) GetForceExplicitReconstruction() bool {
	return p.ptr.forceExplicitReconstruction != 0
}

// SetForceExplicitReconstruction sets the value in forceExplicitReconstruction.
func (p SamplerYcbcrConversionCreateInfo) SetForceExplicitReconstruction(value bool) {
	if value {
		p.ptr.forceExplicitReconstruction = C.VkBool32(1)
	} else {
		p.ptr.forceExplicitReconstruction = C.VkBool32(0)
	}
}

// SamplerYcbcrConversionImageFormatProperties wraps VkSamplerYcbcrConversionImageFormatProperties.
type SamplerYcbcrConversionImageFormatProperties struct {
	ptr *C.VkSamplerYcbcrConversionImageFormatProperties
}

// SamplerYcbcrConversionImageFormatPropertiesNil is a null pointer.
var SamplerYcbcrConversionImageFormatPropertiesNil SamplerYcbcrConversionImageFormatProperties

// SamplerYcbcrConversionImageFormatPropertiesSizeOf is the byte size of VkSamplerYcbcrConversionImageFormatProperties.
const SamplerYcbcrConversionImageFormatPropertiesSizeOf = int(C.sizeof_VkSamplerYcbcrConversionImageFormatProperties)

// SamplerYcbcrConversionImageFormatPropertiesFromPtr converts a raw pointer to a SamplerYcbcrConversionImageFormatProperties.
func SamplerYcbcrConversionImageFormatPropertiesFromPtr(ptr unsafe.Pointer) SamplerYcbcrConversionImageFormatProperties {
	return SamplerYcbcrConversionImageFormatProperties{ptr: (*C.VkSamplerYcbcrConversionImageFormatProperties)(ptr)}
}

// SamplerYcbcrConversionImageFormatPropertiesAlloc allocates a continuous block of VkSamplerYcbcrConversionImageFormatProperties.
func SamplerYcbcrConversionImageFormatPropertiesAlloc(alloc ffi.Allocator, count int) SamplerYcbcrConversionImageFormatProperties {
	ptr := alloc.Allocate(SamplerYcbcrConversionImageFormatPropertiesSizeOf * count)
	return SamplerYcbcrConversionImageFormatProperties{ptr: (*C.VkSamplerYcbcrConversionImageFormatProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SamplerYcbcrConversionImageFormatProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SamplerYcbcrConversionImageFormatProperties) Offset(offset int) SamplerYcbcrConversionImageFormatProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SamplerYcbcrConversionImageFormatPropertiesSizeOf)
	return SamplerYcbcrConversionImageFormatProperties{ptr: (*C.VkSamplerYcbcrConversionImageFormatProperties)(ptr)}
}

// GetSType returns the value in sType.
func (p SamplerYcbcrConversionImageFormatProperties) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SamplerYcbcrConversionImageFormatProperties) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SamplerYcbcrConversionImageFormatProperties) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SamplerYcbcrConversionImageFormatProperties) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetCombinedImageSamplerDescriptorCount returns the value in combinedImageSamplerDescriptorCount.
func (p SamplerYcbcrConversionImageFormatProperties) GetCombinedImageSamplerDescriptorCount() uint32 {
	return uint32(p.ptr.combinedImageSamplerDescriptorCount)
}

// SetCombinedImageSamplerDescriptorCount sets the value in combinedImageSamplerDescriptorCount.
func (p SamplerYcbcrConversionImageFormatProperties) SetCombinedImageSamplerDescriptorCount(value uint32) {
	p.ptr.combinedImageSamplerDescriptorCount = (C.uint32_t)(value)
}

// SamplerYcbcrConversionInfo wraps VkSamplerYcbcrConversionInfo.
type SamplerYcbcrConversionInfo struct {
	ptr *C.VkSamplerYcbcrConversionInfo
}

// SamplerYcbcrConversionInfoNil is a null pointer.
var SamplerYcbcrConversionInfoNil SamplerYcbcrConversionInfo

// SamplerYcbcrConversionInfoSizeOf is the byte size of VkSamplerYcbcrConversionInfo.
const SamplerYcbcrConversionInfoSizeOf = int(C.sizeof_VkSamplerYcbcrConversionInfo)

// SamplerYcbcrConversionInfoFromPtr converts a raw pointer to a SamplerYcbcrConversionInfo.
func SamplerYcbcrConversionInfoFromPtr(ptr unsafe.Pointer) SamplerYcbcrConversionInfo {
	return SamplerYcbcrConversionInfo{ptr: (*C.VkSamplerYcbcrConversionInfo)(ptr)}
}

// SamplerYcbcrConversionInfoAlloc allocates a continuous block of VkSamplerYcbcrConversionInfo.
func SamplerYcbcrConversionInfoAlloc(alloc ffi.Allocator, count int) SamplerYcbcrConversionInfo {
	ptr := alloc.Allocate(SamplerYcbcrConversionInfoSizeOf * count)
	return SamplerYcbcrConversionInfo{ptr: (*C.VkSamplerYcbcrConversionInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SamplerYcbcrConversionInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SamplerYcbcrConversionInfo) Offset(offset int) SamplerYcbcrConversionInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SamplerYcbcrConversionInfoSizeOf)
	return SamplerYcbcrConversionInfo{ptr: (*C.VkSamplerYcbcrConversionInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p SamplerYcbcrConversionInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SamplerYcbcrConversionInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SamplerYcbcrConversionInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SamplerYcbcrConversionInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetConversion returns the value in conversion.
func (p SamplerYcbcrConversionInfo) GetConversion() SamplerYcbcrConversion {
	return SamplerYcbcrConversion(p.ptr.conversion)
}

// SetConversion sets the value in conversion.
func (p SamplerYcbcrConversionInfo) SetConversion(value SamplerYcbcrConversion) {
	p.ptr.conversion = (C.VkSamplerYcbcrConversion)(value)
}

// SemaphoreCreateInfo wraps VkSemaphoreCreateInfo.
type SemaphoreCreateInfo struct {
	ptr *C.VkSemaphoreCreateInfo
}

// SemaphoreCreateInfoNil is a null pointer.
var SemaphoreCreateInfoNil SemaphoreCreateInfo

// SemaphoreCreateInfoSizeOf is the byte size of VkSemaphoreCreateInfo.
const SemaphoreCreateInfoSizeOf = int(C.sizeof_VkSemaphoreCreateInfo)

// SemaphoreCreateInfoFromPtr converts a raw pointer to a SemaphoreCreateInfo.
func SemaphoreCreateInfoFromPtr(ptr unsafe.Pointer) SemaphoreCreateInfo {
	return SemaphoreCreateInfo{ptr: (*C.VkSemaphoreCreateInfo)(ptr)}
}

// SemaphoreCreateInfoAlloc allocates a continuous block of VkSemaphoreCreateInfo.
func SemaphoreCreateInfoAlloc(alloc ffi.Allocator, count int) SemaphoreCreateInfo {
	ptr := alloc.Allocate(SemaphoreCreateInfoSizeOf * count)
	return SemaphoreCreateInfo{ptr: (*C.VkSemaphoreCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SemaphoreCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SemaphoreCreateInfo) Offset(offset int) SemaphoreCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SemaphoreCreateInfoSizeOf)
	return SemaphoreCreateInfo{ptr: (*C.VkSemaphoreCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p SemaphoreCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SemaphoreCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SemaphoreCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SemaphoreCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p SemaphoreCreateInfo) GetFlags() SemaphoreCreateFlags {
	return SemaphoreCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p SemaphoreCreateInfo) SetFlags(value SemaphoreCreateFlags) {
	p.ptr.flags = (C.VkSemaphoreCreateFlags)(value)
}

// SemaphoreSignalInfo wraps VkSemaphoreSignalInfo.
type SemaphoreSignalInfo struct {
	ptr *C.VkSemaphoreSignalInfo
}

// SemaphoreSignalInfoNil is a null pointer.
var SemaphoreSignalInfoNil SemaphoreSignalInfo

// SemaphoreSignalInfoSizeOf is the byte size of VkSemaphoreSignalInfo.
const SemaphoreSignalInfoSizeOf = int(C.sizeof_VkSemaphoreSignalInfo)

// SemaphoreSignalInfoFromPtr converts a raw pointer to a SemaphoreSignalInfo.
func SemaphoreSignalInfoFromPtr(ptr unsafe.Pointer) SemaphoreSignalInfo {
	return SemaphoreSignalInfo{ptr: (*C.VkSemaphoreSignalInfo)(ptr)}
}

// SemaphoreSignalInfoAlloc allocates a continuous block of VkSemaphoreSignalInfo.
func SemaphoreSignalInfoAlloc(alloc ffi.Allocator, count int) SemaphoreSignalInfo {
	ptr := alloc.Allocate(SemaphoreSignalInfoSizeOf * count)
	return SemaphoreSignalInfo{ptr: (*C.VkSemaphoreSignalInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SemaphoreSignalInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SemaphoreSignalInfo) Offset(offset int) SemaphoreSignalInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SemaphoreSignalInfoSizeOf)
	return SemaphoreSignalInfo{ptr: (*C.VkSemaphoreSignalInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p SemaphoreSignalInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SemaphoreSignalInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SemaphoreSignalInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SemaphoreSignalInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSemaphore returns the value in semaphore.
func (p SemaphoreSignalInfo) GetSemaphore() Semaphore {
	return Semaphore(p.ptr.semaphore)
}

// SetSemaphore sets the value in semaphore.
func (p SemaphoreSignalInfo) SetSemaphore(value Semaphore) {
	p.ptr.semaphore = (C.VkSemaphore)(value)
}

// GetValue returns the value in value.
func (p SemaphoreSignalInfo) GetValue() uint64 {
	return uint64(p.ptr.value)
}

// SetValue sets the value in value.
func (p SemaphoreSignalInfo) SetValue(value uint64) {
	p.ptr.value = (C.uint64_t)(value)
}

// SemaphoreSubmitInfo wraps VkSemaphoreSubmitInfo.
type SemaphoreSubmitInfo struct {
	ptr *C.VkSemaphoreSubmitInfo
}

// SemaphoreSubmitInfoNil is a null pointer.
var SemaphoreSubmitInfoNil SemaphoreSubmitInfo

// SemaphoreSubmitInfoSizeOf is the byte size of VkSemaphoreSubmitInfo.
const SemaphoreSubmitInfoSizeOf = int(C.sizeof_VkSemaphoreSubmitInfo)

// SemaphoreSubmitInfoFromPtr converts a raw pointer to a SemaphoreSubmitInfo.
func SemaphoreSubmitInfoFromPtr(ptr unsafe.Pointer) SemaphoreSubmitInfo {
	return SemaphoreSubmitInfo{ptr: (*C.VkSemaphoreSubmitInfo)(ptr)}
}

// SemaphoreSubmitInfoAlloc allocates a continuous block of VkSemaphoreSubmitInfo.
func SemaphoreSubmitInfoAlloc(alloc ffi.Allocator, count int) SemaphoreSubmitInfo {
	ptr := alloc.Allocate(SemaphoreSubmitInfoSizeOf * count)
	return SemaphoreSubmitInfo{ptr: (*C.VkSemaphoreSubmitInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SemaphoreSubmitInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SemaphoreSubmitInfo) Offset(offset int) SemaphoreSubmitInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SemaphoreSubmitInfoSizeOf)
	return SemaphoreSubmitInfo{ptr: (*C.VkSemaphoreSubmitInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p SemaphoreSubmitInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SemaphoreSubmitInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SemaphoreSubmitInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SemaphoreSubmitInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSemaphore returns the value in semaphore.
func (p SemaphoreSubmitInfo) GetSemaphore() Semaphore {
	return Semaphore(p.ptr.semaphore)
}

// SetSemaphore sets the value in semaphore.
func (p SemaphoreSubmitInfo) SetSemaphore(value Semaphore) {
	p.ptr.semaphore = (C.VkSemaphore)(value)
}

// GetValue returns the value in value.
func (p SemaphoreSubmitInfo) GetValue() uint64 {
	return uint64(p.ptr.value)
}

// SetValue sets the value in value.
func (p SemaphoreSubmitInfo) SetValue(value uint64) {
	p.ptr.value = (C.uint64_t)(value)
}

// GetStageMask returns the value in stageMask.
func (p SemaphoreSubmitInfo) GetStageMask() PipelineStageFlags2 {
	return PipelineStageFlags2(p.ptr.stageMask)
}

// SetStageMask sets the value in stageMask.
func (p SemaphoreSubmitInfo) SetStageMask(value PipelineStageFlags2) {
	p.ptr.stageMask = (C.VkPipelineStageFlags2)(value)
}

// GetDeviceIndex returns the value in deviceIndex.
func (p SemaphoreSubmitInfo) GetDeviceIndex() uint32 {
	return uint32(p.ptr.deviceIndex)
}

// SetDeviceIndex sets the value in deviceIndex.
func (p SemaphoreSubmitInfo) SetDeviceIndex(value uint32) {
	p.ptr.deviceIndex = (C.uint32_t)(value)
}

// SemaphoreTypeCreateInfo wraps VkSemaphoreTypeCreateInfo.
type SemaphoreTypeCreateInfo struct {
	ptr *C.VkSemaphoreTypeCreateInfo
}

// SemaphoreTypeCreateInfoNil is a null pointer.
var SemaphoreTypeCreateInfoNil SemaphoreTypeCreateInfo

// SemaphoreTypeCreateInfoSizeOf is the byte size of VkSemaphoreTypeCreateInfo.
const SemaphoreTypeCreateInfoSizeOf = int(C.sizeof_VkSemaphoreTypeCreateInfo)

// SemaphoreTypeCreateInfoFromPtr converts a raw pointer to a SemaphoreTypeCreateInfo.
func SemaphoreTypeCreateInfoFromPtr(ptr unsafe.Pointer) SemaphoreTypeCreateInfo {
	return SemaphoreTypeCreateInfo{ptr: (*C.VkSemaphoreTypeCreateInfo)(ptr)}
}

// SemaphoreTypeCreateInfoAlloc allocates a continuous block of VkSemaphoreTypeCreateInfo.
func SemaphoreTypeCreateInfoAlloc(alloc ffi.Allocator, count int) SemaphoreTypeCreateInfo {
	ptr := alloc.Allocate(SemaphoreTypeCreateInfoSizeOf * count)
	return SemaphoreTypeCreateInfo{ptr: (*C.VkSemaphoreTypeCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SemaphoreTypeCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SemaphoreTypeCreateInfo) Offset(offset int) SemaphoreTypeCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SemaphoreTypeCreateInfoSizeOf)
	return SemaphoreTypeCreateInfo{ptr: (*C.VkSemaphoreTypeCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p SemaphoreTypeCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SemaphoreTypeCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SemaphoreTypeCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SemaphoreTypeCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSemaphoreType returns the value in semaphoreType.
func (p SemaphoreTypeCreateInfo) GetSemaphoreType() SemaphoreType {
	return SemaphoreType(p.ptr.semaphoreType)
}

// SetSemaphoreType sets the value in semaphoreType.
func (p SemaphoreTypeCreateInfo) SetSemaphoreType(value SemaphoreType) {
	p.ptr.semaphoreType = (C.VkSemaphoreType)(value)
}

// GetInitialValue returns the value in initialValue.
func (p SemaphoreTypeCreateInfo) GetInitialValue() uint64 {
	return uint64(p.ptr.initialValue)
}

// SetInitialValue sets the value in initialValue.
func (p SemaphoreTypeCreateInfo) SetInitialValue(value uint64) {
	p.ptr.initialValue = (C.uint64_t)(value)
}

// SemaphoreWaitInfo wraps VkSemaphoreWaitInfo.
type SemaphoreWaitInfo struct {
	ptr *C.VkSemaphoreWaitInfo
}

// SemaphoreWaitInfoNil is a null pointer.
var SemaphoreWaitInfoNil SemaphoreWaitInfo

// SemaphoreWaitInfoSizeOf is the byte size of VkSemaphoreWaitInfo.
const SemaphoreWaitInfoSizeOf = int(C.sizeof_VkSemaphoreWaitInfo)

// SemaphoreWaitInfoFromPtr converts a raw pointer to a SemaphoreWaitInfo.
func SemaphoreWaitInfoFromPtr(ptr unsafe.Pointer) SemaphoreWaitInfo {
	return SemaphoreWaitInfo{ptr: (*C.VkSemaphoreWaitInfo)(ptr)}
}

// SemaphoreWaitInfoAlloc allocates a continuous block of VkSemaphoreWaitInfo.
func SemaphoreWaitInfoAlloc(alloc ffi.Allocator, count int) SemaphoreWaitInfo {
	ptr := alloc.Allocate(SemaphoreWaitInfoSizeOf * count)
	return SemaphoreWaitInfo{ptr: (*C.VkSemaphoreWaitInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SemaphoreWaitInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SemaphoreWaitInfo) Offset(offset int) SemaphoreWaitInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SemaphoreWaitInfoSizeOf)
	return SemaphoreWaitInfo{ptr: (*C.VkSemaphoreWaitInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p SemaphoreWaitInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SemaphoreWaitInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SemaphoreWaitInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SemaphoreWaitInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p SemaphoreWaitInfo) GetFlags() SemaphoreWaitFlags {
	return SemaphoreWaitFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p SemaphoreWaitInfo) SetFlags(value SemaphoreWaitFlags) {
	p.ptr.flags = (C.VkSemaphoreWaitFlags)(value)
}

// GetSemaphoreCount returns the value in semaphoreCount.
func (p SemaphoreWaitInfo) GetSemaphoreCount() uint32 {
	return uint32(p.ptr.semaphoreCount)
}

// SetSemaphoreCount sets the value in semaphoreCount.
func (p SemaphoreWaitInfo) SetSemaphoreCount(value uint32) {
	p.ptr.semaphoreCount = (C.uint32_t)(value)
}

// GetPSemaphores returns the value in pSemaphores.
func (p SemaphoreWaitInfo) GetPSemaphores() ffi.Ref[Semaphore] {
	return ffi.RefFromPtr[Semaphore](unsafe.Pointer(p.ptr.pSemaphores))
}

// SetPSemaphores sets the value in pSemaphores.
func (p SemaphoreWaitInfo) SetPSemaphores(value ffi.Ref[Semaphore]) {
	p.ptr.pSemaphores = (*C.VkSemaphore)(value.Raw())
}

// GetPValues returns the value in pValues.
func (p SemaphoreWaitInfo) GetPValues() ffi.Ref[uint64] {
	return ffi.RefFromPtr[uint64](unsafe.Pointer(p.ptr.pValues))
}

// SetPValues sets the value in pValues.
func (p SemaphoreWaitInfo) SetPValues(value ffi.Ref[uint64]) {
	p.ptr.pValues = (*C.uint64_t)(value.Raw())
}

// ShaderModuleCreateInfo wraps VkShaderModuleCreateInfo.
type ShaderModuleCreateInfo struct {
	ptr *C.VkShaderModuleCreateInfo
}

// ShaderModuleCreateInfoNil is a null pointer.
var ShaderModuleCreateInfoNil ShaderModuleCreateInfo

// ShaderModuleCreateInfoSizeOf is the byte size of VkShaderModuleCreateInfo.
const ShaderModuleCreateInfoSizeOf = int(C.sizeof_VkShaderModuleCreateInfo)

// ShaderModuleCreateInfoFromPtr converts a raw pointer to a ShaderModuleCreateInfo.
func ShaderModuleCreateInfoFromPtr(ptr unsafe.Pointer) ShaderModuleCreateInfo {
	return ShaderModuleCreateInfo{ptr: (*C.VkShaderModuleCreateInfo)(ptr)}
}

// ShaderModuleCreateInfoAlloc allocates a continuous block of VkShaderModuleCreateInfo.
func ShaderModuleCreateInfoAlloc(alloc ffi.Allocator, count int) ShaderModuleCreateInfo {
	ptr := alloc.Allocate(ShaderModuleCreateInfoSizeOf * count)
	return ShaderModuleCreateInfo{ptr: (*C.VkShaderModuleCreateInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p ShaderModuleCreateInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p ShaderModuleCreateInfo) Offset(offset int) ShaderModuleCreateInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ShaderModuleCreateInfoSizeOf)
	return ShaderModuleCreateInfo{ptr: (*C.VkShaderModuleCreateInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p ShaderModuleCreateInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p ShaderModuleCreateInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p ShaderModuleCreateInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p ShaderModuleCreateInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p ShaderModuleCreateInfo) GetFlags() ShaderModuleCreateFlags {
	return ShaderModuleCreateFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p ShaderModuleCreateInfo) SetFlags(value ShaderModuleCreateFlags) {
	p.ptr.flags = (C.VkShaderModuleCreateFlags)(value)
}

// GetCodeSize returns the value in codeSize.
func (p ShaderModuleCreateInfo) GetCodeSize() uintptr {
	return uintptr(p.ptr.codeSize)
}

// SetCodeSize sets the value in codeSize.
func (p ShaderModuleCreateInfo) SetCodeSize(value uintptr) {
	p.ptr.codeSize = (C.size_t)(value)
}

// GetPCode returns the value in pCode.
func (p ShaderModuleCreateInfo) GetPCode() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pCode))
}

// SetPCode sets the value in pCode.
func (p ShaderModuleCreateInfo) SetPCode(value ffi.Ref[uint32]) {
	p.ptr.pCode = (*C.uint32_t)(value.Raw())
}

// SparseBufferMemoryBindInfo wraps VkSparseBufferMemoryBindInfo.
type SparseBufferMemoryBindInfo struct {
	ptr *C.VkSparseBufferMemoryBindInfo
}

// SparseBufferMemoryBindInfoNil is a null pointer.
var SparseBufferMemoryBindInfoNil SparseBufferMemoryBindInfo

// SparseBufferMemoryBindInfoSizeOf is the byte size of VkSparseBufferMemoryBindInfo.
const SparseBufferMemoryBindInfoSizeOf = int(C.sizeof_VkSparseBufferMemoryBindInfo)

// SparseBufferMemoryBindInfoFromPtr converts a raw pointer to a SparseBufferMemoryBindInfo.
func SparseBufferMemoryBindInfoFromPtr(ptr unsafe.Pointer) SparseBufferMemoryBindInfo {
	return SparseBufferMemoryBindInfo{ptr: (*C.VkSparseBufferMemoryBindInfo)(ptr)}
}

// SparseBufferMemoryBindInfoAlloc allocates a continuous block of VkSparseBufferMemoryBindInfo.
func SparseBufferMemoryBindInfoAlloc(alloc ffi.Allocator, count int) SparseBufferMemoryBindInfo {
	ptr := alloc.Allocate(SparseBufferMemoryBindInfoSizeOf * count)
	return SparseBufferMemoryBindInfo{ptr: (*C.VkSparseBufferMemoryBindInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SparseBufferMemoryBindInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SparseBufferMemoryBindInfo) Offset(offset int) SparseBufferMemoryBindInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SparseBufferMemoryBindInfoSizeOf)
	return SparseBufferMemoryBindInfo{ptr: (*C.VkSparseBufferMemoryBindInfo)(ptr)}
}

// GetBuffer returns the value in buffer.
func (p SparseBufferMemoryBindInfo) GetBuffer() Buffer {
	return Buffer(p.ptr.buffer)
}

// SetBuffer sets the value in buffer.
func (p SparseBufferMemoryBindInfo) SetBuffer(value Buffer) {
	p.ptr.buffer = (C.VkBuffer)(value)
}

// GetBindCount returns the value in bindCount.
func (p SparseBufferMemoryBindInfo) GetBindCount() uint32 {
	return uint32(p.ptr.bindCount)
}

// SetBindCount sets the value in bindCount.
func (p SparseBufferMemoryBindInfo) SetBindCount(value uint32) {
	p.ptr.bindCount = (C.uint32_t)(value)
}

// GetPBinds returns the value in pBinds.
func (p SparseBufferMemoryBindInfo) GetPBinds() SparseMemoryBind {
	return SparseMemoryBind{ptr: p.ptr.pBinds}
}

// SetPBinds sets the value in pBinds.
func (p SparseBufferMemoryBindInfo) SetPBinds(value SparseMemoryBind) {
	p.ptr.pBinds = value.ptr
}

// SparseImageFormatProperties wraps VkSparseImageFormatProperties.
type SparseImageFormatProperties struct {
	ptr *C.VkSparseImageFormatProperties
}

// SparseImageFormatPropertiesNil is a null pointer.
var SparseImageFormatPropertiesNil SparseImageFormatProperties

// SparseImageFormatPropertiesSizeOf is the byte size of VkSparseImageFormatProperties.
const SparseImageFormatPropertiesSizeOf = int(C.sizeof_VkSparseImageFormatProperties)

// SparseImageFormatPropertiesFromPtr converts a raw pointer to a SparseImageFormatProperties.
func SparseImageFormatPropertiesFromPtr(ptr unsafe.Pointer) SparseImageFormatProperties {
	return SparseImageFormatProperties{ptr: (*C.VkSparseImageFormatProperties)(ptr)}
}

// SparseImageFormatPropertiesAlloc allocates a continuous block of VkSparseImageFormatProperties.
func SparseImageFormatPropertiesAlloc(alloc ffi.Allocator, count int) SparseImageFormatProperties {
	ptr := alloc.Allocate(SparseImageFormatPropertiesSizeOf * count)
	return SparseImageFormatProperties{ptr: (*C.VkSparseImageFormatProperties)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SparseImageFormatProperties) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SparseImageFormatProperties) Offset(offset int) SparseImageFormatProperties {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SparseImageFormatPropertiesSizeOf)
	return SparseImageFormatProperties{ptr: (*C.VkSparseImageFormatProperties)(ptr)}
}

// GetAspectMask returns the value in aspectMask.
func (p SparseImageFormatProperties) GetAspectMask() ImageAspectFlags {
	return ImageAspectFlags(p.ptr.aspectMask)
}

// SetAspectMask sets the value in aspectMask.
func (p SparseImageFormatProperties) SetAspectMask(value ImageAspectFlags) {
	p.ptr.aspectMask = (C.VkImageAspectFlags)(value)
}

// RefImageGranularity returns pointer to the imageGranularity field.
func (p SparseImageFormatProperties) RefImageGranularity() Extent3D {
	return Extent3D{ptr: (*C.VkExtent3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkSparseImageFormatProperties_imageGranularity)))}
}

// GetFlags returns the value in flags.
func (p SparseImageFormatProperties) GetFlags() SparseImageFormatFlags {
	return SparseImageFormatFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p SparseImageFormatProperties) SetFlags(value SparseImageFormatFlags) {
	p.ptr.flags = (C.VkSparseImageFormatFlags)(value)
}

// SparseImageFormatProperties2 wraps VkSparseImageFormatProperties2.
type SparseImageFormatProperties2 struct {
	ptr *C.VkSparseImageFormatProperties2
}

// SparseImageFormatProperties2Nil is a null pointer.
var SparseImageFormatProperties2Nil SparseImageFormatProperties2

// SparseImageFormatProperties2SizeOf is the byte size of VkSparseImageFormatProperties2.
const SparseImageFormatProperties2SizeOf = int(C.sizeof_VkSparseImageFormatProperties2)

// SparseImageFormatProperties2FromPtr converts a raw pointer to a SparseImageFormatProperties2.
func SparseImageFormatProperties2FromPtr(ptr unsafe.Pointer) SparseImageFormatProperties2 {
	return SparseImageFormatProperties2{ptr: (*C.VkSparseImageFormatProperties2)(ptr)}
}

// SparseImageFormatProperties2Alloc allocates a continuous block of VkSparseImageFormatProperties2.
func SparseImageFormatProperties2Alloc(alloc ffi.Allocator, count int) SparseImageFormatProperties2 {
	ptr := alloc.Allocate(SparseImageFormatProperties2SizeOf * count)
	return SparseImageFormatProperties2{ptr: (*C.VkSparseImageFormatProperties2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SparseImageFormatProperties2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SparseImageFormatProperties2) Offset(offset int) SparseImageFormatProperties2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SparseImageFormatProperties2SizeOf)
	return SparseImageFormatProperties2{ptr: (*C.VkSparseImageFormatProperties2)(ptr)}
}

// GetSType returns the value in sType.
func (p SparseImageFormatProperties2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SparseImageFormatProperties2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SparseImageFormatProperties2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SparseImageFormatProperties2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefProperties returns pointer to the properties field.
func (p SparseImageFormatProperties2) RefProperties() SparseImageFormatProperties {
	return SparseImageFormatProperties{ptr: (*C.VkSparseImageFormatProperties)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkSparseImageFormatProperties2_properties)))}
}

// SparseImageMemoryBind wraps VkSparseImageMemoryBind.
type SparseImageMemoryBind struct {
	ptr *C.VkSparseImageMemoryBind
}

// SparseImageMemoryBindNil is a null pointer.
var SparseImageMemoryBindNil SparseImageMemoryBind

// SparseImageMemoryBindSizeOf is the byte size of VkSparseImageMemoryBind.
const SparseImageMemoryBindSizeOf = int(C.sizeof_VkSparseImageMemoryBind)

// SparseImageMemoryBindFromPtr converts a raw pointer to a SparseImageMemoryBind.
func SparseImageMemoryBindFromPtr(ptr unsafe.Pointer) SparseImageMemoryBind {
	return SparseImageMemoryBind{ptr: (*C.VkSparseImageMemoryBind)(ptr)}
}

// SparseImageMemoryBindAlloc allocates a continuous block of VkSparseImageMemoryBind.
func SparseImageMemoryBindAlloc(alloc ffi.Allocator, count int) SparseImageMemoryBind {
	ptr := alloc.Allocate(SparseImageMemoryBindSizeOf * count)
	return SparseImageMemoryBind{ptr: (*C.VkSparseImageMemoryBind)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SparseImageMemoryBind) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SparseImageMemoryBind) Offset(offset int) SparseImageMemoryBind {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SparseImageMemoryBindSizeOf)
	return SparseImageMemoryBind{ptr: (*C.VkSparseImageMemoryBind)(ptr)}
}

// RefSubresource returns pointer to the subresource field.
func (p SparseImageMemoryBind) RefSubresource() ImageSubresource {
	return ImageSubresource{ptr: (*C.VkImageSubresource)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkSparseImageMemoryBind_subresource)))}
}

// RefOffset returns pointer to the offset field.
func (p SparseImageMemoryBind) RefOffset() Offset3D {
	return Offset3D{ptr: (*C.VkOffset3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkSparseImageMemoryBind_offset)))}
}

// RefExtent returns pointer to the extent field.
func (p SparseImageMemoryBind) RefExtent() Extent3D {
	return Extent3D{ptr: (*C.VkExtent3D)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkSparseImageMemoryBind_extent)))}
}

// GetMemory returns the value in memory.
func (p SparseImageMemoryBind) GetMemory() DeviceMemory {
	return DeviceMemory(p.ptr.memory)
}

// SetMemory sets the value in memory.
func (p SparseImageMemoryBind) SetMemory(value DeviceMemory) {
	p.ptr.memory = (C.VkDeviceMemory)(value)
}

// GetMemoryOffset returns the value in memoryOffset.
func (p SparseImageMemoryBind) GetMemoryOffset() DeviceSize {
	return DeviceSize(p.ptr.memoryOffset)
}

// SetMemoryOffset sets the value in memoryOffset.
func (p SparseImageMemoryBind) SetMemoryOffset(value DeviceSize) {
	p.ptr.memoryOffset = (C.VkDeviceSize)(value)
}

// GetFlags returns the value in flags.
func (p SparseImageMemoryBind) GetFlags() SparseMemoryBindFlags {
	return SparseMemoryBindFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p SparseImageMemoryBind) SetFlags(value SparseMemoryBindFlags) {
	p.ptr.flags = (C.VkSparseMemoryBindFlags)(value)
}

// SparseImageMemoryBindInfo wraps VkSparseImageMemoryBindInfo.
type SparseImageMemoryBindInfo struct {
	ptr *C.VkSparseImageMemoryBindInfo
}

// SparseImageMemoryBindInfoNil is a null pointer.
var SparseImageMemoryBindInfoNil SparseImageMemoryBindInfo

// SparseImageMemoryBindInfoSizeOf is the byte size of VkSparseImageMemoryBindInfo.
const SparseImageMemoryBindInfoSizeOf = int(C.sizeof_VkSparseImageMemoryBindInfo)

// SparseImageMemoryBindInfoFromPtr converts a raw pointer to a SparseImageMemoryBindInfo.
func SparseImageMemoryBindInfoFromPtr(ptr unsafe.Pointer) SparseImageMemoryBindInfo {
	return SparseImageMemoryBindInfo{ptr: (*C.VkSparseImageMemoryBindInfo)(ptr)}
}

// SparseImageMemoryBindInfoAlloc allocates a continuous block of VkSparseImageMemoryBindInfo.
func SparseImageMemoryBindInfoAlloc(alloc ffi.Allocator, count int) SparseImageMemoryBindInfo {
	ptr := alloc.Allocate(SparseImageMemoryBindInfoSizeOf * count)
	return SparseImageMemoryBindInfo{ptr: (*C.VkSparseImageMemoryBindInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SparseImageMemoryBindInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SparseImageMemoryBindInfo) Offset(offset int) SparseImageMemoryBindInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SparseImageMemoryBindInfoSizeOf)
	return SparseImageMemoryBindInfo{ptr: (*C.VkSparseImageMemoryBindInfo)(ptr)}
}

// GetImage returns the value in image.
func (p SparseImageMemoryBindInfo) GetImage() Image {
	return Image(p.ptr.image)
}

// SetImage sets the value in image.
func (p SparseImageMemoryBindInfo) SetImage(value Image) {
	p.ptr.image = (C.VkImage)(value)
}

// GetBindCount returns the value in bindCount.
func (p SparseImageMemoryBindInfo) GetBindCount() uint32 {
	return uint32(p.ptr.bindCount)
}

// SetBindCount sets the value in bindCount.
func (p SparseImageMemoryBindInfo) SetBindCount(value uint32) {
	p.ptr.bindCount = (C.uint32_t)(value)
}

// GetPBinds returns the value in pBinds.
func (p SparseImageMemoryBindInfo) GetPBinds() SparseImageMemoryBind {
	return SparseImageMemoryBind{ptr: p.ptr.pBinds}
}

// SetPBinds sets the value in pBinds.
func (p SparseImageMemoryBindInfo) SetPBinds(value SparseImageMemoryBind) {
	p.ptr.pBinds = value.ptr
}

// SparseImageMemoryRequirements wraps VkSparseImageMemoryRequirements.
type SparseImageMemoryRequirements struct {
	ptr *C.VkSparseImageMemoryRequirements
}

// SparseImageMemoryRequirementsNil is a null pointer.
var SparseImageMemoryRequirementsNil SparseImageMemoryRequirements

// SparseImageMemoryRequirementsSizeOf is the byte size of VkSparseImageMemoryRequirements.
const SparseImageMemoryRequirementsSizeOf = int(C.sizeof_VkSparseImageMemoryRequirements)

// SparseImageMemoryRequirementsFromPtr converts a raw pointer to a SparseImageMemoryRequirements.
func SparseImageMemoryRequirementsFromPtr(ptr unsafe.Pointer) SparseImageMemoryRequirements {
	return SparseImageMemoryRequirements{ptr: (*C.VkSparseImageMemoryRequirements)(ptr)}
}

// SparseImageMemoryRequirementsAlloc allocates a continuous block of VkSparseImageMemoryRequirements.
func SparseImageMemoryRequirementsAlloc(alloc ffi.Allocator, count int) SparseImageMemoryRequirements {
	ptr := alloc.Allocate(SparseImageMemoryRequirementsSizeOf * count)
	return SparseImageMemoryRequirements{ptr: (*C.VkSparseImageMemoryRequirements)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SparseImageMemoryRequirements) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SparseImageMemoryRequirements) Offset(offset int) SparseImageMemoryRequirements {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SparseImageMemoryRequirementsSizeOf)
	return SparseImageMemoryRequirements{ptr: (*C.VkSparseImageMemoryRequirements)(ptr)}
}

// RefFormatProperties returns pointer to the formatProperties field.
func (p SparseImageMemoryRequirements) RefFormatProperties() SparseImageFormatProperties {
	return SparseImageFormatProperties{ptr: (*C.VkSparseImageFormatProperties)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkSparseImageMemoryRequirements_formatProperties)))}
}

// GetImageMipTailFirstLod returns the value in imageMipTailFirstLod.
func (p SparseImageMemoryRequirements) GetImageMipTailFirstLod() uint32 {
	return uint32(p.ptr.imageMipTailFirstLod)
}

// SetImageMipTailFirstLod sets the value in imageMipTailFirstLod.
func (p SparseImageMemoryRequirements) SetImageMipTailFirstLod(value uint32) {
	p.ptr.imageMipTailFirstLod = (C.uint32_t)(value)
}

// GetImageMipTailSize returns the value in imageMipTailSize.
func (p SparseImageMemoryRequirements) GetImageMipTailSize() DeviceSize {
	return DeviceSize(p.ptr.imageMipTailSize)
}

// SetImageMipTailSize sets the value in imageMipTailSize.
func (p SparseImageMemoryRequirements) SetImageMipTailSize(value DeviceSize) {
	p.ptr.imageMipTailSize = (C.VkDeviceSize)(value)
}

// GetImageMipTailOffset returns the value in imageMipTailOffset.
func (p SparseImageMemoryRequirements) GetImageMipTailOffset() DeviceSize {
	return DeviceSize(p.ptr.imageMipTailOffset)
}

// SetImageMipTailOffset sets the value in imageMipTailOffset.
func (p SparseImageMemoryRequirements) SetImageMipTailOffset(value DeviceSize) {
	p.ptr.imageMipTailOffset = (C.VkDeviceSize)(value)
}

// GetImageMipTailStride returns the value in imageMipTailStride.
func (p SparseImageMemoryRequirements) GetImageMipTailStride() DeviceSize {
	return DeviceSize(p.ptr.imageMipTailStride)
}

// SetImageMipTailStride sets the value in imageMipTailStride.
func (p SparseImageMemoryRequirements) SetImageMipTailStride(value DeviceSize) {
	p.ptr.imageMipTailStride = (C.VkDeviceSize)(value)
}

// SparseImageMemoryRequirements2 wraps VkSparseImageMemoryRequirements2.
type SparseImageMemoryRequirements2 struct {
	ptr *C.VkSparseImageMemoryRequirements2
}

// SparseImageMemoryRequirements2Nil is a null pointer.
var SparseImageMemoryRequirements2Nil SparseImageMemoryRequirements2

// SparseImageMemoryRequirements2SizeOf is the byte size of VkSparseImageMemoryRequirements2.
const SparseImageMemoryRequirements2SizeOf = int(C.sizeof_VkSparseImageMemoryRequirements2)

// SparseImageMemoryRequirements2FromPtr converts a raw pointer to a SparseImageMemoryRequirements2.
func SparseImageMemoryRequirements2FromPtr(ptr unsafe.Pointer) SparseImageMemoryRequirements2 {
	return SparseImageMemoryRequirements2{ptr: (*C.VkSparseImageMemoryRequirements2)(ptr)}
}

// SparseImageMemoryRequirements2Alloc allocates a continuous block of VkSparseImageMemoryRequirements2.
func SparseImageMemoryRequirements2Alloc(alloc ffi.Allocator, count int) SparseImageMemoryRequirements2 {
	ptr := alloc.Allocate(SparseImageMemoryRequirements2SizeOf * count)
	return SparseImageMemoryRequirements2{ptr: (*C.VkSparseImageMemoryRequirements2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SparseImageMemoryRequirements2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SparseImageMemoryRequirements2) Offset(offset int) SparseImageMemoryRequirements2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SparseImageMemoryRequirements2SizeOf)
	return SparseImageMemoryRequirements2{ptr: (*C.VkSparseImageMemoryRequirements2)(ptr)}
}

// GetSType returns the value in sType.
func (p SparseImageMemoryRequirements2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SparseImageMemoryRequirements2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SparseImageMemoryRequirements2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SparseImageMemoryRequirements2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefMemoryRequirements returns pointer to the memoryRequirements field.
func (p SparseImageMemoryRequirements2) RefMemoryRequirements() SparseImageMemoryRequirements {
	return SparseImageMemoryRequirements{ptr: (*C.VkSparseImageMemoryRequirements)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkSparseImageMemoryRequirements2_memoryRequirements)))}
}

// SparseImageOpaqueMemoryBindInfo wraps VkSparseImageOpaqueMemoryBindInfo.
type SparseImageOpaqueMemoryBindInfo struct {
	ptr *C.VkSparseImageOpaqueMemoryBindInfo
}

// SparseImageOpaqueMemoryBindInfoNil is a null pointer.
var SparseImageOpaqueMemoryBindInfoNil SparseImageOpaqueMemoryBindInfo

// SparseImageOpaqueMemoryBindInfoSizeOf is the byte size of VkSparseImageOpaqueMemoryBindInfo.
const SparseImageOpaqueMemoryBindInfoSizeOf = int(C.sizeof_VkSparseImageOpaqueMemoryBindInfo)

// SparseImageOpaqueMemoryBindInfoFromPtr converts a raw pointer to a SparseImageOpaqueMemoryBindInfo.
func SparseImageOpaqueMemoryBindInfoFromPtr(ptr unsafe.Pointer) SparseImageOpaqueMemoryBindInfo {
	return SparseImageOpaqueMemoryBindInfo{ptr: (*C.VkSparseImageOpaqueMemoryBindInfo)(ptr)}
}

// SparseImageOpaqueMemoryBindInfoAlloc allocates a continuous block of VkSparseImageOpaqueMemoryBindInfo.
func SparseImageOpaqueMemoryBindInfoAlloc(alloc ffi.Allocator, count int) SparseImageOpaqueMemoryBindInfo {
	ptr := alloc.Allocate(SparseImageOpaqueMemoryBindInfoSizeOf * count)
	return SparseImageOpaqueMemoryBindInfo{ptr: (*C.VkSparseImageOpaqueMemoryBindInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SparseImageOpaqueMemoryBindInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SparseImageOpaqueMemoryBindInfo) Offset(offset int) SparseImageOpaqueMemoryBindInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SparseImageOpaqueMemoryBindInfoSizeOf)
	return SparseImageOpaqueMemoryBindInfo{ptr: (*C.VkSparseImageOpaqueMemoryBindInfo)(ptr)}
}

// GetImage returns the value in image.
func (p SparseImageOpaqueMemoryBindInfo) GetImage() Image {
	return Image(p.ptr.image)
}

// SetImage sets the value in image.
func (p SparseImageOpaqueMemoryBindInfo) SetImage(value Image) {
	p.ptr.image = (C.VkImage)(value)
}

// GetBindCount returns the value in bindCount.
func (p SparseImageOpaqueMemoryBindInfo) GetBindCount() uint32 {
	return uint32(p.ptr.bindCount)
}

// SetBindCount sets the value in bindCount.
func (p SparseImageOpaqueMemoryBindInfo) SetBindCount(value uint32) {
	p.ptr.bindCount = (C.uint32_t)(value)
}

// GetPBinds returns the value in pBinds.
func (p SparseImageOpaqueMemoryBindInfo) GetPBinds() SparseMemoryBind {
	return SparseMemoryBind{ptr: p.ptr.pBinds}
}

// SetPBinds sets the value in pBinds.
func (p SparseImageOpaqueMemoryBindInfo) SetPBinds(value SparseMemoryBind) {
	p.ptr.pBinds = value.ptr
}

// SparseMemoryBind wraps VkSparseMemoryBind.
type SparseMemoryBind struct {
	ptr *C.VkSparseMemoryBind
}

// SparseMemoryBindNil is a null pointer.
var SparseMemoryBindNil SparseMemoryBind

// SparseMemoryBindSizeOf is the byte size of VkSparseMemoryBind.
const SparseMemoryBindSizeOf = int(C.sizeof_VkSparseMemoryBind)

// SparseMemoryBindFromPtr converts a raw pointer to a SparseMemoryBind.
func SparseMemoryBindFromPtr(ptr unsafe.Pointer) SparseMemoryBind {
	return SparseMemoryBind{ptr: (*C.VkSparseMemoryBind)(ptr)}
}

// SparseMemoryBindAlloc allocates a continuous block of VkSparseMemoryBind.
func SparseMemoryBindAlloc(alloc ffi.Allocator, count int) SparseMemoryBind {
	ptr := alloc.Allocate(SparseMemoryBindSizeOf * count)
	return SparseMemoryBind{ptr: (*C.VkSparseMemoryBind)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SparseMemoryBind) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SparseMemoryBind) Offset(offset int) SparseMemoryBind {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SparseMemoryBindSizeOf)
	return SparseMemoryBind{ptr: (*C.VkSparseMemoryBind)(ptr)}
}

// GetResourceOffset returns the value in resourceOffset.
func (p SparseMemoryBind) GetResourceOffset() DeviceSize {
	return DeviceSize(p.ptr.resourceOffset)
}

// SetResourceOffset sets the value in resourceOffset.
func (p SparseMemoryBind) SetResourceOffset(value DeviceSize) {
	p.ptr.resourceOffset = (C.VkDeviceSize)(value)
}

// GetSize returns the value in size.
func (p SparseMemoryBind) GetSize() DeviceSize {
	return DeviceSize(p.ptr.size)
}

// SetSize sets the value in size.
func (p SparseMemoryBind) SetSize(value DeviceSize) {
	p.ptr.size = (C.VkDeviceSize)(value)
}

// GetMemory returns the value in memory.
func (p SparseMemoryBind) GetMemory() DeviceMemory {
	return DeviceMemory(p.ptr.memory)
}

// SetMemory sets the value in memory.
func (p SparseMemoryBind) SetMemory(value DeviceMemory) {
	p.ptr.memory = (C.VkDeviceMemory)(value)
}

// GetMemoryOffset returns the value in memoryOffset.
func (p SparseMemoryBind) GetMemoryOffset() DeviceSize {
	return DeviceSize(p.ptr.memoryOffset)
}

// SetMemoryOffset sets the value in memoryOffset.
func (p SparseMemoryBind) SetMemoryOffset(value DeviceSize) {
	p.ptr.memoryOffset = (C.VkDeviceSize)(value)
}

// GetFlags returns the value in flags.
func (p SparseMemoryBind) GetFlags() SparseMemoryBindFlags {
	return SparseMemoryBindFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p SparseMemoryBind) SetFlags(value SparseMemoryBindFlags) {
	p.ptr.flags = (C.VkSparseMemoryBindFlags)(value)
}

// SpecializationInfo wraps VkSpecializationInfo.
type SpecializationInfo struct {
	ptr *C.VkSpecializationInfo
}

// SpecializationInfoNil is a null pointer.
var SpecializationInfoNil SpecializationInfo

// SpecializationInfoSizeOf is the byte size of VkSpecializationInfo.
const SpecializationInfoSizeOf = int(C.sizeof_VkSpecializationInfo)

// SpecializationInfoFromPtr converts a raw pointer to a SpecializationInfo.
func SpecializationInfoFromPtr(ptr unsafe.Pointer) SpecializationInfo {
	return SpecializationInfo{ptr: (*C.VkSpecializationInfo)(ptr)}
}

// SpecializationInfoAlloc allocates a continuous block of VkSpecializationInfo.
func SpecializationInfoAlloc(alloc ffi.Allocator, count int) SpecializationInfo {
	ptr := alloc.Allocate(SpecializationInfoSizeOf * count)
	return SpecializationInfo{ptr: (*C.VkSpecializationInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SpecializationInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SpecializationInfo) Offset(offset int) SpecializationInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SpecializationInfoSizeOf)
	return SpecializationInfo{ptr: (*C.VkSpecializationInfo)(ptr)}
}

// GetMapEntryCount returns the value in mapEntryCount.
func (p SpecializationInfo) GetMapEntryCount() uint32 {
	return uint32(p.ptr.mapEntryCount)
}

// SetMapEntryCount sets the value in mapEntryCount.
func (p SpecializationInfo) SetMapEntryCount(value uint32) {
	p.ptr.mapEntryCount = (C.uint32_t)(value)
}

// GetPMapEntries returns the value in pMapEntries.
func (p SpecializationInfo) GetPMapEntries() SpecializationMapEntry {
	return SpecializationMapEntry{ptr: p.ptr.pMapEntries}
}

// SetPMapEntries sets the value in pMapEntries.
func (p SpecializationInfo) SetPMapEntries(value SpecializationMapEntry) {
	p.ptr.pMapEntries = value.ptr
}

// GetDataSize returns the value in dataSize.
func (p SpecializationInfo) GetDataSize() uintptr {
	return uintptr(p.ptr.dataSize)
}

// SetDataSize sets the value in dataSize.
func (p SpecializationInfo) SetDataSize(value uintptr) {
	p.ptr.dataSize = (C.size_t)(value)
}

// GetPData returns the value in pData.
func (p SpecializationInfo) GetPData() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pData)
}

// SetPData sets the value in pData.
func (p SpecializationInfo) SetPData(value unsafe.Pointer) {
	p.ptr.pData = value
}

// SpecializationMapEntry wraps VkSpecializationMapEntry.
type SpecializationMapEntry struct {
	ptr *C.VkSpecializationMapEntry
}

// SpecializationMapEntryNil is a null pointer.
var SpecializationMapEntryNil SpecializationMapEntry

// SpecializationMapEntrySizeOf is the byte size of VkSpecializationMapEntry.
const SpecializationMapEntrySizeOf = int(C.sizeof_VkSpecializationMapEntry)

// SpecializationMapEntryFromPtr converts a raw pointer to a SpecializationMapEntry.
func SpecializationMapEntryFromPtr(ptr unsafe.Pointer) SpecializationMapEntry {
	return SpecializationMapEntry{ptr: (*C.VkSpecializationMapEntry)(ptr)}
}

// SpecializationMapEntryAlloc allocates a continuous block of VkSpecializationMapEntry.
func SpecializationMapEntryAlloc(alloc ffi.Allocator, count int) SpecializationMapEntry {
	ptr := alloc.Allocate(SpecializationMapEntrySizeOf * count)
	return SpecializationMapEntry{ptr: (*C.VkSpecializationMapEntry)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SpecializationMapEntry) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SpecializationMapEntry) Offset(offset int) SpecializationMapEntry {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SpecializationMapEntrySizeOf)
	return SpecializationMapEntry{ptr: (*C.VkSpecializationMapEntry)(ptr)}
}

// GetConstantID returns the value in constantID.
func (p SpecializationMapEntry) GetConstantID() uint32 {
	return uint32(p.ptr.constantID)
}

// SetConstantID sets the value in constantID.
func (p SpecializationMapEntry) SetConstantID(value uint32) {
	p.ptr.constantID = (C.uint32_t)(value)
}

// GetOffset returns the value in offset.
func (p SpecializationMapEntry) GetOffset() uint32 {
	return uint32(p.ptr.offset)
}

// SetOffset sets the value in offset.
func (p SpecializationMapEntry) SetOffset(value uint32) {
	p.ptr.offset = (C.uint32_t)(value)
}

// GetSize returns the value in size.
func (p SpecializationMapEntry) GetSize() uintptr {
	return uintptr(p.ptr.size)
}

// SetSize sets the value in size.
func (p SpecializationMapEntry) SetSize(value uintptr) {
	p.ptr.size = (C.size_t)(value)
}

// StencilOpState wraps VkStencilOpState.
type StencilOpState struct {
	ptr *C.VkStencilOpState
}

// StencilOpStateNil is a null pointer.
var StencilOpStateNil StencilOpState

// StencilOpStateSizeOf is the byte size of VkStencilOpState.
const StencilOpStateSizeOf = int(C.sizeof_VkStencilOpState)

// StencilOpStateFromPtr converts a raw pointer to a StencilOpState.
func StencilOpStateFromPtr(ptr unsafe.Pointer) StencilOpState {
	return StencilOpState{ptr: (*C.VkStencilOpState)(ptr)}
}

// StencilOpStateAlloc allocates a continuous block of VkStencilOpState.
func StencilOpStateAlloc(alloc ffi.Allocator, count int) StencilOpState {
	ptr := alloc.Allocate(StencilOpStateSizeOf * count)
	return StencilOpState{ptr: (*C.VkStencilOpState)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p StencilOpState) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p StencilOpState) Offset(offset int) StencilOpState {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*StencilOpStateSizeOf)
	return StencilOpState{ptr: (*C.VkStencilOpState)(ptr)}
}

// GetFailOp returns the value in failOp.
func (p StencilOpState) GetFailOp() StencilOp {
	return StencilOp(p.ptr.failOp)
}

// SetFailOp sets the value in failOp.
func (p StencilOpState) SetFailOp(value StencilOp) {
	p.ptr.failOp = (C.VkStencilOp)(value)
}

// GetPassOp returns the value in passOp.
func (p StencilOpState) GetPassOp() StencilOp {
	return StencilOp(p.ptr.passOp)
}

// SetPassOp sets the value in passOp.
func (p StencilOpState) SetPassOp(value StencilOp) {
	p.ptr.passOp = (C.VkStencilOp)(value)
}

// GetDepthFailOp returns the value in depthFailOp.
func (p StencilOpState) GetDepthFailOp() StencilOp {
	return StencilOp(p.ptr.depthFailOp)
}

// SetDepthFailOp sets the value in depthFailOp.
func (p StencilOpState) SetDepthFailOp(value StencilOp) {
	p.ptr.depthFailOp = (C.VkStencilOp)(value)
}

// GetCompareOp returns the value in compareOp.
func (p StencilOpState) GetCompareOp() CompareOp {
	return CompareOp(p.ptr.compareOp)
}

// SetCompareOp sets the value in compareOp.
func (p StencilOpState) SetCompareOp(value CompareOp) {
	p.ptr.compareOp = (C.VkCompareOp)(value)
}

// GetCompareMask returns the value in compareMask.
func (p StencilOpState) GetCompareMask() uint32 {
	return uint32(p.ptr.compareMask)
}

// SetCompareMask sets the value in compareMask.
func (p StencilOpState) SetCompareMask(value uint32) {
	p.ptr.compareMask = (C.uint32_t)(value)
}

// GetWriteMask returns the value in writeMask.
func (p StencilOpState) GetWriteMask() uint32 {
	return uint32(p.ptr.writeMask)
}

// SetWriteMask sets the value in writeMask.
func (p StencilOpState) SetWriteMask(value uint32) {
	p.ptr.writeMask = (C.uint32_t)(value)
}

// GetReference returns the value in reference.
func (p StencilOpState) GetReference() uint32 {
	return uint32(p.ptr.reference)
}

// SetReference sets the value in reference.
func (p StencilOpState) SetReference(value uint32) {
	p.ptr.reference = (C.uint32_t)(value)
}

// SubmitInfo wraps VkSubmitInfo.
type SubmitInfo struct {
	ptr *C.VkSubmitInfo
}

// SubmitInfoNil is a null pointer.
var SubmitInfoNil SubmitInfo

// SubmitInfoSizeOf is the byte size of VkSubmitInfo.
const SubmitInfoSizeOf = int(C.sizeof_VkSubmitInfo)

// SubmitInfoFromPtr converts a raw pointer to a SubmitInfo.
func SubmitInfoFromPtr(ptr unsafe.Pointer) SubmitInfo {
	return SubmitInfo{ptr: (*C.VkSubmitInfo)(ptr)}
}

// SubmitInfoAlloc allocates a continuous block of VkSubmitInfo.
func SubmitInfoAlloc(alloc ffi.Allocator, count int) SubmitInfo {
	ptr := alloc.Allocate(SubmitInfoSizeOf * count)
	return SubmitInfo{ptr: (*C.VkSubmitInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SubmitInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SubmitInfo) Offset(offset int) SubmitInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SubmitInfoSizeOf)
	return SubmitInfo{ptr: (*C.VkSubmitInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p SubmitInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SubmitInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SubmitInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SubmitInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetWaitSemaphoreCount returns the value in waitSemaphoreCount.
func (p SubmitInfo) GetWaitSemaphoreCount() uint32 {
	return uint32(p.ptr.waitSemaphoreCount)
}

// SetWaitSemaphoreCount sets the value in waitSemaphoreCount.
func (p SubmitInfo) SetWaitSemaphoreCount(value uint32) {
	p.ptr.waitSemaphoreCount = (C.uint32_t)(value)
}

// GetPWaitSemaphores returns the value in pWaitSemaphores.
func (p SubmitInfo) GetPWaitSemaphores() ffi.Ref[Semaphore] {
	return ffi.RefFromPtr[Semaphore](unsafe.Pointer(p.ptr.pWaitSemaphores))
}

// SetPWaitSemaphores sets the value in pWaitSemaphores.
func (p SubmitInfo) SetPWaitSemaphores(value ffi.Ref[Semaphore]) {
	p.ptr.pWaitSemaphores = (*C.VkSemaphore)(value.Raw())
}

// GetPWaitDstStageMask returns the value in pWaitDstStageMask.
func (p SubmitInfo) GetPWaitDstStageMask() ffi.Ref[PipelineStageFlags] {
	return ffi.RefFromPtr[PipelineStageFlags](unsafe.Pointer(p.ptr.pWaitDstStageMask))
}

// SetPWaitDstStageMask sets the value in pWaitDstStageMask.
func (p SubmitInfo) SetPWaitDstStageMask(value ffi.Ref[PipelineStageFlags]) {
	p.ptr.pWaitDstStageMask = (*C.VkPipelineStageFlags)(value.Raw())
}

// GetCommandBufferCount returns the value in commandBufferCount.
func (p SubmitInfo) GetCommandBufferCount() uint32 {
	return uint32(p.ptr.commandBufferCount)
}

// SetCommandBufferCount sets the value in commandBufferCount.
func (p SubmitInfo) SetCommandBufferCount(value uint32) {
	p.ptr.commandBufferCount = (C.uint32_t)(value)
}

// GetPCommandBuffers returns the value in pCommandBuffers.
func (p SubmitInfo) GetPCommandBuffers() ffi.Ref[CommandBuffer] {
	return ffi.RefFromPtr[CommandBuffer](unsafe.Pointer(p.ptr.pCommandBuffers))
}

// SetPCommandBuffers sets the value in pCommandBuffers.
func (p SubmitInfo) SetPCommandBuffers(value ffi.Ref[CommandBuffer]) {
	p.ptr.pCommandBuffers = (*C.VkCommandBuffer)(value.Raw())
}

// GetSignalSemaphoreCount returns the value in signalSemaphoreCount.
func (p SubmitInfo) GetSignalSemaphoreCount() uint32 {
	return uint32(p.ptr.signalSemaphoreCount)
}

// SetSignalSemaphoreCount sets the value in signalSemaphoreCount.
func (p SubmitInfo) SetSignalSemaphoreCount(value uint32) {
	p.ptr.signalSemaphoreCount = (C.uint32_t)(value)
}

// GetPSignalSemaphores returns the value in pSignalSemaphores.
func (p SubmitInfo) GetPSignalSemaphores() ffi.Ref[Semaphore] {
	return ffi.RefFromPtr[Semaphore](unsafe.Pointer(p.ptr.pSignalSemaphores))
}

// SetPSignalSemaphores sets the value in pSignalSemaphores.
func (p SubmitInfo) SetPSignalSemaphores(value ffi.Ref[Semaphore]) {
	p.ptr.pSignalSemaphores = (*C.VkSemaphore)(value.Raw())
}

// SubmitInfo2 wraps VkSubmitInfo2.
type SubmitInfo2 struct {
	ptr *C.VkSubmitInfo2
}

// SubmitInfo2Nil is a null pointer.
var SubmitInfo2Nil SubmitInfo2

// SubmitInfo2SizeOf is the byte size of VkSubmitInfo2.
const SubmitInfo2SizeOf = int(C.sizeof_VkSubmitInfo2)

// SubmitInfo2FromPtr converts a raw pointer to a SubmitInfo2.
func SubmitInfo2FromPtr(ptr unsafe.Pointer) SubmitInfo2 {
	return SubmitInfo2{ptr: (*C.VkSubmitInfo2)(ptr)}
}

// SubmitInfo2Alloc allocates a continuous block of VkSubmitInfo2.
func SubmitInfo2Alloc(alloc ffi.Allocator, count int) SubmitInfo2 {
	ptr := alloc.Allocate(SubmitInfo2SizeOf * count)
	return SubmitInfo2{ptr: (*C.VkSubmitInfo2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SubmitInfo2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SubmitInfo2) Offset(offset int) SubmitInfo2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SubmitInfo2SizeOf)
	return SubmitInfo2{ptr: (*C.VkSubmitInfo2)(ptr)}
}

// GetSType returns the value in sType.
func (p SubmitInfo2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SubmitInfo2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SubmitInfo2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SubmitInfo2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p SubmitInfo2) GetFlags() SubmitFlags {
	return SubmitFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p SubmitInfo2) SetFlags(value SubmitFlags) {
	p.ptr.flags = (C.VkSubmitFlags)(value)
}

// GetWaitSemaphoreInfoCount returns the value in waitSemaphoreInfoCount.
func (p SubmitInfo2) GetWaitSemaphoreInfoCount() uint32 {
	return uint32(p.ptr.waitSemaphoreInfoCount)
}

// SetWaitSemaphoreInfoCount sets the value in waitSemaphoreInfoCount.
func (p SubmitInfo2) SetWaitSemaphoreInfoCount(value uint32) {
	p.ptr.waitSemaphoreInfoCount = (C.uint32_t)(value)
}

// GetPWaitSemaphoreInfos returns the value in pWaitSemaphoreInfos.
func (p SubmitInfo2) GetPWaitSemaphoreInfos() SemaphoreSubmitInfo {
	return SemaphoreSubmitInfo{ptr: p.ptr.pWaitSemaphoreInfos}
}

// SetPWaitSemaphoreInfos sets the value in pWaitSemaphoreInfos.
func (p SubmitInfo2) SetPWaitSemaphoreInfos(value SemaphoreSubmitInfo) {
	p.ptr.pWaitSemaphoreInfos = value.ptr
}

// GetCommandBufferInfoCount returns the value in commandBufferInfoCount.
func (p SubmitInfo2) GetCommandBufferInfoCount() uint32 {
	return uint32(p.ptr.commandBufferInfoCount)
}

// SetCommandBufferInfoCount sets the value in commandBufferInfoCount.
func (p SubmitInfo2) SetCommandBufferInfoCount(value uint32) {
	p.ptr.commandBufferInfoCount = (C.uint32_t)(value)
}

// GetPCommandBufferInfos returns the value in pCommandBufferInfos.
func (p SubmitInfo2) GetPCommandBufferInfos() CommandBufferSubmitInfo {
	return CommandBufferSubmitInfo{ptr: p.ptr.pCommandBufferInfos}
}

// SetPCommandBufferInfos sets the value in pCommandBufferInfos.
func (p SubmitInfo2) SetPCommandBufferInfos(value CommandBufferSubmitInfo) {
	p.ptr.pCommandBufferInfos = value.ptr
}

// GetSignalSemaphoreInfoCount returns the value in signalSemaphoreInfoCount.
func (p SubmitInfo2) GetSignalSemaphoreInfoCount() uint32 {
	return uint32(p.ptr.signalSemaphoreInfoCount)
}

// SetSignalSemaphoreInfoCount sets the value in signalSemaphoreInfoCount.
func (p SubmitInfo2) SetSignalSemaphoreInfoCount(value uint32) {
	p.ptr.signalSemaphoreInfoCount = (C.uint32_t)(value)
}

// GetPSignalSemaphoreInfos returns the value in pSignalSemaphoreInfos.
func (p SubmitInfo2) GetPSignalSemaphoreInfos() SemaphoreSubmitInfo {
	return SemaphoreSubmitInfo{ptr: p.ptr.pSignalSemaphoreInfos}
}

// SetPSignalSemaphoreInfos sets the value in pSignalSemaphoreInfos.
func (p SubmitInfo2) SetPSignalSemaphoreInfos(value SemaphoreSubmitInfo) {
	p.ptr.pSignalSemaphoreInfos = value.ptr
}

// SubpassBeginInfo wraps VkSubpassBeginInfo.
type SubpassBeginInfo struct {
	ptr *C.VkSubpassBeginInfo
}

// SubpassBeginInfoNil is a null pointer.
var SubpassBeginInfoNil SubpassBeginInfo

// SubpassBeginInfoSizeOf is the byte size of VkSubpassBeginInfo.
const SubpassBeginInfoSizeOf = int(C.sizeof_VkSubpassBeginInfo)

// SubpassBeginInfoFromPtr converts a raw pointer to a SubpassBeginInfo.
func SubpassBeginInfoFromPtr(ptr unsafe.Pointer) SubpassBeginInfo {
	return SubpassBeginInfo{ptr: (*C.VkSubpassBeginInfo)(ptr)}
}

// SubpassBeginInfoAlloc allocates a continuous block of VkSubpassBeginInfo.
func SubpassBeginInfoAlloc(alloc ffi.Allocator, count int) SubpassBeginInfo {
	ptr := alloc.Allocate(SubpassBeginInfoSizeOf * count)
	return SubpassBeginInfo{ptr: (*C.VkSubpassBeginInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SubpassBeginInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SubpassBeginInfo) Offset(offset int) SubpassBeginInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SubpassBeginInfoSizeOf)
	return SubpassBeginInfo{ptr: (*C.VkSubpassBeginInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p SubpassBeginInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SubpassBeginInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SubpassBeginInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SubpassBeginInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetContents returns the value in contents.
func (p SubpassBeginInfo) GetContents() SubpassContents {
	return SubpassContents(p.ptr.contents)
}

// SetContents sets the value in contents.
func (p SubpassBeginInfo) SetContents(value SubpassContents) {
	p.ptr.contents = (C.VkSubpassContents)(value)
}

// SubpassDependency wraps VkSubpassDependency.
type SubpassDependency struct {
	ptr *C.VkSubpassDependency
}

// SubpassDependencyNil is a null pointer.
var SubpassDependencyNil SubpassDependency

// SubpassDependencySizeOf is the byte size of VkSubpassDependency.
const SubpassDependencySizeOf = int(C.sizeof_VkSubpassDependency)

// SubpassDependencyFromPtr converts a raw pointer to a SubpassDependency.
func SubpassDependencyFromPtr(ptr unsafe.Pointer) SubpassDependency {
	return SubpassDependency{ptr: (*C.VkSubpassDependency)(ptr)}
}

// SubpassDependencyAlloc allocates a continuous block of VkSubpassDependency.
func SubpassDependencyAlloc(alloc ffi.Allocator, count int) SubpassDependency {
	ptr := alloc.Allocate(SubpassDependencySizeOf * count)
	return SubpassDependency{ptr: (*C.VkSubpassDependency)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SubpassDependency) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SubpassDependency) Offset(offset int) SubpassDependency {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SubpassDependencySizeOf)
	return SubpassDependency{ptr: (*C.VkSubpassDependency)(ptr)}
}

// GetSrcSubpass returns the value in srcSubpass.
func (p SubpassDependency) GetSrcSubpass() uint32 {
	return uint32(p.ptr.srcSubpass)
}

// SetSrcSubpass sets the value in srcSubpass.
func (p SubpassDependency) SetSrcSubpass(value uint32) {
	p.ptr.srcSubpass = (C.uint32_t)(value)
}

// GetDstSubpass returns the value in dstSubpass.
func (p SubpassDependency) GetDstSubpass() uint32 {
	return uint32(p.ptr.dstSubpass)
}

// SetDstSubpass sets the value in dstSubpass.
func (p SubpassDependency) SetDstSubpass(value uint32) {
	p.ptr.dstSubpass = (C.uint32_t)(value)
}

// GetSrcStageMask returns the value in srcStageMask.
func (p SubpassDependency) GetSrcStageMask() PipelineStageFlags {
	return PipelineStageFlags(p.ptr.srcStageMask)
}

// SetSrcStageMask sets the value in srcStageMask.
func (p SubpassDependency) SetSrcStageMask(value PipelineStageFlags) {
	p.ptr.srcStageMask = (C.VkPipelineStageFlags)(value)
}

// GetDstStageMask returns the value in dstStageMask.
func (p SubpassDependency) GetDstStageMask() PipelineStageFlags {
	return PipelineStageFlags(p.ptr.dstStageMask)
}

// SetDstStageMask sets the value in dstStageMask.
func (p SubpassDependency) SetDstStageMask(value PipelineStageFlags) {
	p.ptr.dstStageMask = (C.VkPipelineStageFlags)(value)
}

// GetSrcAccessMask returns the value in srcAccessMask.
func (p SubpassDependency) GetSrcAccessMask() AccessFlags {
	return AccessFlags(p.ptr.srcAccessMask)
}

// SetSrcAccessMask sets the value in srcAccessMask.
func (p SubpassDependency) SetSrcAccessMask(value AccessFlags) {
	p.ptr.srcAccessMask = (C.VkAccessFlags)(value)
}

// GetDstAccessMask returns the value in dstAccessMask.
func (p SubpassDependency) GetDstAccessMask() AccessFlags {
	return AccessFlags(p.ptr.dstAccessMask)
}

// SetDstAccessMask sets the value in dstAccessMask.
func (p SubpassDependency) SetDstAccessMask(value AccessFlags) {
	p.ptr.dstAccessMask = (C.VkAccessFlags)(value)
}

// GetDependencyFlags returns the value in dependencyFlags.
func (p SubpassDependency) GetDependencyFlags() DependencyFlags {
	return DependencyFlags(p.ptr.dependencyFlags)
}

// SetDependencyFlags sets the value in dependencyFlags.
func (p SubpassDependency) SetDependencyFlags(value DependencyFlags) {
	p.ptr.dependencyFlags = (C.VkDependencyFlags)(value)
}

// SubpassDependency2 wraps VkSubpassDependency2.
type SubpassDependency2 struct {
	ptr *C.VkSubpassDependency2
}

// SubpassDependency2Nil is a null pointer.
var SubpassDependency2Nil SubpassDependency2

// SubpassDependency2SizeOf is the byte size of VkSubpassDependency2.
const SubpassDependency2SizeOf = int(C.sizeof_VkSubpassDependency2)

// SubpassDependency2FromPtr converts a raw pointer to a SubpassDependency2.
func SubpassDependency2FromPtr(ptr unsafe.Pointer) SubpassDependency2 {
	return SubpassDependency2{ptr: (*C.VkSubpassDependency2)(ptr)}
}

// SubpassDependency2Alloc allocates a continuous block of VkSubpassDependency2.
func SubpassDependency2Alloc(alloc ffi.Allocator, count int) SubpassDependency2 {
	ptr := alloc.Allocate(SubpassDependency2SizeOf * count)
	return SubpassDependency2{ptr: (*C.VkSubpassDependency2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SubpassDependency2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SubpassDependency2) Offset(offset int) SubpassDependency2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SubpassDependency2SizeOf)
	return SubpassDependency2{ptr: (*C.VkSubpassDependency2)(ptr)}
}

// GetSType returns the value in sType.
func (p SubpassDependency2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SubpassDependency2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SubpassDependency2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SubpassDependency2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSrcSubpass returns the value in srcSubpass.
func (p SubpassDependency2) GetSrcSubpass() uint32 {
	return uint32(p.ptr.srcSubpass)
}

// SetSrcSubpass sets the value in srcSubpass.
func (p SubpassDependency2) SetSrcSubpass(value uint32) {
	p.ptr.srcSubpass = (C.uint32_t)(value)
}

// GetDstSubpass returns the value in dstSubpass.
func (p SubpassDependency2) GetDstSubpass() uint32 {
	return uint32(p.ptr.dstSubpass)
}

// SetDstSubpass sets the value in dstSubpass.
func (p SubpassDependency2) SetDstSubpass(value uint32) {
	p.ptr.dstSubpass = (C.uint32_t)(value)
}

// GetSrcStageMask returns the value in srcStageMask.
func (p SubpassDependency2) GetSrcStageMask() PipelineStageFlags {
	return PipelineStageFlags(p.ptr.srcStageMask)
}

// SetSrcStageMask sets the value in srcStageMask.
func (p SubpassDependency2) SetSrcStageMask(value PipelineStageFlags) {
	p.ptr.srcStageMask = (C.VkPipelineStageFlags)(value)
}

// GetDstStageMask returns the value in dstStageMask.
func (p SubpassDependency2) GetDstStageMask() PipelineStageFlags {
	return PipelineStageFlags(p.ptr.dstStageMask)
}

// SetDstStageMask sets the value in dstStageMask.
func (p SubpassDependency2) SetDstStageMask(value PipelineStageFlags) {
	p.ptr.dstStageMask = (C.VkPipelineStageFlags)(value)
}

// GetSrcAccessMask returns the value in srcAccessMask.
func (p SubpassDependency2) GetSrcAccessMask() AccessFlags {
	return AccessFlags(p.ptr.srcAccessMask)
}

// SetSrcAccessMask sets the value in srcAccessMask.
func (p SubpassDependency2) SetSrcAccessMask(value AccessFlags) {
	p.ptr.srcAccessMask = (C.VkAccessFlags)(value)
}

// GetDstAccessMask returns the value in dstAccessMask.
func (p SubpassDependency2) GetDstAccessMask() AccessFlags {
	return AccessFlags(p.ptr.dstAccessMask)
}

// SetDstAccessMask sets the value in dstAccessMask.
func (p SubpassDependency2) SetDstAccessMask(value AccessFlags) {
	p.ptr.dstAccessMask = (C.VkAccessFlags)(value)
}

// GetDependencyFlags returns the value in dependencyFlags.
func (p SubpassDependency2) GetDependencyFlags() DependencyFlags {
	return DependencyFlags(p.ptr.dependencyFlags)
}

// SetDependencyFlags sets the value in dependencyFlags.
func (p SubpassDependency2) SetDependencyFlags(value DependencyFlags) {
	p.ptr.dependencyFlags = (C.VkDependencyFlags)(value)
}

// GetViewOffset returns the value in viewOffset.
func (p SubpassDependency2) GetViewOffset() int32 {
	return int32(p.ptr.viewOffset)
}

// SetViewOffset sets the value in viewOffset.
func (p SubpassDependency2) SetViewOffset(value int32) {
	p.ptr.viewOffset = (C.int32_t)(value)
}

// SubpassDescription wraps VkSubpassDescription.
type SubpassDescription struct {
	ptr *C.VkSubpassDescription
}

// SubpassDescriptionNil is a null pointer.
var SubpassDescriptionNil SubpassDescription

// SubpassDescriptionSizeOf is the byte size of VkSubpassDescription.
const SubpassDescriptionSizeOf = int(C.sizeof_VkSubpassDescription)

// SubpassDescriptionFromPtr converts a raw pointer to a SubpassDescription.
func SubpassDescriptionFromPtr(ptr unsafe.Pointer) SubpassDescription {
	return SubpassDescription{ptr: (*C.VkSubpassDescription)(ptr)}
}

// SubpassDescriptionAlloc allocates a continuous block of VkSubpassDescription.
func SubpassDescriptionAlloc(alloc ffi.Allocator, count int) SubpassDescription {
	ptr := alloc.Allocate(SubpassDescriptionSizeOf * count)
	return SubpassDescription{ptr: (*C.VkSubpassDescription)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SubpassDescription) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SubpassDescription) Offset(offset int) SubpassDescription {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SubpassDescriptionSizeOf)
	return SubpassDescription{ptr: (*C.VkSubpassDescription)(ptr)}
}

// GetFlags returns the value in flags.
func (p SubpassDescription) GetFlags() SubpassDescriptionFlags {
	return SubpassDescriptionFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p SubpassDescription) SetFlags(value SubpassDescriptionFlags) {
	p.ptr.flags = (C.VkSubpassDescriptionFlags)(value)
}

// GetPipelineBindPoint returns the value in pipelineBindPoint.
func (p SubpassDescription) GetPipelineBindPoint() PipelineBindPoint {
	return PipelineBindPoint(p.ptr.pipelineBindPoint)
}

// SetPipelineBindPoint sets the value in pipelineBindPoint.
func (p SubpassDescription) SetPipelineBindPoint(value PipelineBindPoint) {
	p.ptr.pipelineBindPoint = (C.VkPipelineBindPoint)(value)
}

// GetInputAttachmentCount returns the value in inputAttachmentCount.
func (p SubpassDescription) GetInputAttachmentCount() uint32 {
	return uint32(p.ptr.inputAttachmentCount)
}

// SetInputAttachmentCount sets the value in inputAttachmentCount.
func (p SubpassDescription) SetInputAttachmentCount(value uint32) {
	p.ptr.inputAttachmentCount = (C.uint32_t)(value)
}

// GetPInputAttachments returns the value in pInputAttachments.
func (p SubpassDescription) GetPInputAttachments() AttachmentReference {
	return AttachmentReference{ptr: p.ptr.pInputAttachments}
}

// SetPInputAttachments sets the value in pInputAttachments.
func (p SubpassDescription) SetPInputAttachments(value AttachmentReference) {
	p.ptr.pInputAttachments = value.ptr
}

// GetColorAttachmentCount returns the value in colorAttachmentCount.
func (p SubpassDescription) GetColorAttachmentCount() uint32 {
	return uint32(p.ptr.colorAttachmentCount)
}

// SetColorAttachmentCount sets the value in colorAttachmentCount.
func (p SubpassDescription) SetColorAttachmentCount(value uint32) {
	p.ptr.colorAttachmentCount = (C.uint32_t)(value)
}

// GetPColorAttachments returns the value in pColorAttachments.
func (p SubpassDescription) GetPColorAttachments() AttachmentReference {
	return AttachmentReference{ptr: p.ptr.pColorAttachments}
}

// SetPColorAttachments sets the value in pColorAttachments.
func (p SubpassDescription) SetPColorAttachments(value AttachmentReference) {
	p.ptr.pColorAttachments = value.ptr
}

// GetPResolveAttachments returns the value in pResolveAttachments.
func (p SubpassDescription) GetPResolveAttachments() AttachmentReference {
	return AttachmentReference{ptr: p.ptr.pResolveAttachments}
}

// SetPResolveAttachments sets the value in pResolveAttachments.
func (p SubpassDescription) SetPResolveAttachments(value AttachmentReference) {
	p.ptr.pResolveAttachments = value.ptr
}

// GetPDepthStencilAttachment returns the value in pDepthStencilAttachment.
func (p SubpassDescription) GetPDepthStencilAttachment() AttachmentReference {
	return AttachmentReference{ptr: p.ptr.pDepthStencilAttachment}
}

// SetPDepthStencilAttachment sets the value in pDepthStencilAttachment.
func (p SubpassDescription) SetPDepthStencilAttachment(value AttachmentReference) {
	p.ptr.pDepthStencilAttachment = value.ptr
}

// GetPreserveAttachmentCount returns the value in preserveAttachmentCount.
func (p SubpassDescription) GetPreserveAttachmentCount() uint32 {
	return uint32(p.ptr.preserveAttachmentCount)
}

// SetPreserveAttachmentCount sets the value in preserveAttachmentCount.
func (p SubpassDescription) SetPreserveAttachmentCount(value uint32) {
	p.ptr.preserveAttachmentCount = (C.uint32_t)(value)
}

// GetPPreserveAttachments returns the value in pPreserveAttachments.
func (p SubpassDescription) GetPPreserveAttachments() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pPreserveAttachments))
}

// SetPPreserveAttachments sets the value in pPreserveAttachments.
func (p SubpassDescription) SetPPreserveAttachments(value ffi.Ref[uint32]) {
	p.ptr.pPreserveAttachments = (*C.uint32_t)(value.Raw())
}

// SubpassDescription2 wraps VkSubpassDescription2.
type SubpassDescription2 struct {
	ptr *C.VkSubpassDescription2
}

// SubpassDescription2Nil is a null pointer.
var SubpassDescription2Nil SubpassDescription2

// SubpassDescription2SizeOf is the byte size of VkSubpassDescription2.
const SubpassDescription2SizeOf = int(C.sizeof_VkSubpassDescription2)

// SubpassDescription2FromPtr converts a raw pointer to a SubpassDescription2.
func SubpassDescription2FromPtr(ptr unsafe.Pointer) SubpassDescription2 {
	return SubpassDescription2{ptr: (*C.VkSubpassDescription2)(ptr)}
}

// SubpassDescription2Alloc allocates a continuous block of VkSubpassDescription2.
func SubpassDescription2Alloc(alloc ffi.Allocator, count int) SubpassDescription2 {
	ptr := alloc.Allocate(SubpassDescription2SizeOf * count)
	return SubpassDescription2{ptr: (*C.VkSubpassDescription2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SubpassDescription2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SubpassDescription2) Offset(offset int) SubpassDescription2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SubpassDescription2SizeOf)
	return SubpassDescription2{ptr: (*C.VkSubpassDescription2)(ptr)}
}

// GetSType returns the value in sType.
func (p SubpassDescription2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SubpassDescription2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SubpassDescription2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SubpassDescription2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetFlags returns the value in flags.
func (p SubpassDescription2) GetFlags() SubpassDescriptionFlags {
	return SubpassDescriptionFlags(p.ptr.flags)
}

// SetFlags sets the value in flags.
func (p SubpassDescription2) SetFlags(value SubpassDescriptionFlags) {
	p.ptr.flags = (C.VkSubpassDescriptionFlags)(value)
}

// GetPipelineBindPoint returns the value in pipelineBindPoint.
func (p SubpassDescription2) GetPipelineBindPoint() PipelineBindPoint {
	return PipelineBindPoint(p.ptr.pipelineBindPoint)
}

// SetPipelineBindPoint sets the value in pipelineBindPoint.
func (p SubpassDescription2) SetPipelineBindPoint(value PipelineBindPoint) {
	p.ptr.pipelineBindPoint = (C.VkPipelineBindPoint)(value)
}

// GetViewMask returns the value in viewMask.
func (p SubpassDescription2) GetViewMask() uint32 {
	return uint32(p.ptr.viewMask)
}

// SetViewMask sets the value in viewMask.
func (p SubpassDescription2) SetViewMask(value uint32) {
	p.ptr.viewMask = (C.uint32_t)(value)
}

// GetInputAttachmentCount returns the value in inputAttachmentCount.
func (p SubpassDescription2) GetInputAttachmentCount() uint32 {
	return uint32(p.ptr.inputAttachmentCount)
}

// SetInputAttachmentCount sets the value in inputAttachmentCount.
func (p SubpassDescription2) SetInputAttachmentCount(value uint32) {
	p.ptr.inputAttachmentCount = (C.uint32_t)(value)
}

// GetPInputAttachments returns the value in pInputAttachments.
func (p SubpassDescription2) GetPInputAttachments() AttachmentReference2 {
	return AttachmentReference2{ptr: p.ptr.pInputAttachments}
}

// SetPInputAttachments sets the value in pInputAttachments.
func (p SubpassDescription2) SetPInputAttachments(value AttachmentReference2) {
	p.ptr.pInputAttachments = value.ptr
}

// GetColorAttachmentCount returns the value in colorAttachmentCount.
func (p SubpassDescription2) GetColorAttachmentCount() uint32 {
	return uint32(p.ptr.colorAttachmentCount)
}

// SetColorAttachmentCount sets the value in colorAttachmentCount.
func (p SubpassDescription2) SetColorAttachmentCount(value uint32) {
	p.ptr.colorAttachmentCount = (C.uint32_t)(value)
}

// GetPColorAttachments returns the value in pColorAttachments.
func (p SubpassDescription2) GetPColorAttachments() AttachmentReference2 {
	return AttachmentReference2{ptr: p.ptr.pColorAttachments}
}

// SetPColorAttachments sets the value in pColorAttachments.
func (p SubpassDescription2) SetPColorAttachments(value AttachmentReference2) {
	p.ptr.pColorAttachments = value.ptr
}

// GetPResolveAttachments returns the value in pResolveAttachments.
func (p SubpassDescription2) GetPResolveAttachments() AttachmentReference2 {
	return AttachmentReference2{ptr: p.ptr.pResolveAttachments}
}

// SetPResolveAttachments sets the value in pResolveAttachments.
func (p SubpassDescription2) SetPResolveAttachments(value AttachmentReference2) {
	p.ptr.pResolveAttachments = value.ptr
}

// GetPDepthStencilAttachment returns the value in pDepthStencilAttachment.
func (p SubpassDescription2) GetPDepthStencilAttachment() AttachmentReference2 {
	return AttachmentReference2{ptr: p.ptr.pDepthStencilAttachment}
}

// SetPDepthStencilAttachment sets the value in pDepthStencilAttachment.
func (p SubpassDescription2) SetPDepthStencilAttachment(value AttachmentReference2) {
	p.ptr.pDepthStencilAttachment = value.ptr
}

// GetPreserveAttachmentCount returns the value in preserveAttachmentCount.
func (p SubpassDescription2) GetPreserveAttachmentCount() uint32 {
	return uint32(p.ptr.preserveAttachmentCount)
}

// SetPreserveAttachmentCount sets the value in preserveAttachmentCount.
func (p SubpassDescription2) SetPreserveAttachmentCount(value uint32) {
	p.ptr.preserveAttachmentCount = (C.uint32_t)(value)
}

// GetPPreserveAttachments returns the value in pPreserveAttachments.
func (p SubpassDescription2) GetPPreserveAttachments() ffi.Ref[uint32] {
	return ffi.RefFromPtr[uint32](unsafe.Pointer(p.ptr.pPreserveAttachments))
}

// SetPPreserveAttachments sets the value in pPreserveAttachments.
func (p SubpassDescription2) SetPPreserveAttachments(value ffi.Ref[uint32]) {
	p.ptr.pPreserveAttachments = (*C.uint32_t)(value.Raw())
}

// SubpassDescriptionDepthStencilResolve wraps VkSubpassDescriptionDepthStencilResolve.
type SubpassDescriptionDepthStencilResolve struct {
	ptr *C.VkSubpassDescriptionDepthStencilResolve
}

// SubpassDescriptionDepthStencilResolveNil is a null pointer.
var SubpassDescriptionDepthStencilResolveNil SubpassDescriptionDepthStencilResolve

// SubpassDescriptionDepthStencilResolveSizeOf is the byte size of VkSubpassDescriptionDepthStencilResolve.
const SubpassDescriptionDepthStencilResolveSizeOf = int(C.sizeof_VkSubpassDescriptionDepthStencilResolve)

// SubpassDescriptionDepthStencilResolveFromPtr converts a raw pointer to a SubpassDescriptionDepthStencilResolve.
func SubpassDescriptionDepthStencilResolveFromPtr(ptr unsafe.Pointer) SubpassDescriptionDepthStencilResolve {
	return SubpassDescriptionDepthStencilResolve{ptr: (*C.VkSubpassDescriptionDepthStencilResolve)(ptr)}
}

// SubpassDescriptionDepthStencilResolveAlloc allocates a continuous block of VkSubpassDescriptionDepthStencilResolve.
func SubpassDescriptionDepthStencilResolveAlloc(alloc ffi.Allocator, count int) SubpassDescriptionDepthStencilResolve {
	ptr := alloc.Allocate(SubpassDescriptionDepthStencilResolveSizeOf * count)
	return SubpassDescriptionDepthStencilResolve{ptr: (*C.VkSubpassDescriptionDepthStencilResolve)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SubpassDescriptionDepthStencilResolve) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SubpassDescriptionDepthStencilResolve) Offset(offset int) SubpassDescriptionDepthStencilResolve {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SubpassDescriptionDepthStencilResolveSizeOf)
	return SubpassDescriptionDepthStencilResolve{ptr: (*C.VkSubpassDescriptionDepthStencilResolve)(ptr)}
}

// GetSType returns the value in sType.
func (p SubpassDescriptionDepthStencilResolve) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SubpassDescriptionDepthStencilResolve) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SubpassDescriptionDepthStencilResolve) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SubpassDescriptionDepthStencilResolve) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDepthResolveMode returns the value in depthResolveMode.
func (p SubpassDescriptionDepthStencilResolve) GetDepthResolveMode() ResolveModeFlags {
	return ResolveModeFlags(p.ptr.depthResolveMode)
}

// SetDepthResolveMode sets the value in depthResolveMode.
func (p SubpassDescriptionDepthStencilResolve) SetDepthResolveMode(value ResolveModeFlags) {
	p.ptr.depthResolveMode = (C.VkResolveModeFlagBits)(value)
}

// GetStencilResolveMode returns the value in stencilResolveMode.
func (p SubpassDescriptionDepthStencilResolve) GetStencilResolveMode() ResolveModeFlags {
	return ResolveModeFlags(p.ptr.stencilResolveMode)
}

// SetStencilResolveMode sets the value in stencilResolveMode.
func (p SubpassDescriptionDepthStencilResolve) SetStencilResolveMode(value ResolveModeFlags) {
	p.ptr.stencilResolveMode = (C.VkResolveModeFlagBits)(value)
}

// GetPDepthStencilResolveAttachment returns the value in pDepthStencilResolveAttachment.
func (p SubpassDescriptionDepthStencilResolve) GetPDepthStencilResolveAttachment() AttachmentReference2 {
	return AttachmentReference2{ptr: p.ptr.pDepthStencilResolveAttachment}
}

// SetPDepthStencilResolveAttachment sets the value in pDepthStencilResolveAttachment.
func (p SubpassDescriptionDepthStencilResolve) SetPDepthStencilResolveAttachment(value AttachmentReference2) {
	p.ptr.pDepthStencilResolveAttachment = value.ptr
}

// SubpassEndInfo wraps VkSubpassEndInfo.
type SubpassEndInfo struct {
	ptr *C.VkSubpassEndInfo
}

// SubpassEndInfoNil is a null pointer.
var SubpassEndInfoNil SubpassEndInfo

// SubpassEndInfoSizeOf is the byte size of VkSubpassEndInfo.
const SubpassEndInfoSizeOf = int(C.sizeof_VkSubpassEndInfo)

// SubpassEndInfoFromPtr converts a raw pointer to a SubpassEndInfo.
func SubpassEndInfoFromPtr(ptr unsafe.Pointer) SubpassEndInfo {
	return SubpassEndInfo{ptr: (*C.VkSubpassEndInfo)(ptr)}
}

// SubpassEndInfoAlloc allocates a continuous block of VkSubpassEndInfo.
func SubpassEndInfoAlloc(alloc ffi.Allocator, count int) SubpassEndInfo {
	ptr := alloc.Allocate(SubpassEndInfoSizeOf * count)
	return SubpassEndInfo{ptr: (*C.VkSubpassEndInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SubpassEndInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SubpassEndInfo) Offset(offset int) SubpassEndInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SubpassEndInfoSizeOf)
	return SubpassEndInfo{ptr: (*C.VkSubpassEndInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p SubpassEndInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SubpassEndInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SubpassEndInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SubpassEndInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// SubresourceHostMemcpySize wraps VkSubresourceHostMemcpySize.
type SubresourceHostMemcpySize struct {
	ptr *C.VkSubresourceHostMemcpySize
}

// SubresourceHostMemcpySizeNil is a null pointer.
var SubresourceHostMemcpySizeNil SubresourceHostMemcpySize

// SubresourceHostMemcpySizeSizeOf is the byte size of VkSubresourceHostMemcpySize.
const SubresourceHostMemcpySizeSizeOf = int(C.sizeof_VkSubresourceHostMemcpySize)

// SubresourceHostMemcpySizeFromPtr converts a raw pointer to a SubresourceHostMemcpySize.
func SubresourceHostMemcpySizeFromPtr(ptr unsafe.Pointer) SubresourceHostMemcpySize {
	return SubresourceHostMemcpySize{ptr: (*C.VkSubresourceHostMemcpySize)(ptr)}
}

// SubresourceHostMemcpySizeAlloc allocates a continuous block of VkSubresourceHostMemcpySize.
func SubresourceHostMemcpySizeAlloc(alloc ffi.Allocator, count int) SubresourceHostMemcpySize {
	ptr := alloc.Allocate(SubresourceHostMemcpySizeSizeOf * count)
	return SubresourceHostMemcpySize{ptr: (*C.VkSubresourceHostMemcpySize)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SubresourceHostMemcpySize) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SubresourceHostMemcpySize) Offset(offset int) SubresourceHostMemcpySize {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SubresourceHostMemcpySizeSizeOf)
	return SubresourceHostMemcpySize{ptr: (*C.VkSubresourceHostMemcpySize)(ptr)}
}

// GetSType returns the value in sType.
func (p SubresourceHostMemcpySize) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SubresourceHostMemcpySize) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SubresourceHostMemcpySize) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SubresourceHostMemcpySize) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetSize returns the value in size.
func (p SubresourceHostMemcpySize) GetSize() DeviceSize {
	return DeviceSize(p.ptr.size)
}

// SetSize sets the value in size.
func (p SubresourceHostMemcpySize) SetSize(value DeviceSize) {
	p.ptr.size = (C.VkDeviceSize)(value)
}

// SubresourceLayout wraps VkSubresourceLayout.
type SubresourceLayout struct {
	ptr *C.VkSubresourceLayout
}

// SubresourceLayoutNil is a null pointer.
var SubresourceLayoutNil SubresourceLayout

// SubresourceLayoutSizeOf is the byte size of VkSubresourceLayout.
const SubresourceLayoutSizeOf = int(C.sizeof_VkSubresourceLayout)

// SubresourceLayoutFromPtr converts a raw pointer to a SubresourceLayout.
func SubresourceLayoutFromPtr(ptr unsafe.Pointer) SubresourceLayout {
	return SubresourceLayout{ptr: (*C.VkSubresourceLayout)(ptr)}
}

// SubresourceLayoutAlloc allocates a continuous block of VkSubresourceLayout.
func SubresourceLayoutAlloc(alloc ffi.Allocator, count int) SubresourceLayout {
	ptr := alloc.Allocate(SubresourceLayoutSizeOf * count)
	return SubresourceLayout{ptr: (*C.VkSubresourceLayout)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SubresourceLayout) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SubresourceLayout) Offset(offset int) SubresourceLayout {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SubresourceLayoutSizeOf)
	return SubresourceLayout{ptr: (*C.VkSubresourceLayout)(ptr)}
}

// GetOffset returns the value in offset.
func (p SubresourceLayout) GetOffset() DeviceSize {
	return DeviceSize(p.ptr.offset)
}

// SetOffset sets the value in offset.
func (p SubresourceLayout) SetOffset(value DeviceSize) {
	p.ptr.offset = (C.VkDeviceSize)(value)
}

// GetSize returns the value in size.
func (p SubresourceLayout) GetSize() DeviceSize {
	return DeviceSize(p.ptr.size)
}

// SetSize sets the value in size.
func (p SubresourceLayout) SetSize(value DeviceSize) {
	p.ptr.size = (C.VkDeviceSize)(value)
}

// GetRowPitch returns the value in rowPitch.
func (p SubresourceLayout) GetRowPitch() DeviceSize {
	return DeviceSize(p.ptr.rowPitch)
}

// SetRowPitch sets the value in rowPitch.
func (p SubresourceLayout) SetRowPitch(value DeviceSize) {
	p.ptr.rowPitch = (C.VkDeviceSize)(value)
}

// GetArrayPitch returns the value in arrayPitch.
func (p SubresourceLayout) GetArrayPitch() DeviceSize {
	return DeviceSize(p.ptr.arrayPitch)
}

// SetArrayPitch sets the value in arrayPitch.
func (p SubresourceLayout) SetArrayPitch(value DeviceSize) {
	p.ptr.arrayPitch = (C.VkDeviceSize)(value)
}

// GetDepthPitch returns the value in depthPitch.
func (p SubresourceLayout) GetDepthPitch() DeviceSize {
	return DeviceSize(p.ptr.depthPitch)
}

// SetDepthPitch sets the value in depthPitch.
func (p SubresourceLayout) SetDepthPitch(value DeviceSize) {
	p.ptr.depthPitch = (C.VkDeviceSize)(value)
}

// SubresourceLayout2 wraps VkSubresourceLayout2.
type SubresourceLayout2 struct {
	ptr *C.VkSubresourceLayout2
}

// SubresourceLayout2Nil is a null pointer.
var SubresourceLayout2Nil SubresourceLayout2

// SubresourceLayout2SizeOf is the byte size of VkSubresourceLayout2.
const SubresourceLayout2SizeOf = int(C.sizeof_VkSubresourceLayout2)

// SubresourceLayout2FromPtr converts a raw pointer to a SubresourceLayout2.
func SubresourceLayout2FromPtr(ptr unsafe.Pointer) SubresourceLayout2 {
	return SubresourceLayout2{ptr: (*C.VkSubresourceLayout2)(ptr)}
}

// SubresourceLayout2Alloc allocates a continuous block of VkSubresourceLayout2.
func SubresourceLayout2Alloc(alloc ffi.Allocator, count int) SubresourceLayout2 {
	ptr := alloc.Allocate(SubresourceLayout2SizeOf * count)
	return SubresourceLayout2{ptr: (*C.VkSubresourceLayout2)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p SubresourceLayout2) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p SubresourceLayout2) Offset(offset int) SubresourceLayout2 {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*SubresourceLayout2SizeOf)
	return SubresourceLayout2{ptr: (*C.VkSubresourceLayout2)(ptr)}
}

// GetSType returns the value in sType.
func (p SubresourceLayout2) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p SubresourceLayout2) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p SubresourceLayout2) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p SubresourceLayout2) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// RefSubresourceLayout returns pointer to the subresourceLayout field.
func (p SubresourceLayout2) RefSubresourceLayout() SubresourceLayout {
	return SubresourceLayout{ptr: (*C.VkSubresourceLayout)(unsafe.Add(unsafe.Pointer(p.ptr), uintptr(C.offsetof_VkSubresourceLayout2_subresourceLayout)))}
}

// TimelineSemaphoreSubmitInfo wraps VkTimelineSemaphoreSubmitInfo.
type TimelineSemaphoreSubmitInfo struct {
	ptr *C.VkTimelineSemaphoreSubmitInfo
}

// TimelineSemaphoreSubmitInfoNil is a null pointer.
var TimelineSemaphoreSubmitInfoNil TimelineSemaphoreSubmitInfo

// TimelineSemaphoreSubmitInfoSizeOf is the byte size of VkTimelineSemaphoreSubmitInfo.
const TimelineSemaphoreSubmitInfoSizeOf = int(C.sizeof_VkTimelineSemaphoreSubmitInfo)

// TimelineSemaphoreSubmitInfoFromPtr converts a raw pointer to a TimelineSemaphoreSubmitInfo.
func TimelineSemaphoreSubmitInfoFromPtr(ptr unsafe.Pointer) TimelineSemaphoreSubmitInfo {
	return TimelineSemaphoreSubmitInfo{ptr: (*C.VkTimelineSemaphoreSubmitInfo)(ptr)}
}

// TimelineSemaphoreSubmitInfoAlloc allocates a continuous block of VkTimelineSemaphoreSubmitInfo.
func TimelineSemaphoreSubmitInfoAlloc(alloc ffi.Allocator, count int) TimelineSemaphoreSubmitInfo {
	ptr := alloc.Allocate(TimelineSemaphoreSubmitInfoSizeOf * count)
	return TimelineSemaphoreSubmitInfo{ptr: (*C.VkTimelineSemaphoreSubmitInfo)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p TimelineSemaphoreSubmitInfo) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p TimelineSemaphoreSubmitInfo) Offset(offset int) TimelineSemaphoreSubmitInfo {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*TimelineSemaphoreSubmitInfoSizeOf)
	return TimelineSemaphoreSubmitInfo{ptr: (*C.VkTimelineSemaphoreSubmitInfo)(ptr)}
}

// GetSType returns the value in sType.
func (p TimelineSemaphoreSubmitInfo) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p TimelineSemaphoreSubmitInfo) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p TimelineSemaphoreSubmitInfo) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p TimelineSemaphoreSubmitInfo) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetWaitSemaphoreValueCount returns the value in waitSemaphoreValueCount.
func (p TimelineSemaphoreSubmitInfo) GetWaitSemaphoreValueCount() uint32 {
	return uint32(p.ptr.waitSemaphoreValueCount)
}

// SetWaitSemaphoreValueCount sets the value in waitSemaphoreValueCount.
func (p TimelineSemaphoreSubmitInfo) SetWaitSemaphoreValueCount(value uint32) {
	p.ptr.waitSemaphoreValueCount = (C.uint32_t)(value)
}

// GetPWaitSemaphoreValues returns the value in pWaitSemaphoreValues.
func (p TimelineSemaphoreSubmitInfo) GetPWaitSemaphoreValues() ffi.Ref[uint64] {
	return ffi.RefFromPtr[uint64](unsafe.Pointer(p.ptr.pWaitSemaphoreValues))
}

// SetPWaitSemaphoreValues sets the value in pWaitSemaphoreValues.
func (p TimelineSemaphoreSubmitInfo) SetPWaitSemaphoreValues(value ffi.Ref[uint64]) {
	p.ptr.pWaitSemaphoreValues = (*C.uint64_t)(value.Raw())
}

// GetSignalSemaphoreValueCount returns the value in signalSemaphoreValueCount.
func (p TimelineSemaphoreSubmitInfo) GetSignalSemaphoreValueCount() uint32 {
	return uint32(p.ptr.signalSemaphoreValueCount)
}

// SetSignalSemaphoreValueCount sets the value in signalSemaphoreValueCount.
func (p TimelineSemaphoreSubmitInfo) SetSignalSemaphoreValueCount(value uint32) {
	p.ptr.signalSemaphoreValueCount = (C.uint32_t)(value)
}

// GetPSignalSemaphoreValues returns the value in pSignalSemaphoreValues.
func (p TimelineSemaphoreSubmitInfo) GetPSignalSemaphoreValues() ffi.Ref[uint64] {
	return ffi.RefFromPtr[uint64](unsafe.Pointer(p.ptr.pSignalSemaphoreValues))
}

// SetPSignalSemaphoreValues sets the value in pSignalSemaphoreValues.
func (p TimelineSemaphoreSubmitInfo) SetPSignalSemaphoreValues(value ffi.Ref[uint64]) {
	p.ptr.pSignalSemaphoreValues = (*C.uint64_t)(value.Raw())
}

// VertexInputAttributeDescription wraps VkVertexInputAttributeDescription.
type VertexInputAttributeDescription struct {
	ptr *C.VkVertexInputAttributeDescription
}

// VertexInputAttributeDescriptionNil is a null pointer.
var VertexInputAttributeDescriptionNil VertexInputAttributeDescription

// VertexInputAttributeDescriptionSizeOf is the byte size of VkVertexInputAttributeDescription.
const VertexInputAttributeDescriptionSizeOf = int(C.sizeof_VkVertexInputAttributeDescription)

// VertexInputAttributeDescriptionFromPtr converts a raw pointer to a VertexInputAttributeDescription.
func VertexInputAttributeDescriptionFromPtr(ptr unsafe.Pointer) VertexInputAttributeDescription {
	return VertexInputAttributeDescription{ptr: (*C.VkVertexInputAttributeDescription)(ptr)}
}

// VertexInputAttributeDescriptionAlloc allocates a continuous block of VkVertexInputAttributeDescription.
func VertexInputAttributeDescriptionAlloc(alloc ffi.Allocator, count int) VertexInputAttributeDescription {
	ptr := alloc.Allocate(VertexInputAttributeDescriptionSizeOf * count)
	return VertexInputAttributeDescription{ptr: (*C.VkVertexInputAttributeDescription)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p VertexInputAttributeDescription) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p VertexInputAttributeDescription) Offset(offset int) VertexInputAttributeDescription {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*VertexInputAttributeDescriptionSizeOf)
	return VertexInputAttributeDescription{ptr: (*C.VkVertexInputAttributeDescription)(ptr)}
}

// GetLocation returns the value in location.
func (p VertexInputAttributeDescription) GetLocation() uint32 {
	return uint32(p.ptr.location)
}

// SetLocation sets the value in location.
func (p VertexInputAttributeDescription) SetLocation(value uint32) {
	p.ptr.location = (C.uint32_t)(value)
}

// GetBinding returns the value in binding.
func (p VertexInputAttributeDescription) GetBinding() uint32 {
	return uint32(p.ptr.binding)
}

// SetBinding sets the value in binding.
func (p VertexInputAttributeDescription) SetBinding(value uint32) {
	p.ptr.binding = (C.uint32_t)(value)
}

// GetFormat returns the value in format.
func (p VertexInputAttributeDescription) GetFormat() Format {
	return Format(p.ptr.format)
}

// SetFormat sets the value in format.
func (p VertexInputAttributeDescription) SetFormat(value Format) {
	p.ptr.format = (C.VkFormat)(value)
}

// GetOffset returns the value in offset.
func (p VertexInputAttributeDescription) GetOffset() uint32 {
	return uint32(p.ptr.offset)
}

// SetOffset sets the value in offset.
func (p VertexInputAttributeDescription) SetOffset(value uint32) {
	p.ptr.offset = (C.uint32_t)(value)
}

// VertexInputBindingDescription wraps VkVertexInputBindingDescription.
type VertexInputBindingDescription struct {
	ptr *C.VkVertexInputBindingDescription
}

// VertexInputBindingDescriptionNil is a null pointer.
var VertexInputBindingDescriptionNil VertexInputBindingDescription

// VertexInputBindingDescriptionSizeOf is the byte size of VkVertexInputBindingDescription.
const VertexInputBindingDescriptionSizeOf = int(C.sizeof_VkVertexInputBindingDescription)

// VertexInputBindingDescriptionFromPtr converts a raw pointer to a VertexInputBindingDescription.
func VertexInputBindingDescriptionFromPtr(ptr unsafe.Pointer) VertexInputBindingDescription {
	return VertexInputBindingDescription{ptr: (*C.VkVertexInputBindingDescription)(ptr)}
}

// VertexInputBindingDescriptionAlloc allocates a continuous block of VkVertexInputBindingDescription.
func VertexInputBindingDescriptionAlloc(alloc ffi.Allocator, count int) VertexInputBindingDescription {
	ptr := alloc.Allocate(VertexInputBindingDescriptionSizeOf * count)
	return VertexInputBindingDescription{ptr: (*C.VkVertexInputBindingDescription)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p VertexInputBindingDescription) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p VertexInputBindingDescription) Offset(offset int) VertexInputBindingDescription {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*VertexInputBindingDescriptionSizeOf)
	return VertexInputBindingDescription{ptr: (*C.VkVertexInputBindingDescription)(ptr)}
}

// GetBinding returns the value in binding.
func (p VertexInputBindingDescription) GetBinding() uint32 {
	return uint32(p.ptr.binding)
}

// SetBinding sets the value in binding.
func (p VertexInputBindingDescription) SetBinding(value uint32) {
	p.ptr.binding = (C.uint32_t)(value)
}

// GetStride returns the value in stride.
func (p VertexInputBindingDescription) GetStride() uint32 {
	return uint32(p.ptr.stride)
}

// SetStride sets the value in stride.
func (p VertexInputBindingDescription) SetStride(value uint32) {
	p.ptr.stride = (C.uint32_t)(value)
}

// GetInputRate returns the value in inputRate.
func (p VertexInputBindingDescription) GetInputRate() VertexInputRate {
	return VertexInputRate(p.ptr.inputRate)
}

// SetInputRate sets the value in inputRate.
func (p VertexInputBindingDescription) SetInputRate(value VertexInputRate) {
	p.ptr.inputRate = (C.VkVertexInputRate)(value)
}

// VertexInputBindingDivisorDescription wraps VkVertexInputBindingDivisorDescription.
type VertexInputBindingDivisorDescription struct {
	ptr *C.VkVertexInputBindingDivisorDescription
}

// VertexInputBindingDivisorDescriptionNil is a null pointer.
var VertexInputBindingDivisorDescriptionNil VertexInputBindingDivisorDescription

// VertexInputBindingDivisorDescriptionSizeOf is the byte size of VkVertexInputBindingDivisorDescription.
const VertexInputBindingDivisorDescriptionSizeOf = int(C.sizeof_VkVertexInputBindingDivisorDescription)

// VertexInputBindingDivisorDescriptionFromPtr converts a raw pointer to a VertexInputBindingDivisorDescription.
func VertexInputBindingDivisorDescriptionFromPtr(ptr unsafe.Pointer) VertexInputBindingDivisorDescription {
	return VertexInputBindingDivisorDescription{ptr: (*C.VkVertexInputBindingDivisorDescription)(ptr)}
}

// VertexInputBindingDivisorDescriptionAlloc allocates a continuous block of VkVertexInputBindingDivisorDescription.
func VertexInputBindingDivisorDescriptionAlloc(alloc ffi.Allocator, count int) VertexInputBindingDivisorDescription {
	ptr := alloc.Allocate(VertexInputBindingDivisorDescriptionSizeOf * count)
	return VertexInputBindingDivisorDescription{ptr: (*C.VkVertexInputBindingDivisorDescription)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p VertexInputBindingDivisorDescription) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p VertexInputBindingDivisorDescription) Offset(offset int) VertexInputBindingDivisorDescription {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*VertexInputBindingDivisorDescriptionSizeOf)
	return VertexInputBindingDivisorDescription{ptr: (*C.VkVertexInputBindingDivisorDescription)(ptr)}
}

// GetBinding returns the value in binding.
func (p VertexInputBindingDivisorDescription) GetBinding() uint32 {
	return uint32(p.ptr.binding)
}

// SetBinding sets the value in binding.
func (p VertexInputBindingDivisorDescription) SetBinding(value uint32) {
	p.ptr.binding = (C.uint32_t)(value)
}

// GetDivisor returns the value in divisor.
func (p VertexInputBindingDivisorDescription) GetDivisor() uint32 {
	return uint32(p.ptr.divisor)
}

// SetDivisor sets the value in divisor.
func (p VertexInputBindingDivisorDescription) SetDivisor(value uint32) {
	p.ptr.divisor = (C.uint32_t)(value)
}

// Viewport wraps VkViewport.
type Viewport struct {
	ptr *C.VkViewport
}

// ViewportNil is a null pointer.
var ViewportNil Viewport

// ViewportSizeOf is the byte size of VkViewport.
const ViewportSizeOf = int(C.sizeof_VkViewport)

// ViewportFromPtr converts a raw pointer to a Viewport.
func ViewportFromPtr(ptr unsafe.Pointer) Viewport {
	return Viewport{ptr: (*C.VkViewport)(ptr)}
}

// ViewportAlloc allocates a continuous block of VkViewport.
func ViewportAlloc(alloc ffi.Allocator, count int) Viewport {
	ptr := alloc.Allocate(ViewportSizeOf * count)
	return Viewport{ptr: (*C.VkViewport)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p Viewport) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p Viewport) Offset(offset int) Viewport {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*ViewportSizeOf)
	return Viewport{ptr: (*C.VkViewport)(ptr)}
}

// GetX returns the value in x.
func (p Viewport) GetX() float32 {
	return float32(p.ptr.x)
}

// SetX sets the value in x.
func (p Viewport) SetX(value float32) {
	p.ptr.x = (C.float)(value)
}

// GetY returns the value in y.
func (p Viewport) GetY() float32 {
	return float32(p.ptr.y)
}

// SetY sets the value in y.
func (p Viewport) SetY(value float32) {
	p.ptr.y = (C.float)(value)
}

// GetWidth returns the value in width.
func (p Viewport) GetWidth() float32 {
	return float32(p.ptr.width)
}

// SetWidth sets the value in width.
func (p Viewport) SetWidth(value float32) {
	p.ptr.width = (C.float)(value)
}

// GetHeight returns the value in height.
func (p Viewport) GetHeight() float32 {
	return float32(p.ptr.height)
}

// SetHeight sets the value in height.
func (p Viewport) SetHeight(value float32) {
	p.ptr.height = (C.float)(value)
}

// GetMinDepth returns the value in minDepth.
func (p Viewport) GetMinDepth() float32 {
	return float32(p.ptr.minDepth)
}

// SetMinDepth sets the value in minDepth.
func (p Viewport) SetMinDepth(value float32) {
	p.ptr.minDepth = (C.float)(value)
}

// GetMaxDepth returns the value in maxDepth.
func (p Viewport) GetMaxDepth() float32 {
	return float32(p.ptr.maxDepth)
}

// SetMaxDepth sets the value in maxDepth.
func (p Viewport) SetMaxDepth(value float32) {
	p.ptr.maxDepth = (C.float)(value)
}

// WriteDescriptorSet wraps VkWriteDescriptorSet.
type WriteDescriptorSet struct {
	ptr *C.VkWriteDescriptorSet
}

// WriteDescriptorSetNil is a null pointer.
var WriteDescriptorSetNil WriteDescriptorSet

// WriteDescriptorSetSizeOf is the byte size of VkWriteDescriptorSet.
const WriteDescriptorSetSizeOf = int(C.sizeof_VkWriteDescriptorSet)

// WriteDescriptorSetFromPtr converts a raw pointer to a WriteDescriptorSet.
func WriteDescriptorSetFromPtr(ptr unsafe.Pointer) WriteDescriptorSet {
	return WriteDescriptorSet{ptr: (*C.VkWriteDescriptorSet)(ptr)}
}

// WriteDescriptorSetAlloc allocates a continuous block of VkWriteDescriptorSet.
func WriteDescriptorSetAlloc(alloc ffi.Allocator, count int) WriteDescriptorSet {
	ptr := alloc.Allocate(WriteDescriptorSetSizeOf * count)
	return WriteDescriptorSet{ptr: (*C.VkWriteDescriptorSet)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p WriteDescriptorSet) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p WriteDescriptorSet) Offset(offset int) WriteDescriptorSet {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*WriteDescriptorSetSizeOf)
	return WriteDescriptorSet{ptr: (*C.VkWriteDescriptorSet)(ptr)}
}

// GetSType returns the value in sType.
func (p WriteDescriptorSet) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p WriteDescriptorSet) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p WriteDescriptorSet) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p WriteDescriptorSet) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDstSet returns the value in dstSet.
func (p WriteDescriptorSet) GetDstSet() DescriptorSet {
	return DescriptorSet(p.ptr.dstSet)
}

// SetDstSet sets the value in dstSet.
func (p WriteDescriptorSet) SetDstSet(value DescriptorSet) {
	p.ptr.dstSet = (C.VkDescriptorSet)(value)
}

// GetDstBinding returns the value in dstBinding.
func (p WriteDescriptorSet) GetDstBinding() uint32 {
	return uint32(p.ptr.dstBinding)
}

// SetDstBinding sets the value in dstBinding.
func (p WriteDescriptorSet) SetDstBinding(value uint32) {
	p.ptr.dstBinding = (C.uint32_t)(value)
}

// GetDstArrayElement returns the value in dstArrayElement.
func (p WriteDescriptorSet) GetDstArrayElement() uint32 {
	return uint32(p.ptr.dstArrayElement)
}

// SetDstArrayElement sets the value in dstArrayElement.
func (p WriteDescriptorSet) SetDstArrayElement(value uint32) {
	p.ptr.dstArrayElement = (C.uint32_t)(value)
}

// GetDescriptorCount returns the value in descriptorCount.
func (p WriteDescriptorSet) GetDescriptorCount() uint32 {
	return uint32(p.ptr.descriptorCount)
}

// SetDescriptorCount sets the value in descriptorCount.
func (p WriteDescriptorSet) SetDescriptorCount(value uint32) {
	p.ptr.descriptorCount = (C.uint32_t)(value)
}

// GetDescriptorType returns the value in descriptorType.
func (p WriteDescriptorSet) GetDescriptorType() DescriptorType {
	return DescriptorType(p.ptr.descriptorType)
}

// SetDescriptorType sets the value in descriptorType.
func (p WriteDescriptorSet) SetDescriptorType(value DescriptorType) {
	p.ptr.descriptorType = (C.VkDescriptorType)(value)
}

// GetPImageInfo returns the value in pImageInfo.
func (p WriteDescriptorSet) GetPImageInfo() DescriptorImageInfo {
	return DescriptorImageInfo{ptr: p.ptr.pImageInfo}
}

// SetPImageInfo sets the value in pImageInfo.
func (p WriteDescriptorSet) SetPImageInfo(value DescriptorImageInfo) {
	p.ptr.pImageInfo = value.ptr
}

// GetPBufferInfo returns the value in pBufferInfo.
func (p WriteDescriptorSet) GetPBufferInfo() DescriptorBufferInfo {
	return DescriptorBufferInfo{ptr: p.ptr.pBufferInfo}
}

// SetPBufferInfo sets the value in pBufferInfo.
func (p WriteDescriptorSet) SetPBufferInfo(value DescriptorBufferInfo) {
	p.ptr.pBufferInfo = value.ptr
}

// GetPTexelBufferView returns the value in pTexelBufferView.
func (p WriteDescriptorSet) GetPTexelBufferView() ffi.Ref[BufferView] {
	return ffi.RefFromPtr[BufferView](unsafe.Pointer(p.ptr.pTexelBufferView))
}

// SetPTexelBufferView sets the value in pTexelBufferView.
func (p WriteDescriptorSet) SetPTexelBufferView(value ffi.Ref[BufferView]) {
	p.ptr.pTexelBufferView = (*C.VkBufferView)(value.Raw())
}

// WriteDescriptorSetInlineUniformBlock wraps VkWriteDescriptorSetInlineUniformBlock.
type WriteDescriptorSetInlineUniformBlock struct {
	ptr *C.VkWriteDescriptorSetInlineUniformBlock
}

// WriteDescriptorSetInlineUniformBlockNil is a null pointer.
var WriteDescriptorSetInlineUniformBlockNil WriteDescriptorSetInlineUniformBlock

// WriteDescriptorSetInlineUniformBlockSizeOf is the byte size of VkWriteDescriptorSetInlineUniformBlock.
const WriteDescriptorSetInlineUniformBlockSizeOf = int(C.sizeof_VkWriteDescriptorSetInlineUniformBlock)

// WriteDescriptorSetInlineUniformBlockFromPtr converts a raw pointer to a WriteDescriptorSetInlineUniformBlock.
func WriteDescriptorSetInlineUniformBlockFromPtr(ptr unsafe.Pointer) WriteDescriptorSetInlineUniformBlock {
	return WriteDescriptorSetInlineUniformBlock{ptr: (*C.VkWriteDescriptorSetInlineUniformBlock)(ptr)}
}

// WriteDescriptorSetInlineUniformBlockAlloc allocates a continuous block of VkWriteDescriptorSetInlineUniformBlock.
func WriteDescriptorSetInlineUniformBlockAlloc(alloc ffi.Allocator, count int) WriteDescriptorSetInlineUniformBlock {
	ptr := alloc.Allocate(WriteDescriptorSetInlineUniformBlockSizeOf * count)
	return WriteDescriptorSetInlineUniformBlock{ptr: (*C.VkWriteDescriptorSetInlineUniformBlock)(ptr)}
}

// Raw returns a raw pointer to the struct.
func (p WriteDescriptorSetInlineUniformBlock) Raw() unsafe.Pointer {
	return unsafe.Pointer(p.ptr)
}

// Offset returns an offset pointer by the size of the struct and the provided multiple.
func (p WriteDescriptorSetInlineUniformBlock) Offset(offset int) WriteDescriptorSetInlineUniformBlock {
	ptr := unsafe.Add(unsafe.Pointer(p.ptr), offset*WriteDescriptorSetInlineUniformBlockSizeOf)
	return WriteDescriptorSetInlineUniformBlock{ptr: (*C.VkWriteDescriptorSetInlineUniformBlock)(ptr)}
}

// GetSType returns the value in sType.
func (p WriteDescriptorSetInlineUniformBlock) GetSType() StructureType {
	return StructureType(p.ptr.sType)
}

// SetSType sets the value in sType.
func (p WriteDescriptorSetInlineUniformBlock) SetSType(value StructureType) {
	p.ptr.sType = (C.VkStructureType)(value)
}

// GetPNext returns the value in pNext.
func (p WriteDescriptorSetInlineUniformBlock) GetPNext() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pNext)
}

// SetPNext sets the value in pNext.
func (p WriteDescriptorSetInlineUniformBlock) SetPNext(value unsafe.Pointer) {
	p.ptr.pNext = value
}

// GetDataSize returns the value in dataSize.
func (p WriteDescriptorSetInlineUniformBlock) GetDataSize() uint32 {
	return uint32(p.ptr.dataSize)
}

// SetDataSize sets the value in dataSize.
func (p WriteDescriptorSetInlineUniformBlock) SetDataSize(value uint32) {
	p.ptr.dataSize = (C.uint32_t)(value)
}

// GetPData returns the value in pData.
func (p WriteDescriptorSetInlineUniformBlock) GetPData() unsafe.Pointer {
	return unsafe.Pointer(p.ptr.pData)
}

// SetPData sets the value in pData.
func (p WriteDescriptorSetInlineUniformBlock) SetPData(value unsafe.Pointer) {
	p.ptr.pData = value
}
